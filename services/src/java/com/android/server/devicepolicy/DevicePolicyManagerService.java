package com.android.server.devicepolicy;

/* loaded from: classes.dex */
public class DevicePolicyManagerService extends android.app.admin.IDevicePolicyManager.Stub {
    private static final java.lang.String AB_DEVICE_KEY = "ro.build.ab_update";
    private static final java.lang.String ACTION_EXPIRED_PASSWORD_NOTIFICATION = "com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION";

    @com.android.internal.annotations.VisibleForTesting
    static final java.lang.String ACTION_PROFILE_OFF_DEADLINE = "com.android.server.ACTION_PROFILE_OFF_DEADLINE";

    @com.android.internal.annotations.VisibleForTesting
    static final java.lang.String ACTION_TURN_PROFILE_ON_NOTIFICATION = "com.android.server.ACTION_TURN_PROFILE_ON_NOTIFICATION";
    private static final java.util.List<java.lang.String> ADDITIONAL_AFFILIATED_PROFILE_OWNER_ON_USER_PERMISSIONS;
    private static final java.util.List<java.lang.String> ADDITIONAL_PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE_PERMISSIONS;
    private static final java.util.List<java.lang.String> ADDITIONAL_PROFILE_OWNER_ON_USER_0_PERMISSIONS;
    private static final java.util.List<java.lang.String> ADDITIONAL_PROFILE_OWNER_ON_USER_PERMISSIONS;
    private static final long ADMIN_APP_PASSWORD_COMPLEXITY = 123562444;
    private static final int AFFILIATED_PROFILE_OWNER_ON_USER = 6;
    private static final java.util.List<java.lang.String> AFFILIATED_PROFILE_OWNER_ON_USER_PERMISSIONS;
    private static final java.lang.String ALLOW_USER_PROVISIONING_KEY = "ro.config.allowuserprovisioning";
    private static final java.lang.String APPLICATION_EXEMPTIONS_FLAG = "application_exemptions";
    private static final java.util.Map<java.lang.Integer, java.lang.String> APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS;
    private static final java.lang.String ATTRIBUTION_TAG = "DevicePolicyManagerService";
    private static final java.lang.String CALLED_FROM_PARENT = "calledFromParent";
    private static final int COPY_ACCOUNT_EXCEPTION = 4;
    private static final int COPY_ACCOUNT_FAILED = 2;
    private static final int COPY_ACCOUNT_SUCCEEDED = 1;
    private static final int COPY_ACCOUNT_TIMED_OUT = 3;
    private static final java.lang.String CREDENTIAL_MANAGEMENT_APP = "credentialManagementApp";
    private static final java.lang.String CREDENTIAL_MANAGEMENT_APP_INVALID_ALIAS_MSG = "The alias provided must be contained in the aliases specified in the credential management app's authentication policy";
    private static final java.util.HashMap<java.lang.String, java.lang.String> CROSS_USER_PERMISSIONS;
    private static final java.util.Set<java.lang.Integer> DA_DISALLOWED_POLICIES;
    private static final boolean DEFAULT_APPLICATION_EXEMPTIONS_FLAG = true;
    private static final int DEFAULT_DEVICE_OWNER = 0;
    private static final java.util.List<java.lang.String> DEFAULT_DEVICE_OWNER_PERMISSIONS;
    private static final boolean DEFAULT_VALUE_PERMISSION_BASED_ACCESS_FLAG = false;
    private static final java.util.HashMap<java.lang.String, java.lang.String> DELEGATE_SCOPES;
    private static final int DEVICE_ADMIN_DEACTIVATE_TIMEOUT = 10000;
    static final java.lang.String DEVICE_POLICIES_XML = "device_policies.xml";
    private static final java.util.HashMap<java.lang.Integer, java.util.List<java.lang.String>> DPC_PERMISSIONS;
    static final int DPMS_VERSION = 6;
    static final long ENABLE_COEXISTENCE_CHANGE = 260560985;
    private static final boolean ENABLE_LOCK_GUARD = true;
    public static final long EXPLICIT_WIPE_BEHAVIOUR = 242193913;
    private static final int FINANCED_DEVICE_OWNER = 1;
    private static final java.util.List<java.lang.String> FINANCED_DEVICE_OWNER_PERMISSIONS;
    private static final java.util.Set<java.lang.String> GLOBAL_SETTINGS_ALLOWLIST;
    private static final java.util.Set<java.lang.String> GLOBAL_SETTINGS_DEPRECATED;
    protected static final java.lang.String LOG_TAG = "DevicePolicyManager";
    private static final java.lang.String LOG_TAG_DEVICE_OWNER = "device-owner";
    private static final java.lang.String LOG_TAG_PROFILE_OWNER = "profile-owner";
    private static final long MINIMUM_STRONG_AUTH_TIMEOUT_MS;
    private static final int NOT_A_DPC = -1;
    private static final java.lang.String NOT_CALLED_FROM_PARENT = "notCalledFromParent";
    private static final java.lang.String NOT_CREDENTIAL_MANAGEMENT_APP = "notCredentialManagementApp";
    private static final java.lang.String NOT_SYSTEM_CALLER_MSG = "Only the system can %s";
    private static final java.lang.String NULL_STRING_ARRAY = "nullStringArray";
    private static final java.lang.String PERMISSION_BASED_ACCESS_EXPERIMENT_FLAG = "enable_permission_based_access";
    static final java.lang.String POLICIES_VERSION_XML = "device_policies_version";
    private static final java.util.HashMap<java.lang.String, java.lang.Integer> POLICY_IDENTIFIER_TO_ACTIVE_ADMIN_POLICY;
    private static final java.util.HashMap<java.lang.String, java.lang.String> POLICY_IDENTIFIER_TO_PERMISSION;
    private static final long PREVENT_SETTING_PASSWORD_QUALITY_ON_PARENT = 165573442;
    private static final int PROFILE_KEYGUARD_FEATURES = 440;
    private static final int PROFILE_KEYGUARD_FEATURES_PROFILE_ONLY = 8;
    private static final int PROFILE_OFF_NOTIFICATION_NONE = 0;
    private static final int PROFILE_OFF_NOTIFICATION_SUSPENDED = 2;
    private static final int PROFILE_OFF_NOTIFICATION_WARNING = 1;
    private static final int PROFILE_OWNER = 4;
    private static final int PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE = 2;
    private static final java.util.List<java.lang.String> PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE_PERMISSIONS;
    private static final int PROFILE_OWNER_ON_USER = 5;
    private static final int PROFILE_OWNER_ON_USER_0 = 3;
    private static final java.util.List<java.lang.String> PROFILE_OWNER_ON_USER_0_PERMISSIONS;
    private static final java.util.List<java.lang.String> PROFILE_OWNER_ON_USER_PERMISSIONS;
    private static final java.util.List<java.lang.String> PROFILE_OWNER_PERMISSIONS;
    private static final java.lang.String PROPERTY_ORGANIZATION_OWNED = "ro.organization_owned";
    private static final int REQUEST_EXPIRE_PASSWORD = 5571;
    private static final int REQUEST_PROFILE_OFF_DEADLINE = 5572;
    private static final java.util.Set<java.lang.String> SECURE_SETTINGS_DEVICEOWNER_ALLOWLIST;
    private static final java.util.List<java.lang.String> SENSOR_PERMISSIONS;
    private static final int STATUS_BAR_DISABLE2_MASK = 1;
    private static final int STATUS_BAR_DISABLE_MASK = 34013184;
    private static final java.util.Set<java.lang.String> SYSTEM_SETTINGS_ALLOWLIST;
    private static final java.lang.String TAG_TRANSFER_OWNERSHIP_BUNDLE = "transfer-ownership-bundle";
    private static final long THROW_EXCEPTION_WHEN_KEY_MISSING = 175101461;
    public static final long THROW_SECURITY_EXCEPTION_FOR_SENSOR_PERMISSIONS = 277035314;
    private static final java.lang.String TRANSFER_OWNERSHIP_PARAMETERS_XML = "transfer-ownership-parameters.xml";
    private static final int UNATTENDED_MANAGED_KIOSK_MS = 30000;
    private static final java.util.HashMap<java.lang.String, java.lang.String[]> USER_RESTRICTION_PERMISSIONS;
    private static final long USE_SET_LOCATION_ENABLED = 117835097;
    static final boolean VERBOSE_LOG = false;
    java.util.concurrent.ThreadPoolExecutor calculateHasIncompatibleAccountsExecutor;
    final android.os.Handler mBackgroundHandler;
    private final com.android.server.devicepolicy.RemoteBugreportManager mBugreportCollectionManager;
    private final com.android.server.devicepolicy.CertificateMonitor mCertificateMonitor;
    private com.android.server.devicepolicy.DevicePolicyConstants mConstants;
    private final com.android.server.devicepolicy.DevicePolicyManagerService.DevicePolicyConstantsObserver mConstantsObserver;
    private final java.util.Set<java.lang.String> mContactSystemRoleHolders;
    final android.content.Context mContext;
    private final com.android.server.devicepolicy.DeviceAdminServiceController mDeviceAdminServiceController;
    private final com.android.server.devicepolicy.DeviceManagementResourcesProvider mDeviceManagementResourcesProvider;
    private final com.android.server.devicepolicy.DevicePolicyEngine mDevicePolicyEngine;
    private final com.android.server.devicepolicy.DevicePolicyManagerService.DevicePolicyManagementRoleObserver mDevicePolicyManagementRoleObserver;
    private final java.lang.Object mESIDInitilizationLock;
    private com.android.server.devicepolicy.EnterpriseSpecificIdCalculator mEsidCalculator;
    final android.os.Handler mHandler;
    final boolean mHasFeature;

    @android.annotation.Nullable
    private volatile java.util.Map<java.lang.Integer, java.lang.Boolean> mHasIncompatibleAccounts;
    final boolean mHasTelephonyFeature;
    final android.content.pm.IPackageManager mIPackageManager;
    final android.permission.IPermissionManager mIPermissionManager;
    final com.android.server.devicepolicy.DevicePolicyManagerService.Injector mInjector;
    private final boolean mIsAutomotive;
    final boolean mIsWatch;
    final com.android.server.devicepolicy.DevicePolicyManagerService.LocalService mLocalService;
    private final java.lang.Object mLockDoNoUseDirectly;
    private final com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private final com.android.internal.widget.LockSettingsInternal mLockSettingsInternal;

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private int mLogoutUserId;

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private com.android.server.devicepolicy.NetworkLogger mNetworkLogger;
    private int mNetworkLoggingNotificationUserId;
    private final com.android.server.devicepolicy.OverlayPackagesProvider mOverlayPackagesProvider;

    @com.android.internal.annotations.VisibleForTesting
    final com.android.server.devicepolicy.Owners mOwners;
    private final java.util.Set<android.content.pm.UserPackage> mPackagesToRemove;
    final com.android.server.devicepolicy.PolicyPathProvider mPathProvider;

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private final java.util.ArrayList<java.lang.Object> mPendingUserCreatedCallbackTokens;
    private final com.android.server.devicepolicy.DevicePolicyCacheImpl mPolicyCache;
    final android.content.BroadcastReceiver mReceiver;
    final android.app.role.RoleManager mRoleManager;

    @android.annotation.Nullable
    private android.app.admin.DevicePolicySafetyChecker mSafetyChecker;
    private final com.android.server.devicepolicy.SecurityLogMonitor mSecurityLogMonitor;
    private final com.android.server.devicepolicy.DevicePolicyManagerService.SetupContentObserver mSetupContentObserver;
    private final com.android.internal.util.StatLogger mStatLogger;
    private final com.android.server.devicepolicy.DeviceStateCacheImpl mStateCache;

    @com.android.internal.annotations.GuardedBy({"mSubscriptionsChangedListenerLock"})
    private android.telephony.SubscriptionManager.OnSubscriptionsChangedListener mSubscriptionsChangedListener;
    private final java.lang.Object mSubscriptionsChangedListenerLock;
    final android.telephony.TelephonyManager mTelephonyManager;
    private final android.os.Binder mToken;

    @com.android.internal.annotations.VisibleForTesting
    final com.android.server.devicepolicy.TransferOwnershipMetadataManager mTransferOwnershipMetadataManager;
    final android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal;

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    final android.util.SparseArray<com.android.server.devicepolicy.DevicePolicyData> mUserData;
    final android.os.UserManager mUserManager;
    final com.android.server.pm.UserManagerInternal mUserManagerInternal;
    private static final long MS_PER_DAY = java.util.concurrent.TimeUnit.DAYS.toMillis(1);
    private static final long EXPIRATION_GRACE_PERIOD_MS = MS_PER_DAY * 5;
    private static final long MANAGED_PROFILE_MAXIMUM_TIME_OFF_THRESHOLD = MS_PER_DAY * 3;
    private static final long MANAGED_PROFILE_OFF_WARNING_PERIOD = MS_PER_DAY * 1;
    private static final java.lang.String[] DELEGATIONS = {"delegation-cert-install", "delegation-app-restrictions", "delegation-block-uninstall", "delegation-enable-system-app", "delegation-keep-uninstalled-packages", "delegation-package-access", "delegation-permission-grant", "delegation-install-existing-package", "delegation-keep-uninstalled-packages", "delegation-network-logging", "delegation-security-logging", "delegation-cert-selection"};
    private static final java.util.List<java.lang.String> DEVICE_OWNER_OR_MANAGED_PROFILE_OWNER_DELEGATIONS = java.util.Arrays.asList("delegation-network-logging");
    private static final java.util.List<java.lang.String> DEVICE_OWNER_OR_ORGANIZATION_OWNED_MANAGED_PROFILE_OWNER_DELEGATIONS = java.util.Arrays.asList("delegation-security-logging");
    private static final java.util.List<java.lang.String> EXCLUSIVE_DELEGATIONS = java.util.Arrays.asList("delegation-network-logging", "delegation-security-logging", "delegation-cert-selection");
    private static final java.util.Set<java.lang.String> SECURE_SETTINGS_ALLOWLIST = new android.util.ArraySet();

    private @interface CopyAccountStatus {
    }

    private @interface DpcType {
    }

    interface Stats {
        public static final int COUNT = 1;
        public static final int LOCK_GUARD_GUARD = 0;
    }

    static {
        SECURE_SETTINGS_ALLOWLIST.add("default_input_method");
        SECURE_SETTINGS_ALLOWLIST.add("skip_first_use_hints");
        SECURE_SETTINGS_ALLOWLIST.add("install_non_market_apps");
        SECURE_SETTINGS_DEVICEOWNER_ALLOWLIST = new android.util.ArraySet();
        SECURE_SETTINGS_DEVICEOWNER_ALLOWLIST.addAll(SECURE_SETTINGS_ALLOWLIST);
        SECURE_SETTINGS_DEVICEOWNER_ALLOWLIST.add("location_mode");
        GLOBAL_SETTINGS_ALLOWLIST = new android.util.ArraySet();
        GLOBAL_SETTINGS_ALLOWLIST.add("adb_enabled");
        GLOBAL_SETTINGS_ALLOWLIST.add("adb_wifi_enabled");
        GLOBAL_SETTINGS_ALLOWLIST.add("auto_time");
        GLOBAL_SETTINGS_ALLOWLIST.add("auto_time_zone");
        GLOBAL_SETTINGS_ALLOWLIST.add("data_roaming");
        GLOBAL_SETTINGS_ALLOWLIST.add("usb_mass_storage_enabled");
        GLOBAL_SETTINGS_ALLOWLIST.add("wifi_sleep_policy");
        GLOBAL_SETTINGS_ALLOWLIST.add("stay_on_while_plugged_in");
        GLOBAL_SETTINGS_ALLOWLIST.add("wifi_device_owner_configs_lockdown");
        GLOBAL_SETTINGS_ALLOWLIST.add("private_dns_mode");
        GLOBAL_SETTINGS_ALLOWLIST.add("private_dns_specifier");
        GLOBAL_SETTINGS_DEPRECATED = new android.util.ArraySet();
        GLOBAL_SETTINGS_DEPRECATED.add("bluetooth_on");
        GLOBAL_SETTINGS_DEPRECATED.add("development_settings_enabled");
        GLOBAL_SETTINGS_DEPRECATED.add("mode_ringer");
        GLOBAL_SETTINGS_DEPRECATED.add("network_preference");
        GLOBAL_SETTINGS_DEPRECATED.add("wifi_on");
        SYSTEM_SETTINGS_ALLOWLIST = new android.util.ArraySet();
        SYSTEM_SETTINGS_ALLOWLIST.add("screen_brightness");
        SYSTEM_SETTINGS_ALLOWLIST.add("screen_brightness_float");
        SYSTEM_SETTINGS_ALLOWLIST.add("screen_brightness_mode");
        SYSTEM_SETTINGS_ALLOWLIST.add("screen_off_timeout");
        DA_DISALLOWED_POLICIES = new android.util.ArraySet();
        DA_DISALLOWED_POLICIES.add(8);
        DA_DISALLOWED_POLICIES.add(9);
        DA_DISALLOWED_POLICIES.add(6);
        DA_DISALLOWED_POLICIES.add(0);
        MINIMUM_STRONG_AUTH_TIMEOUT_MS = java.util.concurrent.TimeUnit.HOURS.toMillis(1L);
        APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS = new android.util.ArrayMap();
        APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.put(0, "android:system_exempt_from_suspension");
        APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.put(1, "android:system_exempt_from_dismissible_notifications");
        APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.put(2, "android:system_exempt_from_activity_bg_start_restriction");
        APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.put(3, "android:system_exempt_from_hibernation");
        APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.put(4, "android:system_exempt_from_power_restrictions");
        USER_RESTRICTION_PERMISSIONS = new java.util.HashMap<>();
        SENSOR_PERMISSIONS = new java.util.ArrayList();
        DEFAULT_DEVICE_OWNER_PERMISSIONS = java.util.List.of((java.lang.Object[]) new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL", "android.permission.MANAGE_DEVICE_POLICY_AIRPLANE_MODE", "android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL", "android.permission.MANAGE_DEVICE_POLICY_APP_RESTRICTIONS", "android.permission.MANAGE_DEVICE_POLICY_AUDIO_OUTPUT", "android.permission.MANAGE_DEVICE_POLICY_AUTOFILL", "android.permission.MANAGE_DEVICE_POLICY_BLUETOOTH", "android.permission.MANAGE_DEVICE_POLICY_CALLS", "android.permission.MANAGE_DEVICE_POLICY_CAMERA", "android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", "android.permission.MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE", "android.permission.MANAGE_DEVICE_POLICY_CONTENT_PROTECTION", "android.permission.MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES", "android.permission.MANAGE_DEVICE_POLICY_DEFAULT_SMS", "android.permission.MANAGE_DEVICE_POLICY_DISPLAY", "android.permission.MANAGE_DEVICE_POLICY_FACTORY_RESET", "android.permission.MANAGE_DEVICE_POLICY_FUN", "android.permission.MANAGE_DEVICE_POLICY_INPUT_METHODS", "android.permission.MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES", "android.permission.MANAGE_DEVICE_POLICY_KEYGUARD", "android.permission.MANAGE_DEVICE_POLICY_LOCALE", "android.permission.MANAGE_DEVICE_POLICY_LOCATION", "android.permission.MANAGE_DEVICE_POLICY_LOCK", "android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", "android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK", "android.permission.MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS", "android.permission.MANAGE_DEVICE_POLICY_MICROPHONE", "android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK", "android.permission.MANAGE_DEVICE_POLICY_MODIFY_USERS", "android.permission.MANAGE_DEVICE_POLICY_MTE", "android.permission.MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION", "android.permission.MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY", "android.permission.MANAGE_DEVICE_POLICY_PACKAGE_STATE", "android.permission.MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA", "android.permission.MANAGE_DEVICE_POLICY_PRINTING", "android.permission.MANAGE_DEVICE_POLICY_PROFILES", "android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", "android.permission.MANAGE_DEVICE_POLICY_RESET_PASSWORD", "android.permission.MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS", "android.permission.MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS", "android.permission.MANAGE_DEVICE_POLICY_SAFE_BOOT", "android.permission.MANAGE_DEVICE_POLICY_SCREEN_CAPTURE", "android.permission.MANAGE_DEVICE_POLICY_SCREEN_CONTENT", "android.permission.MANAGE_DEVICE_POLICY_SECURITY_LOGGING", "android.permission.MANAGE_DEVICE_POLICY_SMS", "android.permission.MANAGE_DEVICE_POLICY_STATUS_BAR", "android.permission.MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE", "android.permission.MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS", "android.permission.MANAGE_DEVICE_POLICY_SYSTEM_UPDATES", "android.permission.MANAGE_DEVICE_POLICY_TIME", "android.permission.MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING", "android.permission.MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER", "android.permission.MANAGE_DEVICE_POLICY_VPN", "android.permission.MANAGE_DEVICE_POLICY_WALLPAPER", "android.permission.MANAGE_DEVICE_POLICY_WIFI", "android.permission.MANAGE_DEVICE_POLICY_WINDOWS", "android.permission.MANAGE_DEVICE_POLICY_WIPE_DATA", "android.permission.SET_TIME", "android.permission.SET_TIME_ZONE", "android.permission.MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES"});
        FINANCED_DEVICE_OWNER_PERMISSIONS = java.util.List.of((java.lang.Object[]) new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL", "android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL", "android.permission.MANAGE_DEVICE_POLICY_CALLS", "android.permission.MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES", "android.permission.MANAGE_DEVICE_POLICY_FACTORY_RESET", "android.permission.MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES", "android.permission.MANAGE_DEVICE_POLICY_KEYGUARD", "android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", "android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK", "android.permission.MANAGE_DEVICE_POLICY_MODIFY_USERS", "android.permission.MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY", "android.permission.MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS", "android.permission.MANAGE_DEVICE_POLICY_SAFE_BOOT", "android.permission.MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE", "android.permission.MANAGE_DEVICE_POLICY_TIME", "android.permission.MANAGE_DEVICE_POLICY_WIPE_DATA"});
        PROFILE_OWNER_PERMISSIONS = java.util.List.of((java.lang.Object[]) new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL", "android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL", "android.permission.MANAGE_DEVICE_POLICY_APP_RESTRICTIONS", "android.permission.MANAGE_DEVICE_POLICY_AUDIO_OUTPUT", "android.permission.MANAGE_DEVICE_POLICY_AUTOFILL", "android.permission.MANAGE_DEVICE_POLICY_BLUETOOTH", "android.permission.MANAGE_DEVICE_POLICY_CALLS", "android.permission.MANAGE_DEVICE_POLICY_CAMERA", "android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", "android.permission.MANAGE_DEVICE_POLICY_CONTENT_PROTECTION", "android.permission.MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES", "android.permission.MANAGE_DEVICE_POLICY_DISPLAY", "android.permission.MANAGE_DEVICE_POLICY_FACTORY_RESET", "android.permission.MANAGE_DEVICE_POLICY_INPUT_METHODS", "android.permission.MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES", "android.permission.MANAGE_DEVICE_POLICY_KEYGUARD", "android.permission.MANAGE_DEVICE_POLICY_LOCALE", "android.permission.MANAGE_DEVICE_POLICY_LOCATION", "android.permission.MANAGE_DEVICE_POLICY_LOCK", "android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", "android.permission.MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS", "android.permission.MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION", "android.permission.MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY", "android.permission.MANAGE_DEVICE_POLICY_PACKAGE_STATE", "android.permission.MANAGE_DEVICE_POLICY_PRINTING", "android.permission.MANAGE_DEVICE_POLICY_PROFILES", "android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", "android.permission.MANAGE_DEVICE_POLICY_RESET_PASSWORD", "android.permission.MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS", "android.permission.MANAGE_DEVICE_POLICY_SCREEN_CAPTURE", "android.permission.MANAGE_DEVICE_POLICY_SCREEN_CONTENT", "android.permission.MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE", "android.permission.MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS", "android.permission.MANAGE_DEVICE_POLICY_TIME", "android.permission.MANAGE_DEVICE_POLICY_VPN", "android.permission.MANAGE_DEVICE_POLICY_WIPE_DATA", "android.permission.MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES"});
        ADDITIONAL_PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE_PERMISSIONS = java.util.List.of((java.lang.Object[]) new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS", "android.permission.MANAGE_DEVICE_POLICY_AIRPLANE_MODE", "android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL", "android.permission.MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE", "android.permission.MANAGE_DEVICE_POLICY_DEFAULT_SMS", "android.permission.MANAGE_DEVICE_POLICY_LOCALE", "android.permission.MANAGE_DEVICE_POLICY_MICROPHONE", "android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK", "android.permission.MANAGE_DEVICE_POLICY_MTE", "android.permission.MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION", "android.permission.MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA", "android.permission.MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS", "android.permission.MANAGE_DEVICE_POLICY_SAFE_BOOT", "android.permission.MANAGE_DEVICE_POLICY_SECURITY_LOGGING", "android.permission.MANAGE_DEVICE_POLICY_SMS", "android.permission.MANAGE_DEVICE_POLICY_SYSTEM_UPDATES", "android.permission.MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING", "android.permission.MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER", "android.permission.MANAGE_DEVICE_POLICY_WIFI", "android.permission.SET_TIME", "android.permission.SET_TIME_ZONE"});
        ADDITIONAL_PROFILE_OWNER_ON_USER_0_PERMISSIONS = java.util.List.of((java.lang.Object[]) new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_AIRPLANE_MODE", "android.permission.MANAGE_DEVICE_POLICY_DISPLAY", "android.permission.MANAGE_DEVICE_POLICY_FUN", "android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK", "android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK", "android.permission.MANAGE_DEVICE_POLICY_MODIFY_USERS", "android.permission.MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA", "android.permission.MANAGE_DEVICE_POLICY_PRINTING", "android.permission.MANAGE_DEVICE_POLICY_PROFILES", "android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", "android.permission.MANAGE_DEVICE_POLICY_SAFE_BOOT", "android.permission.MANAGE_DEVICE_POLICY_SMS", "android.permission.MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS", "android.permission.MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER", "android.permission.MANAGE_DEVICE_POLICY_WINDOWS", "android.permission.SET_TIME", "android.permission.SET_TIME_ZONE"});
        ADDITIONAL_PROFILE_OWNER_ON_USER_PERMISSIONS = java.util.List.of("android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK");
        ADDITIONAL_AFFILIATED_PROFILE_OWNER_ON_USER_PERMISSIONS = java.util.List.of("android.permission.MANAGE_DEVICE_POLICY_STATUS_BAR");
        PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE_PERMISSIONS = new java.util.ArrayList();
        PROFILE_OWNER_ON_USER_0_PERMISSIONS = new java.util.ArrayList();
        AFFILIATED_PROFILE_OWNER_ON_USER_PERMISSIONS = new java.util.ArrayList();
        PROFILE_OWNER_ON_USER_PERMISSIONS = new java.util.ArrayList();
        DPC_PERMISSIONS = new java.util.HashMap<>();
        DELEGATE_SCOPES = new java.util.HashMap<>();
        CROSS_USER_PERMISSIONS = new java.util.HashMap<>();
        POLICY_IDENTIFIER_TO_PERMISSION = new java.util.HashMap<>();
        POLICY_IDENTIFIER_TO_ACTIVE_ADMIN_POLICY = new java.util.HashMap<>();
    }

    final java.lang.Object getLockObject() {
        long time = this.mStatLogger.getTime();
        com.android.server.LockGuard.guard(8);
        this.mStatLogger.logDurationStat(0, time);
        return this.mLockDoNoUseDirectly;
    }

    final void ensureLocked() {
        if (java.lang.Thread.holdsLock(this.mLockDoNoUseDirectly)) {
            return;
        }
        com.android.server.utils.Slogf.wtfStack(LOG_TAG, "Not holding DPMS lock.");
    }

    private void wtfIfInLock() {
        if (java.lang.Thread.holdsLock(this.mLockDoNoUseDirectly)) {
            com.android.server.utils.Slogf.wtfStack(LOG_TAG, "Shouldn't be called with DPMS lock held");
        }
    }

    public static final class Lifecycle extends com.android.server.SystemService {
        private com.android.server.devicepolicy.DevicePolicyManagerService mService;

        public Lifecycle(android.content.Context context) {
            super(context);
            java.lang.String string = context.getResources().getString(android.R.string.config_defaultWallpaperEffectsGenerationService);
            if (android.text.TextUtils.isEmpty(string)) {
                this.mService = new com.android.server.devicepolicy.DevicePolicyManagerService(context);
                return;
            }
            try {
                this.mService = (com.android.server.devicepolicy.DevicePolicyManagerService) java.lang.Class.forName(string).getConstructor(android.content.Context.class).newInstance(context);
            } catch (java.lang.Exception e) {
                throw new java.lang.IllegalStateException("Failed to instantiate DevicePolicyManagerService with class name: " + string, e);
            }
        }

        public void setDevicePolicySafetyChecker(android.app.admin.DevicePolicySafetyChecker devicePolicySafetyChecker) {
            this.mService.setDevicePolicySafetyChecker(devicePolicySafetyChecker);
        }

        @Override // com.android.server.SystemService
        public void onStart() {
            publishBinderService("device_policy", this.mService);
        }

        @Override // com.android.server.SystemService
        public void onBootPhase(int i) {
            this.mService.systemReady(i);
        }

        @Override // com.android.server.SystemService
        public void onUserStarting(@android.annotation.NonNull com.android.server.SystemService.TargetUser targetUser) {
            if (targetUser.isPreCreated()) {
                return;
            }
            this.mService.handleStartUser(targetUser.getUserIdentifier());
        }

        @Override // com.android.server.SystemService
        public void onUserUnlocking(@android.annotation.NonNull com.android.server.SystemService.TargetUser targetUser) {
            if (targetUser.isPreCreated()) {
                return;
            }
            this.mService.handleUnlockUser(targetUser.getUserIdentifier());
        }

        @Override // com.android.server.SystemService
        public void onUserStopping(@android.annotation.NonNull com.android.server.SystemService.TargetUser targetUser) {
            if (targetUser.isPreCreated()) {
                return;
            }
            this.mService.handleStopUser(targetUser.getUserIdentifier());
        }

        @Override // com.android.server.SystemService
        public void onUserUnlocked(@android.annotation.NonNull com.android.server.SystemService.TargetUser targetUser) {
            if (targetUser.isPreCreated()) {
                return;
            }
            this.mService.handleOnUserUnlocked(targetUser.getUserIdentifier());
        }
    }

    protected static class RestrictionsListener implements com.android.server.pm.UserManagerInternal.UserRestrictionsListener {
        private final android.content.Context mContext;
        private final com.android.server.devicepolicy.DevicePolicyManagerService mDpms;
        private final com.android.server.pm.UserManagerInternal mUserManagerInternal;

        public RestrictionsListener(android.content.Context context, com.android.server.pm.UserManagerInternal userManagerInternal, com.android.server.devicepolicy.DevicePolicyManagerService devicePolicyManagerService) {
            this.mContext = context;
            this.mUserManagerInternal = userManagerInternal;
            this.mDpms = devicePolicyManagerService;
        }

        @Override // com.android.server.pm.UserManagerInternal.UserRestrictionsListener
        public void onUserRestrictionsChanged(int i, android.os.Bundle bundle, android.os.Bundle bundle2) {
            resetCrossProfileIntentFiltersIfNeeded(i, bundle, bundle2);
            resetUserVpnIfNeeded(i, bundle, bundle2);
        }

        private void resetUserVpnIfNeeded(int i, android.os.Bundle bundle, android.os.Bundle bundle2) {
            if (!bundle2.getBoolean("no_config_vpn") && bundle.getBoolean("no_config_vpn")) {
                this.mDpms.clearUserConfiguredVpns(i);
            }
        }

        private void resetCrossProfileIntentFiltersIfNeeded(int i, android.os.Bundle bundle, android.os.Bundle bundle2) {
            int profileParentId;
            if (!com.android.server.pm.UserRestrictionsUtils.restrictionsChanged(bundle2, bundle, "no_sharing_into_profile") || (profileParentId = this.mUserManagerInternal.getProfileParentId(i)) == i) {
                return;
            }
            com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Resetting cross-profile intent filters on restriction change");
            this.mDpms.resetDefaultCrossProfileIntentFilters(profileParentId);
            this.mContext.sendBroadcastAsUser(new android.content.Intent("android.app.action.DATA_SHARING_RESTRICTION_APPLIED"), android.os.UserHandle.of(i));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void clearUserConfiguredVpns(int i) {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                if (deviceOrProfileOwnerAdminLocked == null) {
                    com.android.server.utils.Slogf.wtf(LOG_TAG, "Admin not found");
                    return;
                }
                java.lang.String str = deviceOrProfileOwnerAdminLocked.mAlwaysOnVpnPackage;
                if (str == null) {
                    this.mInjector.getVpnManager().setAlwaysOnVpnPackageForUser(i, null, false, null);
                }
                java.util.List<android.app.AppOpsManager.PackageOps> packagesForOps = this.mInjector.getAppOpsManager().getPackagesForOps(new int[]{47});
                if (packagesForOps == null) {
                    return;
                }
                for (android.app.AppOpsManager.PackageOps packageOps : packagesForOps) {
                    if (android.os.UserHandle.getUserId(packageOps.getUid()) == i && !packageOps.getPackageName().equals(str)) {
                        if (packageOps.getOps().size() != 1) {
                            com.android.server.utils.Slogf.wtf(LOG_TAG, "Unexpected number of ops returned");
                        } else if (((android.app.AppOpsManager.OpEntry) packageOps.getOps().get(0)).getMode() == 0) {
                            com.android.server.utils.Slogf.i(LOG_TAG, java.lang.String.format("Revoking VPN authorization for package %s uid %d", packageOps.getPackageName(), java.lang.Integer.valueOf(packageOps.getUid())));
                            this.mInjector.getAppOpsManager().setMode(47, packageOps.getUid(), packageOps.getPackageName(), 3);
                        }
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    final class UserLifecycleListener implements com.android.server.pm.UserManagerInternal.UserLifecycleListener {
        private UserLifecycleListener() {
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onUserCreated$0(android.content.pm.UserInfo userInfo, java.lang.Object obj) {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.handleNewUserCreated(userInfo, obj);
        }

        @Override // com.android.server.pm.UserManagerInternal.UserLifecycleListener
        public void onUserCreated(final android.content.pm.UserInfo userInfo, final java.lang.Object obj) {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$UserLifecycleListener$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.UserLifecycleListener.this.lambda$onUserCreated$0(userInfo, obj);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handlePackagesChanged(@android.annotation.Nullable java.lang.String str, int i) {
        boolean z;
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        synchronized (getLockObject()) {
            try {
                boolean z2 = false;
                java.lang.String str2 = null;
                z = false;
                for (int size = lambda$getUserDataUnchecked$5.mAdminList.size() - 1; size >= 0; size--) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5.mAdminList.get(size);
                    try {
                        java.lang.String packageName = activeAdmin.info.getPackageName();
                        if ((str == null || str.equals(packageName)) && (this.mIPackageManager.getPackageInfo(packageName, 0L, i) == null || this.mIPackageManager.getReceiverInfo(activeAdmin.info.getComponent(), 786432L, i) == null)) {
                            com.android.server.utils.Slogf.e(LOG_TAG, java.lang.String.format("Admin package %s not found for user %d, removing active admin", str, java.lang.Integer.valueOf(i)));
                            try {
                                lambda$getUserDataUnchecked$5.mAdminList.remove(size);
                                lambda$getUserDataUnchecked$5.mAdminMap.remove(activeAdmin.info.getComponent());
                                pushActiveAdminPackagesLocked(i);
                                z = true;
                                str2 = packageName;
                            } catch (android.os.RemoteException e) {
                                e = e;
                                z = true;
                                str2 = packageName;
                                com.android.server.utils.Slogf.wtf(LOG_TAG, "Error handling package changes", e);
                            }
                        }
                    } catch (android.os.RemoteException e2) {
                        e = e2;
                    }
                }
                if (z) {
                    lambda$getUserDataUnchecked$5.validatePasswordOwner();
                }
                for (int size2 = lambda$getUserDataUnchecked$5.mDelegationMap.size() - 1; size2 >= 0; size2--) {
                    if (isRemovedPackage(str, lambda$getUserDataUnchecked$5.mDelegationMap.keyAt(size2), i)) {
                        lambda$getUserDataUnchecked$5.mDelegationMap.removeAt(size2);
                        z2 = true;
                    }
                }
                android.content.ComponentName ownerComponent = getOwnerComponent(i);
                if (str != null && ownerComponent != null && ownerComponent.getPackageName().equals(str)) {
                    startOwnerService(i, "package-broadcast");
                }
                this.mDevicePolicyEngine.handlePackageChanged(str, i, str2);
                if (z || z2) {
                    saveSettingsLocked(lambda$getUserDataUnchecked$5.mUserId);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (z) {
            pushMeteredDisabledPackages(i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeCredentialManagementApp(final java.lang.String str) {
        this.mBackgroundHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda209
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$removeCredentialManagementApp$0(str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeCredentialManagementApp$0(java.lang.String str) {
        try {
            android.security.KeyChain.KeyChainConnection keyChainBind = this.mInjector.keyChainBind();
            try {
                android.security.IKeyChainService service = keyChainBind.getService();
                if (service.hasCredentialManagementApp() && str.equals(service.getCredentialManagementAppPackageName())) {
                    service.removeCredentialManagementApp();
                }
                keyChainBind.close();
            } catch (java.lang.Throwable th) {
                if (keyChainBind != null) {
                    try {
                        keyChainBind.close();
                    } catch (java.lang.Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        } catch (android.os.RemoteException | java.lang.AssertionError | java.lang.IllegalStateException | java.lang.InterruptedException e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Unable to remove the credential management app", e);
        }
    }

    private boolean isRemovedPackage(java.lang.String str, java.lang.String str2, int i) {
        if (str2 == null) {
            return false;
        }
        if (str != null) {
            try {
                if (!str.equals(str2)) {
                    return false;
                }
            } catch (android.os.RemoteException e) {
                com.android.server.utils.Slogf.wtf(LOG_TAG, "Error checking isRemovedPackage", e);
                return false;
            }
        }
        return this.mIPackageManager.getPackageInfo(str2, 0L, i) == null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handleNewPackageInstalled(java.lang.String str, int i) {
        if (!lambda$getUserDataUnchecked$5(i).mAppsSuspended) {
            return;
        }
        java.lang.String[] strArr = {str};
        if (this.mInjector.getPackageManager(i).getUnsuspendablePackages(strArr).length != 0) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Newly installed package is unsuspendable: " + str);
            return;
        }
        this.mInjector.getPackageManagerInternal().setPackagesSuspendedByAdmin(i, strArr, true);
    }

    public void setDevicePolicySafetyChecker(android.app.admin.DevicePolicySafetyChecker devicePolicySafetyChecker) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(this.mIsAutomotive || isAdb(callerIdentity), "can only set DevicePolicySafetyChecker on automotive builds or from ADB (but caller is %s)", new java.lang.Object[]{callerIdentity});
        setDevicePolicySafetyCheckerUnchecked(devicePolicySafetyChecker);
    }

    void setDevicePolicySafetyCheckerUnchecked(android.app.admin.DevicePolicySafetyChecker devicePolicySafetyChecker) {
        com.android.server.utils.Slogf.i(LOG_TAG, "Setting DevicePolicySafetyChecker as %s", devicePolicySafetyChecker);
        this.mSafetyChecker = devicePolicySafetyChecker;
        this.mInjector.setDevicePolicySafetyChecker(devicePolicySafetyChecker);
    }

    android.app.admin.DevicePolicySafetyChecker getDevicePolicySafetyChecker() {
        return this.mSafetyChecker;
    }

    private void checkCanExecuteOrThrowUnsafe(int i) {
        int unsafeOperationReason = getUnsafeOperationReason(i);
        if (unsafeOperationReason == -1) {
            return;
        }
        if (this.mSafetyChecker == null) {
            throw new android.app.admin.UnsafeStateException(i, unsafeOperationReason);
        }
        throw this.mSafetyChecker.newUnsafeStateException(i, unsafeOperationReason);
    }

    int getUnsafeOperationReason(int i) {
        if (this.mSafetyChecker == null) {
            return -1;
        }
        return this.mSafetyChecker.getUnsafeOperationReason(i);
    }

    public void setNextOperationSafety(int i, int i2) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_ADMINS"));
        com.android.server.utils.Slogf.i(LOG_TAG, "setNextOperationSafety(%s, %s)", android.app.admin.DevicePolicyManager.operationToString(i), android.app.admin.DevicePolicyManager.operationSafetyReasonToString(i2));
        this.mSafetyChecker = new com.android.server.devicepolicy.OneTimeSafetyChecker(this, i, i2);
    }

    public boolean isSafeOperation(int i) {
        if (this.mSafetyChecker == null) {
            return true;
        }
        return this.mSafetyChecker.isSafeOperation(i);
    }

    java.util.List<com.android.server.devicepolicy.OwnerShellData> listAllOwners() {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_ADMINS"));
        return (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda43
            public final java.lang.Object getOrThrow() {
                java.util.List lambda$listAllOwners$1;
                lambda$listAllOwners$1 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$listAllOwners$1();
                return lambda$listAllOwners$1;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.List lambda$listAllOwners$1() throws java.lang.Exception {
        android.util.SparseArray<com.android.server.devicepolicy.DevicePolicyData> sparseArray;
        java.util.List<com.android.server.devicepolicy.OwnerShellData> listAllOwners = this.mOwners.listAllOwners();
        synchronized (getLockObject()) {
            for (int i = 0; i < listAllOwners.size(); i++) {
                try {
                    com.android.server.devicepolicy.OwnerShellData ownerShellData = listAllOwners.get(i);
                    ownerShellData.isAffiliated = isUserAffiliatedWithDeviceLocked(ownerShellData.userId);
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            sparseArray = this.mUserData;
        }
        for (int i2 = 0; i2 < sparseArray.size(); i2++) {
            com.android.server.devicepolicy.DevicePolicyData valueAt = this.mUserData.valueAt(i2);
            int keyAt = sparseArray.keyAt(i2);
            int profileParentId = this.mUserManagerInternal.getProfileParentId(keyAt);
            if (profileParentId != keyAt) {
                for (int i3 = 0; i3 < valueAt.mAdminList.size(); i3++) {
                    listAllOwners.add(com.android.server.devicepolicy.OwnerShellData.forManagedProfileOwner(keyAt, profileParentId, valueAt.mAdminList.get(i3).info.getComponent()));
                }
            }
        }
        return listAllOwners;
    }

    @com.android.internal.annotations.VisibleForTesting
    static class Injector {
        public final android.content.Context mContext;

        @android.annotation.Nullable
        private android.app.admin.DevicePolicySafetyChecker mSafetyChecker;

        Injector(android.content.Context context) {
            this.mContext = context;
        }

        public boolean hasFeature() {
            return getPackageManager().hasSystemFeature("android.software.device_admin");
        }

        android.content.Context createContextAsUser(android.os.UserHandle userHandle) throws android.content.pm.PackageManager.NameNotFoundException {
            return this.mContext.createPackageContextAsUser(this.mContext.getPackageName(), 0, userHandle);
        }

        android.content.res.Resources getResources() {
            return this.mContext.getResources();
        }

        android.os.UserManager getUserManager() {
            return android.os.UserManager.get(this.mContext);
        }

        com.android.server.pm.UserManagerInternal getUserManagerInternal() {
            return (com.android.server.pm.UserManagerInternal) com.android.server.LocalServices.getService(com.android.server.pm.UserManagerInternal.class);
        }

        android.content.pm.PackageManagerInternal getPackageManagerInternal() {
            return (android.content.pm.PackageManagerInternal) com.android.server.LocalServices.getService(android.content.pm.PackageManagerInternal.class);
        }

        com.android.server.pm.PackageManagerLocal getPackageManagerLocal() {
            return (com.android.server.pm.PackageManagerLocal) com.android.server.LocalManagerRegistry.getManager(com.android.server.pm.PackageManagerLocal.class);
        }

        com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal() {
            return (com.android.server.wm.ActivityTaskManagerInternal) com.android.server.LocalServices.getService(com.android.server.wm.ActivityTaskManagerInternal.class);
        }

        @android.annotation.NonNull
        android.permission.PermissionControllerManager getPermissionControllerManager(@android.annotation.NonNull android.os.UserHandle userHandle) {
            if (userHandle.equals(this.mContext.getUser())) {
                return (android.permission.PermissionControllerManager) this.mContext.getSystemService(android.permission.PermissionControllerManager.class);
            }
            try {
                return (android.permission.PermissionControllerManager) this.mContext.createPackageContextAsUser(this.mContext.getPackageName(), 0, userHandle).getSystemService(android.permission.PermissionControllerManager.class);
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                throw new java.lang.IllegalStateException(e);
            }
        }

        android.app.usage.UsageStatsManagerInternal getUsageStatsManagerInternal() {
            return (android.app.usage.UsageStatsManagerInternal) com.android.server.LocalServices.getService(android.app.usage.UsageStatsManagerInternal.class);
        }

        com.android.server.net.NetworkPolicyManagerInternal getNetworkPolicyManagerInternal() {
            return (com.android.server.net.NetworkPolicyManagerInternal) com.android.server.LocalServices.getService(com.android.server.net.NetworkPolicyManagerInternal.class);
        }

        android.app.NotificationManager getNotificationManager() {
            return (android.app.NotificationManager) this.mContext.getSystemService(android.app.NotificationManager.class);
        }

        android.net.IIpConnectivityMetrics getIIpConnectivityMetrics() {
            return android.net.IIpConnectivityMetrics.Stub.asInterface(android.os.ServiceManager.getService("connmetrics"));
        }

        android.content.pm.PackageManager getPackageManager() {
            return this.mContext.getPackageManager();
        }

        android.content.pm.PackageManager getPackageManager(int i) {
            try {
                return createContextAsUser(android.os.UserHandle.of(i)).getPackageManager();
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                throw new java.lang.IllegalStateException(e);
            }
        }

        android.os.PowerManagerInternal getPowerManagerInternal() {
            return (android.os.PowerManagerInternal) com.android.server.LocalServices.getService(android.os.PowerManagerInternal.class);
        }

        android.telephony.TelephonyManager getTelephonyManager() {
            return (android.telephony.TelephonyManager) this.mContext.getSystemService(android.telephony.TelephonyManager.class);
        }

        android.app.role.RoleManager getRoleManager() {
            return (android.app.role.RoleManager) this.mContext.getSystemService(android.app.role.RoleManager.class);
        }

        android.app.trust.TrustManager getTrustManager() {
            return (android.app.trust.TrustManager) this.mContext.getSystemService("trust");
        }

        android.app.AlarmManager getAlarmManager() {
            return (android.app.AlarmManager) this.mContext.getSystemService(android.app.AlarmManager.class);
        }

        com.android.server.AlarmManagerInternal getAlarmManagerInternal() {
            return (com.android.server.AlarmManagerInternal) com.android.server.LocalServices.getService(com.android.server.AlarmManagerInternal.class);
        }

        android.net.ConnectivityManager getConnectivityManager() {
            return (android.net.ConnectivityManager) this.mContext.getSystemService(android.net.ConnectivityManager.class);
        }

        android.net.VpnManager getVpnManager() {
            return (android.net.VpnManager) this.mContext.getSystemService(android.net.VpnManager.class);
        }

        android.location.LocationManager getLocationManager() {
            return (android.location.LocationManager) this.mContext.getSystemService(android.location.LocationManager.class);
        }

        android.view.IWindowManager getIWindowManager() {
            return android.view.IWindowManager.Stub.asInterface(android.os.ServiceManager.getService("window"));
        }

        android.app.IActivityManager getIActivityManager() {
            return android.app.ActivityManager.getService();
        }

        android.app.IActivityTaskManager getIActivityTaskManager() {
            return android.app.ActivityTaskManager.getService();
        }

        android.app.ActivityManagerInternal getActivityManagerInternal() {
            return (android.app.ActivityManagerInternal) com.android.server.LocalServices.getService(android.app.ActivityManagerInternal.class);
        }

        android.content.pm.IPackageManager getIPackageManager() {
            return android.app.AppGlobals.getPackageManager();
        }

        android.permission.IPermissionManager getIPermissionManager() {
            return android.app.AppGlobals.getPermissionManager();
        }

        android.app.backup.IBackupManager getIBackupManager() {
            return android.app.backup.IBackupManager.Stub.asInterface(android.os.ServiceManager.getService(com.android.server.am.HostingRecord.HOSTING_TYPE_BACKUP));
        }

        android.media.IAudioService getIAudioService() {
            return android.media.IAudioService.Stub.asInterface(android.os.ServiceManager.getService("audio"));
        }

        com.android.server.pdb.PersistentDataBlockManagerInternal getPersistentDataBlockManagerInternal() {
            return (com.android.server.pdb.PersistentDataBlockManagerInternal) com.android.server.LocalServices.getService(com.android.server.pdb.PersistentDataBlockManagerInternal.class);
        }

        android.app.AppOpsManager getAppOpsManager() {
            return (android.app.AppOpsManager) this.mContext.getSystemService(android.app.AppOpsManager.class);
        }

        com.android.internal.widget.LockSettingsInternal getLockSettingsInternal() {
            return (com.android.internal.widget.LockSettingsInternal) com.android.server.LocalServices.getService(com.android.internal.widget.LockSettingsInternal.class);
        }

        android.content.pm.CrossProfileApps getCrossProfileApps(int i) {
            return (android.content.pm.CrossProfileApps) this.mContext.createContextAsUser(android.os.UserHandle.of(i), 0).getSystemService(android.content.pm.CrossProfileApps.class);
        }

        boolean hasUserSetupCompleted(com.android.server.devicepolicy.DevicePolicyData devicePolicyData) {
            return devicePolicyData.mUserSetupComplete;
        }

        boolean isBuildDebuggable() {
            return android.os.Build.IS_DEBUGGABLE;
        }

        com.android.internal.widget.LockPatternUtils newLockPatternUtils() {
            return new com.android.internal.widget.LockPatternUtils(this.mContext);
        }

        com.android.server.devicepolicy.EnterpriseSpecificIdCalculator newEnterpriseSpecificIdCalculator() {
            return new com.android.server.devicepolicy.EnterpriseSpecificIdCalculator(this.mContext);
        }

        boolean storageManagerIsFileBasedEncryptionEnabled() {
            return android.os.storage.StorageManager.isFileEncrypted();
        }

        android.os.Looper getMyLooper() {
            return android.os.Looper.myLooper();
        }

        android.net.wifi.WifiManager getWifiManager() {
            return (android.net.wifi.WifiManager) this.mContext.getSystemService(android.net.wifi.WifiManager.class);
        }

        android.hardware.usb.UsbManager getUsbManager() {
            return (android.hardware.usb.UsbManager) this.mContext.getSystemService(android.hardware.usb.UsbManager.class);
        }

        long binderClearCallingIdentity() {
            return android.os.Binder.clearCallingIdentity();
        }

        void binderRestoreCallingIdentity(long j) {
            android.os.Binder.restoreCallingIdentity(j);
        }

        int binderGetCallingUid() {
            return android.os.Binder.getCallingUid();
        }

        int binderGetCallingPid() {
            return android.os.Binder.getCallingPid();
        }

        android.os.UserHandle binderGetCallingUserHandle() {
            return android.os.Binder.getCallingUserHandle();
        }

        boolean binderIsCallingUidMyUid() {
            return android.os.Binder.getCallingUid() == android.os.Process.myUid();
        }

        void binderWithCleanCallingIdentity(@android.annotation.NonNull com.android.internal.util.FunctionalUtils.ThrowingRunnable throwingRunnable) {
            android.os.Binder.withCleanCallingIdentity(throwingRunnable);
        }

        final <T> T binderWithCleanCallingIdentity(@android.annotation.NonNull com.android.internal.util.FunctionalUtils.ThrowingSupplier<T> throwingSupplier) {
            return (T) android.os.Binder.withCleanCallingIdentity(throwingSupplier);
        }

        final int userHandleGetCallingUserId() {
            return android.os.UserHandle.getUserId(binderGetCallingUid());
        }

        void powerManagerGoToSleep(long j, int i, int i2) {
            ((android.os.PowerManager) this.mContext.getSystemService(android.os.PowerManager.class)).goToSleep(j, i, i2);
        }

        void powerManagerReboot(java.lang.String str) {
            ((android.os.PowerManager) this.mContext.getSystemService(android.os.PowerManager.class)).reboot(str);
        }

        boolean recoverySystemRebootWipeUserData(boolean z, java.lang.String str, boolean z2, boolean z3, boolean z4, boolean z5) throws java.io.IOException {
            return com.android.server.devicepolicy.FactoryResetter.newBuilder(this.mContext).setSafetyChecker(this.mSafetyChecker).setReason(str).setShutdown(z).setForce(z2).setWipeEuicc(z3).setWipeAdoptableStorage(z4).setWipeFactoryResetProtection(z5).build().factoryReset();
        }

        boolean systemPropertiesGetBoolean(java.lang.String str, boolean z) {
            return android.os.SystemProperties.getBoolean(str, z);
        }

        long systemPropertiesGetLong(java.lang.String str, long j) {
            return android.os.SystemProperties.getLong(str, j);
        }

        java.lang.String systemPropertiesGet(java.lang.String str, java.lang.String str2) {
            return android.os.SystemProperties.get(str, str2);
        }

        java.lang.String systemPropertiesGet(java.lang.String str) {
            return android.os.SystemProperties.get(str);
        }

        void systemPropertiesSet(java.lang.String str, java.lang.String str2) {
            android.os.SystemProperties.set(str, str2);
        }

        boolean userManagerIsHeadlessSystemUserMode() {
            return android.os.UserManager.isHeadlessSystemUserMode();
        }

        android.app.PendingIntent pendingIntentGetActivityAsUser(android.content.Context context, int i, @android.annotation.NonNull android.content.Intent intent, int i2, android.os.Bundle bundle, android.os.UserHandle userHandle) {
            return android.app.PendingIntent.getActivityAsUser(context, i, intent, i2, bundle, userHandle);
        }

        android.app.PendingIntent pendingIntentGetBroadcast(android.content.Context context, int i, android.content.Intent intent, int i2) {
            return android.app.PendingIntent.getBroadcast(context, i, intent, i2);
        }

        void registerContentObserver(android.net.Uri uri, boolean z, android.database.ContentObserver contentObserver, int i) {
            this.mContext.getContentResolver().registerContentObserver(uri, z, contentObserver, i);
        }

        int settingsSecureGetIntForUser(java.lang.String str, int i, int i2) {
            return android.provider.Settings.Secure.getIntForUser(this.mContext.getContentResolver(), str, i, i2);
        }

        java.lang.String settingsSecureGetStringForUser(java.lang.String str, int i) {
            return android.provider.Settings.Secure.getStringForUser(this.mContext.getContentResolver(), str, i);
        }

        void settingsSecurePutIntForUser(java.lang.String str, int i, int i2) {
            android.provider.Settings.Secure.putIntForUser(this.mContext.getContentResolver(), str, i, i2);
        }

        void settingsSecurePutStringForUser(java.lang.String str, java.lang.String str2, int i) {
            android.provider.Settings.Secure.putStringForUser(this.mContext.getContentResolver(), str, str2, i);
        }

        void settingsGlobalPutStringForUser(java.lang.String str, java.lang.String str2, int i) {
            android.provider.Settings.Global.putStringForUser(this.mContext.getContentResolver(), str, str2, i);
        }

        void settingsSecurePutInt(java.lang.String str, int i) {
            android.provider.Settings.Secure.putInt(this.mContext.getContentResolver(), str, i);
        }

        int settingsGlobalGetInt(java.lang.String str, int i) {
            return android.provider.Settings.Global.getInt(this.mContext.getContentResolver(), str, i);
        }

        @android.annotation.Nullable
        java.lang.String settingsGlobalGetString(java.lang.String str) {
            return android.provider.Settings.Global.getString(this.mContext.getContentResolver(), str);
        }

        void settingsGlobalPutInt(java.lang.String str, int i) {
            android.provider.Settings.Global.putInt(this.mContext.getContentResolver(), str, i);
        }

        void settingsSecurePutString(java.lang.String str, java.lang.String str2) {
            android.provider.Settings.Secure.putString(this.mContext.getContentResolver(), str, str2);
        }

        void settingsGlobalPutString(java.lang.String str, java.lang.String str2) {
            android.provider.Settings.Global.putString(this.mContext.getContentResolver(), str, str2);
        }

        void settingsSystemPutStringForUser(java.lang.String str, java.lang.String str2, int i) {
            android.provider.Settings.System.putStringForUser(this.mContext.getContentResolver(), str, str2, i);
        }

        void securityLogSetLoggingEnabledProperty(boolean z) {
            android.app.admin.SecurityLog.setLoggingEnabledProperty(z);
        }

        boolean securityLogGetLoggingEnabledProperty() {
            return android.app.admin.SecurityLog.getLoggingEnabledProperty();
        }

        boolean securityLogIsLoggingEnabled() {
            return android.app.admin.SecurityLog.isLoggingEnabled();
        }

        android.security.KeyChain.KeyChainConnection keyChainBind() throws java.lang.InterruptedException {
            return android.security.KeyChain.bind(this.mContext);
        }

        android.security.KeyChain.KeyChainConnection keyChainBindAsUser(android.os.UserHandle userHandle) throws java.lang.InterruptedException {
            return android.security.KeyChain.bindAsUser(this.mContext, userHandle);
        }

        void postOnSystemServerInitThreadPool(java.lang.Runnable runnable) {
            com.android.server.SystemServerInitThreadPool.submit(runnable, com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG);
        }

        public com.android.server.devicepolicy.TransferOwnershipMetadataManager newTransferOwnershipMetadataManager() {
            return new com.android.server.devicepolicy.TransferOwnershipMetadataManager();
        }

        public void runCryptoSelfTest() {
            com.android.server.devicepolicy.CryptoTestHelper.runAndLogSelfTest();
        }

        public java.lang.String[] getPersonalAppsForSuspension(int i) {
            return com.android.server.devicepolicy.PersonalAppsSuspensionHelper.forUser(this.mContext, i).getPersonalAppsForSuspension();
        }

        public long systemCurrentTimeMillis() {
            return java.lang.System.currentTimeMillis();
        }

        public boolean isChangeEnabled(long j, java.lang.String str, int i) {
            return android.app.compat.CompatChanges.isChangeEnabled(j, str, android.os.UserHandle.of(i));
        }

        void setDevicePolicySafetyChecker(android.app.admin.DevicePolicySafetyChecker devicePolicySafetyChecker) {
            this.mSafetyChecker = devicePolicySafetyChecker;
        }

        com.android.server.devicepolicy.DeviceManagementResourcesProvider getDeviceManagementResourcesProvider() {
            return new com.android.server.devicepolicy.DeviceManagementResourcesProvider();
        }

        boolean isAdminInstalledCaCertAutoApproved() {
            return false;
        }
    }

    public DevicePolicyManagerService(android.content.Context context) {
        this(new com.android.server.devicepolicy.DevicePolicyManagerService.Injector(context.createAttributionContext(ATTRIBUTION_TAG)), new com.android.server.devicepolicy.PolicyPathProvider() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.2
        });
    }

    @com.android.internal.annotations.VisibleForTesting
    DevicePolicyManagerService(com.android.server.devicepolicy.DevicePolicyManagerService.Injector injector, com.android.server.devicepolicy.PolicyPathProvider policyPathProvider) {
        this.mPolicyCache = new com.android.server.devicepolicy.DevicePolicyCacheImpl();
        this.mStateCache = new com.android.server.devicepolicy.DeviceStateCacheImpl();
        this.mESIDInitilizationLock = new java.lang.Object();
        this.mSubscriptionsChangedListenerLock = new java.lang.Object();
        this.mPackagesToRemove = new android.util.ArraySet();
        this.mToken = new android.os.Binder();
        this.mLogoutUserId = com.android.server.am.ProcessList.INVALID_ADJ;
        this.mNetworkLoggingNotificationUserId = com.android.server.am.ProcessList.INVALID_ADJ;
        this.mStatLogger = new com.android.internal.util.StatLogger(new java.lang.String[]{"LockGuard.guard()"});
        this.mLockDoNoUseDirectly = com.android.server.LockGuard.installNewLock(8, true);
        this.mPendingUserCreatedCallbackTokens = new java.util.ArrayList<>();
        this.mReceiver = new android.content.BroadcastReceiver() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.1
            @Override // android.content.BroadcastReceiver
            public void onReceive(android.content.Context context, android.content.Intent intent) {
                java.lang.String action = intent.getAction();
                final int intExtra = intent.getIntExtra("android.intent.extra.user_handle", getSendingUserId());
                if ("android.intent.action.USER_STARTED".equals(action) && intExtra == 0) {
                    synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                        try {
                            if (com.android.server.devicepolicy.DevicePolicyManagerService.this.isNetworkLoggingEnabledInternalLocked()) {
                                com.android.server.devicepolicy.DevicePolicyManagerService.this.setNetworkLoggingActiveInternal(true);
                            }
                        } finally {
                        }
                    }
                }
                if ("android.intent.action.BOOT_COMPLETED".equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.calculateHasIncompatibleAccounts();
                }
                if ("android.intent.action.BOOT_COMPLETED".equals(action) && intExtra == com.android.server.devicepolicy.DevicePolicyManagerService.this.mOwners.getDeviceOwnerUserId()) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.mBugreportCollectionManager.checkForPendingBugreportAfterBoot();
                }
                if ("android.intent.action.BOOT_COMPLETED".equals(action) || com.android.server.devicepolicy.DevicePolicyManagerService.ACTION_EXPIRED_PASSWORD_NOTIFICATION.equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.1.1
                        @Override // java.lang.Runnable
                        public void run() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.handlePasswordExpirationNotification(intExtra);
                        }
                    });
                }
                if ("android.intent.action.USER_ADDED".equals(action)) {
                    sendDeviceOwnerUserCommand("android.app.action.USER_ADDED", intExtra);
                    synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.maybePauseDeviceWideLoggingLocked();
                    }
                    return;
                }
                if ("android.intent.action.USER_REMOVED".equals(action)) {
                    sendDeviceOwnerUserCommand("android.app.action.USER_REMOVED", intExtra);
                    synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                        try {
                            boolean isUserAffiliatedWithDeviceLocked = com.android.server.devicepolicy.DevicePolicyManagerService.this.isUserAffiliatedWithDeviceLocked(intExtra);
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.removeUserData(intExtra);
                            if (!isUserAffiliatedWithDeviceLocked) {
                                com.android.server.devicepolicy.DevicePolicyManagerService.this.discardDeviceWideLogsLocked();
                                com.android.server.devicepolicy.DevicePolicyManagerService.this.maybeResumeDeviceWideLoggingLocked();
                            }
                        } finally {
                        }
                    }
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.mDevicePolicyEngine.handleUserRemoved(intExtra);
                    return;
                }
                if ("android.intent.action.USER_STARTED".equals(action)) {
                    sendDeviceOwnerUserCommand("android.app.action.USER_STARTED", intExtra);
                    synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.maybeSendAdminEnabledBroadcastLocked(intExtra);
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.mUserData.remove(intExtra);
                    }
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.handlePackagesChanged(null, intExtra);
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.updatePersonalAppsSuspensionOnUserStart(intExtra);
                    return;
                }
                if ("android.intent.action.USER_STOPPED".equals(action)) {
                    sendDeviceOwnerUserCommand("android.app.action.USER_STOPPED", intExtra);
                    if (com.android.server.devicepolicy.DevicePolicyManagerService.this.isManagedProfile(intExtra)) {
                        com.android.server.utils.Slogf.d(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Managed profile was stopped");
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.updatePersonalAppsSuspension(intExtra);
                        return;
                    }
                    return;
                }
                if ("android.intent.action.USER_SWITCHED".equals(action)) {
                    sendDeviceOwnerUserCommand("android.app.action.USER_SWITCHED", intExtra);
                    return;
                }
                if ("android.intent.action.USER_UNLOCKED".equals(action)) {
                    synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.maybeSendAdminEnabledBroadcastLocked(intExtra);
                    }
                    if (com.android.server.devicepolicy.DevicePolicyManagerService.this.isManagedProfile(intExtra)) {
                        com.android.server.utils.Slogf.d(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Managed profile became unlocked");
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.triggerPolicyComplianceCheckIfNeeded(intExtra, com.android.server.devicepolicy.DevicePolicyManagerService.this.updatePersonalAppsSuspension(intExtra));
                        return;
                    }
                    return;
                }
                if ("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE".equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.handlePackagesChanged(null, intExtra);
                    return;
                }
                if ("android.intent.action.PACKAGE_CHANGED".equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.handlePackagesChanged(intent.getData().getSchemeSpecificPart(), intExtra);
                    return;
                }
                if ("android.intent.action.PACKAGE_ADDED".equals(action)) {
                    if (intent.getBooleanExtra("android.intent.extra.REPLACING", false)) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.handlePackagesChanged(intent.getData().getSchemeSpecificPart(), intExtra);
                        return;
                    } else {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.handleNewPackageInstalled(intent.getData().getSchemeSpecificPart(), intExtra);
                        return;
                    }
                }
                if ("android.intent.action.PACKAGE_REMOVED".equals(action) && !intent.getBooleanExtra("android.intent.extra.REPLACING", false)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.handlePackagesChanged(intent.getData().getSchemeSpecificPart(), intExtra);
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.removeCredentialManagementApp(intent.getData().getSchemeSpecificPart());
                    return;
                }
                if ("android.intent.action.MANAGED_PROFILE_ADDED".equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.clearWipeProfileNotification();
                    return;
                }
                if ("android.intent.action.DATE_CHANGED".equals(action) || "android.intent.action.TIME_SET".equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.updateSystemUpdateFreezePeriodsRecord(true);
                    int managedUserId = com.android.server.devicepolicy.DevicePolicyManagerService.this.getManagedUserId(com.android.server.devicepolicy.DevicePolicyManagerService.this.getMainUserId());
                    if (managedUserId >= 0) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.updatePersonalAppsSuspension(managedUserId);
                        return;
                    }
                    return;
                }
                if (com.android.server.devicepolicy.DevicePolicyManagerService.ACTION_PROFILE_OFF_DEADLINE.equals(action)) {
                    com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Profile off deadline alarm was triggered");
                    int managedUserId2 = com.android.server.devicepolicy.DevicePolicyManagerService.this.getManagedUserId(com.android.server.devicepolicy.DevicePolicyManagerService.this.getMainUserId());
                    if (managedUserId2 >= 0) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.updatePersonalAppsSuspension(managedUserId2);
                        return;
                    } else {
                        com.android.server.utils.Slogf.wtf(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Got deadline alarm for nonexistent profile");
                        return;
                    }
                }
                if (com.android.server.devicepolicy.DevicePolicyManagerService.ACTION_TURN_PROFILE_ON_NOTIFICATION.equals(action)) {
                    com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "requesting to turn on the profile: " + intExtra);
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.mUserManager.requestQuietModeEnabled(false, android.os.UserHandle.of(intExtra));
                    return;
                }
                if ("android.intent.action.MANAGED_PROFILE_UNAVAILABLE".equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.notifyIfManagedSubscriptionsAreUnavailable(android.os.UserHandle.of(intExtra), false);
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.updatePersonalAppsSuspension(intExtra);
                } else if ("android.intent.action.MANAGED_PROFILE_AVAILABLE".equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.notifyIfManagedSubscriptionsAreUnavailable(android.os.UserHandle.of(intExtra), true);
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.triggerPolicyComplianceCheckIfNeeded(intExtra, com.android.server.devicepolicy.DevicePolicyManagerService.this.updatePersonalAppsSuspension(intExtra));
                } else if ("android.accounts.LOGIN_ACCOUNTS_CHANGED".equals(action)) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.calculateHasIncompatibleAccounts();
                }
            }

            private void sendDeviceOwnerUserCommand(java.lang.String str, int i) {
                synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                    try {
                        com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = com.android.server.devicepolicy.DevicePolicyManagerService.this.getDeviceOwnerAdminLocked();
                        if (deviceOwnerAdminLocked != null) {
                            android.os.Bundle bundle = new android.os.Bundle();
                            bundle.putParcelable("android.intent.extra.USER", android.os.UserHandle.of(i));
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.sendAdminCommandLocked(deviceOwnerAdminLocked, str, bundle, null, true);
                        }
                    } catch (java.lang.Throwable th) {
                        throw th;
                    }
                }
            }
        };
        USER_RESTRICTION_PERMISSIONS.put("allow_parent_profile_app_linking", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_PROFILES"});
        USER_RESTRICTION_PERMISSIONS.put("no_add_clone_profile", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_PROFILES"});
        USER_RESTRICTION_PERMISSIONS.put("no_add_private_profile", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_PROFILES"});
        USER_RESTRICTION_PERMISSIONS.put("no_add_user", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MODIFY_USERS"});
        USER_RESTRICTION_PERMISSIONS.put("no_add_wifi_config", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WIFI"});
        USER_RESTRICTION_PERMISSIONS.put("no_adjust_volume", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_AUDIO_OUTPUT"});
        USER_RESTRICTION_PERMISSIONS.put("no_airplane_mode", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_AIRPLANE_MODE"});
        USER_RESTRICTION_PERMISSIONS.put("no_ambient_display", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_DISPLAY"});
        USER_RESTRICTION_PERMISSIONS.put("no_control_apps", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL"});
        USER_RESTRICTION_PERMISSIONS.put("no_autofill", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_AUTOFILL"});
        USER_RESTRICTION_PERMISSIONS.put("no_bluetooth", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_BLUETOOTH"});
        USER_RESTRICTION_PERMISSIONS.put("no_bluetooth_sharing", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_BLUETOOTH"});
        USER_RESTRICTION_PERMISSIONS.put("no_camera", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_CAMERA"});
        USER_RESTRICTION_PERMISSIONS.put("disallow_camera_toggle", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_CAMERA_TOGGLE"});
        USER_RESTRICTION_PERMISSIONS.put("no_cellular_2g", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK"});
        USER_RESTRICTION_PERMISSIONS.put("no_change_wifi_state", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WIFI"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_bluetooth", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_BLUETOOTH"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_brightness", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_DISPLAY"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_cell_broadcasts", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_credentials", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_date_time", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_TIME"});
        USER_RESTRICTION_PERMISSIONS.put("disallow_config_default_apps", new java.lang.String[]{"android.permission.MANAGE_DEFAULT_APPLICATIONS"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_locale", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_LOCALE"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_location", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_LOCATION"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_mobile_networks", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK"});
        USER_RESTRICTION_PERMISSIONS.put("disallow_config_private_dns", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_screen_timeout", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_DISPLAY"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_tethering", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_vpn", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_VPN"});
        USER_RESTRICTION_PERMISSIONS.put("no_config_wifi", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WIFI"});
        USER_RESTRICTION_PERMISSIONS.put("no_content_capture", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_SCREEN_CONTENT"});
        USER_RESTRICTION_PERMISSIONS.put("no_content_suggestions", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_SCREEN_CONTENT"});
        USER_RESTRICTION_PERMISSIONS.put("no_create_windows", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WINDOWS"});
        USER_RESTRICTION_PERMISSIONS.put("no_cross_profile_copy_paste", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION"});
        USER_RESTRICTION_PERMISSIONS.put("no_data_roaming", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK"});
        USER_RESTRICTION_PERMISSIONS.put("no_debugging_features", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES"});
        USER_RESTRICTION_PERMISSIONS.put("no_factory_reset", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_FACTORY_RESET"});
        USER_RESTRICTION_PERMISSIONS.put("no_fun", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_FUN"});
        USER_RESTRICTION_PERMISSIONS.put("no_install_apps", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL"});
        USER_RESTRICTION_PERMISSIONS.put("no_install_unknown_sources", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES"});
        USER_RESTRICTION_PERMISSIONS.put("no_install_unknown_sources_globally", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES"});
        USER_RESTRICTION_PERMISSIONS.put("disallow_microphone_toggle", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE"});
        USER_RESTRICTION_PERMISSIONS.put("no_modify_accounts", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT"});
        USER_RESTRICTION_PERMISSIONS.put("no_physical_media", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA"});
        USER_RESTRICTION_PERMISSIONS.put("no_network_reset", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK"});
        USER_RESTRICTION_PERMISSIONS.put("no_outgoing_beam", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION"});
        USER_RESTRICTION_PERMISSIONS.put("no_outgoing_calls", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_CALLS"});
        USER_RESTRICTION_PERMISSIONS.put("no_printing", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_PRINTING"});
        USER_RESTRICTION_PERMISSIONS.put("no_remove_user", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MODIFY_USERS"});
        USER_RESTRICTION_PERMISSIONS.put("no_run_in_background", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_RUN_IN_BACKGROUND"});
        USER_RESTRICTION_PERMISSIONS.put("no_safe_boot", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_SAFE_BOOT"});
        USER_RESTRICTION_PERMISSIONS.put("no_set_user_icon", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MODIFY_USERS"});
        USER_RESTRICTION_PERMISSIONS.put("no_set_wallpaper", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WALLPAPER"});
        USER_RESTRICTION_PERMISSIONS.put("no_sharing_into_profile", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION"});
        USER_RESTRICTION_PERMISSIONS.put("no_share_location", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_LOCATION"});
        USER_RESTRICTION_PERMISSIONS.put("no_sharing_admin_configured_wifi", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WIFI"});
        USER_RESTRICTION_PERMISSIONS.put("no_sms", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_SMS"});
        USER_RESTRICTION_PERMISSIONS.put("no_system_error_dialogs", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS"});
        if (com.android.net.thread.platform.flags.Flags.threadUserRestrictionEnabled()) {
            USER_RESTRICTION_PERMISSIONS.put("no_thread_network", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_THREAD_NETWORK"});
        }
        if (android.app.admin.flags.Flags.assistContentUserRestrictionEnabled()) {
            USER_RESTRICTION_PERMISSIONS.put("no_assist_content", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_ASSIST_CONTENT"});
        }
        USER_RESTRICTION_PERMISSIONS.put("no_ultra_wideband_radio", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION"});
        USER_RESTRICTION_PERMISSIONS.put("no_unified_password", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS"});
        USER_RESTRICTION_PERMISSIONS.put("no_uninstall_apps", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL"});
        USER_RESTRICTION_PERMISSIONS.put("disallow_unmute_device", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_AUDIO_OUTPUT"});
        USER_RESTRICTION_PERMISSIONS.put("no_unmute_microphone", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MICROPHONE"});
        USER_RESTRICTION_PERMISSIONS.put("no_usb_file_transfer", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER"});
        USER_RESTRICTION_PERMISSIONS.put("no_user_switch", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MODIFY_USERS"});
        USER_RESTRICTION_PERMISSIONS.put("no_wifi_direct", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WIFI"});
        USER_RESTRICTION_PERMISSIONS.put("no_wifi_tethering", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WIFI"});
        USER_RESTRICTION_PERMISSIONS.put("ensure_verify_apps", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES"});
        USER_RESTRICTION_PERMISSIONS.put("no_sim_globally", new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK"});
        USER_RESTRICTION_PERMISSIONS.put("no_record_audio", null);
        USER_RESTRICTION_PERMISSIONS.put("no_wallpaper", null);
        SENSOR_PERMISSIONS.add("android.permission.ACCESS_FINE_LOCATION");
        SENSOR_PERMISSIONS.add("android.permission.ACCESS_BACKGROUND_LOCATION");
        SENSOR_PERMISSIONS.add("android.permission.ACCESS_COARSE_LOCATION");
        SENSOR_PERMISSIONS.add("android.permission.CAMERA");
        SENSOR_PERMISSIONS.add("android.permission.RECORD_AUDIO");
        SENSOR_PERMISSIONS.add("android.permission.ACTIVITY_RECOGNITION");
        SENSOR_PERMISSIONS.add("android.permission.BODY_SENSORS");
        SENSOR_PERMISSIONS.add("android.permission.BACKGROUND_CAMERA");
        SENSOR_PERMISSIONS.add("android.permission.RECORD_BACKGROUND_AUDIO");
        SENSOR_PERMISSIONS.add("android.permission.BODY_SENSORS_BACKGROUND");
        this.calculateHasIncompatibleAccountsExecutor = new java.util.concurrent.ThreadPoolExecutor(1, 1, 0L, java.util.concurrent.TimeUnit.MILLISECONDS, new java.util.concurrent.LinkedBlockingQueue());
        PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE_PERMISSIONS.addAll(PROFILE_OWNER_PERMISSIONS);
        PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE_PERMISSIONS.addAll(ADDITIONAL_PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE_PERMISSIONS);
        PROFILE_OWNER_ON_USER_0_PERMISSIONS.addAll(PROFILE_OWNER_PERMISSIONS);
        PROFILE_OWNER_ON_USER_0_PERMISSIONS.addAll(ADDITIONAL_PROFILE_OWNER_ON_USER_0_PERMISSIONS);
        PROFILE_OWNER_ON_USER_PERMISSIONS.addAll(PROFILE_OWNER_PERMISSIONS);
        PROFILE_OWNER_ON_USER_PERMISSIONS.addAll(ADDITIONAL_PROFILE_OWNER_ON_USER_PERMISSIONS);
        AFFILIATED_PROFILE_OWNER_ON_USER_PERMISSIONS.addAll(PROFILE_OWNER_ON_USER_PERMISSIONS);
        AFFILIATED_PROFILE_OWNER_ON_USER_PERMISSIONS.addAll(ADDITIONAL_AFFILIATED_PROFILE_OWNER_ON_USER_PERMISSIONS);
        DPC_PERMISSIONS.put(0, DEFAULT_DEVICE_OWNER_PERMISSIONS);
        DPC_PERMISSIONS.put(1, FINANCED_DEVICE_OWNER_PERMISSIONS);
        DPC_PERMISSIONS.put(2, PROFILE_OWNER_OF_ORGANIZATION_OWNED_DEVICE_PERMISSIONS);
        DPC_PERMISSIONS.put(3, PROFILE_OWNER_ON_USER_0_PERMISSIONS);
        DPC_PERMISSIONS.put(4, PROFILE_OWNER_PERMISSIONS);
        DPC_PERMISSIONS.put(5, PROFILE_OWNER_ON_USER_PERMISSIONS);
        DPC_PERMISSIONS.put(6, AFFILIATED_PROFILE_OWNER_ON_USER_PERMISSIONS);
        DELEGATE_SCOPES.put("android.permission.MANAGE_DEVICE_POLICY_APP_RESTRICTIONS", "delegation-app-restrictions");
        DELEGATE_SCOPES.put("android.permission.MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL", "delegation-block-uninstall");
        DELEGATE_SCOPES.put("android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", "delegation-cert-install");
        DELEGATE_SCOPES.put("android.permission.MANAGE_DEVICE_POLICY_PACKAGE_STATE", "delegation-package-access");
        DELEGATE_SCOPES.put("android.permission.MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS", "delegation-permission-grant");
        DELEGATE_SCOPES.put("android.permission.MANAGE_DEVICE_POLICY_SECURITY_LOGGING", "delegation-security-logging");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_FACTORY_RESET", null);
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_MTE", null);
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_SECURITY_LOGGING", null);
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_STATUS_BAR", null);
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_SYSTEM_UPDATES", null);
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING", null);
        CROSS_USER_PERMISSIONS.put("android.permission.SET_TIME", null);
        CROSS_USER_PERMISSIONS.put("android.permission.SET_TIME_ZONE", null);
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_INSTALL_UNKNOWN_SOURCES", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_KEYGUARD", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_SECURITY_CRITICAL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_AIRPLANE_MODE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_BLUETOOTH", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_CALLS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_CAMERA", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_DEFAULT_SMS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_INPUT_METHODS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_MICROPHONE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_MOBILE_NETWORK", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_NEARBY_COMMUNICATION", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_PHYSICAL_MEDIA", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_PACKAGE_STATE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_RESTRICT_PRIVATE_DNS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_SCREEN_CAPTURE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_SMS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_SAFE_BOOT", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_TIME", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_USB_FILE_TRANSFER", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_WIFI", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_WIPE_DATA", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_APP_RESTRICTIONS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_AUDIO_OUTPUT", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_AUTOFILL", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_CAMERA_TOGGLE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_DEBUGGING_FEATURES", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_DISPLAY", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_FUN", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_LOCALE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_LOCATION", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_LOCK", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_MODIFY_USERS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_MICROPHONE_TOGGLE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_PROFILES", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_PRINTING", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_RESET_PASSWORD", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_SCREEN_CONTENT", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_SYSTEM_DIALOGS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_VPN", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_WALLPAPER", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        CROSS_USER_PERMISSIONS.put("android.permission.MANAGE_DEVICE_POLICY_WINDOWS", "android.permission.MANAGE_DEVICE_POLICY_ACROSS_USERS_FULL");
        POLICY_IDENTIFIER_TO_PERMISSION.put("autoTimezone", "android.permission.SET_TIME_ZONE");
        android.app.admin.DevicePolicyManager.disableLocalCaches();
        this.mInjector = injector;
        this.mPathProvider = policyPathProvider;
        android.content.Context context = injector.mContext;
        java.util.Objects.requireNonNull(context);
        this.mContext = context;
        android.os.Looper myLooper = injector.getMyLooper();
        java.util.Objects.requireNonNull(myLooper);
        this.mHandler = new android.os.Handler(myLooper);
        this.mConstantsObserver = new com.android.server.devicepolicy.DevicePolicyManagerService.DevicePolicyConstantsObserver(this.mHandler);
        this.mConstantsObserver.register();
        this.mConstants = loadConstants();
        android.os.UserManager userManager = injector.getUserManager();
        java.util.Objects.requireNonNull(userManager);
        this.mUserManager = userManager;
        com.android.server.pm.UserManagerInternal userManagerInternal = injector.getUserManagerInternal();
        java.util.Objects.requireNonNull(userManagerInternal);
        this.mUserManagerInternal = userManagerInternal;
        android.app.usage.UsageStatsManagerInternal usageStatsManagerInternal = injector.getUsageStatsManagerInternal();
        java.util.Objects.requireNonNull(usageStatsManagerInternal);
        this.mUsageStatsManagerInternal = usageStatsManagerInternal;
        android.content.pm.IPackageManager iPackageManager = injector.getIPackageManager();
        java.util.Objects.requireNonNull(iPackageManager);
        this.mIPackageManager = iPackageManager;
        android.permission.IPermissionManager iPermissionManager = injector.getIPermissionManager();
        java.util.Objects.requireNonNull(iPermissionManager);
        this.mIPermissionManager = iPermissionManager;
        android.telephony.TelephonyManager telephonyManager = injector.getTelephonyManager();
        java.util.Objects.requireNonNull(telephonyManager);
        this.mTelephonyManager = telephonyManager;
        android.app.role.RoleManager roleManager = injector.getRoleManager();
        java.util.Objects.requireNonNull(roleManager);
        this.mRoleManager = roleManager;
        this.mLocalService = new com.android.server.devicepolicy.DevicePolicyManagerService.LocalService();
        this.mLockPatternUtils = injector.newLockPatternUtils();
        this.mLockSettingsInternal = injector.getLockSettingsInternal();
        this.mSecurityLogMonitor = new com.android.server.devicepolicy.SecurityLogMonitor(this, this.mHandler);
        this.mHasFeature = this.mInjector.hasFeature();
        this.mIsWatch = this.mInjector.getPackageManager().hasSystemFeature("android.hardware.type.watch");
        this.mHasTelephonyFeature = this.mInjector.getPackageManager().hasSystemFeature("android.hardware.telephony");
        this.mIsAutomotive = this.mInjector.getPackageManager().hasSystemFeature("android.hardware.type.automotive");
        this.mBackgroundHandler = com.android.internal.os.BackgroundThread.getHandler();
        this.mCertificateMonitor = new com.android.server.devicepolicy.CertificateMonitor(this, this.mInjector, this.mBackgroundHandler);
        this.mDeviceAdminServiceController = new com.android.server.devicepolicy.DeviceAdminServiceController(this, this.mConstants);
        this.mOverlayPackagesProvider = new com.android.server.devicepolicy.OverlayPackagesProvider(this.mContext);
        this.mTransferOwnershipMetadataManager = this.mInjector.newTransferOwnershipMetadataManager();
        this.mBugreportCollectionManager = new com.android.server.devicepolicy.RemoteBugreportManager(this, this.mInjector);
        this.mDeviceManagementResourcesProvider = this.mInjector.getDeviceManagementResourcesProvider();
        this.mDevicePolicyManagementRoleObserver = new com.android.server.devicepolicy.DevicePolicyManagerService.DevicePolicyManagementRoleObserver(this.mContext);
        this.mDevicePolicyManagementRoleObserver.register();
        com.android.server.LocalServices.addService(android.app.admin.DevicePolicyManagerLiteInternal.class, this.mLocalService);
        if (this.mHasFeature) {
            performPolicyVersionUpgrade();
        }
        this.mUserData = new android.util.SparseArray<>();
        this.mOwners = makeOwners(injector, policyPathProvider);
        this.mDevicePolicyEngine = new com.android.server.devicepolicy.DevicePolicyEngine(this.mContext, this.mDeviceAdminServiceController, getLockObject());
        if (!this.mHasFeature) {
            this.mSetupContentObserver = null;
            this.mContactSystemRoleHolders = java.util.Collections.emptySet();
            return;
        }
        loadOwners();
        android.content.IntentFilter intentFilter = new android.content.IntentFilter();
        intentFilter.addAction("android.intent.action.BOOT_COMPLETED");
        intentFilter.addAction(ACTION_EXPIRED_PASSWORD_NOTIFICATION);
        intentFilter.addAction(ACTION_TURN_PROFILE_ON_NOTIFICATION);
        intentFilter.addAction(ACTION_PROFILE_OFF_DEADLINE);
        intentFilter.addAction("android.intent.action.USER_ADDED");
        intentFilter.addAction("android.intent.action.USER_REMOVED");
        intentFilter.addAction("android.intent.action.USER_STARTED");
        intentFilter.addAction("android.intent.action.USER_STOPPED");
        intentFilter.addAction("android.intent.action.USER_SWITCHED");
        intentFilter.addAction("android.intent.action.USER_UNLOCKED");
        intentFilter.addAction("android.accounts.LOGIN_ACCOUNTS_CHANGED");
        intentFilter.addAction("android.intent.action.MANAGED_PROFILE_UNAVAILABLE");
        intentFilter.addAction("android.intent.action.MANAGED_PROFILE_AVAILABLE");
        intentFilter.setPriority(1000);
        this.mContext.registerReceiverAsUser(this.mReceiver, android.os.UserHandle.ALL, intentFilter, null, this.mHandler);
        android.content.IntentFilter intentFilter2 = new android.content.IntentFilter();
        intentFilter2.addAction("android.intent.action.PACKAGE_CHANGED");
        intentFilter2.addAction("android.intent.action.PACKAGE_REMOVED");
        intentFilter2.addAction("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE");
        intentFilter2.addAction("android.intent.action.PACKAGE_ADDED");
        intentFilter2.addDataScheme(com.android.server.pm.Settings.ATTR_PACKAGE);
        this.mContext.registerReceiverAsUser(this.mReceiver, android.os.UserHandle.ALL, intentFilter2, null, this.mHandler);
        android.content.IntentFilter intentFilter3 = new android.content.IntentFilter();
        intentFilter3.addAction("android.intent.action.MANAGED_PROFILE_ADDED");
        intentFilter3.addAction("android.intent.action.TIME_SET");
        intentFilter3.addAction("android.intent.action.DATE_CHANGED");
        this.mContext.registerReceiverAsUser(this.mReceiver, android.os.UserHandle.ALL, intentFilter3, null, this.mHandler);
        com.android.server.LocalServices.addService(android.app.admin.DevicePolicyManagerInternal.class, this.mLocalService);
        this.mSetupContentObserver = new com.android.server.devicepolicy.DevicePolicyManagerService.SetupContentObserver(this.mHandler);
        this.mUserManagerInternal.addUserRestrictionsListener(new com.android.server.devicepolicy.DevicePolicyManagerService.RestrictionsListener(this.mContext, this.mUserManagerInternal, this));
        this.mUserManagerInternal.addUserLifecycleListener(new com.android.server.devicepolicy.DevicePolicyManagerService.UserLifecycleListener());
        this.mDeviceManagementResourcesProvider.load();
        this.mDevicePolicyEngine.load();
        this.mContactSystemRoleHolders = fetchOemSystemHolders(android.R.string.config_defaultSms, android.R.string.config_defaultDialer, android.R.string.config_systemContacts);
        invalidateBinderCaches();
    }

    @android.annotation.NonNull
    private java.util.Set<java.lang.String> fetchOemSystemHolders(int... iArr) {
        android.util.ArraySet arraySet = new android.util.ArraySet();
        for (int i : iArr) {
            java.lang.String defaultRoleHolderPackageName = getDefaultRoleHolderPackageName(i);
            if (defaultRoleHolderPackageName != null) {
                arraySet.add(defaultRoleHolderPackageName);
            }
        }
        return java.util.Collections.unmodifiableSet(arraySet);
    }

    @android.annotation.Nullable
    private java.lang.String getDefaultRoleHolderPackageName(int i) {
        java.lang.String string = this.mContext.getString(i);
        if (android.text.TextUtils.isEmpty(string)) {
            return null;
        }
        if (string.contains(":")) {
            return string.split(":")[0];
        }
        return string;
    }

    private void unsuspendAppsForQuietProfiles() {
        android.content.pm.PackageManagerInternal packageManagerInternal = this.mInjector.getPackageManagerInternal();
        for (android.content.pm.UserInfo userInfo : this.mUserManagerInternal.getUsers(true)) {
            if (userInfo.isManagedProfile() && userInfo.isQuietModeEnabled()) {
                int i = userInfo.id;
                final java.util.Set<java.lang.String> packagesSuspendedByAdmin = getPackagesSuspendedByAdmin(i);
                java.lang.String[] strArr = (java.lang.String[]) this.mInjector.getPackageManager(i).getInstalledPackages(android.content.pm.PackageManager.PackageInfoFlags.of(786432L)).stream().map(new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda78
                    @Override // java.util.function.Function
                    public final java.lang.Object apply(java.lang.Object obj) {
                        java.lang.String str;
                        str = ((android.content.pm.PackageInfo) obj).packageName;
                        return str;
                    }
                }).filter(new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda79
                    @Override // java.util.function.Predicate
                    public final boolean test(java.lang.Object obj) {
                        boolean lambda$unsuspendAppsForQuietProfiles$3;
                        lambda$unsuspendAppsForQuietProfiles$3 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$unsuspendAppsForQuietProfiles$3(packagesSuspendedByAdmin, (java.lang.String) obj);
                        return lambda$unsuspendAppsForQuietProfiles$3;
                    }
                }).toArray(new java.util.function.IntFunction() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda80
                    @Override // java.util.function.IntFunction
                    public final java.lang.Object apply(int i2) {
                        java.lang.String[] lambda$unsuspendAppsForQuietProfiles$4;
                        lambda$unsuspendAppsForQuietProfiles$4 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$unsuspendAppsForQuietProfiles$4(i2);
                        return lambda$unsuspendAppsForQuietProfiles$4;
                    }
                });
                com.android.server.utils.Slogf.i(LOG_TAG, "Unsuspending work apps for user %d", java.lang.Integer.valueOf(i));
                packageManagerInternal.setPackagesSuspendedByAdmin(i, strArr, false);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$unsuspendAppsForQuietProfiles$3(java.util.Set set, java.lang.String str) {
        return !set.contains(str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.String[] lambda$unsuspendAppsForQuietProfiles$4(int i) {
        return new java.lang.String[i];
    }

    private com.android.server.devicepolicy.Owners makeOwners(com.android.server.devicepolicy.DevicePolicyManagerService.Injector injector, com.android.server.devicepolicy.PolicyPathProvider policyPathProvider) {
        return new com.android.server.devicepolicy.Owners(injector.getUserManager(), injector.getUserManagerInternal(), injector.getPackageManagerInternal(), injector.getActivityTaskManagerInternal(), injector.getActivityManagerInternal(), this.mStateCache, policyPathProvider);
    }

    static void invalidateBinderCaches() {
        android.app.admin.DevicePolicyManager.invalidateBinderCaches();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @android.annotation.NonNull
    /* renamed from: getUserData, reason: merged with bridge method [inline-methods] */
    public com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5(int i) {
        com.android.server.devicepolicy.DevicePolicyData devicePolicyData;
        synchronized (getLockObject()) {
            try {
                devicePolicyData = this.mUserData.get(i);
                if (devicePolicyData == null) {
                    devicePolicyData = new com.android.server.devicepolicy.DevicePolicyData(i);
                    this.mUserData.append(i, devicePolicyData);
                    loadSettingsLocked(devicePolicyData, i);
                    if (i == 0) {
                        this.mStateCache.setDeviceProvisioned(devicePolicyData.mUserSetupComplete);
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return devicePolicyData;
    }

    com.android.server.devicepolicy.DevicePolicyData getUserDataUnchecked(final int i) {
        return (com.android.server.devicepolicy.DevicePolicyData) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda85
            public final java.lang.Object getOrThrow() {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5;
                lambda$getUserDataUnchecked$5 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getUserDataUnchecked$5(i);
                return lambda$getUserDataUnchecked$5;
            }
        });
    }

    void removeUserData(int i) {
        synchronized (getLockObject()) {
            try {
                if (i == 0) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Tried to remove device policy file for user 0! Ignoring.");
                    return;
                }
                updatePasswordQualityCacheForUserGroup(i);
                this.mPolicyCache.onUserRemoved(i);
                if (isManagedProfile(i)) {
                    clearManagedProfileApnUnchecked();
                }
                boolean isProfileOwnerOfOrganizationOwnedDevice = this.mOwners.isProfileOwnerOfOrganizationOwnedDevice(i);
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(i);
                if (profileOwnerLocked != null) {
                    profileOwnerLocked.userRestrictions = null;
                    com.android.server.devicepolicy.ActiveAdmin parentActiveAdmin = profileOwnerLocked.getParentActiveAdmin();
                    if (parentActiveAdmin != null) {
                        parentActiveAdmin.userRestrictions = null;
                    }
                }
                this.mOwners.removeProfileOwner(i);
                this.mOwners.writeProfileOwner(i);
                if (this.mUserData.get(i) != null) {
                    this.mUserData.remove(i);
                }
                java.io.File file = new java.io.File(this.mPathProvider.getUserSystemDirectory(i), DEVICE_POLICIES_XML);
                file.delete();
                com.android.server.utils.Slogf.i(LOG_TAG, "Removed device policy file " + file.getAbsolutePath());
                if (isProfileOwnerOfOrganizationOwnedDevice) {
                    android.content.pm.UserInfo primaryUser = this.mUserManager.getPrimaryUser();
                    if (primaryUser != null) {
                        clearOrgOwnedProfileOwnerDeviceWidePolicies(primaryUser.id);
                    } else {
                        com.android.server.utils.Slogf.wtf(LOG_TAG, "Was unable to get primary user.");
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    void loadOwners() {
        synchronized (getLockObject()) {
            try {
                this.mOwners.load();
                setDeviceOwnershipSystemPropertyLocked();
                if (this.mOwners.hasDeviceOwner()) {
                    setGlobalSettingDeviceOwnerType(this.mOwners.getDeviceOwnerType(this.mOwners.getDeviceOwnerPackageName()));
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private com.android.server.devicepolicy.CallerIdentity getCallerIdentity() {
        return getCallerIdentity(null, null);
    }

    private com.android.server.devicepolicy.CallerIdentity getCallerIdentity(@android.annotation.Nullable java.lang.String str) {
        return getCallerIdentity(null, str);
    }

    @com.android.internal.annotations.VisibleForTesting
    com.android.server.devicepolicy.CallerIdentity getCallerIdentity(@android.annotation.Nullable android.content.ComponentName componentName) {
        return getCallerIdentity(componentName, null);
    }

    @com.android.internal.annotations.VisibleForTesting
    com.android.server.devicepolicy.CallerIdentity getCallerIdentity(@android.annotation.Nullable android.content.ComponentName componentName, @android.annotation.Nullable java.lang.String str) {
        int binderGetCallingUid = this.mInjector.binderGetCallingUid();
        if (str != null && !isCallingFromPackage(str, binderGetCallingUid)) {
            throw new java.lang.SecurityException(java.lang.String.format("Caller with uid %d is not %s", java.lang.Integer.valueOf(binderGetCallingUid), str));
        }
        if (componentName != null) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5(android.os.UserHandle.getUserId(binderGetCallingUid)).mAdminMap.get(componentName);
            if (activeAdmin == null || activeAdmin.getUid() != binderGetCallingUid) {
                throw new java.lang.SecurityException(java.lang.String.format("Admin %s does not exist or is not owned by uid %d", componentName, java.lang.Integer.valueOf(binderGetCallingUid)));
            }
            if (str != null) {
                com.android.internal.util.Preconditions.checkArgument(str.equals(componentName.getPackageName()));
            } else {
                str = componentName.getPackageName();
            }
        }
        return new com.android.server.devicepolicy.CallerIdentity(binderGetCallingUid, str, componentName);
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void migrateToProfileOnOrganizationOwnedDeviceIfCompLocked() {
        int deviceOwnerUserId = this.mOwners.getDeviceOwnerUserId();
        if (deviceOwnerUserId == -10000) {
            return;
        }
        java.util.List profiles = this.mUserManager.getProfiles(deviceOwnerUserId);
        if (profiles.size() != 2) {
            if (profiles.size() != 1) {
                com.android.server.utils.Slogf.wtf(LOG_TAG, "Found " + profiles.size() + " profiles, skipping migration");
                return;
            }
            return;
        }
        int managedUserId = getManagedUserId(deviceOwnerUserId);
        if (managedUserId < 0) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Found DO and a profile, but it is not managed, skipping migration");
            return;
        }
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
        com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(managedUserId);
        if (deviceOwnerAdminLocked == null || profileOwnerAdminLocked == null) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Failed to get either PO or DO admin, aborting migration.");
            return;
        }
        android.content.ComponentName deviceOwnerComponent = this.mOwners.getDeviceOwnerComponent();
        android.content.ComponentName profileOwnerComponent = this.mOwners.getProfileOwnerComponent(managedUserId);
        if (deviceOwnerComponent == null || profileOwnerComponent == null) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Cannot find PO or DO component name, aborting migration.");
            return;
        }
        if (!deviceOwnerComponent.getPackageName().equals(profileOwnerComponent.getPackageName())) {
            com.android.server.utils.Slogf.e(LOG_TAG, "DO and PO are different packages, aborting migration.");
            return;
        }
        com.android.server.utils.Slogf.i(LOG_TAG, "Migrating COMP to PO on a corp owned device; primary user: %d; profile: %d", java.lang.Integer.valueOf(deviceOwnerUserId), java.lang.Integer.valueOf(managedUserId));
        com.android.server.utils.Slogf.i(LOG_TAG, "Giving the PO additional power...");
        setProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked(profileOwnerComponent, managedUserId, true);
        com.android.server.utils.Slogf.i(LOG_TAG, "Migrating DO policies to PO...");
        moveDoPoliciesToProfileParentAdminLocked(deviceOwnerAdminLocked, profileOwnerAdminLocked.getParentActiveAdmin());
        migratePersonalAppSuspensionLocked(deviceOwnerUserId, managedUserId, profileOwnerAdminLocked);
        saveSettingsLocked(managedUserId);
        com.android.server.utils.Slogf.i(LOG_TAG, "Clearing the DO...");
        android.content.ComponentName component = deviceOwnerAdminLocked.info.getComponent();
        clearDeviceOwnerLocked(deviceOwnerAdminLocked, deviceOwnerUserId);
        com.android.server.utils.Slogf.i(LOG_TAG, "Removing admin artifacts...");
        removeAdminArtifacts(component, deviceOwnerUserId);
        com.android.server.utils.Slogf.i(LOG_TAG, "Uninstalling the DO...");
        uninstallOrDisablePackage(deviceOwnerComponent.getPackageName(), deviceOwnerUserId);
        com.android.server.utils.Slogf.i(LOG_TAG, "Migration complete.");
        android.app.admin.DevicePolicyEventLogger.createEvent(137).setAdmin(profileOwnerComponent).write();
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void migratePersonalAppSuspensionLocked(int i, int i2, com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        android.content.pm.PackageManagerInternal packageManagerInternal = this.mInjector.getPackageManagerInternal();
        if (!packageManagerInternal.isAdminSuspendingAnyPackages(i)) {
            com.android.server.utils.Slogf.i(LOG_TAG, "DO is not suspending any apps.");
            return;
        }
        if (getTargetSdk(activeAdmin.info.getPackageName(), i2) >= 30) {
            com.android.server.utils.Slogf.i(LOG_TAG, "PO is targeting R+, keeping personal apps suspended.");
            lambda$getUserDataUnchecked$5(i).mAppsSuspended = true;
            activeAdmin.mSuspendPersonalApps = true;
        } else {
            com.android.server.utils.Slogf.i(LOG_TAG, "PO isn't targeting R+, unsuspending personal apps.");
            packageManagerInternal.unsuspendAdminSuspendedPackages(i);
        }
    }

    private void uninstallOrDisablePackage(final java.lang.String str, final int i) {
        try {
            android.content.pm.ApplicationInfo applicationInfo = this.mIPackageManager.getApplicationInfo(str, 786432L, i);
            if (applicationInfo == null) {
                com.android.server.utils.Slogf.wtf(LOG_TAG, "Failed to get package info for " + str);
                return;
            }
            if ((applicationInfo.flags & 1) != 0) {
                com.android.server.utils.Slogf.i(LOG_TAG, "Package %s is pre-installed, marking disabled until used", str);
                this.mContext.getPackageManager().setApplicationEnabledSetting(str, 4, 0);
            } else {
                this.mInjector.getPackageManager(i).getPackageInstaller().uninstall(str, 0, new android.content.IntentSender(new android.content.IIntentSender.Stub() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.3
                    public void send(int i2, android.content.Intent intent, java.lang.String str2, android.os.IBinder iBinder, android.content.IIntentReceiver iIntentReceiver, java.lang.String str3, android.os.Bundle bundle) {
                        int intExtra = intent.getIntExtra("android.content.pm.extra.STATUS", 1);
                        if (intExtra == 0) {
                            com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Package %s uninstalled for user %d", str, java.lang.Integer.valueOf(i));
                        } else {
                            com.android.server.utils.Slogf.e(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Failed to uninstall %s; status: %d", str, java.lang.Integer.valueOf(intExtra));
                        }
                    }
                }));
            }
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Error getting application info", e);
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void moveDoPoliciesToProfileParentAdminLocked(com.android.server.devicepolicy.ActiveAdmin activeAdmin, com.android.server.devicepolicy.ActiveAdmin activeAdmin2) {
        if (activeAdmin2.mPasswordPolicy.quality == 0) {
            activeAdmin2.mPasswordPolicy = activeAdmin.mPasswordPolicy;
        }
        if (activeAdmin2.passwordHistoryLength == 0) {
            activeAdmin2.passwordHistoryLength = activeAdmin.passwordHistoryLength;
        }
        if (activeAdmin2.passwordExpirationTimeout == 0) {
            activeAdmin2.passwordExpirationTimeout = activeAdmin.passwordExpirationTimeout;
        }
        if (activeAdmin2.maximumFailedPasswordsForWipe == 0) {
            activeAdmin2.maximumFailedPasswordsForWipe = activeAdmin.maximumFailedPasswordsForWipe;
        }
        if (activeAdmin2.maximumTimeToUnlock == 0) {
            activeAdmin2.maximumTimeToUnlock = activeAdmin.maximumTimeToUnlock;
        }
        if (activeAdmin2.strongAuthUnlockTimeout == 259200000) {
            activeAdmin2.strongAuthUnlockTimeout = activeAdmin.strongAuthUnlockTimeout;
        }
        activeAdmin2.disabledKeyguardFeatures |= activeAdmin.disabledKeyguardFeatures & com.android.server.am.ProcessList.CACHED_APP_LMK_FIRST_ADJ;
        activeAdmin2.trustAgentInfos.putAll((android.util.ArrayMap<? extends java.lang.String, ? extends com.android.server.devicepolicy.ActiveAdmin.TrustAgentInfo>) activeAdmin.trustAgentInfos);
        activeAdmin2.disableCamera = activeAdmin.disableCamera;
        activeAdmin2.disableScreenCapture = activeAdmin.disableScreenCapture;
        activeAdmin2.accountTypesWithManagementDisabled.addAll(activeAdmin.accountTypesWithManagementDisabled);
        moveDoUserRestrictionsToCopeParent(activeAdmin, activeAdmin2);
        if (activeAdmin.requireAutoTime) {
            activeAdmin2.ensureUserRestrictions().putBoolean("no_config_date_time", true);
        }
    }

    private void moveDoUserRestrictionsToCopeParent(com.android.server.devicepolicy.ActiveAdmin activeAdmin, com.android.server.devicepolicy.ActiveAdmin activeAdmin2) {
        if (activeAdmin.userRestrictions == null) {
            return;
        }
        for (java.lang.String str : activeAdmin.userRestrictions.keySet()) {
            if (com.android.server.pm.UserRestrictionsUtils.canParentOfProfileOwnerOfOrganizationOwnedDeviceChange(str)) {
                activeAdmin2.ensureUserRestrictions().putBoolean(str, activeAdmin.userRestrictions.getBoolean(str));
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void applyProfileRestrictionsIfDeviceOwnerLocked() {
        if (this.mOwners.getDeviceOwnerUserId() == -10000) {
            return;
        }
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            android.os.UserHandle userHandle = ((android.content.pm.UserInfo) it.next()).getUserHandle();
            if (!this.mUserManager.hasUserRestriction("no_add_clone_profile", userHandle)) {
                this.mUserManager.setUserRestriction("no_add_clone_profile", true, userHandle);
            }
            if (!this.mUserManager.hasUserRestriction("no_add_private_profile", userHandle)) {
                this.mUserManager.setUserRestriction("no_add_private_profile", true, userHandle);
            }
            if (!this.mUserManager.hasUserRestriction("no_add_managed_profile", userHandle)) {
                this.mUserManager.setUserRestriction("no_add_managed_profile", true, userHandle);
            }
        }
    }

    private void maybeSetDefaultProfileOwnerUserRestrictions() {
        synchronized (getLockObject()) {
            try {
                java.util.Iterator<java.lang.Integer> it = this.mOwners.getProfileOwnerKeys().iterator();
                while (it.hasNext()) {
                    int intValue = it.next().intValue();
                    com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(intValue);
                    if (profileOwnerAdminLocked != null && this.mUserManager.isManagedProfile(intValue)) {
                        maybeSetDefaultRestrictionsForAdminLocked(intValue, profileOwnerAdminLocked);
                        ensureUnknownSourcesRestrictionForProfileOwnerLocked(intValue, profileOwnerAdminLocked, false);
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void ensureUnknownSourcesRestrictionForProfileOwnerLocked(int i, com.android.server.devicepolicy.ActiveAdmin activeAdmin, boolean z) {
        if (z || this.mInjector.settingsSecureGetIntForUser("unknown_sources_default_reversed", 0, i) != 0) {
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction("no_install_unknown_sources"), com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(activeAdmin.info.getComponent(), activeAdmin.getUserHandle().getIdentifier()), new android.app.admin.BooleanPolicyValue(true), i);
            this.mInjector.settingsSecurePutIntForUser("unknown_sources_default_reversed", 0, i);
        }
    }

    private void maybeSetDefaultRestrictionsForAdminLocked(int i, com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        java.util.Set<java.lang.String> defaultEnabledForManagedProfiles = com.android.server.pm.UserRestrictionsUtils.getDefaultEnabledForManagedProfiles();
        if (defaultEnabledForManagedProfiles.equals(activeAdmin.defaultEnabledRestrictionsAlreadySet)) {
            return;
        }
        java.util.Iterator<java.lang.String> it = defaultEnabledForManagedProfiles.iterator();
        while (it.hasNext()) {
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction(it.next()), com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(activeAdmin.info.getComponent(), activeAdmin.getUserHandle().getIdentifier()), new android.app.admin.BooleanPolicyValue(true), i);
        }
        activeAdmin.defaultEnabledRestrictionsAlreadySet.addAll(defaultEnabledForManagedProfiles);
        com.android.server.utils.Slogf.i(LOG_TAG, "Enabled the following restrictions by default: " + defaultEnabledForManagedProfiles);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setDeviceOwnershipSystemPropertyLocked() {
        boolean z = this.mInjector.settingsGlobalGetInt("device_provisioned", 0) != 0;
        boolean hasDeviceOwner = this.mOwners.hasDeviceOwner();
        boolean isOrganizationOwnedDeviceWithManagedProfile = isOrganizationOwnedDeviceWithManagedProfile();
        if (!hasDeviceOwner && !isOrganizationOwnedDeviceWithManagedProfile && !z) {
            return;
        }
        java.lang.String bool = java.lang.Boolean.toString(hasDeviceOwner || isOrganizationOwnedDeviceWithManagedProfile);
        java.lang.String systemPropertiesGet = this.mInjector.systemPropertiesGet(PROPERTY_ORGANIZATION_OWNED, null);
        if (android.text.TextUtils.isEmpty(systemPropertiesGet)) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Set ro.organization_owned property to " + bool);
            this.mInjector.systemPropertiesSet(PROPERTY_ORGANIZATION_OWNED, bool);
            return;
        }
        if (!bool.equals(systemPropertiesGet)) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Cannot change existing ro.organization_owned to " + bool);
        }
    }

    private void maybeStartSecurityLogMonitorOnActivityManagerReady() {
        if (!this.mInjector.securityLogIsLoggingEnabled()) {
            return;
        }
        if (android.app.admin.flags.Flags.securityLogV2Enabled()) {
            setLoggingConfiguration(java.lang.Boolean.TRUE.equals(this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.SECURITY_LOGGING, -1)), java.lang.Boolean.TRUE.equals(this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.AUDIT_LOGGING, -1)));
            return;
        }
        synchronized (getLockObject()) {
            this.mSecurityLogMonitor.start(getSecurityLoggingEnabledUser());
            this.mInjector.runCryptoSelfTest();
            maybePauseDeviceWideLoggingLocked();
        }
    }

    private void fixupAutoTimeRestrictionDuringOrganizationOwnedDeviceMigration() {
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            int i = ((android.content.pm.UserInfo) it.next()).id;
            if (isProfileOwnerOfOrganizationOwnedDevice(i) && (activeAdmin = getProfileOwnerAdminLocked(i).parentAdmin) != null && activeAdmin.requireAutoTime) {
                activeAdmin.requireAutoTime = false;
                saveSettingsLocked(i);
                this.mUserManagerInternal.setDevicePolicyUserRestrictions(0, new android.os.Bundle(), new com.android.server.pm.RestrictionsSet(), false);
                activeAdmin.ensureUserRestrictions().putBoolean("no_config_date_time", true);
            }
        }
    }

    private void setExpirationAlarmCheckLocked(final android.content.Context context, final int i, final boolean z) {
        final long j;
        long passwordExpirationLocked = getPasswordExpirationLocked(null, i, z);
        long currentTimeMillis = java.lang.System.currentTimeMillis();
        long j2 = passwordExpirationLocked - currentTimeMillis;
        if (passwordExpirationLocked == 0) {
            j = 0;
        } else if (j2 <= 0) {
            j = currentTimeMillis + MS_PER_DAY;
        } else {
            long j3 = j2 % MS_PER_DAY;
            if (j3 == 0) {
                j3 = MS_PER_DAY;
            }
            j = currentTimeMillis + j3;
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda129
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setExpirationAlarmCheckLocked$6(z, i, context, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setExpirationAlarmCheckLocked$6(boolean z, int i, android.content.Context context, long j) throws java.lang.Exception {
        if (z) {
            i = getProfileParentId(i);
        }
        android.app.AlarmManager alarmManager = this.mInjector.getAlarmManager();
        android.app.PendingIntent broadcastAsUser = android.app.PendingIntent.getBroadcastAsUser(context, REQUEST_EXPIRE_PASSWORD, new android.content.Intent(ACTION_EXPIRED_PASSWORD_NOTIFICATION), 1275068416, android.os.UserHandle.of(i));
        alarmManager.cancel(broadcastAsUser);
        if (j != 0) {
            alarmManager.set(1, j, broadcastAsUser);
        }
    }

    com.android.server.devicepolicy.ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName componentName, int i) {
        ensureLocked();
        com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5(i).mAdminMap.get(componentName);
        if (activeAdmin != null && componentName.getPackageName().equals(activeAdmin.info.getActivityInfo().packageName) && componentName.getClassName().equals(activeAdmin.info.getActivityInfo().name)) {
            return activeAdmin;
        }
        return null;
    }

    com.android.server.devicepolicy.ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName componentName, int i, boolean z) {
        ensureLocked();
        if (z) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isManagedProfile(i), "You can not call APIs on the parent profile outside a managed profile, userId = %d", new java.lang.Object[]{java.lang.Integer.valueOf(i)});
        }
        com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
        if (activeAdminUncheckedLocked != null && z) {
            return activeAdminUncheckedLocked.getParentActiveAdmin();
        }
        return activeAdminUncheckedLocked;
    }

    com.android.server.devicepolicy.ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName componentName, int i) throws java.lang.SecurityException {
        return getActiveAdminOrCheckPermissionForCallerLocked(componentName, i, null);
    }

    com.android.server.devicepolicy.ActiveAdmin getDeviceOwnerLocked(int i) {
        ensureLocked();
        return lambda$getUserDataUnchecked$5(i).mAdminMap.get(this.mOwners.getDeviceOwnerComponent());
    }

    com.android.server.devicepolicy.ActiveAdmin getDefaultDeviceOwnerLocked(int i) {
        ensureLocked();
        android.content.ComponentName deviceOwnerComponent = this.mOwners.getDeviceOwnerComponent();
        if (this.mOwners.getDeviceOwnerType(deviceOwnerComponent.getPackageName()) == 0) {
            return lambda$getUserDataUnchecked$5(i).mAdminMap.get(deviceOwnerComponent);
        }
        return null;
    }

    com.android.server.devicepolicy.ActiveAdmin getProfileOwnerLocked(int i) {
        ensureLocked();
        return lambda$getUserDataUnchecked$5(i).mAdminMap.get(this.mOwners.getProfileOwnerComponent(i));
    }

    @android.annotation.NonNull
    com.android.server.devicepolicy.ActiveAdmin getOrganizationOwnedProfileOwnerLocked(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        com.android.internal.util.Preconditions.checkCallAuthorization(this.mOwners.isProfileOwnerOfOrganizationOwnedDevice(callerIdentity.getUserId()), "Caller %s is not an admin of an org-owned device", new java.lang.Object[]{callerIdentity.getComponentName()});
        return getProfileOwnerLocked(callerIdentity.getUserId());
    }

    com.android.server.devicepolicy.ActiveAdmin getProfileOwnerOrDeviceOwnerLocked(int i) {
        ensureLocked();
        if (this.mOwners.getProfileOwnerComponent(i) != null) {
            return getProfileOwnerLocked(i);
        }
        return getDeviceOwnerLocked(i);
    }

    com.android.server.devicepolicy.ActiveAdmin getProfileOwnerOrDefaultDeviceOwnerLocked(int i) {
        ensureLocked();
        if (this.mOwners.getProfileOwnerComponent(i) != null) {
            return getProfileOwnerLocked(i);
        }
        return getDefaultDeviceOwnerLocked(i);
    }

    @android.annotation.NonNull
    com.android.server.devicepolicy.ActiveAdmin getParentOfAdminIfRequired(com.android.server.devicepolicy.ActiveAdmin activeAdmin, boolean z) {
        java.util.Objects.requireNonNull(activeAdmin);
        return z ? activeAdmin.getParentActiveAdmin() : activeAdmin;
    }

    @android.annotation.Nullable
    com.android.server.devicepolicy.ActiveAdmin getActiveAdminOrCheckPermissionForCallerLocked(android.content.ComponentName componentName, int i, @android.annotation.Nullable java.lang.String str) throws java.lang.SecurityException {
        return getActiveAdminOrCheckPermissionsForCallerLocked(componentName, i, str == null ? java.util.Set.of() : java.util.Set.of(str));
    }

    @android.annotation.Nullable
    com.android.server.devicepolicy.ActiveAdmin getActiveAdminOrCheckPermissionsForCallerLocked(android.content.ComponentName componentName, int i, java.util.Set<java.lang.String> set) throws java.lang.SecurityException {
        java.lang.String str;
        ensureLocked();
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.server.devicepolicy.ActiveAdmin activeAdminWithPolicyForUidLocked = getActiveAdminWithPolicyForUidLocked(componentName, i, callerIdentity.getUid());
        if (activeAdminWithPolicyForUidLocked != null) {
            return activeAdminWithPolicyForUidLocked;
        }
        java.util.Iterator<java.lang.String> it = set.iterator();
        while (it.hasNext()) {
            if (hasCallingPermission(it.next())) {
                return null;
            }
        }
        if (componentName != null) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mAdminMap.get(componentName);
            boolean isDeviceOwner = isDeviceOwner(activeAdmin.info.getComponent(), callerIdentity.getUserId());
            boolean isProfileOwner = isProfileOwner(activeAdmin.info.getComponent(), callerIdentity.getUserId());
            if (DA_DISALLOWED_POLICIES.contains(java.lang.Integer.valueOf(i)) && !isDeviceOwner && !isProfileOwner) {
                throw new java.lang.SecurityException("Admin " + activeAdmin.info.getComponent() + " is not a device owner or profile owner, so may not use policy: " + activeAdmin.info.getTagForPolicy(i));
            }
            throw new java.lang.SecurityException("Admin " + activeAdmin.info.getComponent() + " did not specify uses-policy for: " + activeAdmin.info.getTagForPolicy(i));
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        sb.append("No active admin owned by uid ");
        sb.append(callerIdentity.getUid());
        sb.append(" for policy #");
        sb.append(i);
        if (set.isEmpty()) {
            str = "";
        } else {
            str = ", which doesn't have " + set;
        }
        sb.append(str);
        throw new java.lang.SecurityException(sb.toString());
    }

    com.android.server.devicepolicy.ActiveAdmin getActiveAdminForCallerLocked(@android.annotation.Nullable android.content.ComponentName componentName, int i, boolean z) throws java.lang.SecurityException {
        return getActiveAdminOrCheckPermissionForCallerLocked(componentName, i, z, null);
    }

    @android.annotation.Nullable
    com.android.server.devicepolicy.ActiveAdmin getActiveAdminOrCheckPermissionForCallerLocked(@android.annotation.Nullable android.content.ComponentName componentName, int i, boolean z, @android.annotation.Nullable java.lang.String str) throws java.lang.SecurityException {
        return getActiveAdminOrCheckPermissionsForCallerLocked(componentName, i, z, str == null ? java.util.Set.of() : java.util.Set.of(str));
    }

    @android.annotation.Nullable
    com.android.server.devicepolicy.ActiveAdmin getActiveAdminOrCheckPermissionsForCallerLocked(@android.annotation.Nullable android.content.ComponentName componentName, int i, boolean z, java.util.Set<java.lang.String> set) throws java.lang.SecurityException {
        ensureLocked();
        if (z) {
            com.android.internal.util.Preconditions.checkCallingUser(isManagedProfile(getCallerIdentity().getUserId()));
        }
        com.android.server.devicepolicy.ActiveAdmin activeAdminOrCheckPermissionsForCallerLocked = getActiveAdminOrCheckPermissionsForCallerLocked(componentName, i, set);
        return z ? activeAdminOrCheckPermissionsForCallerLocked.getParentActiveAdmin() : activeAdminOrCheckPermissionsForCallerLocked;
    }

    private com.android.server.devicepolicy.ActiveAdmin getActiveAdminForUidLocked(android.content.ComponentName componentName, int i) {
        ensureLocked();
        com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5(android.os.UserHandle.getUserId(i)).mAdminMap.get(componentName);
        if (activeAdmin == null) {
            throw new java.lang.SecurityException("No active admin " + componentName + " for UID " + i);
        }
        if (activeAdmin.getUid() != i) {
            throw new java.lang.SecurityException("Admin " + componentName + " is not owned by uid " + i);
        }
        return activeAdmin;
    }

    @android.annotation.Nullable
    private com.android.server.devicepolicy.ActiveAdmin getActiveAdminWithPolicyForUidLocked(android.content.ComponentName componentName, int i, int i2) {
        ensureLocked();
        int userId = android.os.UserHandle.getUserId(i2);
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
        if (componentName != null) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5.mAdminMap.get(componentName);
            if (activeAdmin == null || activeAdmin.getUid() != i2) {
                throw new java.lang.SecurityException("Admin " + componentName + " is not active or not owned by uid " + i2);
            }
            if (isActiveAdminWithPolicyForUserLocked(activeAdmin, i, userId)) {
                return activeAdmin;
            }
            return null;
        }
        java.util.Iterator<com.android.server.devicepolicy.ActiveAdmin> it = lambda$getUserDataUnchecked$5.mAdminList.iterator();
        while (it.hasNext()) {
            com.android.server.devicepolicy.ActiveAdmin next = it.next();
            if (next.getUid() == i2 && isActiveAdminWithPolicyForUserLocked(next, i, userId)) {
                return next;
            }
        }
        return null;
    }

    @com.android.internal.annotations.VisibleForTesting
    boolean isActiveAdminWithPolicyForUserLocked(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i, int i2) {
        ensureLocked();
        return (isDeviceOwner(activeAdmin.info.getComponent(), i2) || isProfileOwner(activeAdmin.info.getComponent(), i2) || !DA_DISALLOWED_POLICIES.contains(java.lang.Integer.valueOf(i)) || getTargetSdk(activeAdmin.info.getPackageName(), i2) < 29) && activeAdmin.info.usesPolicy(i);
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.ActiveAdmin activeAdmin, java.lang.String str) {
        sendAdminCommandLocked(activeAdmin, str, null);
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.ActiveAdmin activeAdmin, java.lang.String str, android.content.BroadcastReceiver broadcastReceiver) {
        sendAdminCommandLocked(activeAdmin, str, (android.os.Bundle) null, broadcastReceiver);
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.ActiveAdmin activeAdmin, java.lang.String str, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver) {
        sendAdminCommandLocked(activeAdmin, str, bundle, broadcastReceiver, false);
    }

    boolean sendAdminCommandLocked(com.android.server.devicepolicy.ActiveAdmin activeAdmin, java.lang.String str, android.os.Bundle bundle, android.content.BroadcastReceiver broadcastReceiver, boolean z) {
        android.content.Intent intent = new android.content.Intent(str);
        intent.setComponent(activeAdmin.info.getComponent());
        if (android.os.UserManager.isDeviceInDemoMode(this.mContext)) {
            intent.addFlags(268435456);
        }
        if (str.equals("android.app.action.ACTION_PASSWORD_EXPIRING")) {
            intent.putExtra("expiration", activeAdmin.passwordExpirationDate);
        }
        if (z) {
            intent.addFlags(268435456);
        }
        if (bundle != null) {
            intent.putExtras(bundle);
        }
        if (this.mInjector.getPackageManager().queryBroadcastReceiversAsUser(intent, 268435456, activeAdmin.getUserHandle()).isEmpty()) {
            return false;
        }
        android.app.BroadcastOptions makeBasic = android.app.BroadcastOptions.makeBasic();
        makeBasic.setBackgroundActivityStartsAllowed(true);
        if (broadcastReceiver != null) {
            this.mContext.sendOrderedBroadcastAsUser(intent, activeAdmin.getUserHandle(), null, -1, makeBasic.toBundle(), broadcastReceiver, this.mHandler, -1, null, null);
        } else {
            this.mContext.sendBroadcastAsUser(intent, activeAdmin.getUserHandle(), null, makeBasic.toBundle());
        }
        return true;
    }

    void sendAdminCommandLocked(java.lang.String str, int i, int i2, android.os.Bundle bundle) {
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i2);
        int size = lambda$getUserDataUnchecked$5.mAdminList.size();
        for (int i3 = 0; i3 < size; i3++) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5.mAdminList.get(i3);
            if (activeAdmin.info.usesPolicy(i)) {
                sendAdminCommandLocked(activeAdmin, str, bundle, (android.content.BroadcastReceiver) null);
            }
        }
    }

    private void sendAdminCommandToSelfAndProfilesLocked(java.lang.String str, int i, int i2, android.os.Bundle bundle) {
        for (int i3 : this.mUserManager.getProfileIdsWithDisabled(i2)) {
            sendAdminCommandLocked(str, i, i3, bundle);
        }
    }

    private void sendAdminCommandForLockscreenPoliciesLocked(java.lang.String str, int i, int i2) {
        android.os.Bundle bundle = new android.os.Bundle();
        bundle.putParcelable("android.intent.extra.USER", android.os.UserHandle.of(i2));
        if (isSeparateProfileChallengeEnabled(i2)) {
            sendAdminCommandLocked(str, i, i2, bundle);
        } else {
            sendAdminCommandToSelfAndProfilesLocked(str, i, i2, bundle);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: removeActiveAdminLocked, reason: merged with bridge method [inline-methods] */
    public void lambda$removeActiveAdmin$16(final android.content.ComponentName componentName, final int i) {
        com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        if (activeAdminUncheckedLocked != null && !lambda$getUserDataUnchecked$5.mRemovingAdmins.contains(componentName)) {
            com.android.server.utils.Slogf.d(LOG_TAG, "Adding " + componentName + " for user " + i + " to list of removing admins.");
            logStackTrace("removeActiveAdminLocked");
            lambda$getUserDataUnchecked$5.mRemovingAdmins.add(componentName);
            sendAdminCommandLocked(activeAdminUncheckedLocked, "android.app.action.DEVICE_ADMIN_DISABLED", new android.content.BroadcastReceiver() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.4
                @Override // android.content.BroadcastReceiver
                public void onReceive(android.content.Context context, android.content.Intent intent) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.removeAdminArtifacts(componentName, i);
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.removePackageIfRequired(componentName.getPackageName(), i);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public android.app.admin.DeviceAdminInfo findAdmin(final android.content.ComponentName componentName, final int i, boolean z) {
        android.content.pm.ActivityInfo activityInfo = (android.content.pm.ActivityInfo) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda76
            public final java.lang.Object getOrThrow() {
                android.content.pm.ActivityInfo lambda$findAdmin$7;
                lambda$findAdmin$7 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$findAdmin$7(componentName, i);
                return lambda$findAdmin$7;
            }
        });
        if (activityInfo == null) {
            throw new java.lang.IllegalArgumentException("Unknown admin: " + componentName);
        }
        if (!"android.permission.BIND_DEVICE_ADMIN".equals(activityInfo.permission)) {
            java.lang.String str = "DeviceAdminReceiver " + componentName + " must be protected with android.permission.BIND_DEVICE_ADMIN";
            com.android.server.utils.Slogf.w(LOG_TAG, str);
            if (z && activityInfo.applicationInfo.targetSdkVersion > 23) {
                throw new java.lang.IllegalArgumentException(str);
            }
        }
        try {
            return new android.app.admin.DeviceAdminInfo(this.mContext, activityInfo);
        } catch (java.io.IOException | org.xmlpull.v1.XmlPullParserException e) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Bad device admin requested for user=" + i + ": " + componentName, e);
            return null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.content.pm.ActivityInfo lambda$findAdmin$7(android.content.ComponentName componentName, int i) throws java.lang.Exception {
        try {
            return this.mIPackageManager.getReceiverInfo(componentName, 819328L, i);
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Error getting receiver info", e);
            return null;
        }
    }

    private java.io.File getPolicyFileDirectory(int i) {
        if (i == 0) {
            return this.mPathProvider.getDataSystemDirectory();
        }
        return this.mPathProvider.getUserSystemDirectory(i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public com.android.internal.util.JournaledFile makeJournaledFile(int i, java.lang.String str) {
        java.lang.String absolutePath = new java.io.File(getPolicyFileDirectory(i), str).getAbsolutePath();
        return new com.android.internal.util.JournaledFile(new java.io.File(absolutePath), new java.io.File(absolutePath + ".tmp"));
    }

    private com.android.internal.util.JournaledFile makeJournaledFile(int i) {
        return makeJournaledFile(i, DEVICE_POLICIES_XML);
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void saveSettingsForUsersLocked(java.util.Set<java.lang.Integer> set) {
        java.util.Iterator<java.lang.Integer> it = set.iterator();
        while (it.hasNext()) {
            saveSettingsLocked(it.next().intValue());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void saveSettingsLocked(int i) {
        if (com.android.server.devicepolicy.DevicePolicyData.store(lambda$getUserDataUnchecked$5(i), makeJournaledFile(i))) {
            sendChangedNotification(i);
        }
        invalidateBinderCaches();
    }

    private void sendChangedNotification(final int i) {
        final android.content.Intent intent = new android.content.Intent("android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED");
        intent.setFlags(1073741824);
        final android.os.Bundle bundle = new android.app.BroadcastOptions().setDeliveryGroupPolicy(1).setDeferralPolicy(2).toBundle();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda53
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$sendChangedNotification$8(intent, i, bundle);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendChangedNotification$8(android.content.Intent intent, int i, android.os.Bundle bundle) throws java.lang.Exception {
        this.mContext.sendBroadcastAsUser(intent, new android.os.UserHandle(i), null, bundle);
    }

    private void loadSettingsLocked(com.android.server.devicepolicy.DevicePolicyData devicePolicyData, final int i) {
        com.android.server.devicepolicy.DevicePolicyData.load(devicePolicyData, makeJournaledFile(i), new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda111
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                android.app.admin.DeviceAdminInfo lambda$loadSettingsLocked$9;
                lambda$loadSettingsLocked$9 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$loadSettingsLocked$9(i, (android.content.ComponentName) obj);
                return lambda$loadSettingsLocked$9;
            }
        }, getOwnerComponent(i));
        devicePolicyData.validatePasswordOwner();
        updateMaximumTimeToLockLocked(i);
        if (devicePolicyData.mStatusBarDisabled) {
            setStatusBarDisabledInternal(devicePolicyData.mStatusBarDisabled, i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.app.admin.DeviceAdminInfo lambda$loadSettingsLocked$9(int i, android.content.ComponentName componentName) {
        return findAdmin(componentName, i, false);
    }

    static void updateLockTaskPackagesLocked(final android.content.Context context, final java.util.List<java.lang.String> list, final int i) {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda98
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.lambda$updateLockTaskPackagesLocked$10(list, context, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:7:0x0029  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static /* synthetic */ void lambda$updateLockTaskPackagesLocked$10(java.util.List list, android.content.Context context, int i) throws java.lang.Exception {
        java.lang.String[] strArr;
        try {
            if (!list.isEmpty()) {
                java.util.List<java.lang.String> listPolicyExemptAppsUnchecked = listPolicyExemptAppsUnchecked(context);
                if (!listPolicyExemptAppsUnchecked.isEmpty()) {
                    java.util.HashSet hashSet = new java.util.HashSet(list);
                    hashSet.addAll(listPolicyExemptAppsUnchecked);
                    strArr = (java.lang.String[]) hashSet.toArray(new java.lang.String[hashSet.size()]);
                    if (strArr == null) {
                        strArr = (java.lang.String[]) list.toArray(new java.lang.String[list.size()]);
                    }
                    android.app.ActivityManager.getService().updateLockTaskPackages(i, strArr);
                    return;
                }
            }
            android.app.ActivityManager.getService().updateLockTaskPackages(i, strArr);
            return;
        } catch (android.os.RemoteException e) {
            android.util.Slog.wtf(LOG_TAG, "Remote Exception: ", e);
            return;
        }
        strArr = null;
        if (strArr == null) {
        }
    }

    static void updateLockTaskFeaturesLocked(final int i, final int i2) {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda58
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.lambda$updateLockTaskFeaturesLocked$11(i2, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$updateLockTaskFeaturesLocked$11(int i, int i2) throws java.lang.Exception {
        try {
            android.app.ActivityTaskManager.getService().updateLockTaskFeatures(i, i2);
        } catch (android.os.RemoteException e) {
            android.util.Slog.wtf(LOG_TAG, "Remote Exception: ", e);
        }
    }

    static void validateQualityConstant(int i) {
        switch (i) {
            case 0:
            case 32768:
            case 65536:
            case 131072:
            case 196608:
            case 262144:
            case 327680:
            case 393216:
            case 524288:
                return;
            default:
                throw new java.lang.IllegalArgumentException("Invalid quality constant: 0x" + java.lang.Integer.toHexString(i));
        }
    }

    @com.android.internal.annotations.VisibleForTesting
    void systemReady(int i) {
        if (!this.mHasFeature) {
            return;
        }
        switch (i) {
            case com.android.server.SystemService.PHASE_LOCK_SETTINGS_READY /* 480 */:
                onLockSettingsReady();
                loadAdminDataAsync();
                this.mOwners.systemReady();
                applyManagedSubscriptionsPolicyIfRequired();
                return;
            case 500:
                synchronized (getLockObject()) {
                    this.mDevicePolicyEngine.reapplyAllPoliciesLocked();
                }
                return;
            case 550:
                synchronized (getLockObject()) {
                    try {
                        migrateToProfileOnOrganizationOwnedDeviceIfCompLocked();
                        applyProfileRestrictionsIfDeviceOwnerLocked();
                        if (shouldMigrateV1ToDevicePolicyEngine()) {
                            migrateV1PoliciesToDevicePolicyEngine();
                        }
                        maybeMigratePoliciesPostUpgradeToDevicePolicyEngineLocked();
                        migratePoliciesToPolicyEngineLocked();
                    } finally {
                    }
                }
                maybeStartSecurityLogMonitorOnActivityManagerReady();
                return;
            case 1000:
                factoryResetIfDelayedEarlier();
                ensureDeviceOwnerUserStarted();
                return;
            default:
                return;
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void maybeMigrateSecurityLoggingPolicyLocked() {
        if (!android.app.admin.flags.Flags.securityLogV2Enabled() || this.mOwners.isSecurityLoggingMigrated()) {
            return;
        }
        try {
            migrateSecurityLoggingPolicyInternalLocked();
        } catch (java.lang.Exception e) {
            android.util.Slog.e(LOG_TAG, "Failed to properly migrate security logging to policy engine", e);
        }
        android.util.Slog.i(LOG_TAG, "Marking security logging policy migration complete");
        this.mOwners.markSecurityLoggingMigrated();
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void migrateSecurityLoggingPolicyInternalLocked() {
        android.util.Slog.i(LOG_TAG, "Migrating security logging policy to policy engine");
        if (!this.mInjector.securityLogGetLoggingEnabledProperty()) {
            android.util.Slog.i(LOG_TAG, "Security logs not enabled, exiting");
            return;
        }
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
        if (deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked == null) {
            android.util.Slog.wtf(LOG_TAG, "Security logging is enabled, but no appropriate admin found");
        } else {
            this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.SECURITY_LOGGING, com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.info.getComponent(), deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.getUserHandle().getIdentifier(), deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked), new android.app.admin.BooleanPolicyValue(true));
        }
    }

    private void applyManagedSubscriptionsPolicyIfRequired() {
        int organizationOwnedProfileUserId = getOrganizationOwnedProfileUserId();
        if (organizationOwnedProfileUserId != -10000) {
            unregisterOnSubscriptionsChangedListener();
            int policyType = getManagedSubscriptionsPolicy().getPolicyType();
            if (policyType == 0) {
                clearManagedSubscriptionsPolicy();
            } else if (policyType == 1) {
                registerListenerToAssignSubscriptionsToUser(organizationOwnedProfileUserId);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePersonalAppsSuspensionOnUserStart(int i) {
        int managedUserId = getManagedUserId(i);
        if (managedUserId >= 0) {
            updatePersonalAppsSuspension(managedUserId);
        } else {
            suspendPersonalAppsInternal(i, managedUserId, false);
        }
    }

    private void onLockSettingsReady() {
        java.util.List<java.lang.String> keepUninstalledPackagesLocked;
        synchronized (getLockObject()) {
            fixupAutoTimeRestrictionDuringOrganizationOwnedDeviceMigration();
        }
        lambda$getUserDataUnchecked$5(0);
        cleanUpOldUsers();
        maybeSetDefaultProfileOwnerUserRestrictions();
        handleStartUser(0);
        maybeLogStart();
        this.mSetupContentObserver.register();
        updateUserSetupCompleteAndPaired();
        synchronized (getLockObject()) {
            keepUninstalledPackagesLocked = getKeepUninstalledPackagesLocked();
        }
        if (keepUninstalledPackagesLocked != null) {
            this.mInjector.getPackageManagerInternal().setKeepUninstalledPackages(keepUninstalledPackagesLocked);
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                if (deviceOwnerAdminLocked != null) {
                    this.mUserManagerInternal.setForceEphemeralUsers(deviceOwnerAdminLocked.forceEphemeralUsers);
                    android.app.ActivityManagerInternal activityManagerInternal = this.mInjector.getActivityManagerInternal();
                    activityManagerInternal.setSwitchingFromSystemUserMessage(deviceOwnerAdminLocked.startUserSessionMessage);
                    activityManagerInternal.setSwitchingToSystemUserMessage(deviceOwnerAdminLocked.endUserSessionMessage);
                }
                revertTransferOwnershipIfNecessaryLocked();
                if (!android.app.admin.flags.Flags.policyEngineMigrationV2Enabled()) {
                    updateUsbDataSignal(this.mContext, isUsbDataSignalingEnabledInternalLocked());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        unsuspendWorkAppsIfNecessary();
    }

    /* JADX INFO: Access modifiers changed from: private */
    class DpmsUpgradeDataProvider implements com.android.server.devicepolicy.PolicyUpgraderDataProvider {
        private DpmsUpgradeDataProvider() {
        }

        @Override // com.android.server.devicepolicy.PolicyUpgraderDataProvider
        public com.android.internal.util.JournaledFile makeDevicePoliciesJournaledFile(int i) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.makeJournaledFile(i, com.android.server.devicepolicy.DevicePolicyManagerService.DEVICE_POLICIES_XML);
        }

        @Override // com.android.server.devicepolicy.PolicyUpgraderDataProvider
        public com.android.internal.util.JournaledFile makePoliciesVersionJournaledFile(int i) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.makeJournaledFile(i, com.android.server.devicepolicy.DevicePolicyManagerService.POLICIES_VERSION_XML);
        }

        @Override // com.android.server.devicepolicy.PolicyUpgraderDataProvider
        public java.util.function.Function<android.content.ComponentName, android.app.admin.DeviceAdminInfo> getAdminInfoSupplier(final int i) {
            return new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$DpmsUpgradeDataProvider$$ExternalSyntheticLambda0
                @Override // java.util.function.Function
                public final java.lang.Object apply(java.lang.Object obj) {
                    android.app.admin.DeviceAdminInfo lambda$getAdminInfoSupplier$0;
                    lambda$getAdminInfoSupplier$0 = com.android.server.devicepolicy.DevicePolicyManagerService.DpmsUpgradeDataProvider.this.lambda$getAdminInfoSupplier$0(i, (android.content.ComponentName) obj);
                    return lambda$getAdminInfoSupplier$0;
                }
            };
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ android.app.admin.DeviceAdminInfo lambda$getAdminInfoSupplier$0(int i, android.content.ComponentName componentName) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.findAdmin(componentName, i, false);
        }

        @Override // com.android.server.devicepolicy.PolicyUpgraderDataProvider
        public int[] getUsersForUpgrade() {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.mUserManager.getUsers().stream().mapToInt(new java.util.function.ToIntFunction() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$DpmsUpgradeDataProvider$$ExternalSyntheticLambda3
                @Override // java.util.function.ToIntFunction
                public final int applyAsInt(java.lang.Object obj) {
                    int i;
                    i = ((android.content.pm.UserInfo) obj).id;
                    return i;
                }
            }).toArray();
        }

        @Override // com.android.server.devicepolicy.PolicyUpgraderDataProvider
        public java.util.List<java.lang.String> getPlatformSuspendedPackages(final int i) {
            final android.content.pm.PackageManagerInternal packageManagerInternal = com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.getPackageManagerInternal();
            return (java.util.List) com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.getPackageManager(i).getInstalledPackages(android.content.pm.PackageManager.PackageInfoFlags.of(786432L)).stream().map(new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$DpmsUpgradeDataProvider$$ExternalSyntheticLambda1
                @Override // java.util.function.Function
                public final java.lang.Object apply(java.lang.Object obj) {
                    java.lang.String str;
                    str = ((android.content.pm.PackageInfo) obj).packageName;
                    return str;
                }
            }).filter(new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$DpmsUpgradeDataProvider$$ExternalSyntheticLambda2
                @Override // java.util.function.Predicate
                public final boolean test(java.lang.Object obj) {
                    boolean lambda$getPlatformSuspendedPackages$3;
                    lambda$getPlatformSuspendedPackages$3 = com.android.server.devicepolicy.DevicePolicyManagerService.DpmsUpgradeDataProvider.lambda$getPlatformSuspendedPackages$3(android.content.pm.PackageManagerInternal.this, i, (java.lang.String) obj);
                    return lambda$getPlatformSuspendedPackages$3;
                }
            }).collect(java.util.stream.Collectors.toList());
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ boolean lambda$getPlatformSuspendedPackages$3(android.content.pm.PackageManagerInternal packageManagerInternal, int i, java.lang.String str) {
            return com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME.equals(packageManagerInternal.getSuspendingPackage(str, i));
        }
    }

    private void performPolicyVersionUpgrade() {
        new com.android.server.devicepolicy.PolicyVersionUpgrader(new com.android.server.devicepolicy.DevicePolicyManagerService.DpmsUpgradeDataProvider(), this.mPathProvider).upgradePolicy(6);
    }

    private void revertTransferOwnershipIfNecessaryLocked() {
        if (!this.mTransferOwnershipMetadataManager.metadataFileExists()) {
            return;
        }
        com.android.server.utils.Slogf.e(LOG_TAG, "Owner transfer metadata file exists! Reverting transfer.");
        com.android.server.devicepolicy.TransferOwnershipMetadataManager.Metadata loadMetadataFile = this.mTransferOwnershipMetadataManager.loadMetadataFile();
        if (loadMetadataFile.adminType.equals(LOG_TAG_PROFILE_OWNER)) {
            transferProfileOwnershipLocked(loadMetadataFile.targetComponent, loadMetadataFile.sourceComponent, loadMetadataFile.userId);
            deleteTransferOwnershipMetadataFileLocked();
            deleteTransferOwnershipBundleLocked(loadMetadataFile.userId);
        } else if (loadMetadataFile.adminType.equals(LOG_TAG_DEVICE_OWNER)) {
            transferDeviceOwnershipLocked(loadMetadataFile.targetComponent, loadMetadataFile.sourceComponent, loadMetadataFile.userId);
            deleteTransferOwnershipMetadataFileLocked();
            deleteTransferOwnershipBundleLocked(loadMetadataFile.userId);
        }
        updateSystemUpdateFreezePeriodsRecord(true);
    }

    private void maybeLogStart() {
        if (!android.app.admin.SecurityLog.isLoggingEnabled()) {
            return;
        }
        android.app.admin.SecurityLog.writeEvent(210009, new java.lang.Object[]{this.mInjector.systemPropertiesGet(com.android.server.pdb.PersistentDataBlockService.VERIFIED_BOOT_STATE), this.mInjector.systemPropertiesGet("ro.boot.veritymode")});
    }

    private void ensureDeviceOwnerUserStarted() {
        synchronized (getLockObject()) {
            try {
                if (this.mOwners.hasDeviceOwner()) {
                    int deviceOwnerUserId = this.mOwners.getDeviceOwnerUserId();
                    if (deviceOwnerUserId != 0) {
                        try {
                            this.mInjector.getIActivityManager().startUserInBackground(deviceOwnerUserId);
                        } catch (android.os.RemoteException e) {
                            com.android.server.utils.Slogf.w(LOG_TAG, "Exception starting user", e);
                        }
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    void handleStartUser(int i) {
        java.util.List<android.app.admin.PreferentialNetworkServiceConfig> of;
        updatePasswordQualityCacheForUserGroup(i == 0 ? -1 : i);
        updatePermissionPolicyCache(i);
        updateAdminCanGrantSensorsPermissionCache(i);
        updateContentProtectionPolicyCache(i);
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                if (deviceOrProfileOwnerAdminLocked != null) {
                    of = deviceOrProfileOwnerAdminLocked.mPreferentialNetworkServiceConfigs;
                } else {
                    of = java.util.List.of(android.app.admin.PreferentialNetworkServiceConfig.DEFAULT);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        updateNetworkPreferenceForUser(i, of);
        if (isProfileOwnerOfOrganizationOwnedDevice(i) && getManagedSubscriptionsPolicy().getPolicyType() == 1) {
            lambda$setDefaultSmsApplication$91();
        }
        startOwnerService(i, "start-user");
        this.mDevicePolicyEngine.handleStartUser(i);
    }

    void pushUserControlDisabledPackagesLocked(int i) {
        final int i2;
        com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked;
        if (getDeviceOwnerUserIdUncheckedLocked() == i) {
            profileOwnerAdminLocked = getDeviceOwnerAdminLocked();
            i2 = -1;
        } else {
            i2 = i;
            profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
        }
        final java.util.List<java.lang.String> list = (profileOwnerAdminLocked == null || profileOwnerAdminLocked.protectedPackages == null) ? null : profileOwnerAdminLocked.protectedPackages;
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda168
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$pushUserControlDisabledPackagesLocked$12(i2, list);
            }
        });
        this.mUsageStatsManagerInternal.setAdminProtectedPackages(new android.util.ArraySet(list), i2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$pushUserControlDisabledPackagesLocked$12(int i, java.util.List list) throws java.lang.Exception {
        this.mInjector.getPackageManagerInternal().setOwnerProtectedPackages(i, list);
    }

    void handleUnlockUser(int i) {
        startOwnerService(i, "unlock-user");
        this.mDevicePolicyEngine.handleUnlockUser(i);
    }

    void handleOnUserUnlocked(int i) {
        showNewUserDisclaimerIfNecessary(i);
    }

    void handleStopUser(int i) {
        updateNetworkPreferenceForUser(i, java.util.List.of(android.app.admin.PreferentialNetworkServiceConfig.DEFAULT));
        this.mDeviceAdminServiceController.stopServicesForUser(i, "stop-user");
        this.mDevicePolicyEngine.handleStopUser(i);
    }

    private void startOwnerService(int i, java.lang.String str) {
        android.content.ComponentName ownerComponent = getOwnerComponent(i);
        if (ownerComponent != null) {
            this.mDeviceAdminServiceController.startServiceForAdmin(ownerComponent.getPackageName(), i, str);
            invalidateBinderCaches();
        }
    }

    private void cleanUpOldUsers() {
        java.util.Set<java.lang.Integer> profileOwnerKeys;
        android.util.ArraySet arraySet;
        synchronized (getLockObject()) {
            try {
                profileOwnerKeys = this.mOwners.getProfileOwnerKeys();
                arraySet = new android.util.ArraySet();
                for (int i = 0; i < this.mUserData.size(); i++) {
                    arraySet.add(java.lang.Integer.valueOf(this.mUserData.keyAt(i)));
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        java.util.List users = this.mUserManager.getUsers();
        android.util.ArraySet<java.lang.Integer> arraySet2 = new android.util.ArraySet();
        arraySet2.addAll(profileOwnerKeys);
        arraySet2.addAll((java.util.Collection) arraySet);
        java.util.Iterator it = users.iterator();
        while (it.hasNext()) {
            arraySet2.remove(java.lang.Integer.valueOf(((android.content.pm.UserInfo) it.next()).id));
        }
        for (java.lang.Integer num : arraySet2) {
            removeUserData(num.intValue());
            this.mDevicePolicyEngine.handleUserRemoved(num.intValue());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handlePasswordExpirationNotification(int i) {
        android.os.Bundle bundle = new android.os.Bundle();
        bundle.putParcelable("android.intent.extra.USER", android.os.UserHandle.of(i));
        synchronized (getLockObject()) {
            try {
                long currentTimeMillis = java.lang.System.currentTimeMillis();
                java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(i);
                int size = activeAdminsForLockscreenPoliciesLocked.size();
                for (int i2 = 0; i2 < size; i2++) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = activeAdminsForLockscreenPoliciesLocked.get(i2);
                    if ((activeAdmin.isPermissionBased || activeAdmin.info.usesPolicy(6)) && activeAdmin.passwordExpirationTimeout > 0 && currentTimeMillis >= activeAdmin.passwordExpirationDate - EXPIRATION_GRACE_PERIOD_MS && activeAdmin.passwordExpirationDate > 0) {
                        sendAdminCommandLocked(activeAdmin, "android.app.action.ACTION_PASSWORD_EXPIRING", bundle, (android.content.BroadcastReceiver) null);
                    }
                }
                setExpirationAlarmCheckLocked(this.mContext, i, false);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    protected void onInstalledCertificatesChanged(android.os.UserHandle userHandle, @android.annotation.NonNull java.util.Collection<java.lang.String> collection) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userHandle.getIdentifier());
                if (lambda$getUserDataUnchecked$5.mOwnerInstalledCaCerts.retainAll(collection) | lambda$getUserDataUnchecked$5.mAcceptedCaCertificates.retainAll(collection) | false) {
                    saveSettingsLocked(userHandle.getIdentifier());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    protected java.util.Set<java.lang.String> getAcceptedCaCertificates(android.os.UserHandle userHandle) {
        android.util.ArraySet<java.lang.String> arraySet;
        if (!this.mHasFeature) {
            return java.util.Collections.emptySet();
        }
        synchronized (getLockObject()) {
            arraySet = lambda$getUserDataUnchecked$5(userHandle.getIdentifier()).mAcceptedCaCertificates;
        }
        return arraySet;
    }

    public void setActiveAdmin(final android.content.ComponentName componentName, final boolean z, final int i) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_ADMINS"));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        final com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        final android.app.admin.DeviceAdminInfo findAdmin = findAdmin(componentName, i, true);
        synchronized (getLockObject()) {
            checkActiveAdminPrecondition(componentName, findAdmin, lambda$getUserDataUnchecked$5);
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda66
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setActiveAdmin$13(componentName, i, z, findAdmin, lambda$getUserDataUnchecked$5);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setActiveAdmin$13(android.content.ComponentName componentName, int i, boolean z, android.app.admin.DeviceAdminInfo deviceAdminInfo, com.android.server.devicepolicy.DevicePolicyData devicePolicyData) throws java.lang.Exception {
        com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
        if (!z && activeAdminUncheckedLocked != null) {
            throw new java.lang.IllegalArgumentException("Admin is already added");
        }
        int i2 = 0;
        com.android.server.devicepolicy.ActiveAdmin activeAdmin = new com.android.server.devicepolicy.ActiveAdmin(deviceAdminInfo, false);
        activeAdmin.testOnlyAdmin = activeAdminUncheckedLocked != null ? activeAdminUncheckedLocked.testOnlyAdmin : isPackageTestOnly(componentName.getPackageName(), i);
        devicePolicyData.mAdminMap.put(componentName, activeAdmin);
        int size = devicePolicyData.mAdminList.size();
        while (true) {
            if (i2 >= size) {
                i2 = -1;
                break;
            } else if (devicePolicyData.mAdminList.get(i2).info.getComponent().equals(componentName)) {
                break;
            } else {
                i2++;
            }
        }
        if (i2 == -1) {
            devicePolicyData.mAdminList.add(activeAdmin);
            enableIfNecessary(deviceAdminInfo.getPackageName(), i);
            this.mUsageStatsManagerInternal.onActiveAdminAdded(componentName.getPackageName(), i);
        } else {
            devicePolicyData.mAdminList.set(i2, activeAdmin);
        }
        saveSettingsLocked(i);
        sendAdminCommandLocked(activeAdmin, "android.app.action.DEVICE_ADMIN_ENABLED", (android.os.Bundle) null, (android.content.BroadcastReceiver) null);
    }

    private void loadAdminDataAsync() {
        this.mInjector.postOnSystemServerInitThreadPool(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda69
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$loadAdminDataAsync$14();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$loadAdminDataAsync$14() {
        pushActiveAdminPackages();
        this.mUsageStatsManagerInternal.onAdminDataAvailable();
        pushAllMeteredRestrictedPackages();
        this.mInjector.getNetworkPolicyManagerInternal().onAdminDataAvailable();
    }

    private void pushActiveAdminPackages() {
        synchronized (getLockObject()) {
            try {
                java.util.List users = this.mUserManager.getUsers();
                for (int size = users.size() - 1; size >= 0; size--) {
                    int i = ((android.content.pm.UserInfo) users.get(size)).id;
                    this.mUsageStatsManagerInternal.setActiveAdminApps(getActiveAdminPackagesLocked(i), i);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void pushAllMeteredRestrictedPackages() {
        synchronized (getLockObject()) {
            try {
                java.util.List users = this.mUserManager.getUsers();
                for (int size = users.size() - 1; size >= 0; size--) {
                    int i = ((android.content.pm.UserInfo) users.get(size)).id;
                    this.mInjector.getNetworkPolicyManagerInternal().setMeteredRestrictedPackagesAsync(getMeteredDisabledPackages(i), i);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void pushActiveAdminPackagesLocked(int i) {
        this.mUsageStatsManagerInternal.setActiveAdminApps(getActiveAdminPackagesLocked(i), i);
    }

    private java.util.Set<java.lang.String> getActiveAdminPackagesLocked(int i) {
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        android.util.ArraySet arraySet = null;
        for (int size = lambda$getUserDataUnchecked$5.mAdminList.size() - 1; size >= 0; size--) {
            java.lang.String packageName = lambda$getUserDataUnchecked$5.mAdminList.get(size).info.getPackageName();
            if (arraySet == null) {
                arraySet = new android.util.ArraySet();
            }
            arraySet.add(packageName);
        }
        return arraySet;
    }

    private void transferActiveAdminUncheckedLocked(android.content.ComponentName componentName, android.content.ComponentName componentName2, int i) {
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        if (!lambda$getUserDataUnchecked$5.mAdminMap.containsKey(componentName2) && lambda$getUserDataUnchecked$5.mAdminMap.containsKey(componentName)) {
            return;
        }
        android.app.admin.DeviceAdminInfo findAdmin = findAdmin(componentName, i, true);
        com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5.mAdminMap.get(componentName2);
        int uid = activeAdmin.getUid();
        this.mDevicePolicyEngine.transferPolicies(com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(componentName2, i, activeAdmin), com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(componentName, i, activeAdmin));
        activeAdmin.transfer(findAdmin);
        lambda$getUserDataUnchecked$5.mAdminMap.remove(componentName2);
        lambda$getUserDataUnchecked$5.mAdminMap.put(componentName, activeAdmin);
        if (lambda$getUserDataUnchecked$5.mPasswordOwner == uid) {
            lambda$getUserDataUnchecked$5.mPasswordOwner = activeAdmin.getUid();
        }
        saveSettingsLocked(i);
        sendAdminCommandLocked(activeAdmin, "android.app.action.DEVICE_ADMIN_ENABLED", (android.os.Bundle) null, (android.content.BroadcastReceiver) null);
    }

    private void checkActiveAdminPrecondition(android.content.ComponentName componentName, android.app.admin.DeviceAdminInfo deviceAdminInfo, com.android.server.devicepolicy.DevicePolicyData devicePolicyData) {
        if (deviceAdminInfo == null) {
            throw new java.lang.IllegalArgumentException("Bad admin: " + componentName);
        }
        if (!deviceAdminInfo.getActivityInfo().applicationInfo.isInternal()) {
            throw new java.lang.IllegalArgumentException("Only apps in internal storage can be active admin: " + componentName);
        }
        if (deviceAdminInfo.getActivityInfo().applicationInfo.isInstantApp()) {
            throw new java.lang.IllegalArgumentException("Instant apps cannot be device admins: " + componentName);
        }
        if (devicePolicyData.mRemovingAdmins.contains(componentName)) {
            throw new java.lang.IllegalArgumentException("Trying to set an admin which is being removed");
        }
    }

    private void checkAllUsersAreAffiliatedWithDevice() {
        com.android.internal.util.Preconditions.checkCallAuthorization(areAllUsersAffiliatedWithDeviceLocked(), "operation not allowed when device has unaffiliated users");
    }

    public boolean isAdminActive(android.content.ComponentName componentName, int i) {
        boolean z;
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            z = getActiveAdminUncheckedLocked(componentName, i) != null;
        }
        return z;
    }

    public boolean isRemovingAdmin(android.content.ComponentName componentName, int i) {
        boolean contains;
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            contains = lambda$getUserDataUnchecked$5(i).mRemovingAdmins.contains(componentName);
        }
        return contains;
    }

    public boolean hasGrantedPolicy(android.content.ComponentName componentName, int i, int i2) {
        boolean usesPolicy;
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i2, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i2));
        com.android.internal.util.Preconditions.checkCallAuthorization(isCallingFromPackage(componentName.getPackageName(), callerIdentity.getUid()) || isSystemUid(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i2);
                if (activeAdminUncheckedLocked == null) {
                    throw new java.lang.SecurityException("No active admin " + componentName);
                }
                usesPolicy = activeAdminUncheckedLocked.info.usesPolicy(i);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return usesPolicy;
    }

    public java.util.List<android.content.ComponentName> getActiveAdmins(int i) {
        if (!this.mHasFeature) {
            return java.util.Collections.EMPTY_LIST;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                int size = lambda$getUserDataUnchecked$5.mAdminList.size();
                if (size <= 0) {
                    return null;
                }
                java.util.ArrayList arrayList = new java.util.ArrayList(size);
                for (int i2 = 0; i2 < size; i2++) {
                    arrayList.add(lambda$getUserDataUnchecked$5.mAdminList.get(i2).info.getComponent());
                }
                return arrayList;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean packageHasActiveAdmins(java.lang.String str, int i) {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                int size = lambda$getUserDataUnchecked$5.mAdminList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    if (lambda$getUserDataUnchecked$5.mAdminList.get(i2).info.getPackageName().equals(str)) {
                        return true;
                    }
                }
                return false;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void forceRemoveActiveAdmin(final android.content.ComponentName componentName, final int i) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isAdb(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"), "Caller must be shell or hold MANAGE_PROFILE_AND_DEVICE_OWNERS to call forceRemoveActiveAdmin");
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda177
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$forceRemoveActiveAdmin$15(componentName, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$forceRemoveActiveAdmin$15(android.content.ComponentName componentName, int i) throws java.lang.Exception {
        boolean z;
        synchronized (getLockObject()) {
            try {
                if (!isAdminTestOnlyLocked(componentName, i)) {
                    throw new java.lang.SecurityException("Attempt to remove non-test admin " + componentName + " " + i);
                }
                if (isDeviceOwner(componentName, i)) {
                    clearDeviceOwnerLocked(getDeviceOwnerAdminLocked(), i);
                }
                z = false;
                if (isProfileOwner(componentName, i)) {
                    boolean isProfileOwnerOfOrganizationOwnedDevice = isProfileOwnerOfOrganizationOwnedDevice(i);
                    clearProfileOwnerLocked(getActiveAdminUncheckedLocked(componentName, i, false), i);
                    z = isProfileOwnerOfOrganizationOwnedDevice;
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        removeAdminArtifacts(componentName, i);
        if (z) {
            android.os.UserHandle of = android.os.UserHandle.of(getProfileParentId(i));
            lambda$wipeDataWithReason$55(of);
            clearOrgOwnedProfileOwnerDeviceWidePolicies(of.getIdentifier());
        }
        com.android.server.utils.Slogf.i(LOG_TAG, "Admin " + componentName + " removed from user " + i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: clearOrgOwnedProfileOwnerUserRestrictions, reason: merged with bridge method [inline-methods] */
    public void lambda$wipeDataWithReason$55(android.os.UserHandle userHandle) {
        this.mUserManager.setUserRestriction("no_remove_managed_profile", false, userHandle);
        this.mUserManager.setUserRestriction("no_add_user", false, userHandle);
    }

    private void clearDeviceOwnerUserRestriction(android.os.UserHandle userHandle) {
        for (int i : this.mUserManagerInternal.getUserIds()) {
            android.os.UserHandle of = android.os.UserHandle.of(i);
            if (this.mUserManager.hasUserRestriction("no_add_user", of)) {
                this.mUserManager.setUserRestriction("no_add_user", false, of);
            }
            if (this.mUserManager.hasUserRestriction("no_add_managed_profile", of)) {
                this.mUserManager.setUserRestriction("no_add_managed_profile", false, of);
            }
            if (this.mUserManager.hasUserRestriction("no_add_clone_profile", of)) {
                this.mUserManager.setUserRestriction("no_add_clone_profile", false, of);
            }
            if (this.mUserManager.hasUserRestriction("no_add_private_profile", of)) {
                this.mUserManager.setUserRestriction("no_add_private_profile", false, of);
            }
        }
    }

    private boolean isPackageTestOnly(java.lang.String str, int i) {
        try {
            android.content.pm.ApplicationInfo applicationInfo = this.mInjector.getIPackageManager().getApplicationInfo(str, 786432L, i);
            if (applicationInfo != null) {
                return (applicationInfo.flags & 256) != 0;
            }
            throw new java.lang.IllegalStateException("Couldn't find package: " + str + " on user " + i);
        } catch (android.os.RemoteException e) {
            throw new java.lang.IllegalStateException(e);
        }
    }

    private boolean isAdminTestOnlyLocked(android.content.ComponentName componentName, int i) {
        com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
        return activeAdminUncheckedLocked != null && activeAdminUncheckedLocked.testOnlyAdmin;
    }

    public void removeActiveAdmin(final android.content.ComponentName componentName, final int i) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_ADMINS") ? getCallerIdentity() : getCallerIdentity(componentName), i));
        checkCanExecuteOrThrowUnsafe(27);
        enforceUserUnlocked(i);
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked == null) {
                    return;
                }
                if (!isDeviceOwner(componentName, i) && !isProfileOwner(componentName, i)) {
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda159
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$removeActiveAdmin$16(componentName, i);
                        }
                    });
                    this.mDevicePolicyEngine.removePoliciesForAdmin(com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(componentName, i, activeAdminUncheckedLocked));
                    return;
                }
                com.android.server.utils.Slogf.e(LOG_TAG, "Device/profile owner cannot be removed: component=" + componentName);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean canSetPasswordQualityOnParent(java.lang.String str, com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return !this.mInjector.isChangeEnabled(PREVENT_SETTING_PASSWORD_QUALITY_ON_PARENT, str, callerIdentity.getUserId()) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity);
    }

    private boolean isPasswordLimitingAdminTargetingP(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        boolean z;
        if (!callerIdentity.hasAdminComponent()) {
            return false;
        }
        synchronized (getLockObject()) {
            z = getActiveAdminWithPolicyForUidLocked(callerIdentity.getComponentName(), 0, callerIdentity.getUid()) != null;
        }
        return z;
    }

    private boolean notSupportedOnAutomotive(java.lang.String str) {
        if (this.mIsAutomotive) {
            com.android.server.utils.Slogf.i(LOG_TAG, "%s is not supported on automotive builds", str);
            return true;
        }
        return false;
    }

    public void setPasswordQuality(final android.content.ComponentName componentName, final int i, final boolean z) {
        if (!this.mHasFeature || notSupportedOnAutomotive("setPasswordQuality")) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        validateQualityConstant(i);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || isSystemUid(callerIdentity) || isPasswordLimitingAdminTargetingP(callerIdentity));
        if (z) {
            com.android.internal.util.Preconditions.checkCallAuthorization(canSetPasswordQualityOnParent(componentName.getPackageName(), callerIdentity), "Profile Owner may not apply password quality requirements device-wide");
        }
        final int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                final com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                if (z) {
                    com.android.internal.util.Preconditions.checkState(getActiveAdminForCallerLocked(componentName, 0, false).mPasswordComplexity != 0 ? false : true, "Cannot set password quality when complexity is set on the primary admin. Set the primary admin's complexity to NONE first.");
                }
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda71
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setPasswordQuality$17(activeAdminForCallerLocked, i, userId, z, componentName);
                    }
                });
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(1).setAdmin(componentName).setInt(i).setStrings(new java.lang.String[]{z ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT}).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setPasswordQuality$17(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i, int i2, boolean z, android.content.ComponentName componentName) throws java.lang.Exception {
        android.app.admin.PasswordPolicy passwordPolicy = activeAdmin.mPasswordPolicy;
        if (passwordPolicy.quality != i) {
            passwordPolicy.quality = i;
            activeAdmin.mPasswordComplexity = 0;
            resetInactivePasswordRequirementsIfRPlus(i2, activeAdmin);
            updatePasswordValidityCheckpointLocked(i2, z);
            updatePasswordQualityCacheForUserGroup(i2);
            saveSettingsLocked(i2);
        }
        logPasswordQualitySetIfSecurityLogEnabled(componentName, i2, z, passwordPolicy);
    }

    private boolean passwordQualityInvocationOrderCheckEnabled(java.lang.String str, int i) {
        return this.mInjector.isChangeEnabled(ADMIN_APP_PASSWORD_COMPLEXITY, str, i);
    }

    private void resetInactivePasswordRequirementsIfRPlus(int i, com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        if (passwordQualityInvocationOrderCheckEnabled(activeAdmin.info.getPackageName(), i)) {
            android.app.admin.PasswordPolicy passwordPolicy = activeAdmin.mPasswordPolicy;
            if (passwordPolicy.quality < 131072) {
                passwordPolicy.length = 0;
            }
            if (passwordPolicy.quality < 393216) {
                passwordPolicy.letters = 1;
                passwordPolicy.upperCase = 0;
                passwordPolicy.lowerCase = 0;
                passwordPolicy.numeric = 1;
                passwordPolicy.symbols = 1;
                passwordPolicy.nonLetter = 0;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private java.util.Set<java.lang.Integer> updatePasswordValidityCheckpointLocked(int i, boolean z) {
        boolean isPasswordSufficientForUserWithoutCheckpointLocked;
        android.util.ArraySet arraySet = new android.util.ArraySet();
        int credentialOwner = getCredentialOwner(i, z);
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(credentialOwner);
        android.app.admin.PasswordMetrics userPasswordMetrics = this.mLockSettingsInternal.getUserPasswordMetrics(credentialOwner);
        if (userPasswordMetrics != null && (isPasswordSufficientForUserWithoutCheckpointLocked = isPasswordSufficientForUserWithoutCheckpointLocked(userPasswordMetrics, getProfileParentUserIfRequested(i, z))) != lambda$getUserDataUnchecked$5.mPasswordValidAtLastCheckpoint) {
            lambda$getUserDataUnchecked$5.mPasswordValidAtLastCheckpoint = isPasswordSufficientForUserWithoutCheckpointLocked;
            arraySet.add(java.lang.Integer.valueOf(credentialOwner));
        }
        return arraySet;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updatePasswordQualityCacheForUserGroup(int i) {
        java.util.List profiles;
        if (i == -1) {
            profiles = this.mUserManager.getUsers();
        } else {
            profiles = this.mUserManager.getProfiles(i);
        }
        java.util.Iterator it = profiles.iterator();
        while (it.hasNext()) {
            int i2 = ((android.content.pm.UserInfo) it.next()).id;
            this.mPolicyCache.setPasswordQuality(i2, getPasswordQuality(null, i2, false));
        }
    }

    public int getPasswordQuality(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature) {
            return 0;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        com.android.internal.util.Preconditions.checkCallAuthorization(componentName == null || isCallingFromPackage(componentName.getPackageName(), callerIdentity.getUid()) || canQueryAdminPolicy(callerIdentity));
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i, z);
                    return activeAdminUncheckedLocked != null ? activeAdminUncheckedLocked.mPasswordPolicy.quality : 0;
                }
                java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z));
                int size = activeAdminsForLockscreenPoliciesLocked.size();
                int i2 = 0;
                while (r1 < size) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = activeAdminsForLockscreenPoliciesLocked.get(r1);
                    if (i2 < activeAdmin.mPasswordPolicy.quality) {
                        i2 = activeAdmin.mPasswordPolicy.quality;
                    }
                    r1++;
                }
                return i2;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private java.util.List<com.android.server.devicepolicy.ActiveAdmin> getActiveAdminsForLockscreenPoliciesLocked(int i) {
        if (isSeparateProfileChallengeEnabled(i)) {
            if (isPermissionCheckFlagEnabled()) {
                return getActiveAdminsForAffectedUserInclPermissionBasedAdminLocked(i);
            }
            return getUserDataUnchecked(i).mAdminList;
        }
        if (isPermissionCheckFlagEnabled()) {
            return getActiveAdminsForUserAndItsManagedProfilesInclPermissionBasedAdminLocked(getProfileParentId(i), new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda139
                @Override // java.util.function.Predicate
                public final boolean test(java.lang.Object obj) {
                    boolean lambda$getActiveAdminsForLockscreenPoliciesLocked$18;
                    lambda$getActiveAdminsForLockscreenPoliciesLocked$18 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getActiveAdminsForLockscreenPoliciesLocked$18((android.content.pm.UserInfo) obj);
                    return lambda$getActiveAdminsForLockscreenPoliciesLocked$18;
                }
            });
        }
        return getActiveAdminsForUserAndItsManagedProfilesLocked(getProfileParentId(i), new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda140
            @Override // java.util.function.Predicate
            public final boolean test(java.lang.Object obj) {
                boolean lambda$getActiveAdminsForLockscreenPoliciesLocked$19;
                lambda$getActiveAdminsForLockscreenPoliciesLocked$19 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getActiveAdminsForLockscreenPoliciesLocked$19((android.content.pm.UserInfo) obj);
                return lambda$getActiveAdminsForLockscreenPoliciesLocked$19;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$getActiveAdminsForLockscreenPoliciesLocked$18(android.content.pm.UserInfo userInfo) {
        return !this.mLockPatternUtils.isSeparateProfileChallengeEnabled(userInfo.id);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$getActiveAdminsForLockscreenPoliciesLocked$19(android.content.pm.UserInfo userInfo) {
        return !this.mLockPatternUtils.isSeparateProfileChallengeEnabled(userInfo.id);
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private java.util.List<com.android.server.devicepolicy.ActiveAdmin> getActiveAdminsForAffectedUserLocked(int i) {
        if (isManagedProfile(i)) {
            return getUserDataUnchecked(i).mAdminList;
        }
        return getActiveAdminsForUserAndItsManagedProfilesLocked(i, new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda106
            @Override // java.util.function.Predicate
            public final boolean test(java.lang.Object obj) {
                boolean lambda$getActiveAdminsForAffectedUserLocked$20;
                lambda$getActiveAdminsForAffectedUserLocked$20 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getActiveAdminsForAffectedUserLocked$20((android.content.pm.UserInfo) obj);
                return lambda$getActiveAdminsForAffectedUserLocked$20;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$getActiveAdminsForAffectedUserLocked$20(android.content.pm.UserInfo userInfo) {
        return false;
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private java.util.List<com.android.server.devicepolicy.ActiveAdmin> getActiveAdminsForAffectedUserInclPermissionBasedAdminLocked(int i) {
        if (isManagedProfile(i)) {
            java.util.ArrayList<com.android.server.devicepolicy.ActiveAdmin> arrayList = getUserDataUnchecked(i).mAdminList;
        }
        java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForUserAndItsManagedProfilesInclPermissionBasedAdminLocked = getActiveAdminsForUserAndItsManagedProfilesInclPermissionBasedAdminLocked(i, new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda21
            @Override // java.util.function.Predicate
            public final boolean test(java.lang.Object obj) {
                boolean lambda$getActiveAdminsForAffectedUserInclPermissionBasedAdminLocked$21;
                lambda$getActiveAdminsForAffectedUserInclPermissionBasedAdminLocked$21 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getActiveAdminsForAffectedUserInclPermissionBasedAdminLocked$21((android.content.pm.UserInfo) obj);
                return lambda$getActiveAdminsForAffectedUserInclPermissionBasedAdminLocked$21;
            }
        });
        if (lambda$getUserDataUnchecked$5(i).mPermissionBasedAdmin != null) {
            activeAdminsForUserAndItsManagedProfilesInclPermissionBasedAdminLocked.add(lambda$getUserDataUnchecked$5(i).mPermissionBasedAdmin);
        }
        return activeAdminsForUserAndItsManagedProfilesInclPermissionBasedAdminLocked;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$getActiveAdminsForAffectedUserInclPermissionBasedAdminLocked$21(android.content.pm.UserInfo userInfo) {
        return false;
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private java.util.List<com.android.server.devicepolicy.ActiveAdmin> getActiveAdminsForUserAndItsManagedProfilesLocked(final int i, final java.util.function.Predicate<android.content.pm.UserInfo> predicate) {
        final java.util.ArrayList arrayList = new java.util.ArrayList();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda174
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getActiveAdminsForUserAndItsManagedProfilesLocked$22(i, arrayList, predicate);
            }
        });
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getActiveAdminsForUserAndItsManagedProfilesLocked$22(int i, java.util.ArrayList arrayList, java.util.function.Predicate predicate) throws java.lang.Exception {
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getProfiles(i)) {
            com.android.server.devicepolicy.DevicePolicyData userDataUnchecked = getUserDataUnchecked(userInfo.id);
            if (userInfo.id == i) {
                arrayList.addAll(userDataUnchecked.mAdminList);
            } else if (userInfo.isManagedProfile()) {
                for (int i2 = 0; i2 < userDataUnchecked.mAdminList.size(); i2++) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = userDataUnchecked.mAdminList.get(i2);
                    if (activeAdmin.hasParentActiveAdmin()) {
                        arrayList.add(activeAdmin.getParentActiveAdmin());
                    }
                    if (predicate.test(userInfo)) {
                        arrayList.add(activeAdmin);
                    }
                }
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private java.util.List<com.android.server.devicepolicy.ActiveAdmin> getActiveAdminsForUserAndItsManagedProfilesInclPermissionBasedAdminLocked(final int i, final java.util.function.Predicate<android.content.pm.UserInfo> predicate) {
        final java.util.ArrayList arrayList = new java.util.ArrayList();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda193
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getActiveAdminsForUserAndItsManagedProfilesInclPermissionBasedAdminLocked$23(i, arrayList, predicate);
            }
        });
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getActiveAdminsForUserAndItsManagedProfilesInclPermissionBasedAdminLocked$23(int i, java.util.ArrayList arrayList, java.util.function.Predicate predicate) throws java.lang.Exception {
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getProfiles(i)) {
            com.android.server.devicepolicy.DevicePolicyData userDataUnchecked = getUserDataUnchecked(userInfo.id);
            if (userInfo.id == i) {
                arrayList.addAll(userDataUnchecked.mAdminList);
                if (userDataUnchecked.mPermissionBasedAdmin != null) {
                    arrayList.add(userDataUnchecked.mPermissionBasedAdmin);
                }
            } else if (userInfo.isManagedProfile()) {
                for (int i2 = 0; i2 < userDataUnchecked.mAdminList.size(); i2++) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = userDataUnchecked.mAdminList.get(i2);
                    if (activeAdmin.hasParentActiveAdmin()) {
                        arrayList.add(activeAdmin.getParentActiveAdmin());
                    }
                    if (predicate.test(userInfo)) {
                        arrayList.add(activeAdmin);
                    }
                }
                if (userDataUnchecked.mPermissionBasedAdmin != null && predicate.test(userInfo)) {
                    arrayList.add(userDataUnchecked.mPermissionBasedAdmin);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isSeparateProfileChallengeEnabled(final int i) {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda6
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isSeparateProfileChallengeEnabled$24;
                lambda$isSeparateProfileChallengeEnabled$24 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isSeparateProfileChallengeEnabled$24(i);
                return lambda$isSeparateProfileChallengeEnabled$24;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isSeparateProfileChallengeEnabled$24(int i) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(this.mLockPatternUtils.isSeparateProfileChallengeEnabled(i));
    }

    public void setPasswordMinimumLength(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature || notSupportedOnAutomotive("setPasswordMinimumLength")) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                ensureMinimumQuality(userHandleGetCallingUserId, activeAdminForCallerLocked, 131072, "setPasswordMinimumLength");
                android.app.admin.PasswordPolicy passwordPolicy = activeAdminForCallerLocked.mPasswordPolicy;
                if (passwordPolicy.length != i) {
                    passwordPolicy.length = i;
                    updatePasswordValidityCheckpointLocked(userHandleGetCallingUserId, z);
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
                logPasswordQualitySetIfSecurityLogEnabled(componentName, userHandleGetCallingUserId, z, passwordPolicy);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(2).setAdmin(componentName).setInt(i).write();
    }

    private void ensureMinimumQuality(final int i, final com.android.server.devicepolicy.ActiveAdmin activeAdmin, final int i2, final java.lang.String str) {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda166
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$ensureMinimumQuality$25(activeAdmin, i2, i, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$ensureMinimumQuality$25(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i, int i2, java.lang.String str) throws java.lang.Exception {
        if (activeAdmin.mPasswordPolicy.quality < i && passwordQualityInvocationOrderCheckEnabled(activeAdmin.info.getPackageName(), i2)) {
            throw new java.lang.IllegalStateException(java.lang.String.format("password quality should be at least %d for %s", java.lang.Integer.valueOf(i), str));
        }
    }

    public int getPasswordMinimumLength(android.content.ComponentName componentName, int i, boolean z) {
        return getStrictestPasswordRequirement(componentName, i, z, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda25
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Integer lambda$getPasswordMinimumLength$26;
                lambda$getPasswordMinimumLength$26 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordMinimumLength$26((com.android.server.devicepolicy.ActiveAdmin) obj);
                return lambda$getPasswordMinimumLength$26;
            }
        }, 131072);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Integer lambda$getPasswordMinimumLength$26(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return java.lang.Integer.valueOf(activeAdmin.mPasswordPolicy.length);
    }

    public void setPasswordHistoryLength(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                if (activeAdminForCallerLocked.passwordHistoryLength != i) {
                    activeAdminForCallerLocked.passwordHistoryLength = i;
                    updatePasswordValidityCheckpointLocked(userHandleGetCallingUserId, z);
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (android.app.admin.SecurityLog.isLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210018, new java.lang.Object[]{componentName.getPackageName(), java.lang.Integer.valueOf(userHandleGetCallingUserId), java.lang.Integer.valueOf(z ? getProfileParentId(userHandleGetCallingUserId) : userHandleGetCallingUserId), java.lang.Integer.valueOf(i)});
        }
    }

    public int getPasswordHistoryLength(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mLockPatternUtils.hasSecureLockScreen()) {
            return 0;
        }
        return getStrictestPasswordRequirement(componentName, i, z, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda17
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Integer lambda$getPasswordHistoryLength$27;
                lambda$getPasswordHistoryLength$27 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordHistoryLength$27((com.android.server.devicepolicy.ActiveAdmin) obj);
                return lambda$getPasswordHistoryLength$27;
            }
        }, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Integer lambda$getPasswordHistoryLength$27(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return java.lang.Integer.valueOf(activeAdmin.passwordHistoryLength);
    }

    public void setPasswordExpirationTimeout(android.content.ComponentName componentName, java.lang.String str, long j, boolean z) {
        com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return;
        }
        if (!isPermissionCheckFlagEnabled()) {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(j, "Timeout must be >= 0 ms");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        int profileParentId = z ? getProfileParentId(userHandleGetCallingUserId) : userHandleGetCallingUserId;
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    activeAdminForCallerLocked = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", getCallerIdentity(componentName, str).getPackageName(), profileParentId).getActiveAdmin();
                } else {
                    activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 6, z);
                }
                long currentTimeMillis = j > 0 ? java.lang.System.currentTimeMillis() + j : 0L;
                activeAdminForCallerLocked.passwordExpirationDate = currentTimeMillis;
                activeAdminForCallerLocked.passwordExpirationTimeout = j;
                if (j > 0) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "setPasswordExpiration(): password will expire on " + java.text.DateFormat.getDateTimeInstance(2, 2).format(new java.util.Date(currentTimeMillis)));
                }
                saveSettingsLocked(userHandleGetCallingUserId);
                setExpirationAlarmCheckLocked(this.mContext, userHandleGetCallingUserId, z);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (android.app.admin.SecurityLog.isLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210016, new java.lang.Object[]{str, java.lang.Integer.valueOf(userHandleGetCallingUserId), java.lang.Integer.valueOf(profileParentId), java.lang.Long.valueOf(j)});
        }
    }

    public long getPasswordExpirationTimeout(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return 0L;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(componentName), i));
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i, z);
                    return activeAdminUncheckedLocked != null ? activeAdminUncheckedLocked.passwordExpirationTimeout : 0L;
                }
                java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z));
                int size = activeAdminsForLockscreenPoliciesLocked.size();
                long j = 0;
                for (int i2 = 0; i2 < size; i2++) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = activeAdminsForLockscreenPoliciesLocked.get(i2);
                    if (j == 0 || (activeAdmin.passwordExpirationTimeout != 0 && j > activeAdmin.passwordExpirationTimeout)) {
                        j = activeAdmin.passwordExpirationTimeout;
                    }
                }
                return j;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean addCrossProfileWidgetProvider(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked;
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        java.util.ArrayList arrayList;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isPermissionCheckFlagEnabled()) {
            activeAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
            synchronized (getLockObject()) {
                profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
            }
            activeAdmin = profileOwnerLocked;
        }
        synchronized (getLockObject()) {
            try {
                if (activeAdmin.crossProfileWidgetProviders == null) {
                    activeAdmin.crossProfileWidgetProviders = new java.util.ArrayList();
                }
                java.util.List<java.lang.String> list = activeAdmin.crossProfileWidgetProviders;
                if (list.contains(str2)) {
                    arrayList = null;
                } else {
                    list.add(str2);
                    arrayList = new java.util.ArrayList(list);
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(49).setAdmin(callerIdentity.getPackageName()).write();
        if (arrayList != null) {
            this.mLocalService.notifyCrossProfileProvidersChanged(callerIdentity.getUserId(), arrayList);
            return true;
        }
        return false;
    }

    public boolean removeCrossProfileWidgetProvider(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked;
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        java.util.ArrayList arrayList;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isPermissionCheckFlagEnabled()) {
            activeAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
            synchronized (getLockObject()) {
                profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
            }
            activeAdmin = profileOwnerLocked;
        }
        synchronized (getLockObject()) {
            try {
                if (activeAdmin.crossProfileWidgetProviders != null && !activeAdmin.crossProfileWidgetProviders.isEmpty()) {
                    java.util.List<java.lang.String> list = activeAdmin.crossProfileWidgetProviders;
                    if (!list.remove(str2)) {
                        arrayList = null;
                    } else {
                        arrayList = new java.util.ArrayList(list);
                        saveSettingsLocked(callerIdentity.getUserId());
                    }
                    android.app.admin.DevicePolicyEventLogger.createEvent(117).setAdmin(callerIdentity.getPackageName()).write();
                    if (arrayList == null) {
                        return false;
                    }
                    this.mLocalService.notifyCrossProfileProvidersChanged(callerIdentity.getUserId(), arrayList);
                    return true;
                }
                return false;
            } finally {
            }
        }
    }

    public java.util.List<java.lang.String> getCrossProfileWidgetProviders(android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked;
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isPermissionCheckFlagEnabled()) {
            activeAdmin = enforceCanQueryAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
            synchronized (getLockObject()) {
                profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
            }
            activeAdmin = profileOwnerLocked;
        }
        synchronized (getLockObject()) {
            try {
                if (activeAdmin.crossProfileWidgetProviders != null && !activeAdmin.crossProfileWidgetProviders.isEmpty()) {
                    if (this.mInjector.binderIsCallingUidMyUid()) {
                        return new java.util.ArrayList(activeAdmin.crossProfileWidgetProviders);
                    }
                    return activeAdmin.crossProfileWidgetProviders;
                }
                return null;
            } finally {
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private long getPasswordExpirationLocked(android.content.ComponentName componentName, int i, boolean z) {
        if (componentName != null) {
            com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i, z);
            if (activeAdminUncheckedLocked != null) {
                return activeAdminUncheckedLocked.passwordExpirationDate;
            }
            return 0L;
        }
        java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z));
        int size = activeAdminsForLockscreenPoliciesLocked.size();
        long j = 0;
        for (int i2 = 0; i2 < size; i2++) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = activeAdminsForLockscreenPoliciesLocked.get(i2);
            if (j == 0 || (activeAdmin.passwordExpirationDate != 0 && j > activeAdmin.passwordExpirationDate)) {
                j = activeAdmin.passwordExpirationDate;
            }
        }
        return j;
    }

    public long getPasswordExpiration(android.content.ComponentName componentName, int i, boolean z) {
        long passwordExpirationLocked;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return 0L;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(componentName), i));
        synchronized (getLockObject()) {
            passwordExpirationLocked = getPasswordExpirationLocked(componentName, i, z);
        }
        return passwordExpirationLocked;
    }

    public void setPasswordMinimumUpperCase(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature || notSupportedOnAutomotive("setPasswordMinimumUpperCase")) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                ensureMinimumQuality(userHandleGetCallingUserId, activeAdminForCallerLocked, 393216, "setPasswordMinimumUpperCase");
                android.app.admin.PasswordPolicy passwordPolicy = activeAdminForCallerLocked.mPasswordPolicy;
                if (passwordPolicy.upperCase != i) {
                    passwordPolicy.upperCase = i;
                    updatePasswordValidityCheckpointLocked(userHandleGetCallingUserId, z);
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
                logPasswordQualitySetIfSecurityLogEnabled(componentName, userHandleGetCallingUserId, z, passwordPolicy);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(7).setAdmin(componentName).setInt(i).write();
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName componentName, int i, boolean z) {
        return getStrictestPasswordRequirement(componentName, i, z, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda16
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Integer lambda$getPasswordMinimumUpperCase$28;
                lambda$getPasswordMinimumUpperCase$28 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordMinimumUpperCase$28((com.android.server.devicepolicy.ActiveAdmin) obj);
                return lambda$getPasswordMinimumUpperCase$28;
            }
        }, 393216);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Integer lambda$getPasswordMinimumUpperCase$28(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return java.lang.Integer.valueOf(activeAdmin.mPasswordPolicy.upperCase);
    }

    public void setPasswordMinimumLowerCase(android.content.ComponentName componentName, int i, boolean z) {
        if (notSupportedOnAutomotive("setPasswordMinimumLowerCase")) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                ensureMinimumQuality(userHandleGetCallingUserId, activeAdminForCallerLocked, 393216, "setPasswordMinimumLowerCase");
                android.app.admin.PasswordPolicy passwordPolicy = activeAdminForCallerLocked.mPasswordPolicy;
                if (passwordPolicy.lowerCase != i) {
                    passwordPolicy.lowerCase = i;
                    updatePasswordValidityCheckpointLocked(userHandleGetCallingUserId, z);
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
                logPasswordQualitySetIfSecurityLogEnabled(componentName, userHandleGetCallingUserId, z, passwordPolicy);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(6).setAdmin(componentName).setInt(i).write();
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName componentName, int i, boolean z) {
        return getStrictestPasswordRequirement(componentName, i, z, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda126
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Integer lambda$getPasswordMinimumLowerCase$29;
                lambda$getPasswordMinimumLowerCase$29 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordMinimumLowerCase$29((com.android.server.devicepolicy.ActiveAdmin) obj);
                return lambda$getPasswordMinimumLowerCase$29;
            }
        }, 393216);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Integer lambda$getPasswordMinimumLowerCase$29(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return java.lang.Integer.valueOf(activeAdmin.mPasswordPolicy.lowerCase);
    }

    public void setPasswordMinimumLetters(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature || notSupportedOnAutomotive("setPasswordMinimumLetters")) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                ensureMinimumQuality(userHandleGetCallingUserId, activeAdminForCallerLocked, 393216, "setPasswordMinimumLetters");
                android.app.admin.PasswordPolicy passwordPolicy = activeAdminForCallerLocked.mPasswordPolicy;
                if (passwordPolicy.letters != i) {
                    passwordPolicy.letters = i;
                    updatePasswordValidityCheckpointLocked(userHandleGetCallingUserId, z);
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
                logPasswordQualitySetIfSecurityLogEnabled(componentName, userHandleGetCallingUserId, z, passwordPolicy);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(5).setAdmin(componentName).setInt(i).write();
    }

    public int getPasswordMinimumLetters(android.content.ComponentName componentName, int i, boolean z) {
        return getStrictestPasswordRequirement(componentName, i, z, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda169
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Integer lambda$getPasswordMinimumLetters$30;
                lambda$getPasswordMinimumLetters$30 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordMinimumLetters$30((com.android.server.devicepolicy.ActiveAdmin) obj);
                return lambda$getPasswordMinimumLetters$30;
            }
        }, 393216);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Integer lambda$getPasswordMinimumLetters$30(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return java.lang.Integer.valueOf(activeAdmin.mPasswordPolicy.letters);
    }

    public void setPasswordMinimumNumeric(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature || notSupportedOnAutomotive("setPasswordMinimumNumeric")) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                ensureMinimumQuality(userHandleGetCallingUserId, activeAdminForCallerLocked, 393216, "setPasswordMinimumNumeric");
                android.app.admin.PasswordPolicy passwordPolicy = activeAdminForCallerLocked.mPasswordPolicy;
                if (passwordPolicy.numeric != i) {
                    passwordPolicy.numeric = i;
                    updatePasswordValidityCheckpointLocked(userHandleGetCallingUserId, z);
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
                logPasswordQualitySetIfSecurityLogEnabled(componentName, userHandleGetCallingUserId, z, passwordPolicy);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(3).setAdmin(componentName).setInt(i).write();
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName componentName, int i, boolean z) {
        return getStrictestPasswordRequirement(componentName, i, z, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda201
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Integer lambda$getPasswordMinimumNumeric$31;
                lambda$getPasswordMinimumNumeric$31 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordMinimumNumeric$31((com.android.server.devicepolicy.ActiveAdmin) obj);
                return lambda$getPasswordMinimumNumeric$31;
            }
        }, 393216);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Integer lambda$getPasswordMinimumNumeric$31(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return java.lang.Integer.valueOf(activeAdmin.mPasswordPolicy.numeric);
    }

    public void setPasswordMinimumSymbols(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature || notSupportedOnAutomotive("setPasswordMinimumSymbols")) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                ensureMinimumQuality(userHandleGetCallingUserId, activeAdminForCallerLocked, 393216, "setPasswordMinimumSymbols");
                android.app.admin.PasswordPolicy passwordPolicy = activeAdminForCallerLocked.mPasswordPolicy;
                if (passwordPolicy.symbols != i) {
                    activeAdminForCallerLocked.mPasswordPolicy.symbols = i;
                    updatePasswordValidityCheckpointLocked(userHandleGetCallingUserId, z);
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
                logPasswordQualitySetIfSecurityLogEnabled(componentName, userHandleGetCallingUserId, z, passwordPolicy);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(8).setAdmin(componentName).setInt(i).write();
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName componentName, int i, boolean z) {
        return getStrictestPasswordRequirement(componentName, i, z, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda110
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Integer lambda$getPasswordMinimumSymbols$32;
                lambda$getPasswordMinimumSymbols$32 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordMinimumSymbols$32((com.android.server.devicepolicy.ActiveAdmin) obj);
                return lambda$getPasswordMinimumSymbols$32;
            }
        }, 393216);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Integer lambda$getPasswordMinimumSymbols$32(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return java.lang.Integer.valueOf(activeAdmin.mPasswordPolicy.symbols);
    }

    public void setPasswordMinimumNonLetter(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature || notSupportedOnAutomotive("setPasswordMinimumNonLetter")) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 0, z);
                ensureMinimumQuality(userHandleGetCallingUserId, activeAdminForCallerLocked, 393216, "setPasswordMinimumNonLetter");
                android.app.admin.PasswordPolicy passwordPolicy = activeAdminForCallerLocked.mPasswordPolicy;
                if (passwordPolicy.nonLetter != i) {
                    activeAdminForCallerLocked.mPasswordPolicy.nonLetter = i;
                    updatePasswordValidityCheckpointLocked(userHandleGetCallingUserId, z);
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
                logPasswordQualitySetIfSecurityLogEnabled(componentName, userHandleGetCallingUserId, z, passwordPolicy);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(4).setAdmin(componentName).setInt(i).write();
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName componentName, int i, boolean z) {
        return getStrictestPasswordRequirement(componentName, i, z, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda189
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Integer lambda$getPasswordMinimumNonLetter$33;
                lambda$getPasswordMinimumNonLetter$33 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordMinimumNonLetter$33((com.android.server.devicepolicy.ActiveAdmin) obj);
                return lambda$getPasswordMinimumNonLetter$33;
            }
        }, 393216);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Integer lambda$getPasswordMinimumNonLetter$33(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return java.lang.Integer.valueOf(activeAdmin.mPasswordPolicy.nonLetter);
    }

    private int getStrictestPasswordRequirement(android.content.ComponentName componentName, int i, boolean z, java.util.function.Function<com.android.server.devicepolicy.ActiveAdmin, java.lang.Integer> function, int i2) {
        if (!this.mHasFeature) {
            return 0;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(componentName), i));
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i, z);
                    return activeAdminUncheckedLocked != null ? function.apply(activeAdminUncheckedLocked).intValue() : 0;
                }
                java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z));
                int size = activeAdminsForLockscreenPoliciesLocked.size();
                int i3 = 0;
                while (r1 < size) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = activeAdminsForLockscreenPoliciesLocked.get(r1);
                    if (isLimitPasswordAllowed(activeAdmin, i2)) {
                        java.lang.Integer apply = function.apply(activeAdmin);
                        if (apply.intValue() > i3) {
                            i3 = apply.intValue();
                        }
                    }
                    r1++;
                }
                return i3;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int i, boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i) && (isSystemUid(callerIdentity) || hasCallingOrSelfPermission("android.permission.SET_INITIAL_LOCK") || hasCallingOrSelfPermission("android.permission.SET_AND_VERIFY_LOCKSCREEN_CREDENTIALS") || hasCallingOrSelfPermission("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE")));
        return getPasswordMinimumMetricsUnchecked(i, z);
    }

    private android.app.admin.PasswordMetrics getPasswordMinimumMetricsUnchecked(int i) {
        return getPasswordMinimumMetricsUnchecked(i, false);
    }

    private android.app.admin.PasswordMetrics getPasswordMinimumMetricsUnchecked(int i, boolean z) {
        java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked;
        if (!this.mHasFeature) {
            new android.app.admin.PasswordMetrics(-1);
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        if (z) {
            com.android.internal.util.Preconditions.checkArgument(!isManagedProfile(i));
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        synchronized (getLockObject()) {
            try {
                if (z) {
                    activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForUserAndItsManagedProfilesLocked(i, new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda96
                        @Override // java.util.function.Predicate
                        public final boolean test(java.lang.Object obj) {
                            boolean lambda$getPasswordMinimumMetricsUnchecked$34;
                            lambda$getPasswordMinimumMetricsUnchecked$34 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getPasswordMinimumMetricsUnchecked$34((android.content.pm.UserInfo) obj);
                            return lambda$getPasswordMinimumMetricsUnchecked$34;
                        }
                    });
                } else {
                    activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(i);
                }
                java.util.Iterator<com.android.server.devicepolicy.ActiveAdmin> it = activeAdminsForLockscreenPoliciesLocked.iterator();
                while (it.hasNext()) {
                    arrayList.add(it.next().mPasswordPolicy.getMinMetrics());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return android.app.admin.PasswordMetrics.merge(arrayList);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$getPasswordMinimumMetricsUnchecked$34(android.content.pm.UserInfo userInfo) {
        return false;
    }

    public boolean isActivePasswordSufficient(java.lang.String str, int i, boolean z) {
        boolean isActivePasswordSufficientForUserLocked;
        if (!this.mHasFeature) {
            return true;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        enforceUserUnlocked(i, z);
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    enforcePermission("android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", str, z ? getProfileParentId(i) : i);
                } else {
                    getActiveAdminForCallerLocked(null, 0, z);
                }
                int credentialOwner = getCredentialOwner(i, z);
                isActivePasswordSufficientForUserLocked = isActivePasswordSufficientForUserLocked(getUserDataUnchecked(credentialOwner).mPasswordValidAtLastCheckpoint, this.mLockSettingsInternal.getUserPasswordMetrics(credentialOwner), getProfileParentUserIfRequested(i, z));
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return isActivePasswordSufficientForUserLocked;
    }

    public boolean isActivePasswordSufficientForDeviceRequirement() {
        boolean isEmpty;
        if (!this.mHasFeature) {
            return true;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        int userId = callerIdentity.getUserId();
        com.android.internal.util.Preconditions.checkCallingUser(isManagedProfile(userId));
        int profileParentId = getProfileParentId(userId);
        enforceUserUnlocked(profileParentId);
        synchronized (getLockObject()) {
            isEmpty = android.app.admin.PasswordMetrics.validatePasswordMetrics(getPasswordMinimumMetricsUnchecked(profileParentId, true), getAggregatedPasswordComplexityLocked(profileParentId, true), this.mLockSettingsInternal.getUserPasswordMetrics(profileParentId)).isEmpty();
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(189).setStrings(new java.lang.String[]{this.mOwners.getProfileOwnerComponent(callerIdentity.getUserId()).getPackageName()}).write();
        return isEmpty;
    }

    public boolean isUsingUnifiedPassword(android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return true;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        com.android.internal.util.Preconditions.checkCallingUser(isManagedProfile(callerIdentity.getUserId()));
        return !isSeparateProfileChallengeEnabled(callerIdentity.getUserId());
    }

    public boolean isPasswordSufficientAfterProfileUnification(int i, final int i2) {
        boolean isEmpty;
        if (!this.mHasFeature) {
            return true;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(!isManagedProfile(i), "You can not check password sufficiency for a managed profile, userId = %d", new java.lang.Object[]{java.lang.Integer.valueOf(i)});
        enforceUserUnlocked(i);
        synchronized (getLockObject()) {
            try {
                android.app.admin.PasswordMetrics userPasswordMetrics = this.mLockSettingsInternal.getUserPasswordMetrics(i);
                java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForUserAndItsManagedProfilesLocked = getActiveAdminsForUserAndItsManagedProfilesLocked(i, new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda200
                    @Override // java.util.function.Predicate
                    public final boolean test(java.lang.Object obj) {
                        boolean lambda$isPasswordSufficientAfterProfileUnification$35;
                        lambda$isPasswordSufficientAfterProfileUnification$35 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isPasswordSufficientAfterProfileUnification$35(i2, (android.content.pm.UserInfo) obj);
                        return lambda$isPasswordSufficientAfterProfileUnification$35;
                    }
                });
                java.util.ArrayList arrayList = new java.util.ArrayList(activeAdminsForUserAndItsManagedProfilesLocked.size());
                int i3 = 0;
                for (com.android.server.devicepolicy.ActiveAdmin activeAdmin : activeAdminsForUserAndItsManagedProfilesLocked) {
                    arrayList.add(activeAdmin.mPasswordPolicy.getMinMetrics());
                    i3 = java.lang.Math.max(i3, activeAdmin.mPasswordComplexity);
                }
                isEmpty = android.app.admin.PasswordMetrics.validatePasswordMetrics(android.app.admin.PasswordMetrics.merge(arrayList), i3, userPasswordMetrics).isEmpty();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return isEmpty;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ boolean lambda$isPasswordSufficientAfterProfileUnification$35(int i, android.content.pm.UserInfo userInfo) {
        return userInfo.id == i || !this.mLockPatternUtils.isSeparateProfileChallengeEnabled(userInfo.id);
    }

    private boolean isActivePasswordSufficientForUserLocked(boolean z, @android.annotation.Nullable android.app.admin.PasswordMetrics passwordMetrics, int i) {
        if (!this.mInjector.storageManagerIsFileBasedEncryptionEnabled() && passwordMetrics == null) {
            return z;
        }
        if (passwordMetrics == null) {
            throw new java.lang.IllegalStateException("isActivePasswordSufficient called on FBE-locked user");
        }
        return isPasswordSufficientForUserWithoutCheckpointLocked(passwordMetrics, i);
    }

    private boolean isPasswordSufficientForUserWithoutCheckpointLocked(@android.annotation.NonNull android.app.admin.PasswordMetrics passwordMetrics, int i) {
        return android.app.admin.PasswordMetrics.validatePasswordMetrics(getPasswordMinimumMetricsUnchecked(i), getAggregatedPasswordComplexityLocked(i), passwordMetrics).isEmpty();
    }

    public int getPasswordComplexity(boolean z) {
        int determineComplexity;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        android.app.admin.DevicePolicyEventLogger.createEvent(72).setStrings(z ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT, this.mInjector.getPackageManager().getPackagesForUid(callerIdentity.getUid())).write();
        enforceUserUnlocked(callerIdentity.getUserId());
        boolean z2 = true;
        if (z) {
            if (!isDefaultDeviceOwner(callerIdentity) && !isProfileOwner(callerIdentity) && !isSystemUid(callerIdentity)) {
                z2 = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z2, "Only profile owner, device owner and system may call this method on parent.");
        } else if (isPermissionCheckFlagEnabled()) {
            if (!hasCallingOrSelfPermission("android.permission.REQUEST_PASSWORD_COMPLEXITY") && !hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS") && !isDefaultDeviceOwner(callerIdentity) && !isProfileOwner(callerIdentity)) {
                z2 = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z2, "Must have android.permission.REQUEST_PASSWORD_COMPLEXITY or android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS permissions, or be a profile owner or device owner.");
        } else {
            if (!hasCallingOrSelfPermission("android.permission.REQUEST_PASSWORD_COMPLEXITY") && !isDefaultDeviceOwner(callerIdentity) && !isProfileOwner(callerIdentity)) {
                z2 = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z2, "Must have android.permission.REQUEST_PASSWORD_COMPLEXITY permission, or be a profile owner or device owner.");
        }
        synchronized (getLockObject()) {
            android.app.admin.PasswordMetrics userPasswordMetrics = this.mLockSettingsInternal.getUserPasswordMetrics(getCredentialOwner(callerIdentity.getUserId(), z));
            determineComplexity = userPasswordMetrics != null ? userPasswordMetrics.determineComplexity() : 0;
        }
        return determineComplexity;
    }

    public void setRequiredPasswordComplexity(java.lang.String str, final int i, final boolean z) {
        com.android.server.devicepolicy.ActiveAdmin parentOfAdminIfRequired;
        if (!this.mHasFeature) {
            return;
        }
        com.android.internal.util.Preconditions.checkArgument(java.util.Set.of(0, 65536, 196608, 327680).contains(java.lang.Integer.valueOf(i)), "Provided complexity is not one of the allowed values.");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (!isPermissionCheckFlagEnabled()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
            com.android.internal.util.Preconditions.checkArgument(!z || isProfileOwner(callerIdentity));
        }
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    parentOfAdminIfRequired = enforcePermissionAndGetEnforcingAdmin(null, "android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", callerIdentity.getPackageName(), z ? getProfileParentId(callerIdentity.getUserId()) : callerIdentity.getUserId()).getActiveAdmin();
                } else {
                    parentOfAdminIfRequired = getParentOfAdminIfRequired(getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()), z);
                }
                if (parentOfAdminIfRequired.mPasswordComplexity != i) {
                    if (!z) {
                        com.android.internal.util.Preconditions.checkState(parentOfAdminIfRequired.hasParentActiveAdmin() && parentOfAdminIfRequired.getParentActiveAdmin().mPasswordPolicy.quality != 0 ? false : true, "Password quality is set on the parent when attempting to set passwordcomplexity. Clear the quality by setting the password quality on the parent to PASSWORD_QUALITY_UNSPECIFIED first");
                    }
                    final com.android.server.devicepolicy.ActiveAdmin activeAdmin = parentOfAdminIfRequired;
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda118
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setRequiredPasswordComplexity$36(activeAdmin, i, callerIdentity, z);
                        }
                    });
                    android.app.admin.DevicePolicyEventLogger.createEvent(177).setAdmin(parentOfAdminIfRequired.info.getPackageName()).setInt(i).setBoolean(z).write();
                }
                logPasswordComplexityRequiredIfSecurityLogEnabled(callerIdentity.getPackageName(), callerIdentity.getUserId(), z, i);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setRequiredPasswordComplexity$36(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i, com.android.server.devicepolicy.CallerIdentity callerIdentity, boolean z) throws java.lang.Exception {
        activeAdmin.mPasswordComplexity = i;
        activeAdmin.mPasswordPolicy = new android.app.admin.PasswordPolicy();
        updatePasswordValidityCheckpointLocked(callerIdentity.getUserId(), z);
        updatePasswordQualityCacheForUserGroup(callerIdentity.getUserId());
        saveSettingsLocked(callerIdentity.getUserId());
    }

    private void logPasswordComplexityRequiredIfSecurityLogEnabled(java.lang.String str, int i, boolean z, int i2) {
        if (android.app.admin.SecurityLog.isLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210035, new java.lang.Object[]{str, java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(z ? getProfileParentId(i) : i), java.lang.Integer.valueOf(i2)});
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private int getAggregatedPasswordComplexityLocked(int i) {
        return getAggregatedPasswordComplexityLocked(i, false);
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private int getAggregatedPasswordComplexityLocked(int i, boolean z) {
        java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked;
        ensureLocked();
        if (z) {
            activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForUserAndItsManagedProfilesLocked(i, new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda164
                @Override // java.util.function.Predicate
                public final boolean test(java.lang.Object obj) {
                    boolean lambda$getAggregatedPasswordComplexityLocked$37;
                    lambda$getAggregatedPasswordComplexityLocked$37 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getAggregatedPasswordComplexityLocked$37((android.content.pm.UserInfo) obj);
                    return lambda$getAggregatedPasswordComplexityLocked$37;
                }
            });
        } else {
            activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(i);
        }
        java.util.Iterator<com.android.server.devicepolicy.ActiveAdmin> it = activeAdminsForLockscreenPoliciesLocked.iterator();
        int i2 = 0;
        while (it.hasNext()) {
            i2 = java.lang.Math.max(i2, it.next().mPasswordComplexity);
        }
        return i2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$getAggregatedPasswordComplexityLocked$37(android.content.pm.UserInfo userInfo) {
        return false;
    }

    public int getRequiredPasswordComplexity(java.lang.String str, boolean z) {
        int i;
        if (!this.mHasFeature) {
            return 0;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        if (isPermissionCheckFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", str, z ? getProfileParentId(callerIdentity.getUserId()) : callerIdentity.getUserId());
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
            com.android.internal.util.Preconditions.checkArgument(!z || isProfileOwner(callerIdentity));
        }
        synchronized (getLockObject()) {
            i = getParentOfAdminIfRequired(getDeviceOrProfileOwnerAdminLocked(callerIdentity.getUserId()), z).mPasswordComplexity;
        }
        return i;
    }

    public int getAggregatedPasswordComplexityForUser(int i, boolean z) {
        int aggregatedPasswordComplexityLocked;
        if (!this.mHasFeature) {
            return 0;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            aggregatedPasswordComplexityLocked = getAggregatedPasswordComplexityLocked(i, z);
        }
        return aggregatedPasswordComplexityLocked;
    }

    public int getCurrentFailedPasswordAttempts(java.lang.String str, int i, boolean z) {
        int i2;
        if (!this.mLockPatternUtils.hasSecureLockScreen()) {
            return 0;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        synchronized (getLockObject()) {
            try {
                if (!isSystemUid(callerIdentity) && !hasCallingPermission("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE")) {
                    if (isPermissionCheckFlagEnabled()) {
                        enforcePermission("android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", str, z ? getProfileParentId(i) : i);
                    } else {
                        getActiveAdminForCallerLocked(null, 1, z);
                    }
                }
                i2 = getUserDataUnchecked(getCredentialOwner(i, z)).mFailedPasswordAttempts;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return i2;
    }

    public void setMaximumFailedPasswordsForWipe(android.content.ComponentName componentName, java.lang.String str, int i, boolean z) {
        com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return;
        }
        if (!isPermissionCheckFlagEnabled()) {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        }
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        int profileParentId = z ? getProfileParentId(userHandleGetCallingUserId) : userHandleGetCallingUserId;
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    activeAdminForCallerLocked = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_WIPE_DATA", 4, getCallerIdentity(componentName, str).getPackageName(), profileParentId).getActiveAdmin();
                } else {
                    getActiveAdminForCallerLocked(componentName, 4, z);
                    activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 1, z);
                }
                if (activeAdminForCallerLocked.maximumFailedPasswordsForWipe != i) {
                    activeAdminForCallerLocked.maximumFailedPasswordsForWipe = i;
                    saveSettingsLocked(userHandleGetCallingUserId);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (android.app.admin.SecurityLog.isLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210020, new java.lang.Object[]{str, java.lang.Integer.valueOf(userHandleGetCallingUserId), java.lang.Integer.valueOf(profileParentId), java.lang.Integer.valueOf(i)});
        }
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName componentName, int i, boolean z) {
        com.android.server.devicepolicy.ActiveAdmin adminWithMinimumFailedPasswordsForWipeLocked;
        int i2;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return 0;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        com.android.internal.util.Preconditions.checkCallAuthorization(componentName == null || isCallingFromPackage(componentName.getPackageName(), callerIdentity.getUid()) || canQueryAdminPolicy(callerIdentity));
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    adminWithMinimumFailedPasswordsForWipeLocked = getActiveAdminUncheckedLocked(componentName, i, z);
                } else {
                    adminWithMinimumFailedPasswordsForWipeLocked = getAdminWithMinimumFailedPasswordsForWipeLocked(i, z);
                }
                i2 = adminWithMinimumFailedPasswordsForWipeLocked != null ? adminWithMinimumFailedPasswordsForWipeLocked.maximumFailedPasswordsForWipe : 0;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return i2;
    }

    public int getProfileWithMinimumFailedPasswordsForWipe(int i, boolean z) {
        boolean z2 = this.mHasFeature;
        int i2 = com.android.server.am.ProcessList.INVALID_ADJ;
        if (!z2 || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return com.android.server.am.ProcessList.INVALID_ADJ;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin adminWithMinimumFailedPasswordsForWipeLocked = getAdminWithMinimumFailedPasswordsForWipeLocked(i, z);
                if (adminWithMinimumFailedPasswordsForWipeLocked != null) {
                    i2 = getUserIdToWipeForFailedPasswords(adminWithMinimumFailedPasswordsForWipeLocked);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return i2;
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private com.android.server.devicepolicy.ActiveAdmin getAdminWithMinimumFailedPasswordsForWipeLocked(int i, boolean z) {
        java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z));
        int size = activeAdminsForLockscreenPoliciesLocked.size();
        com.android.server.devicepolicy.ActiveAdmin activeAdmin = null;
        int i2 = 0;
        for (int i3 = 0; i3 < size; i3++) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin2 = activeAdminsForLockscreenPoliciesLocked.get(i3);
            if (activeAdmin2.maximumFailedPasswordsForWipe != 0) {
                int userIdToWipeForFailedPasswords = getUserIdToWipeForFailedPasswords(activeAdmin2);
                if (i2 == 0 || i2 > activeAdmin2.maximumFailedPasswordsForWipe || (i2 == activeAdmin2.maximumFailedPasswordsForWipe && getUserInfo(userIdToWipeForFailedPasswords).isPrimary())) {
                    i2 = activeAdmin2.maximumFailedPasswordsForWipe;
                    activeAdmin = activeAdmin2;
                }
            }
        }
        return activeAdmin;
    }

    private android.content.pm.UserInfo getUserInfo(final int i) {
        return (android.content.pm.UserInfo) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda46
            public final java.lang.Object getOrThrow() {
                android.content.pm.UserInfo lambda$getUserInfo$38;
                lambda$getUserInfo$38 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getUserInfo$38(i);
                return lambda$getUserInfo$38;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.content.pm.UserInfo lambda$getUserInfo$38(int i) throws java.lang.Exception {
        return this.mUserManager.getUserInfo(i);
    }

    private boolean setPasswordPrivileged(@android.annotation.NonNull java.lang.String str, int i, com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        if (isLockScreenSecureUnchecked(callerIdentity.getUserId())) {
            throw new java.lang.SecurityException("Cannot change current password");
        }
        return resetPasswordInternal(str, 0L, null, i, callerIdentity);
    }

    public boolean resetPassword(@android.annotation.Nullable java.lang.String str, int i) throws android.os.RemoteException {
        if (!this.mLockPatternUtils.hasSecureLockScreen()) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Cannot reset password when the device has no lock screen");
            return false;
        }
        if (str == null) {
            str = "";
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        int userId = callerIdentity.getUserId();
        if (hasCallingPermission("android.permission.RESET_PASSWORD")) {
            boolean passwordPrivileged = setPasswordPrivileged(str, i, callerIdentity);
            if (passwordPrivileged) {
                android.app.admin.DevicePolicyEventLogger.createEvent(205).write();
            }
            return passwordPrivileged;
        }
        if (isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity)) {
            synchronized (getLockObject()) {
                try {
                    if (getTargetSdk(getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).info.getPackageName(), userId) < 26) {
                        com.android.server.utils.Slogf.e(LOG_TAG, "DPC can no longer call resetPassword()");
                    } else {
                        throw new java.lang.SecurityException("Device admin can no longer call resetPassword()");
                    }
                } finally {
                }
            }
            return false;
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(null, 2, false);
                com.android.internal.util.Preconditions.checkCallAuthorization(activeAdminForCallerLocked != null, "Unauthorized caller cannot call resetPassword.");
                if (getTargetSdk(activeAdminForCallerLocked.info.getPackageName(), userId) <= 23) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "Device admin can no longer call resetPassword()");
                } else {
                    throw new java.lang.SecurityException("Device admin can no longer call resetPassword()");
                }
            } finally {
            }
        }
        return false;
    }

    private boolean resetPasswordInternal(java.lang.String str, long j, byte[] bArr, int i, com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        int uid = callerIdentity.getUid();
        int userId = android.os.UserHandle.getUserId(uid);
        com.android.internal.widget.LockscreenCredential createPin = android.app.admin.PasswordMetrics.isNumericOnly(str) ? com.android.internal.widget.LockscreenCredential.createPin(str) : com.android.internal.widget.LockscreenCredential.createPasswordOrNone(str);
        synchronized (getLockObject()) {
            try {
                java.util.List validateCredential = android.app.admin.PasswordMetrics.validateCredential(getPasswordMinimumMetricsUnchecked(userId), getAggregatedPasswordComplexityLocked(userId), createPin);
                if (!validateCredential.isEmpty()) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Failed to reset password due to constraint violation: %s", validateCredential.get(0));
                    return false;
                }
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
                if (lambda$getUserDataUnchecked$5.mPasswordOwner >= 0 && lambda$getUserDataUnchecked$5.mPasswordOwner != uid) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "resetPassword: already set by another uid and not entered by user");
                    return false;
                }
                boolean isDefaultDeviceOwner = isDefaultDeviceOwner(callerIdentity);
                boolean z = (i & 2) != 0;
                if (isDefaultDeviceOwner && z) {
                    setDoNotAskCredentialsOnBoot();
                }
                long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                try {
                    if (j == 0 || bArr == null) {
                        if (!this.mLockPatternUtils.setLockCredential(createPin, com.android.internal.widget.LockscreenCredential.createNone(), userId)) {
                            return false;
                        }
                    } else if (!this.mLockPatternUtils.setLockCredentialWithToken(createPin, j, bArr, userId)) {
                        return false;
                    }
                    boolean z2 = (i & 1) != 0;
                    if (z2) {
                        this.mLockPatternUtils.requireStrongAuth(2, -1);
                    }
                    synchronized (getLockObject()) {
                        if (!z2) {
                            uid = -1;
                        }
                        try {
                            if (lambda$getUserDataUnchecked$5.mPasswordOwner != uid) {
                                lambda$getUserDataUnchecked$5.mPasswordOwner = uid;
                                saveSettingsLocked(userId);
                            }
                        } finally {
                        }
                    }
                    return true;
                } finally {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                }
            } finally {
            }
        }
    }

    private boolean isLockScreenSecureUnchecked(final int i) {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda97
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isLockScreenSecureUnchecked$39;
                lambda$isLockScreenSecureUnchecked$39 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isLockScreenSecureUnchecked$39(i);
                return lambda$isLockScreenSecureUnchecked$39;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isLockScreenSecureUnchecked$39(int i) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(this.mLockPatternUtils.isSecure(i));
    }

    private void setDoNotAskCredentialsOnBoot() {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(0);
                if (!lambda$getUserDataUnchecked$5.mDoNotAskCredentialsOnBoot) {
                    lambda$getUserDataUnchecked$5.mDoNotAskCredentialsOnBoot = true;
                    saveSettingsLocked(0);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean getDoNotAskCredentialsOnBoot() {
        boolean z;
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.QUERY_DO_NOT_ASK_CREDENTIALS_ON_BOOT"));
        synchronized (getLockObject()) {
            z = lambda$getUserDataUnchecked$5(0).mDoNotAskCredentialsOnBoot;
        }
        return z;
    }

    public void setMaximumTimeToLock(android.content.ComponentName componentName, java.lang.String str, long j, boolean z) {
        com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked;
        if (!this.mHasFeature) {
            return;
        }
        if (!isPermissionCheckFlagEnabled()) {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        }
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        int profileParentId = z ? getProfileParentId(userHandleGetCallingUserId) : userHandleGetCallingUserId;
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    activeAdminForCallerLocked = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_LOCK", 3, getCallerIdentity(componentName, str).getPackageName(), profileParentId).getActiveAdmin();
                } else {
                    activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 3, z);
                }
                if (activeAdminForCallerLocked.maximumTimeToUnlock != j) {
                    activeAdminForCallerLocked.maximumTimeToUnlock = j;
                    saveSettingsLocked(userHandleGetCallingUserId);
                    updateMaximumTimeToLockLocked(userHandleGetCallingUserId);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (android.app.admin.SecurityLog.isLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210019, new java.lang.Object[]{str, java.lang.Integer.valueOf(userHandleGetCallingUserId), java.lang.Integer.valueOf(profileParentId), java.lang.Long.valueOf(j)});
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    public void updateMaximumTimeToLockLocked(final int i) {
        if (isManagedProfile(i)) {
            updateProfileLockTimeoutLocked(i);
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda34
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$updateMaximumTimeToLockLocked$40(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMaximumTimeToLockLocked$40(int i) throws java.lang.Exception {
        int profileParentId = getProfileParentId(i);
        long maximumTimeToLockPolicyFromAdmins = getMaximumTimeToLockPolicyFromAdmins(getActiveAdminsForLockscreenPoliciesLocked(profileParentId));
        com.android.server.devicepolicy.DevicePolicyData userDataUnchecked = getUserDataUnchecked(profileParentId);
        if (userDataUnchecked.mLastMaximumTimeToLock == maximumTimeToLockPolicyFromAdmins) {
            return;
        }
        userDataUnchecked.mLastMaximumTimeToLock = maximumTimeToLockPolicyFromAdmins;
        if (userDataUnchecked.mLastMaximumTimeToLock != com.android.server.job.controllers.JobStatus.NO_LATEST_RUNTIME) {
            this.mInjector.settingsGlobalPutInt("stay_on_while_plugged_in", 0);
        }
        getPowerManagerInternal().setMaximumScreenOffTimeoutFromDeviceAdmin(profileParentId, maximumTimeToLockPolicyFromAdmins);
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void updateProfileLockTimeoutLocked(final int i) {
        long j;
        if (isSeparateProfileChallengeEnabled(i)) {
            j = getMaximumTimeToLockPolicyFromAdmins(getActiveAdminsForLockscreenPoliciesLocked(i));
        } else {
            j = com.android.server.job.controllers.JobStatus.NO_LATEST_RUNTIME;
        }
        final com.android.server.devicepolicy.DevicePolicyData userDataUnchecked = getUserDataUnchecked(i);
        if (userDataUnchecked.mLastMaximumTimeToLock == j) {
            return;
        }
        userDataUnchecked.mLastMaximumTimeToLock = j;
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda212
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$updateProfileLockTimeoutLocked$41(i, userDataUnchecked);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateProfileLockTimeoutLocked$41(int i, com.android.server.devicepolicy.DevicePolicyData devicePolicyData) throws java.lang.Exception {
        getPowerManagerInternal().setMaximumScreenOffTimeoutFromDeviceAdmin(i, devicePolicyData.mLastMaximumTimeToLock);
    }

    public long getMaximumTimeToLock(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature) {
            return 0L;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        com.android.internal.util.Preconditions.checkCallAuthorization(componentName == null || isCallingFromPackage(componentName.getPackageName(), callerIdentity.getUid()) || canQueryAdminPolicy(callerIdentity));
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i, z);
                    return activeAdminUncheckedLocked != null ? activeAdminUncheckedLocked.maximumTimeToUnlock : 0L;
                }
                long maximumTimeToLockPolicyFromAdmins = getMaximumTimeToLockPolicyFromAdmins(getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z)));
                if (maximumTimeToLockPolicyFromAdmins != com.android.server.job.controllers.JobStatus.NO_LATEST_RUNTIME) {
                    r1 = maximumTimeToLockPolicyFromAdmins;
                }
                return r1;
            } finally {
            }
        }
    }

    private long getMaximumTimeToLockPolicyFromAdmins(java.util.List<com.android.server.devicepolicy.ActiveAdmin> list) {
        long j = com.android.server.job.controllers.JobStatus.NO_LATEST_RUNTIME;
        for (com.android.server.devicepolicy.ActiveAdmin activeAdmin : list) {
            if (activeAdmin.maximumTimeToUnlock > 0 && activeAdmin.maximumTimeToUnlock < j) {
                j = activeAdmin.maximumTimeToUnlock;
            }
        }
        return j;
    }

    public void setRequiredStrongAuthTimeout(android.content.ComponentName componentName, java.lang.String str, long j, boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        com.android.server.devicepolicy.ActiveAdmin parentOfAdminIfRequired;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return;
        }
        boolean z2 = false;
        com.android.internal.util.Preconditions.checkArgument(j >= 0, "Timeout must not be a negative number.");
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        }
        long minimumStrongAuthTimeoutMs = getMinimumStrongAuthTimeoutMs();
        if (j != 0 && j < minimumStrongAuthTimeoutMs) {
            j = minimumStrongAuthTimeoutMs;
        }
        if (j > 259200000) {
            j = 259200000;
        }
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    parentOfAdminIfRequired = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_LOCK_CREDENTIALS", callerIdentity.getPackageName(), z ? getProfileParentId(callerIdentity.getUserId()) : callerIdentity.getUserId()).getActiveAdmin();
                } else {
                    parentOfAdminIfRequired = getParentOfAdminIfRequired(getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()), z);
                }
                if (parentOfAdminIfRequired.strongAuthUnlockTimeout != j) {
                    parentOfAdminIfRequired.strongAuthUnlockTimeout = j;
                    saveSettingsLocked(userId);
                    z2 = true;
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (z2) {
            this.mLockSettingsInternal.refreshStrongAuthTimeout(userId);
            if (isManagedProfile(userId) && !isSeparateProfileChallengeEnabled(userId)) {
                this.mLockSettingsInternal.refreshStrongAuthTimeout(getProfileParentId(userId));
            }
        }
    }

    public long getRequiredStrongAuthTimeout(android.content.ComponentName componentName, int i, boolean z) {
        long j = 259200000;
        if (!this.mHasFeature) {
            return 259200000L;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(componentName), i));
        if (!this.mLockPatternUtils.hasSecureLockScreen()) {
            return 0L;
        }
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i, z);
                    return activeAdminUncheckedLocked != null ? activeAdminUncheckedLocked.strongAuthUnlockTimeout : 0L;
                }
                java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z));
                for (int i2 = 0; i2 < activeAdminsForLockscreenPoliciesLocked.size(); i2++) {
                    long j2 = activeAdminsForLockscreenPoliciesLocked.get(i2).strongAuthUnlockTimeout;
                    if (j2 != 0) {
                        j = java.lang.Math.min(j2, j);
                    }
                }
                return java.lang.Math.max(j, getMinimumStrongAuthTimeoutMs());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private long getMinimumStrongAuthTimeoutMs() {
        if (!this.mInjector.isBuildDebuggable()) {
            return MINIMUM_STRONG_AUTH_TIMEOUT_MS;
        }
        return java.lang.Math.min(this.mInjector.systemPropertiesGetLong("persist.sys.min_str_auth_timeo", MINIMUM_STRONG_AUTH_TIMEOUT_MS), MINIMUM_STRONG_AUTH_TIMEOUT_MS);
    }

    /* JADX WARN: Finally extract failed */
    public void lockNow(int i, java.lang.String str, boolean z) {
        android.content.ComponentName component;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = isUnicornFlagEnabled() ? getCallerIdentity(str) : getCallerIdentity();
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                android.content.ComponentName componentName = null;
                com.android.server.devicepolicy.ActiveAdmin activeAdmin = isUnicornFlagEnabled() ? enforcePermissionsAndGetEnforcingAdmin(null, new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_LOCK", "android.permission.LOCK_DEVICE"}, 3, callerIdentity.getPackageName(), getAffectedUser(z)).getActiveAdmin() : getActiveAdminOrCheckPermissionForCallerLocked(null, 3, z, "android.permission.LOCK_DEVICE");
                checkCanExecuteOrThrowUnsafe(1);
                long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                if (activeAdmin == null) {
                    component = null;
                } else {
                    try {
                        try {
                            component = activeAdmin.info.getComponent();
                        } catch (java.lang.Throwable th) {
                            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                            throw th;
                        }
                    } catch (android.os.RemoteException e) {
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        component = componentName;
                        android.app.admin.DevicePolicyEventLogger.createEvent(10).setAdmin(component).setInt(i).write();
                    }
                }
                if (component != null && (i & 1) != 0) {
                    try {
                        com.android.internal.util.Preconditions.checkCallingUser(isManagedProfile(userId));
                        com.android.internal.util.Preconditions.checkArgument(!z, "Cannot set FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY for the parent");
                        if (!isProfileOwner(component, userId)) {
                            throw new java.lang.SecurityException("Only profile owner admins can set FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY");
                        }
                        if (!this.mInjector.storageManagerIsFileBasedEncryptionEnabled()) {
                            throw new java.lang.UnsupportedOperationException("FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY only applies to FBE devices");
                        }
                        this.mUserManager.evictCredentialEncryptionKey(userId);
                    } catch (android.os.RemoteException e2) {
                        componentName = component;
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        component = componentName;
                        android.app.admin.DevicePolicyEventLogger.createEvent(10).setAdmin(component).setInt(i).write();
                    }
                }
                int i2 = (z || !isSeparateProfileChallengeEnabled(userId)) ? -1 : userId;
                this.mLockPatternUtils.requireStrongAuth(2, i2);
                if (i2 == -1) {
                    if (!this.mIsAutomotive) {
                        this.mInjector.powerManagerGoToSleep(android.os.SystemClock.uptimeMillis(), 1, 0);
                    }
                    this.mInjector.getIWindowManager().lockNow((android.os.Bundle) null);
                } else {
                    this.mInjector.getTrustManager().setDeviceLockedForUser(i2, true);
                }
                if (android.app.admin.SecurityLog.isLoggingEnabled() && component != null) {
                    android.app.admin.SecurityLog.writeEvent(210022, new java.lang.Object[]{component.getPackageName(), java.lang.Integer.valueOf(userId), java.lang.Integer.valueOf(z ? getProfileParentId(userId) : userId)});
                }
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            } catch (java.lang.Throwable th2) {
                throw th2;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(10).setAdmin(component).setInt(i).write();
    }

    public void enforceCanManageCaCerts(android.content.ComponentName componentName, java.lang.String str) {
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageCaCerts(getCallerIdentity(componentName, str)));
    }

    private boolean canManageCaCerts(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return (callerIdentity.hasAdminComponent() && (isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-cert-install")) || hasCallingOrSelfPermission("android.permission.MANAGE_CA_CERTIFICATES");
    }

    public boolean approveCaCert(java.lang.String str, int i, boolean z) {
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()));
        synchronized (getLockObject()) {
            try {
                android.util.ArraySet<java.lang.String> arraySet = lambda$getUserDataUnchecked$5(i).mAcceptedCaCertificates;
                if (!(z ? arraySet.add(str) : arraySet.remove(str))) {
                    return false;
                }
                saveSettingsLocked(i);
                this.mCertificateMonitor.onCertificateApprovalsChanged(i);
                return true;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean isCaCertApproved(java.lang.String str, int i) {
        boolean contains;
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()));
        synchronized (getLockObject()) {
            contains = lambda$getUserDataUnchecked$5(i).mAcceptedCaCertificates.contains(str);
        }
        return contains;
    }

    private java.util.Set<java.lang.Integer> removeCaApprovalsIfNeeded(int i) {
        android.util.ArraySet arraySet = new android.util.ArraySet();
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getProfiles(i)) {
            boolean isSecure = this.mLockPatternUtils.isSecure(userInfo.id);
            if (userInfo.isManagedProfile()) {
                isSecure |= this.mLockPatternUtils.isSecure(getProfileParentId(userInfo.id));
            }
            if (!isSecure) {
                synchronized (getLockObject()) {
                    lambda$getUserDataUnchecked$5(userInfo.id).mAcceptedCaCertificates.clear();
                    arraySet.add(java.lang.Integer.valueOf(userInfo.id));
                }
                this.mCertificateMonitor.onCertificateApprovalsChanged(i);
            }
        }
        return arraySet;
    }

    public boolean installCaCert(final android.content.ComponentName componentName, java.lang.String str, final byte[] bArr) {
        if (!this.mHasFeature) {
            return false;
        }
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageCaCerts(callerIdentity));
        checkCanExecuteOrThrowUnsafe(24);
        java.lang.String str2 = (java.lang.String) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda30
            public final java.lang.Object getOrThrow() {
                java.lang.String lambda$installCaCert$42;
                lambda$installCaCert$42 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$installCaCert$42(callerIdentity, bArr, componentName);
                return lambda$installCaCert$42;
            }
        });
        if (str2 == null) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Problem installing cert");
            return false;
        }
        synchronized (getLockObject()) {
            lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mOwnerInstalledCaCerts.add(str2);
            saveSettingsLocked(callerIdentity.getUserId());
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.String lambda$installCaCert$42(com.android.server.devicepolicy.CallerIdentity callerIdentity, byte[] bArr, android.content.ComponentName componentName) throws java.lang.Exception {
        java.lang.String installCaCert = this.mCertificateMonitor.installCaCert(callerIdentity.getUserHandle(), bArr);
        android.app.admin.DevicePolicyEventLogger.createEvent(21).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).write();
        if (this.mInjector.isAdminInstalledCaCertAutoApproved() && installCaCert != null && componentName != null) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Approving admin installed cert");
            approveCaCert(installCaCert, callerIdentity.getUserId(), true);
        }
        return installCaCert;
    }

    public void uninstallCaCerts(final android.content.ComponentName componentName, java.lang.String str, final java.lang.String[] strArr) {
        if (!this.mHasFeature) {
            return;
        }
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageCaCerts(callerIdentity));
        checkCanExecuteOrThrowUnsafe(40);
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda135
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$uninstallCaCerts$43(callerIdentity, strArr, componentName);
            }
        });
        synchronized (getLockObject()) {
            try {
                if (lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mOwnerInstalledCaCerts.removeAll(java.util.Arrays.asList(strArr))) {
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$uninstallCaCerts$43(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String[] strArr, android.content.ComponentName componentName) throws java.lang.Exception {
        this.mCertificateMonitor.uninstallCaCerts(callerIdentity.getUserHandle(), strArr);
        android.app.admin.DevicePolicyEventLogger.createEvent(24).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).write();
    }

    public boolean installKeyPair(android.content.ComponentName componentName, java.lang.String str, byte[] bArr, byte[] bArr2, byte[] bArr3, java.lang.String str2, boolean z, boolean z2) {
        long j;
        android.security.IKeyChainService service;
        android.security.IKeyChainService iKeyChainService;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean isCallerDelegate = isCallerDelegate(callerIdentity, "delegation-cert-install");
        boolean isCredentialManagementApp = isCredentialManagementApp(callerIdentity);
        if (isPermissionCheckFlagEnabled()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(hasPermission("android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", callerIdentity.getPackageName(), callerIdentity.getUserId()) || isCredentialManagementApp);
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && (isCallerDelegate || isCredentialManagementApp)));
        }
        if (isCredentialManagementApp) {
            com.android.internal.util.Preconditions.checkCallAuthorization(!z2, "The credential management app is not allowed to install a user selectable key pair");
            com.android.internal.util.Preconditions.checkCallAuthorization(isAliasInCredentialManagementAppPolicy(callerIdentity, str2), CREDENTIAL_MANAGEMENT_APP_INVALID_ALIAS_MSG);
        }
        checkCanExecuteOrThrowUnsafe(25);
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                try {
                    try {
                        android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, callerIdentity.getUserHandle());
                        try {
                            service = bindAsUser.getService();
                        } catch (java.lang.Throwable th) {
                            th = th;
                        }
                        try {
                            if (!service.installKeyPair(bArr, bArr2, bArr3, str2, -1)) {
                                logInstallKeyPairFailure(callerIdentity, isCredentialManagementApp);
                                bindAsUser.close();
                                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                                return false;
                            }
                            if (z) {
                                iKeyChainService = service;
                                iKeyChainService.setGrant(callerIdentity.getUid(), str2, true);
                            } else {
                                iKeyChainService = service;
                            }
                            iKeyChainService.setUserSelectable(str2, z2);
                            android.app.admin.DevicePolicyEventLogger.createEvent(20).setAdmin(callerIdentity.getPackageName()).setBoolean(isCallerDelegate).setStrings(new java.lang.String[]{isCredentialManagementApp ? CREDENTIAL_MANAGEMENT_APP : NOT_CREDENTIAL_MANAGEMENT_APP}).write();
                            bindAsUser.close();
                            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                            return true;
                        } catch (java.lang.Throwable th2) {
                            th = th2;
                            java.lang.Throwable th3 = th;
                            if (bindAsUser == null) {
                                throw th3;
                            }
                            try {
                                bindAsUser.close();
                                throw th3;
                            } catch (java.lang.Throwable th4) {
                                th3.addSuppressed(th4);
                                throw th3;
                            }
                        }
                    } catch (android.os.RemoteException | java.lang.AssertionError e) {
                        e = e;
                        j = binderClearCallingIdentity;
                        com.android.server.utils.Slogf.e(LOG_TAG, "Installing certificate", e);
                        this.mInjector.binderRestoreCallingIdentity(j);
                        logInstallKeyPairFailure(callerIdentity, isCredentialManagementApp);
                        return false;
                    } catch (java.lang.InterruptedException e2) {
                        e = e2;
                        j = binderClearCallingIdentity;
                        com.android.server.utils.Slogf.w(LOG_TAG, "Interrupted while installing certificate", e);
                        java.lang.Thread.currentThread().interrupt();
                        this.mInjector.binderRestoreCallingIdentity(j);
                        logInstallKeyPairFailure(callerIdentity, isCredentialManagementApp);
                        return false;
                    } catch (java.lang.Throwable th5) {
                        th = th5;
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        throw th;
                    }
                } catch (java.lang.InterruptedException e3) {
                    e = e3;
                    com.android.server.utils.Slogf.w(LOG_TAG, "Interrupted while installing certificate", e);
                    java.lang.Thread.currentThread().interrupt();
                    this.mInjector.binderRestoreCallingIdentity(j);
                    logInstallKeyPairFailure(callerIdentity, isCredentialManagementApp);
                    return false;
                }
            } catch (android.os.RemoteException | java.lang.AssertionError e4) {
                e = e4;
                com.android.server.utils.Slogf.e(LOG_TAG, "Installing certificate", e);
                this.mInjector.binderRestoreCallingIdentity(j);
                logInstallKeyPairFailure(callerIdentity, isCredentialManagementApp);
                return false;
            }
        } catch (java.lang.Throwable th6) {
            th = th6;
        }
    }

    private void logInstallKeyPairFailure(com.android.server.devicepolicy.CallerIdentity callerIdentity, boolean z) {
        if (!z) {
            return;
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(184).setStrings(new java.lang.String[]{callerIdentity.getPackageName()}).write();
    }

    public boolean removeKeyPair(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean isCallerDelegate = isCallerDelegate(callerIdentity, "delegation-cert-install");
        boolean isCredentialManagementApp = isCredentialManagementApp(callerIdentity);
        boolean z = true;
        if (isPermissionCheckFlagEnabled()) {
            if (!hasPermission("android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", callerIdentity.getPackageName(), callerIdentity.getUserId()) && !isCredentialManagementApp) {
                z = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z);
        } else {
            if ((!callerIdentity.hasAdminComponent() || (!isProfileOwner(callerIdentity) && !isDefaultDeviceOwner(callerIdentity))) && (!callerIdentity.hasPackage() || (!isCallerDelegate && !isCredentialManagementApp))) {
                z = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z);
        }
        if (isCredentialManagementApp) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isAliasInCredentialManagementAppPolicy(callerIdentity, str2), CREDENTIAL_MANAGEMENT_APP_INVALID_ALIAS_MSG);
        }
        checkCanExecuteOrThrowUnsafe(28);
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            try {
                try {
                    android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, callerIdentity.getUserHandle());
                    try {
                        android.security.IKeyChainService service = bindAsUser.getService();
                        android.app.admin.DevicePolicyEventLogger.createEvent(23).setAdmin(callerIdentity.getPackageName()).setBoolean(isCallerDelegate).setStrings(new java.lang.String[]{isCredentialManagementApp ? CREDENTIAL_MANAGEMENT_APP : NOT_CREDENTIAL_MANAGEMENT_APP}).write();
                        boolean removeKeyPair = service.removeKeyPair(str2);
                        bindAsUser.close();
                        return removeKeyPair;
                    } catch (java.lang.Throwable th) {
                        if (bindAsUser != null) {
                            try {
                                bindAsUser.close();
                            } catch (java.lang.Throwable th2) {
                                th.addSuppressed(th2);
                            }
                        }
                        throw th;
                    }
                } catch (java.lang.InterruptedException e) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Interrupted while removing keypair", e);
                    java.lang.Thread.currentThread().interrupt();
                    return false;
                }
            } catch (android.os.RemoteException | java.lang.AssertionError e2) {
                com.android.server.utils.Slogf.e(LOG_TAG, "Removing keypair", e2);
                return false;
            }
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public boolean hasKeyPair(java.lang.String str, final java.lang.String str2) {
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        boolean isCredentialManagementApp = isCredentialManagementApp(callerIdentity);
        com.android.internal.util.Preconditions.checkCallAuthorization(canInstallCertificates(callerIdentity) || isCredentialManagementApp);
        if (isCredentialManagementApp) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isAliasInCredentialManagementAppPolicy(callerIdentity, str2), CREDENTIAL_MANAGEMENT_APP_INVALID_ALIAS_MSG);
        }
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda41
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$hasKeyPair$44;
                lambda$hasKeyPair$44 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$hasKeyPair$44(callerIdentity, str2);
                return lambda$hasKeyPair$44;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$hasKeyPair$44(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) throws java.lang.Exception {
        try {
            try {
                android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, callerIdentity.getUserHandle());
                try {
                    java.lang.Boolean valueOf = java.lang.Boolean.valueOf(bindAsUser.getService().containsKeyPair(str));
                    bindAsUser.close();
                    return valueOf;
                } catch (java.lang.Throwable th) {
                    if (bindAsUser != null) {
                        try {
                            bindAsUser.close();
                        } catch (java.lang.Throwable th2) {
                            th.addSuppressed(th2);
                        }
                    }
                    throw th;
                }
            } catch (java.lang.InterruptedException e) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Interrupted while querying keypair", e);
                java.lang.Thread.currentThread().interrupt();
                return false;
            }
        } catch (android.os.RemoteException | java.lang.AssertionError e2) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Querying keypair", e2);
            return false;
        }
    }

    private boolean canInstallCertificates(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        if (isPermissionCheckFlagEnabled()) {
            return hasPermission("android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", callerIdentity.getPackageName(), callerIdentity.getUserId());
        }
        return isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || isCallerDelegate(callerIdentity, "delegation-cert-install");
    }

    private boolean canChooseCertificates(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || isCallerDelegate(callerIdentity, "delegation-cert-selection");
    }

    public boolean setKeyGrantToWifiAuth(java.lang.String str, java.lang.String str2, boolean z) {
        com.android.internal.util.Preconditions.checkStringNotEmpty(str2, "Alias to grant cannot be empty");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        com.android.internal.util.Preconditions.checkCallAuthorization(canChooseCertificates(callerIdentity));
        try {
            return setKeyChainGrantInternal(str2, z, 1010, callerIdentity.getUserHandle());
        } catch (java.lang.IllegalArgumentException e) {
            if (this.mInjector.isChangeEnabled(THROW_EXCEPTION_WHEN_KEY_MISSING, callerIdentity.getPackageName(), callerIdentity.getUserId())) {
                throw e;
            }
            return false;
        }
    }

    public boolean isKeyPairGrantedToWifiAuth(java.lang.String str, final java.lang.String str2) {
        com.android.internal.util.Preconditions.checkStringNotEmpty(str2, "Alias to check cannot be empty");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        com.android.internal.util.Preconditions.checkCallAuthorization(canChooseCertificates(callerIdentity));
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda10
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isKeyPairGrantedToWifiAuth$45;
                lambda$isKeyPairGrantedToWifiAuth$45 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isKeyPairGrantedToWifiAuth$45(callerIdentity, str2);
                return lambda$isKeyPairGrantedToWifiAuth$45;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isKeyPairGrantedToWifiAuth$45(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) throws java.lang.Exception {
        try {
            android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, callerIdentity.getUserHandle());
            try {
                new java.util.ArrayList();
                for (int i : bindAsUser.getService().getGrants(str)) {
                    if (i == 1010) {
                        bindAsUser.close();
                        return true;
                    }
                }
                bindAsUser.close();
                return false;
            } catch (java.lang.Throwable th) {
                if (bindAsUser != null) {
                    try {
                        bindAsUser.close();
                    } catch (java.lang.Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        } catch (android.os.RemoteException | java.lang.AssertionError e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Querying grant to wifi auth.", e);
            return false;
        }
    }

    public boolean setKeyGrantForApp(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, java.lang.String str3, boolean z) {
        com.android.internal.util.Preconditions.checkStringNotEmpty(str2, "Alias to grant cannot be empty");
        com.android.internal.util.Preconditions.checkStringNotEmpty(str3, "Package to grant to cannot be empty");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean z2 = true;
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-cert-selection")));
        try {
            android.content.pm.ApplicationInfo applicationInfo = this.mInjector.getIPackageManager().getApplicationInfo(str3, 0L, callerIdentity.getUserId());
            if (applicationInfo == null) {
                z2 = false;
            }
            com.android.internal.util.Preconditions.checkArgument(z2, "Provided package %s is not installed", new java.lang.Object[]{str3});
            try {
                return setKeyChainGrantInternal(str2, z, applicationInfo.uid, callerIdentity.getUserHandle());
            } catch (java.lang.IllegalArgumentException e) {
                if (this.mInjector.isChangeEnabled(THROW_EXCEPTION_WHEN_KEY_MISSING, str, callerIdentity.getUserId())) {
                    throw e;
                }
                return false;
            }
        } catch (android.os.RemoteException e2) {
            throw new java.lang.IllegalStateException("Failure getting grantee uid", e2);
        }
    }

    private boolean setKeyChainGrantInternal(java.lang.String str, boolean z, int i, android.os.UserHandle userHandle) {
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, userHandle);
                try {
                    boolean grant = bindAsUser.getService().setGrant(i, str, z);
                    bindAsUser.close();
                    return grant;
                } catch (java.lang.Throwable th) {
                    if (bindAsUser != null) {
                        try {
                            bindAsUser.close();
                        } catch (java.lang.Throwable th2) {
                            th.addSuppressed(th2);
                        }
                    }
                    throw th;
                }
            } catch (android.os.RemoteException | java.lang.AssertionError e) {
                com.android.server.utils.Slogf.e(LOG_TAG, "Setting grant for package.", e);
                return false;
            }
        } catch (java.lang.InterruptedException e2) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Interrupted while setting key grant", e2);
            java.lang.Thread.currentThread().interrupt();
            return false;
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    public android.app.admin.ParcelableGranteeMap getKeyPairGrants(java.lang.String str, final java.lang.String str2) {
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        com.android.internal.util.Preconditions.checkCallAuthorization(canChooseCertificates(callerIdentity));
        final android.util.ArrayMap arrayMap = new android.util.ArrayMap();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda1
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getKeyPairGrants$46(callerIdentity, str2, arrayMap);
            }
        });
        return new android.app.admin.ParcelableGranteeMap(arrayMap);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$getKeyPairGrants$46(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str, android.util.ArrayMap arrayMap) throws java.lang.Exception {
        try {
            try {
                android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, callerIdentity.getUserHandle());
                try {
                    int[] grants = bindAsUser.getService().getGrants(str);
                    android.content.pm.PackageManager packageManager = this.mInjector.getPackageManager(callerIdentity.getUserId());
                    for (int i : grants) {
                        java.lang.String[] packagesForUid = packageManager.getPackagesForUid(i);
                        if (packagesForUid == null) {
                            com.android.server.utils.Slogf.wtf(LOG_TAG, "No packages found for uid " + i);
                        } else {
                            arrayMap.put(java.lang.Integer.valueOf(i), new android.util.ArraySet(packagesForUid));
                        }
                    }
                    bindAsUser.close();
                } catch (java.lang.Throwable th) {
                    if (bindAsUser != null) {
                        try {
                            bindAsUser.close();
                        } catch (java.lang.Throwable th2) {
                            th.addSuppressed(th2);
                        }
                    }
                    throw th;
                }
            } catch (android.os.RemoteException | java.lang.AssertionError e) {
                com.android.server.utils.Slogf.e(LOG_TAG, "Querying keypair grants", e);
            }
        } catch (java.lang.InterruptedException e2) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Interrupted while querying keypair grants", e2);
            java.lang.Thread.currentThread().interrupt();
        }
    }

    @com.android.internal.annotations.VisibleForTesting
    public static int[] translateIdAttestationFlags(int i) {
        java.util.HashMap hashMap = new java.util.HashMap();
        hashMap.put(2, 1);
        hashMap.put(4, 2);
        hashMap.put(8, 3);
        hashMap.put(16, 4);
        int bitCount = java.lang.Integer.bitCount(i);
        if (bitCount == 0) {
            return null;
        }
        if ((i & 1) != 0) {
            bitCount--;
            i &= -2;
        }
        int[] iArr = new int[bitCount];
        int i2 = 0;
        for (java.lang.Integer num : hashMap.keySet()) {
            if ((num.intValue() & i) != 0) {
                iArr[i2] = ((java.lang.Integer) hashMap.get(num)).intValue();
                i2++;
            }
        }
        return iArr;
    }

    public boolean generateKeyPair(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, android.security.keystore.ParcelableKeyGenParameterSpec parcelableKeyGenParameterSpec, int i, android.security.keymaster.KeymasterCertificateChain keymasterCertificateChain) {
        int[] translateIdAttestationFlags = translateIdAttestationFlags(i);
        boolean z = translateIdAttestationFlags != null;
        android.security.keystore.KeyGenParameterSpec spec = parcelableKeyGenParameterSpec.getSpec();
        java.lang.String keystoreAlias = spec.getKeystoreAlias();
        com.android.internal.util.Preconditions.checkStringNotEmpty(keystoreAlias, "Empty alias provided");
        com.android.internal.util.Preconditions.checkArgument((z && spec.getAttestationChallenge() == null) ? false : true, "Requested Device ID attestation but challenge is empty");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean isCallerDelegate = isCallerDelegate(callerIdentity, "delegation-cert-install");
        boolean isCredentialManagementApp = isCredentialManagementApp(callerIdentity);
        if (!z || translateIdAttestationFlags.length <= 0) {
            if (isPermissionCheckFlagEnabled()) {
                com.android.internal.util.Preconditions.checkCallAuthorization(hasPermission("android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", callerIdentity.getPackageName(), callerIdentity.getUserId()) || isCredentialManagementApp);
            } else {
                com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && (isCallerDelegate || isCredentialManagementApp)));
            }
            if (isCredentialManagementApp) {
                com.android.internal.util.Preconditions.checkCallAuthorization(isAliasInCredentialManagementAppPolicy(callerIdentity, keystoreAlias), CREDENTIAL_MANAGEMENT_APP_INVALID_ALIAS_MSG);
            }
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(hasDeviceIdAccessUnchecked(callerIdentity.getPackageName(), callerIdentity.getUid()));
            enforceIndividualAttestationSupportedIfRequested(translateIdAttestationFlags);
        }
        if (android.text.TextUtils.isEmpty(keystoreAlias)) {
            throw new java.lang.IllegalArgumentException("Empty alias provided.");
        }
        if (spec.getUid() != -1) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Only the caller can be granted access to the generated keypair.");
            logGenerateKeyPairFailure(callerIdentity, isCredentialManagementApp);
            return false;
        }
        if (z) {
            if (spec.getAttestationChallenge() == null) {
                throw new java.lang.IllegalArgumentException("Requested Device ID attestation but challenge is empty.");
            }
            android.security.keystore.KeyGenParameterSpec.Builder builder = new android.security.keystore.KeyGenParameterSpec.Builder(spec);
            builder.setAttestationIds(translateIdAttestationFlags);
            builder.setDevicePropertiesAttestationIncluded(true);
            spec = builder.build();
        }
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                try {
                    android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, callerIdentity.getUserHandle());
                    try {
                        android.security.IKeyChainService service = bindAsUser.getService();
                        int generateKeyPair = service.generateKeyPair(str2, new android.security.keystore.ParcelableKeyGenParameterSpec(spec));
                        if (generateKeyPair != 0) {
                            com.android.server.utils.Slogf.e(LOG_TAG, "KeyChain failed to generate a keypair, error %d.", java.lang.Integer.valueOf(generateKeyPair));
                            logGenerateKeyPairFailure(callerIdentity, isCredentialManagementApp);
                            switch (generateKeyPair) {
                                case 3:
                                    throw new java.lang.UnsupportedOperationException("Device does not support Device ID attestation.");
                                case 6:
                                    throw new android.os.ServiceSpecificException(1, java.lang.String.format("KeyChain error: %d", java.lang.Integer.valueOf(generateKeyPair)));
                                default:
                                    bindAsUser.close();
                                    return false;
                            }
                        }
                        service.setGrant(callerIdentity.getUid(), keystoreAlias, true);
                        try {
                            java.util.ArrayList arrayList = new java.util.ArrayList();
                            java.security.cert.CertificateFactory certificateFactory = java.security.cert.CertificateFactory.getInstance("X.509");
                            byte[] caCertificates = service.getCaCertificates(keystoreAlias);
                            arrayList.add(service.getCertificate(keystoreAlias));
                            if (caCertificates != null) {
                                java.util.Iterator<? extends java.security.cert.Certificate> it = certificateFactory.generateCertificates(new java.io.ByteArrayInputStream(caCertificates)).iterator();
                                while (it.hasNext()) {
                                    arrayList.add(((java.security.cert.X509Certificate) it.next()).getEncoded());
                                }
                            }
                            keymasterCertificateChain.shallowCopyFrom(new android.security.keymaster.KeymasterCertificateChain(arrayList));
                            android.app.admin.DevicePolicyEventLogger.createEvent(59).setAdmin(callerIdentity.getPackageName()).setBoolean(isCallerDelegate).setInt(i).setStrings(new java.lang.String[]{str2, isCredentialManagementApp ? CREDENTIAL_MANAGEMENT_APP : NOT_CREDENTIAL_MANAGEMENT_APP}).write();
                            bindAsUser.close();
                            return true;
                        } catch (java.security.cert.CertificateException e) {
                            logGenerateKeyPairFailure(callerIdentity, isCredentialManagementApp);
                            com.android.server.utils.Slogf.e(LOG_TAG, "While retrieving certificate chain.", e);
                            bindAsUser.close();
                            return false;
                        }
                    } finally {
                    }
                } catch (java.lang.InterruptedException e2) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Interrupted while generating keypair", e2);
                    java.lang.Thread.currentThread().interrupt();
                    logGenerateKeyPairFailure(callerIdentity, isCredentialManagementApp);
                    return false;
                }
            } catch (android.os.RemoteException | java.lang.AssertionError e3) {
                com.android.server.utils.Slogf.e(LOG_TAG, "KeyChain error while generating a keypair", e3);
                logGenerateKeyPairFailure(callerIdentity, isCredentialManagementApp);
                return false;
            }
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    private void logGenerateKeyPairFailure(com.android.server.devicepolicy.CallerIdentity callerIdentity, boolean z) {
        if (!z) {
            return;
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(185).setStrings(new java.lang.String[]{callerIdentity.getPackageName()}).write();
    }

    private void enforceIndividualAttestationSupportedIfRequested(int[] iArr) {
        for (int i : iArr) {
            if (i == 4 && !this.mInjector.getPackageManager().hasSystemFeature("android.hardware.device_unique_attestation")) {
                throw new java.lang.UnsupportedOperationException("Device Individual attestation is not supported on this device.");
            }
        }
    }

    public boolean setKeyPairCertificate(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, byte[] bArr, byte[] bArr2, boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean isCallerDelegate = isCallerDelegate(callerIdentity, "delegation-cert-install");
        boolean isCredentialManagementApp = isCredentialManagementApp(callerIdentity);
        if (isPermissionCheckFlagEnabled()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(hasPermission("android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", callerIdentity.getPackageName(), callerIdentity.getUserId()) || isCredentialManagementApp);
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && (isCallerDelegate || isCredentialManagementApp)));
        }
        if (isCredentialManagementApp) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isAliasInCredentialManagementAppPolicy(callerIdentity, str2), CREDENTIAL_MANAGEMENT_APP_INVALID_ALIAS_MSG);
        }
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                try {
                    android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, callerIdentity.getUserHandle());
                    try {
                        android.security.IKeyChainService service = bindAsUser.getService();
                        if (!service.setKeyPairCertificate(str2, bArr, bArr2)) {
                            bindAsUser.close();
                            return false;
                        }
                        service.setUserSelectable(str2, z);
                        android.app.admin.DevicePolicyEventLogger.createEvent(60).setAdmin(callerIdentity.getPackageName()).setBoolean(isCallerDelegate).setStrings(new java.lang.String[]{isCredentialManagementApp ? CREDENTIAL_MANAGEMENT_APP : NOT_CREDENTIAL_MANAGEMENT_APP}).write();
                        bindAsUser.close();
                        return true;
                    } catch (java.lang.Throwable th) {
                        if (bindAsUser != null) {
                            try {
                                bindAsUser.close();
                            } catch (java.lang.Throwable th2) {
                                th.addSuppressed(th2);
                            }
                        }
                        throw th;
                    }
                } catch (android.os.RemoteException | java.lang.AssertionError e) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "Failed setting keypair certificate", e);
                    return false;
                }
            } catch (java.lang.InterruptedException e2) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Interrupted while setting keypair certificate", e2);
                java.lang.Thread.currentThread().interrupt();
                return false;
            }
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    public void choosePrivateKeyAlias(int i, android.net.Uri uri, java.lang.String str, final android.os.IBinder iBinder) {
        final boolean z;
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(callerIdentity), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "choose private key alias"));
        android.content.ComponentName lambda$isProfileOwner$72 = lambda$isProfileOwner$72(callerIdentity.getUserId());
        if (lambda$isProfileOwner$72 == null && callerIdentity.getUserHandle().isSystem()) {
            synchronized (getLockObject()) {
                try {
                    com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                    if (deviceOwnerAdminLocked != null) {
                        lambda$isProfileOwner$72 = deviceOwnerAdminLocked.info.getComponent();
                    }
                } finally {
                }
            }
        }
        if (lambda$isProfileOwner$72 == null) {
            sendPrivateKeyAliasResponse(null, iBinder);
            return;
        }
        final android.content.Intent intent = new android.content.Intent("android.app.action.CHOOSE_PRIVATE_KEY_ALIAS");
        intent.putExtra("android.app.extra.CHOOSE_PRIVATE_KEY_SENDER_UID", i);
        intent.putExtra("android.app.extra.CHOOSE_PRIVATE_KEY_URI", uri);
        intent.putExtra("android.app.extra.CHOOSE_PRIVATE_KEY_ALIAS", str);
        intent.putExtra("android.app.extra.CHOOSE_PRIVATE_KEY_RESPONSE", iBinder);
        intent.addFlags(268435456);
        android.content.ComponentName resolveDelegateReceiver = resolveDelegateReceiver("delegation-cert-selection", "android.app.action.CHOOSE_PRIVATE_KEY_ALIAS", callerIdentity.getUserId());
        if (resolveDelegateReceiver != null) {
            intent.setComponent(resolveDelegateReceiver);
            z = true;
        } else {
            intent.setComponent(lambda$isProfileOwner$72);
            z = false;
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda2
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$choosePrivateKeyAlias$47(intent, callerIdentity, iBinder, z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$choosePrivateKeyAlias$47(android.content.Intent intent, com.android.server.devicepolicy.CallerIdentity callerIdentity, final android.os.IBinder iBinder, boolean z) throws java.lang.Exception {
        this.mContext.sendOrderedBroadcastAsUser(intent, callerIdentity.getUserHandle(), null, new android.content.BroadcastReceiver() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.5
            @Override // android.content.BroadcastReceiver
            public void onReceive(android.content.Context context, android.content.Intent intent2) {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.sendPrivateKeyAliasResponse(getResultData(), iBinder);
            }
        }, null, -1, null, null);
        android.app.admin.DevicePolicyEventLogger.createEvent(22).setAdmin(intent.getComponent()).setBoolean(z).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendPrivateKeyAliasResponse(java.lang.String str, android.os.IBinder iBinder) {
        try {
            android.security.IKeyChainAliasCallback.Stub.asInterface(iBinder).alias(str);
        } catch (java.lang.Exception e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "error while responding to callback", e);
        }
    }

    private static boolean shouldCheckIfDelegatePackageIsInstalled(java.lang.String str, int i, java.util.List<java.lang.String> list) {
        if (i >= 24) {
            return true;
        }
        return ((list.size() == 1 && list.get(0).equals("delegation-cert-install")) || list.isEmpty()) ? false : true;
    }

    public void setDelegatedScopes(android.content.ComponentName componentName, java.lang.String str, java.util.List<java.lang.String> list) throws java.lang.SecurityException {
        java.util.ArrayList arrayList;
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkStringNotEmpty(str, "Delegate package is null or empty");
        com.android.internal.util.Preconditions.checkCollectionElementsNotNull(list, "Scopes");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        java.util.ArrayList<java.lang.String> arrayList2 = new java.util.ArrayList<>(new android.util.ArraySet(list));
        if (arrayList2.retainAll(java.util.Arrays.asList(DELEGATIONS))) {
            throw new java.lang.IllegalArgumentException("Unexpected delegation scopes");
        }
        int userId = callerIdentity.getUserId();
        if (!java.util.Collections.disjoint(arrayList2, DEVICE_OWNER_OR_MANAGED_PROFILE_OWNER_DELEGATIONS)) {
            if (isDefaultDeviceOwner(callerIdentity) || (isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId()))) {
                r3 = true;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(r3);
        } else if (!java.util.Collections.disjoint(arrayList2, DEVICE_OWNER_OR_ORGANIZATION_OWNED_MANAGED_PROFILE_OWNER_DELEGATIONS)) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        }
        synchronized (getLockObject()) {
            try {
                if (shouldCheckIfDelegatePackageIsInstalled(str, getTargetSdk(componentName.getPackageName(), userId), arrayList2) && !isPackageInstalledForUser(str, userId)) {
                    throw new java.lang.IllegalArgumentException("Package " + str + " is not installed on the current user");
                }
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
                if (!arrayList2.isEmpty()) {
                    lambda$getUserDataUnchecked$5.mDelegationMap.put(str, new java.util.ArrayList(arrayList2));
                    arrayList = new java.util.ArrayList(arrayList2);
                    arrayList.retainAll(EXCLUSIVE_DELEGATIONS);
                } else {
                    lambda$getUserDataUnchecked$5.mDelegationMap.remove(str);
                    arrayList = null;
                }
                sendDelegationChangedBroadcast(str, arrayList2, userId);
                if (arrayList != null && !arrayList.isEmpty()) {
                    for (int size = lambda$getUserDataUnchecked$5.mDelegationMap.size() - 1; size >= 0; size--) {
                        java.lang.String keyAt = lambda$getUserDataUnchecked$5.mDelegationMap.keyAt(size);
                        java.util.List<java.lang.String> valueAt = lambda$getUserDataUnchecked$5.mDelegationMap.valueAt(size);
                        if (!keyAt.equals(str) && valueAt.removeAll(arrayList)) {
                            if (valueAt.isEmpty()) {
                                lambda$getUserDataUnchecked$5.mDelegationMap.removeAt(size);
                            }
                            sendDelegationChangedBroadcast(keyAt, new java.util.ArrayList<>(valueAt), userId);
                        }
                    }
                }
                saveSettingsLocked(userId);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void sendDelegationChangedBroadcast(java.lang.String str, java.util.ArrayList<java.lang.String> arrayList, int i) {
        android.content.Intent intent = new android.content.Intent("android.app.action.APPLICATION_DELEGATION_SCOPES_CHANGED");
        intent.addFlags(1073741824);
        intent.setPackage(str);
        intent.putStringArrayListExtra("android.app.extra.DELEGATION_SCOPES", arrayList);
        this.mContext.sendBroadcastAsUser(intent, android.os.UserHandle.of(i));
    }

    @android.annotation.NonNull
    public java.util.List<java.lang.String> getDelegatedScopes(android.content.ComponentName componentName, java.lang.String str) throws java.lang.SecurityException {
        java.util.List<java.lang.String> list;
        java.util.Objects.requireNonNull(str, "Delegate package is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        if (callerIdentity.hasAdminComponent()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isPackage(callerIdentity, str), java.lang.String.format("Caller with uid %d is not %s", java.lang.Integer.valueOf(callerIdentity.getUid()), str));
        }
        synchronized (getLockObject()) {
            try {
                list = lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mDelegationMap.get(str);
                if (list == null) {
                    list = java.util.Collections.EMPTY_LIST;
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return list;
    }

    @android.annotation.NonNull
    public java.util.List<java.lang.String> getDelegatePackages(android.content.ComponentName componentName, java.lang.String str) throws java.lang.SecurityException {
        java.util.List<java.lang.String> delegatePackagesInternalLocked;
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(str, "Scope is null");
        if (!java.util.Arrays.asList(DELEGATIONS).contains(str)) {
            throw new java.lang.IllegalArgumentException("Unexpected delegation scope: " + str);
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            delegatePackagesInternalLocked = getDelegatePackagesInternalLocked(str, callerIdentity.getUserId());
        }
        return delegatePackagesInternalLocked;
    }

    private java.util.List<java.lang.String> getDelegatePackagesInternalLocked(java.lang.String str, int i) {
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (int i2 = 0; i2 < lambda$getUserDataUnchecked$5.mDelegationMap.size(); i2++) {
            if (lambda$getUserDataUnchecked$5.mDelegationMap.valueAt(i2).contains(str)) {
                arrayList.add(lambda$getUserDataUnchecked$5.mDelegationMap.keyAt(i2));
            }
        }
        return arrayList;
    }

    private android.content.ComponentName resolveDelegateReceiver(java.lang.String str, java.lang.String str2, int i) {
        java.util.List<java.lang.String> delegatePackagesInternalLocked;
        synchronized (getLockObject()) {
            delegatePackagesInternalLocked = getDelegatePackagesInternalLocked(str, i);
        }
        if (delegatePackagesInternalLocked.size() == 0) {
            return null;
        }
        if (delegatePackagesInternalLocked.size() > 1) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "More than one delegate holds " + str);
            return null;
        }
        java.lang.String str3 = delegatePackagesInternalLocked.get(0);
        android.content.Intent intent = new android.content.Intent(str2);
        intent.setPackage(str3);
        try {
            java.util.List list = this.mIPackageManager.queryIntentReceivers(intent, (java.lang.String) null, 0L, i).getList();
            int size = list.size();
            if (size < 1) {
                return null;
            }
            if (size > 1) {
                com.android.server.utils.Slogf.w(LOG_TAG, str3 + " defines more than one delegate receiver for " + str2);
            }
            return ((android.content.pm.ResolveInfo) list.get(0)).activityInfo.getComponentName();
        } catch (android.os.RemoteException e) {
            return null;
        }
    }

    private boolean isCallerDelegate(java.lang.String str, int i, java.lang.String str2) {
        java.util.Objects.requireNonNull(str, "callerPackage is null");
        if (!java.util.Arrays.asList(DELEGATIONS).contains(str2)) {
            throw new java.lang.IllegalArgumentException("Unexpected delegation scope: " + str2);
        }
        int userId = android.os.UserHandle.getUserId(i);
        synchronized (getLockObject()) {
            try {
                java.util.List<java.lang.String> list = lambda$getUserDataUnchecked$5(userId).mDelegationMap.get(str);
                if (list == null || !list.contains(str2)) {
                    return false;
                }
                return isCallingFromPackage(str, i);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean isCallerDelegate(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) {
        boolean z = false;
        if (callerIdentity.getPackageName() == null) {
            return false;
        }
        com.android.internal.util.Preconditions.checkArgument(java.util.Arrays.asList(DELEGATIONS).contains(str), "Unexpected delegation scope: %s", new java.lang.Object[]{str});
        synchronized (getLockObject()) {
            try {
                java.util.List<java.lang.String> list = lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mDelegationMap.get(callerIdentity.getPackageName());
                if (list != null && list.contains(str)) {
                    z = true;
                }
            } finally {
            }
        }
        return z;
    }

    private boolean isCallerDelegate(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        boolean z;
        java.util.Objects.requireNonNull(callerIdentity.getPackageName(), "callerPackage is null");
        synchronized (getLockObject()) {
            z = lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mDelegationMap.get(callerIdentity.getPackageName()) != null;
        }
        return z;
    }

    private void setDelegatedScopePreO(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(callerIdentity.getUserId());
                if (str != null) {
                    java.util.List<java.lang.String> list = lambda$getUserDataUnchecked$5.mDelegationMap.get(str);
                    if (list == null) {
                        list = new java.util.ArrayList<>();
                    }
                    if (!list.contains(str2)) {
                        list.add(str2);
                        setDelegatedScopes(componentName, str, list);
                    }
                }
                for (int i = 0; i < lambda$getUserDataUnchecked$5.mDelegationMap.size(); i++) {
                    java.lang.String keyAt = lambda$getUserDataUnchecked$5.mDelegationMap.keyAt(i);
                    java.util.List<java.lang.String> valueAt = lambda$getUserDataUnchecked$5.mDelegationMap.valueAt(i);
                    if (!keyAt.equals(str) && valueAt.contains(str2)) {
                        java.util.ArrayList arrayList = new java.util.ArrayList(valueAt);
                        arrayList.remove(str2);
                        setDelegatedScopes(componentName, keyAt, arrayList);
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean isCredentialManagementApp(final com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda160
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isCredentialManagementApp$48;
                lambda$isCredentialManagementApp$48 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isCredentialManagementApp$48(callerIdentity);
                return lambda$isCredentialManagementApp$48;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isCredentialManagementApp$48(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        android.app.AppOpsManager appOpsManager = this.mInjector.getAppOpsManager();
        if (appOpsManager == null) {
            return false;
        }
        return java.lang.Boolean.valueOf(appOpsManager.noteOpNoThrow(104, callerIdentity.getUid(), callerIdentity.getPackageName(), (java.lang.String) null, (java.lang.String) null) == 0);
    }

    private boolean isAliasInCredentialManagementAppPolicy(final com.android.server.devicepolicy.CallerIdentity callerIdentity, final java.lang.String str) {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda184
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isAliasInCredentialManagementAppPolicy$49;
                lambda$isAliasInCredentialManagementAppPolicy$49 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isAliasInCredentialManagementAppPolicy$49(callerIdentity, str);
                return lambda$isAliasInCredentialManagementAppPolicy$49;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isAliasInCredentialManagementAppPolicy$49(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) throws java.lang.Exception {
        try {
            android.security.KeyChain.KeyChainConnection bindAsUser = android.security.KeyChain.bindAsUser(this.mContext, callerIdentity.getUserHandle());
            try {
                android.security.AppUriAuthenticationPolicy credentialManagementAppPolicy = bindAsUser.getService().getCredentialManagementAppPolicy();
                java.lang.Boolean valueOf = java.lang.Boolean.valueOf((credentialManagementAppPolicy == null || credentialManagementAppPolicy.getAppAndUriMappings().isEmpty() || !containsAlias(credentialManagementAppPolicy, str)) ? false : true);
                bindAsUser.close();
                return valueOf;
            } catch (java.lang.Throwable th) {
                if (bindAsUser != null) {
                    try {
                        bindAsUser.close();
                    } catch (java.lang.Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        } catch (android.os.RemoteException | java.lang.AssertionError | java.lang.InterruptedException e) {
            return false;
        }
    }

    private static boolean containsAlias(android.security.AppUriAuthenticationPolicy appUriAuthenticationPolicy, java.lang.String str) {
        java.util.Iterator<java.util.Map.Entry<java.lang.String, java.util.Map<android.net.Uri, java.lang.String>>> it = appUriAuthenticationPolicy.getAppAndUriMappings().entrySet().iterator();
        while (it.hasNext()) {
            java.util.Iterator<java.util.Map.Entry<android.net.Uri, java.lang.String>> it2 = it.next().getValue().entrySet().iterator();
            while (it2.hasNext()) {
                if (it2.next().getValue().equals(str)) {
                    return true;
                }
            }
        }
        return false;
    }

    public void setCertInstallerPackage(android.content.ComponentName componentName, java.lang.String str) throws java.lang.SecurityException {
        setDelegatedScopePreO(componentName, str, "delegation-cert-install");
        android.app.admin.DevicePolicyEventLogger.createEvent(25).setAdmin(componentName).setStrings(new java.lang.String[]{str}).write();
    }

    public java.lang.String getCertInstallerPackage(android.content.ComponentName componentName) throws java.lang.SecurityException {
        java.util.List<java.lang.String> delegatePackages = getDelegatePackages(componentName, "delegation-cert-install");
        if (delegatePackages.size() > 0) {
            return delegatePackages.get(0);
        }
        return null;
    }

    public boolean setAlwaysOnVpnPackage(android.content.ComponentName componentName, final java.lang.String str, final boolean z, final java.util.List<java.lang.String> list) throws java.lang.SecurityException {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(30);
        if (str == null) {
            synchronized (getLockObject()) {
                try {
                    java.lang.String str2 = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).mAlwaysOnVpnPackage;
                    if (android.text.TextUtils.isEmpty(str2)) {
                        return true;
                    }
                    revokeVpnAuthorizationForPackage(str2, callerIdentity.getUserId());
                } finally {
                }
            }
        }
        final int userId = callerIdentity.getUserId();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda123
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setAlwaysOnVpnPackage$50(str, userId, z, list);
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(26).setAdmin(callerIdentity.getComponentName()).setStrings(new java.lang.String[]{str}).setBoolean(z).setInt(list != null ? list.size() : 0).write();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                if (!android.text.TextUtils.equals(str, profileOwnerOrDeviceOwnerLocked.mAlwaysOnVpnPackage) || z != profileOwnerOrDeviceOwnerLocked.mAlwaysOnVpnLockdown) {
                    profileOwnerOrDeviceOwnerLocked.mAlwaysOnVpnPackage = str;
                    profileOwnerOrDeviceOwnerLocked.mAlwaysOnVpnLockdown = z;
                    saveSettingsLocked(userId);
                }
            } finally {
            }
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setAlwaysOnVpnPackage$50(java.lang.String str, int i, boolean z, java.util.List list) throws java.lang.Exception {
        if (str != null && !isPackageInstalledForUser(str, i)) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Non-existent VPN package specified: " + str);
            throw new android.os.ServiceSpecificException(1, str);
        }
        if (str != null && z && list != null) {
            java.util.Iterator it = list.iterator();
            while (it.hasNext()) {
                java.lang.String str2 = (java.lang.String) it.next();
                if (!isPackageInstalledForUser(str2, i)) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Non-existent package in VPN allowlist: " + str2);
                    throw new android.os.ServiceSpecificException(1, str2);
                }
            }
        }
        if (!this.mInjector.getVpnManager().setAlwaysOnVpnPackageForUser(i, str, z, list)) {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    private void revokeVpnAuthorizationForPackage(final java.lang.String str, final int i) {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda55
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$revokeVpnAuthorizationForPackage$51(str, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$revokeVpnAuthorizationForPackage$51(java.lang.String str, int i) throws java.lang.Exception {
        try {
            android.content.pm.ApplicationInfo applicationInfo = this.mIPackageManager.getApplicationInfo(str, 0L, i);
            if (applicationInfo == null) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Non-existent VPN package: " + str);
            } else {
                this.mInjector.getAppOpsManager().setMode(47, applicationInfo.uid, str, 3);
            }
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Can't talk to package managed", e);
        }
    }

    public java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName componentName) throws java.lang.SecurityException {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        return (java.lang.String) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda185
            public final java.lang.Object getOrThrow() {
                java.lang.String lambda$getAlwaysOnVpnPackage$52;
                lambda$getAlwaysOnVpnPackage$52 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getAlwaysOnVpnPackage$52(callerIdentity);
                return lambda$getAlwaysOnVpnPackage$52;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.String lambda$getAlwaysOnVpnPackage$52(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        return this.mInjector.getVpnManager().getAlwaysOnVpnPackageForUser(callerIdentity.getUserId());
    }

    public java.lang.String getAlwaysOnVpnPackageForUser(int i) {
        java.lang.String str;
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "call getAlwaysOnVpnPackageForUser"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                str = deviceOrProfileOwnerAdminLocked != null ? deviceOrProfileOwnerAdminLocked.mAlwaysOnVpnPackage : null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return str;
    }

    public boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName componentName) throws java.lang.SecurityException {
        final com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (hasCallingPermission("android.permission.MAINLINE_NETWORK_STACK")) {
            callerIdentity = getCallerIdentity();
        } else {
            callerIdentity = getCallerIdentity(componentName);
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        }
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda157
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isAlwaysOnVpnLockdownEnabled$53;
                lambda$isAlwaysOnVpnLockdownEnabled$53 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isAlwaysOnVpnLockdownEnabled$53(callerIdentity);
                return lambda$isAlwaysOnVpnLockdownEnabled$53;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isAlwaysOnVpnLockdownEnabled$53(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(this.mInjector.getVpnManager().isVpnLockdownEnabled(callerIdentity.getUserId()));
    }

    public boolean isAlwaysOnVpnLockdownEnabledForUser(int i) {
        boolean z;
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "call isAlwaysOnVpnLockdownEnabledForUser"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                z = deviceOrProfileOwnerAdminLocked != null && deviceOrProfileOwnerAdminLocked.mAlwaysOnVpnLockdown;
            } finally {
            }
        }
        return z;
    }

    public java.util.List<java.lang.String> getAlwaysOnVpnLockdownAllowlist(android.content.ComponentName componentName) throws java.lang.SecurityException {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        return (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda183
            public final java.lang.Object getOrThrow() {
                java.util.List lambda$getAlwaysOnVpnLockdownAllowlist$54;
                lambda$getAlwaysOnVpnLockdownAllowlist$54 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getAlwaysOnVpnLockdownAllowlist$54(callerIdentity);
                return lambda$getAlwaysOnVpnLockdownAllowlist$54;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.List lambda$getAlwaysOnVpnLockdownAllowlist$54(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        return this.mInjector.getVpnManager().getVpnLockdownAllowlist(callerIdentity.getUserId());
    }

    private void forceWipeDeviceNoLock(boolean z, java.lang.String str, boolean z2, boolean z3) {
        wtfIfInLock();
        try {
            try {
                if (!this.mInjector.recoverySystemRebootWipeUserData(false, str, true, z2, z, z3)) {
                    com.android.server.utils.Slogf.i(LOG_TAG, "Persisting factory reset request as it could be delayed by %s", this.mSafetyChecker);
                    synchronized (getLockObject()) {
                        lambda$getUserDataUnchecked$5(0).setDelayedFactoryReset(str, z, z2, z3);
                        saveSettingsLocked(0);
                    }
                }
            } catch (java.io.IOException | java.lang.SecurityException e) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Failed requesting data wipe", e);
                android.app.admin.SecurityLog.writeEvent(210023, new java.lang.Object[0]);
            }
        } catch (java.lang.Throwable th) {
            android.app.admin.SecurityLog.writeEvent(210023, new java.lang.Object[0]);
            throw th;
        }
    }

    private void factoryResetIfDelayedEarlier() {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(0);
                if (lambda$getUserDataUnchecked$5.mFactoryResetFlags == 0) {
                    return;
                }
                if (lambda$getUserDataUnchecked$5.mFactoryResetReason == null) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "no persisted reason for factory resetting");
                    lambda$getUserDataUnchecked$5.mFactoryResetReason = "requested before boot";
                }
                com.android.server.devicepolicy.FactoryResetter build = com.android.server.devicepolicy.FactoryResetter.newBuilder(this.mContext).setReason(lambda$getUserDataUnchecked$5.mFactoryResetReason).setForce(true).setWipeEuicc((lambda$getUserDataUnchecked$5.mFactoryResetFlags & 4) != 0).setWipeAdoptableStorage((lambda$getUserDataUnchecked$5.mFactoryResetFlags & 2) != 0).setWipeFactoryResetProtection((lambda$getUserDataUnchecked$5.mFactoryResetFlags & 8) != 0).build();
                com.android.server.utils.Slogf.i(LOG_TAG, "Factory resetting on boot using " + build);
                try {
                    if (!build.factoryReset()) {
                        com.android.server.utils.Slogf.wtf(LOG_TAG, "Factory reset using " + build + " failed.");
                    }
                } catch (java.io.IOException e) {
                    com.android.server.utils.Slogf.wtf(LOG_TAG, "Could not factory reset using " + build, e);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:31:0x0069  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void forceWipeUser(int i, java.lang.String str, boolean z) {
        boolean z2;
        try {
            try {
                if (getCurrentForegroundUserId() == i) {
                    this.mInjector.getIActivityManager().switchUser(0);
                }
                z2 = this.mUserManagerInternal.removeUserEvenWhenDisallowed(i);
            } catch (android.os.RemoteException e) {
                e = e;
                z2 = false;
            } catch (java.lang.Throwable th) {
                th = th;
                if (0 == 0) {
                }
                throw th;
            }
            try {
                if (!z2) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Couldn't remove user " + i);
                } else if (isManagedProfile(i) && !z) {
                    sendWipeProfileNotification(str, android.os.UserHandle.of(getProfileParentId(i)));
                }
                if (z2) {
                    return;
                }
                android.app.admin.SecurityLog.writeEvent(210023, new java.lang.Object[0]);
            } catch (android.os.RemoteException e2) {
                e = e2;
                com.android.server.utils.Slogf.wtf(LOG_TAG, "Error forcing wipe user", e);
                if (z2) {
                    return;
                }
                android.app.admin.SecurityLog.writeEvent(210023, new java.lang.Object[0]);
            }
        } catch (java.lang.Throwable th2) {
            th = th2;
            if (0 == 0) {
                android.app.admin.SecurityLog.writeEvent(210023, new java.lang.Object[0]);
            }
            throw th;
        }
    }

    public void wipeDataWithReason(java.lang.String str, int i, @android.annotation.NonNull java.lang.String str2, boolean z, boolean z2) {
        java.lang.String str3;
        java.lang.String str4;
        int i2;
        android.content.ComponentName componentName;
        if (!this.mHasFeature && !hasCallingOrSelfPermission("android.permission.MASTER_CLEAR")) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        boolean isProfileOwnerOfOrganizationOwnedDevice = isProfileOwnerOfOrganizationOwnedDevice(callerIdentity.getUserId());
        com.android.server.devicepolicy.ActiveAdmin activeAdmin = enforcePermissionsAndGetEnforcingAdmin(null, new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WIPE_DATA", "android.permission.MASTER_CLEAR"}, 4, callerIdentity.getPackageName(), z2 ? -1 : getAffectedUser(z)).getActiveAdmin();
        checkCanExecuteOrThrowUnsafe(8);
        if (!android.text.TextUtils.isEmpty(str2)) {
            str3 = str2;
        } else {
            str3 = getGenericWipeReason(isProfileOwnerOfOrganizationOwnedDevice, z);
        }
        int identifier = activeAdmin != null ? activeAdmin.getUserHandle().getIdentifier() : callerIdentity.getUserId();
        com.android.server.utils.Slogf.i(LOG_TAG, "wipeDataWithReason(%s): admin=%s, user=%d", str3, activeAdmin, java.lang.Integer.valueOf(identifier));
        if (isProfileOwnerOfOrganizationOwnedDevice) {
            if (z) {
                identifier = 0;
            } else {
                final android.os.UserHandle of = android.os.UserHandle.of(getProfileParentId(identifier));
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda203
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$wipeDataWithReason$55(of);
                    }
                });
            }
        }
        android.app.admin.DevicePolicyEventLogger strings = android.app.admin.DevicePolicyEventLogger.createEvent(11).setInt(i).setStrings(new java.lang.String[]{z ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT});
        if (activeAdmin == null) {
            str4 = this.mInjector.getPackageManager().getPackagesForUid(callerIdentity.getUid())[0];
            com.android.server.utils.Slogf.i(LOG_TAG, "Logging wipeData() event admin as " + str4);
            strings.setAdmin(str4);
            if (!this.mInjector.userManagerIsHeadlessSystemUserMode()) {
                i2 = identifier;
                componentName = null;
            } else {
                i2 = 0;
                componentName = null;
            }
        } else if (activeAdmin.isPermissionBased) {
            str4 = callerIdentity.getPackageName();
            strings.setAdmin(str4);
            i2 = identifier;
            componentName = null;
        } else {
            android.content.ComponentName component = activeAdmin.info.getComponent();
            java.lang.String flattenToShortString = component.flattenToShortString();
            strings.setAdmin(component);
            componentName = component;
            i2 = identifier;
            str4 = flattenToShortString;
        }
        strings.write();
        wipeDataNoLock(componentName, i, java.lang.String.format("DevicePolicyManager.wipeDataWithReason() from %s, organization-owned? %s", str4, java.lang.Boolean.valueOf(isProfileOwnerOfOrganizationOwnedDevice)), str3, i2, z, java.lang.Boolean.valueOf(z2));
    }

    private java.lang.String getGenericWipeReason(boolean z, boolean z2) {
        if (z && !z2) {
            return getUpdatableString("Core.WORK_PROFILE_DELETED_ORG_OWNED_MESSAGE", android.R.string.default_notification_channel_label, new java.lang.Object[0]);
        }
        return getUpdatableString("Core.WORK_PROFILE_DELETED_GENERIC_MESSAGE", android.R.string.whichEditApplicationNamed, new java.lang.Object[0]);
    }

    private void clearOrgOwnedProfileOwnerDeviceWidePolicies(int i) {
        boolean z;
        com.android.server.utils.Slogf.i(LOG_TAG, "Cleaning up device-wide policies left over from org-owned profile...");
        this.mLockPatternUtils.setDeviceOwnerInfo((java.lang.String) null);
        this.mInjector.settingsGlobalPutInt("wifi_device_owner_configs_lockdown", 0);
        if (this.mInjector.securityLogGetLoggingEnabledProperty()) {
            this.mSecurityLogMonitor.stop();
            this.mInjector.securityLogSetLoggingEnabledProperty(false);
        }
        setNetworkLoggingActiveInternal(false);
        synchronized (getLockObject()) {
            try {
                z = this.mOwners.getSystemUpdatePolicy() != null;
                if (z) {
                    this.mOwners.clearSystemUpdatePolicy();
                    this.mOwners.writeDeviceOwner();
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (z) {
            this.mContext.sendBroadcastAsUser(new android.content.Intent("android.app.action.SYSTEM_UPDATE_POLICY_CHANGED"), android.os.UserHandle.SYSTEM);
        }
        suspendPersonalAppsInternal(i, getManagedUserId(i), false);
        int frpManagementAgentUid = getFrpManagementAgentUid();
        if (frpManagementAgentUid > 0) {
            lambda$setFactoryResetProtectionPolicy$60(frpManagementAgentUid);
        }
        this.mLockSettingsInternal.refreshStrongAuthTimeout(i);
        clearManagedSubscriptionsPolicy();
        clearLauncherShortcutOverrides();
        updateTelephonyCrossProfileIntentFilters(i, com.android.server.am.ProcessList.INVALID_ADJ, false);
        com.android.server.utils.Slogf.i(LOG_TAG, "Cleaning up device-wide policies done.");
    }

    private void clearManagedSubscriptionsPolicy() {
        unregisterOnSubscriptionsChangedListener();
        android.telephony.SubscriptionManager subscriptionManager = (android.telephony.SubscriptionManager) this.mContext.getSystemService(android.telephony.SubscriptionManager.class);
        for (int i : subscriptionManager.getActiveSubscriptionIdList(false)) {
            subscriptionManager.setSubscriptionUserHandle(i, null);
        }
    }

    private void clearLauncherShortcutOverrides() {
        this.mPolicyCache.setLauncherShortcutOverrides(new android.util.ArrayMap<>());
    }

    private void updateTelephonyCrossProfileIntentFilters(int i, int i2, boolean z) {
        try {
            if (!z && i2 == -10000) {
                this.mIPackageManager.clearCrossProfileIntentFilters(i, this.mContext.getPackageName());
                return;
            }
            for (com.android.server.pm.DefaultCrossProfileIntentFilter defaultCrossProfileIntentFilter : com.android.server.pm.DefaultCrossProfileIntentFiltersUtils.getDefaultCrossProfileTelephonyIntentFilters(!z)) {
                if (removeCrossProfileIntentFilter(defaultCrossProfileIntentFilter, i, i2)) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Failed to remove cross-profile intent filter: " + defaultCrossProfileIntentFilter.filter.getIntentFilter() + ", enableWorkTelephony: " + z);
                }
            }
            java.util.Iterator<com.android.server.pm.DefaultCrossProfileIntentFilter> it = com.android.server.pm.DefaultCrossProfileIntentFiltersUtils.getDefaultCrossProfileTelephonyIntentFilters(z).iterator();
            while (it.hasNext()) {
                addCrossProfileIntentFilter(it.next(), i, i2);
            }
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Error updating telephony cross profile intent filters", e);
        }
    }

    void addCrossProfileIntentFilter(com.android.server.pm.DefaultCrossProfileIntentFilter defaultCrossProfileIntentFilter, int i, int i2) throws android.os.RemoteException {
        if (defaultCrossProfileIntentFilter.direction == 1) {
            this.mIPackageManager.addCrossProfileIntentFilter(defaultCrossProfileIntentFilter.filter.getIntentFilter(), this.mContext.getOpPackageName(), i, i2, defaultCrossProfileIntentFilter.flags);
        } else {
            this.mIPackageManager.addCrossProfileIntentFilter(defaultCrossProfileIntentFilter.filter.getIntentFilter(), this.mContext.getOpPackageName(), i2, i, defaultCrossProfileIntentFilter.flags);
        }
    }

    boolean removeCrossProfileIntentFilter(com.android.server.pm.DefaultCrossProfileIntentFilter defaultCrossProfileIntentFilter, int i, int i2) throws android.os.RemoteException {
        if (defaultCrossProfileIntentFilter.direction == 1) {
            return this.mIPackageManager.removeCrossProfileIntentFilter(defaultCrossProfileIntentFilter.filter.getIntentFilter(), this.mContext.getOpPackageName(), i, i2, defaultCrossProfileIntentFilter.flags);
        }
        return this.mIPackageManager.removeCrossProfileIntentFilter(defaultCrossProfileIntentFilter.filter.getIntentFilter(), this.mContext.getOpPackageName(), i2, i, defaultCrossProfileIntentFilter.flags);
    }

    private void wipeDataNoLock(@android.annotation.Nullable final android.content.ComponentName componentName, final int i, final java.lang.String str, final java.lang.String str2, final int i2, boolean z, @android.annotation.Nullable java.lang.Boolean bool) {
        java.lang.String str3;
        final boolean z2;
        wtfIfInLock();
        if (componentName != null) {
            str3 = componentName.getPackageName();
        } else {
            int binderGetCallingUid = this.mInjector.binderGetCallingUid();
            java.lang.String[] packagesForUid = this.mInjector.getPackageManager().getPackagesForUid(binderGetCallingUid);
            com.android.internal.util.Preconditions.checkState(packagesForUid.length > 0, "Caller %s does not have any associated packages", new java.lang.Object[]{java.lang.Integer.valueOf(binderGetCallingUid)});
            str3 = packagesForUid[0];
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda35
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$wipeDataNoLock$56(i2, componentName);
            }
        });
        final boolean z3 = i2 == 0;
        if (bool == null || !this.mInjector.isChangeEnabled(EXPLICIT_WIPE_BEHAVIOUR, str3, i2)) {
            z2 = z3;
        } else if (bool.booleanValue()) {
            enforcePermissionsAndGetEnforcingAdmin(null, new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_WIPE_DATA", "android.permission.MASTER_CLEAR"}, 4, str3, bool.booleanValue() ? -1 : getAffectedUser(z));
            z2 = true;
        } else {
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda36
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$wipeDataNoLock$58(z3, i2);
                }
            });
            z2 = false;
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda37
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$wipeDataNoLock$59(z2, i, str, i2, str2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$wipeDataNoLock$56(int i, android.content.ComponentName componentName) throws java.lang.Exception {
        java.lang.String str;
        if (i == 0) {
            str = "no_factory_reset";
        } else if (isManagedProfile(i)) {
            str = "no_remove_managed_profile";
        } else {
            str = "no_remove_user";
        }
        if (isAdminAffectedByRestriction(componentName, str, i)) {
            throw new java.lang.SecurityException("Cannot wipe data. " + str + " restriction is set for user " + i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$wipeDataNoLock$58(boolean z, final int i) throws java.lang.Exception {
        com.android.internal.util.Preconditions.checkCallAuthorization(!z, "User %s is a system user and cannot be removed", new java.lang.Object[]{java.lang.Integer.valueOf(i)});
        com.android.internal.util.Preconditions.checkState(!(getUserInfo(i).isFull() && this.mUserManager.getAliveUsers().stream().filter(new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda151
            @Override // java.util.function.Predicate
            public final boolean test(java.lang.Object obj) {
                boolean lambda$wipeDataNoLock$57;
                lambda$wipeDataNoLock$57 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$wipeDataNoLock$57(i, (android.content.pm.UserInfo) obj);
                return lambda$wipeDataNoLock$57;
            }
        }).noneMatch(new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda152
            @Override // java.util.function.Predicate
            public final boolean test(java.lang.Object obj) {
                return ((android.content.pm.UserInfo) obj).isFull();
            }
        })), "Removing user %s would leave the device without any active users. Consider factory resetting the device instead.", new java.lang.Object[]{java.lang.Integer.valueOf(i)});
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$wipeDataNoLock$57(int i, android.content.pm.UserInfo userInfo) {
        return userInfo.getUserHandle().getIdentifier() != i;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$wipeDataNoLock$59(boolean z, int i, java.lang.String str, int i2, java.lang.String str2) throws java.lang.Exception {
        if (z) {
            forceWipeDeviceNoLock((i & 1) != 0, str, (i & 4) != 0, (i & 2) != 0);
        } else {
            forceWipeUser(i2, str2, (i & 8) != 0);
        }
    }

    private void sendWipeProfileNotification(java.lang.String str, android.os.UserHandle userHandle) {
        this.mInjector.getNotificationManager().notifyAsUser(null, 1001, new android.app.Notification.Builder(this.mContext, com.android.internal.notification.SystemNotificationChannels.DEVICE_ADMIN).setSmallIcon(android.R.drawable.stat_sys_warning).setContentTitle(getWorkProfileDeletedTitle()).setContentText(str).setColor(this.mContext.getColor(android.R.color.system_notification_accent_color)).setStyle(new android.app.Notification.BigTextStyle().bigText(str)).build(), userHandle);
    }

    private java.lang.String getWorkProfileDeletedTitle() {
        return getUpdatableString("Core.WORK_PROFILE_DELETED_TITLE", android.R.string.whichEditApplicationLabel, new java.lang.Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void clearWipeProfileNotification() {
        this.mInjector.getNotificationManager().cancel(1001);
    }

    public void setFactoryResetProtectionPolicy(android.content.ComponentName componentName, java.lang.String str, @android.annotation.Nullable android.app.admin.FactoryResetProtectionPolicy factoryResetProtectionPolicy) {
        com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked;
        if (!this.mHasFeature) {
            return;
        }
        if (!isPermissionCheckFlagEnabled()) {
            com.android.internal.util.Preconditions.checkNotNull(componentName, "ComponentName is null");
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        if (!isPermissionCheckFlagEnabled()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        }
        checkCanExecuteOrThrowUnsafe(32);
        final int frpManagementAgentUidOrThrow = getFrpManagementAgentUidOrThrow();
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    profileOwnerOrDeviceOwnerLocked = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_FACTORY_RESET", callerIdentity.getPackageName(), -1).getActiveAdmin();
                } else {
                    profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                }
                profileOwnerOrDeviceOwnerLocked.mFactoryResetProtectionPolicy = factoryResetProtectionPolicy;
                saveSettingsLocked(callerIdentity.getUserId());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda77
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setFactoryResetProtectionPolicy$60(frpManagementAgentUidOrThrow);
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(130).setAdmin(callerIdentity.getPackageName()).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: notifyResetProtectionPolicyChanged, reason: merged with bridge method [inline-methods] */
    public void lambda$setFactoryResetProtectionPolicy$60(int i) {
        this.mContext.sendBroadcastAsUser(new android.content.Intent("android.app.action.RESET_PROTECTION_POLICY_CHANGED").addFlags(android.hardware.audio.common.V2_0.AudioFormat.EVRCB), android.os.UserHandle.getUserHandleForUid(i), "android.permission.MANAGE_FACTORY_RESET_PROTECTION");
    }

    public android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(@android.annotation.Nullable android.content.ComponentName componentName) {
        com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        int frpManagementAgentUidOrThrow = getFrpManagementAgentUidOrThrow();
        synchronized (getLockObject()) {
            boolean z = true;
            try {
                if (componentName == null) {
                    if (frpManagementAgentUidOrThrow != callerIdentity.getUid() && !hasCallingPermission("android.permission.MASTER_CLEAR") && !hasCallingPermission("android.permission.MANAGE_DEVICE_POLICY_FACTORY_RESET")) {
                        z = false;
                    }
                    com.android.internal.util.Preconditions.checkCallAuthorization(z, "Must be called by the FRP management agent on device");
                    profileOwnerOrDeviceOwnerLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceOrSystemPermissionBasedAdminLocked();
                } else {
                    if (!isDefaultDeviceOwner(callerIdentity) && !isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) {
                        z = false;
                    }
                    com.android.internal.util.Preconditions.checkCallAuthorization(z);
                    profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (profileOwnerOrDeviceOwnerLocked != null) {
            return profileOwnerOrDeviceOwnerLocked.mFactoryResetProtectionPolicy;
        }
        return null;
    }

    private int getFrpManagementAgentUid() {
        com.android.server.pdb.PersistentDataBlockManagerInternal persistentDataBlockManagerInternal = this.mInjector.getPersistentDataBlockManagerInternal();
        if (persistentDataBlockManagerInternal != null) {
            return persistentDataBlockManagerInternal.getAllowedUid();
        }
        return -1;
    }

    private int getFrpManagementAgentUidOrThrow() {
        int frpManagementAgentUid = getFrpManagementAgentUid();
        if (frpManagementAgentUid == -1) {
            throw new java.lang.UnsupportedOperationException("The persistent data block service is not supported on this device");
        }
        return frpManagementAgentUid;
    }

    public boolean isFactoryResetProtectionPolicySupported() {
        return getFrpManagementAgentUid() != -1;
    }

    public void sendLostModeLocationUpdate(final com.android.internal.infra.AndroidFuture<java.lang.Boolean> androidFuture) {
        if (!this.mHasFeature) {
            androidFuture.complete(false);
            return;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.TRIGGER_LOST_MODE"));
        synchronized (getLockObject()) {
            final com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
            com.android.internal.util.Preconditions.checkState(deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked != null, "Lost mode location updates can only be sent on an organization-owned device.");
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda210
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$sendLostModeLocationUpdate$61(deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked, androidFuture);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$sendLostModeLocationUpdate$61(com.android.server.devicepolicy.ActiveAdmin activeAdmin, com.android.internal.infra.AndroidFuture androidFuture) throws java.lang.Exception {
        tryRetrieveAndSendLocationUpdate(activeAdmin, androidFuture, new java.lang.String[]{"fused", "network", "gps"}, 0);
    }

    private void tryRetrieveAndSendLocationUpdate(final com.android.server.devicepolicy.ActiveAdmin activeAdmin, final com.android.internal.infra.AndroidFuture<java.lang.Boolean> androidFuture, final java.lang.String[] strArr, final int i) {
        if (i == strArr.length) {
            androidFuture.complete(false);
        } else if (this.mInjector.getLocationManager().isProviderEnabled(strArr[i])) {
            this.mInjector.getLocationManager().getCurrentLocation(strArr[i], null, this.mContext.getMainExecutor(), new java.util.function.Consumer() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda56
                @Override // java.util.function.Consumer
                public final void accept(java.lang.Object obj) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$tryRetrieveAndSendLocationUpdate$62(activeAdmin, androidFuture, strArr, i, (android.location.Location) obj);
                }
            });
        } else {
            tryRetrieveAndSendLocationUpdate(activeAdmin, androidFuture, strArr, i + 1);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$tryRetrieveAndSendLocationUpdate$62(com.android.server.devicepolicy.ActiveAdmin activeAdmin, com.android.internal.infra.AndroidFuture androidFuture, java.lang.String[] strArr, int i, android.location.Location location) {
        if (location != null) {
            this.mContext.sendBroadcastAsUser(newLostModeLocationUpdateIntent(activeAdmin, location), activeAdmin.getUserHandle());
            androidFuture.complete(true);
        } else {
            tryRetrieveAndSendLocationUpdate(activeAdmin, androidFuture, strArr, i + 1);
        }
    }

    private android.content.Intent newLostModeLocationUpdateIntent(com.android.server.devicepolicy.ActiveAdmin activeAdmin, android.location.Location location) {
        android.content.Intent intent = new android.content.Intent("android.app.action.LOST_MODE_LOCATION_UPDATE");
        intent.putExtra("android.app.extra.LOST_MODE_LOCATION", location);
        intent.setPackage(activeAdmin.info.getPackageName());
        return intent;
    }

    public void getRemoveWarning(android.content.ComponentName componentName, final android.os.RemoteCallback remoteCallback, int i) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.BIND_DEVICE_ADMIN"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked == null) {
                    remoteCallback.sendResult((android.os.Bundle) null);
                    return;
                }
                android.content.Intent intent = new android.content.Intent("android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED");
                intent.setFlags(268435456);
                intent.setComponent(activeAdminUncheckedLocked.info.getComponent());
                this.mContext.sendOrderedBroadcastAsUser(intent, new android.os.UserHandle(i), null, new android.content.BroadcastReceiver() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.6
                    @Override // android.content.BroadcastReceiver
                    public void onReceive(android.content.Context context, android.content.Intent intent2) {
                        remoteCallback.sendResult(getResultExtras(false));
                    }
                }, null, -1, null, null);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void reportPasswordChanged(android.app.admin.PasswordMetrics passwordMetrics, int i) {
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()));
        if (!isSeparateProfileChallengeEnabled(i)) {
            com.android.internal.util.Preconditions.checkCallAuthorization(!isManagedProfile(i), "You can not set the active password for a managed profile, userId = %d", new java.lang.Object[]{java.lang.Integer.valueOf(i)});
        }
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        android.util.ArraySet arraySet = new android.util.ArraySet();
        synchronized (getLockObject()) {
            lambda$getUserDataUnchecked$5.mFailedPasswordAttempts = 0;
            arraySet.add(java.lang.Integer.valueOf(i));
            arraySet.addAll(updatePasswordValidityCheckpointLocked(i, false));
            arraySet.addAll(updatePasswordExpirationsLocked(i));
            setExpirationAlarmCheckLocked(this.mContext, i, false);
            sendAdminCommandForLockscreenPoliciesLocked("android.app.action.ACTION_PASSWORD_CHANGED", 0, i);
            arraySet.addAll(removeCaApprovalsIfNeeded(i));
            saveSettingsForUsersLocked(arraySet);
        }
        if (this.mInjector.securityLogIsLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210036, new java.lang.Object[]{java.lang.Integer.valueOf(passwordMetrics.determineComplexity()), java.lang.Integer.valueOf(i)});
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private java.util.Set<java.lang.Integer> updatePasswordExpirationsLocked(int i) {
        android.util.ArraySet arraySet = new android.util.ArraySet();
        java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(i);
        for (int i2 = 0; i2 < activeAdminsForLockscreenPoliciesLocked.size(); i2++) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = activeAdminsForLockscreenPoliciesLocked.get(i2);
            if (activeAdmin.isPermissionBased || activeAdmin.info.usesPolicy(6)) {
                arraySet.add(java.lang.Integer.valueOf(activeAdmin.getUserHandle().getIdentifier()));
                long j = activeAdmin.passwordExpirationTimeout;
                activeAdmin.passwordExpirationDate = j > 0 ? java.lang.System.currentTimeMillis() + j : 0L;
            }
        }
        return arraySet;
    }

    public void reportFailedPasswordAttempt(int i, boolean z) {
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        boolean z2;
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.BIND_DEVICE_ADMIN"));
        if (!isSeparateProfileChallengeEnabled(i)) {
            com.android.internal.util.Preconditions.checkCallAuthorization(!isManagedProfile(i), "You can not report failed password attempt if separate profile challenge is not in place for a managed profile, userId = %d", new java.lang.Object[]{java.lang.Integer.valueOf(i)});
        }
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            synchronized (getLockObject()) {
                try {
                    com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                    lambda$getUserDataUnchecked$5.mFailedPasswordAttempts++;
                    saveSettingsLocked(i);
                    if (!this.mHasFeature) {
                        activeAdmin = null;
                        z2 = false;
                    } else {
                        activeAdmin = getAdminWithMinimumFailedPasswordsForWipeLocked(i, false);
                        int i2 = activeAdmin != null ? activeAdmin.maximumFailedPasswordsForWipe : 0;
                        if (i2 > 0 && lambda$getUserDataUnchecked$5.mFailedPasswordAttempts >= i2) {
                            z2 = true;
                        } else {
                            z2 = false;
                        }
                        sendAdminCommandForLockscreenPoliciesLocked("android.app.action.ACTION_PASSWORD_FAILED", 1, i);
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            if (z2 && activeAdmin != null) {
                int userIdToWipeForFailedPasswords = getUserIdToWipeForFailedPasswords(activeAdmin);
                com.android.server.utils.Slogf.i(LOG_TAG, "Max failed password attempts policy reached for admin: " + activeAdmin.info.getComponent().flattenToShortString() + ". Calling wipeData for user " + userIdToWipeForFailedPasswords);
                try {
                    wipeDataNoLock(activeAdmin.info.getComponent(), 0, "reportFailedPasswordAttempt()", getFailedPasswordAttemptWipeMessage(), userIdToWipeForFailedPasswords, z, null);
                } catch (java.lang.SecurityException e) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Failed to wipe user " + userIdToWipeForFailedPasswords + " after max failed password attempts reached.", e);
                }
            }
            if (this.mInjector.securityLogIsLoggingEnabled()) {
                android.app.admin.SecurityLog.writeEvent(210007, new java.lang.Object[]{0, 1});
            }
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    private java.lang.String getFailedPasswordAttemptWipeMessage() {
        return getUpdatableString("Core.WORK_PROFILE_DELETED_FAILED_PASSWORD_ATTEMPTS_MESSAGE", android.R.string.whichHomeApplication, new java.lang.Object[0]);
    }

    private int getUserIdToWipeForFailedPasswords(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        int identifier = activeAdmin.getUserHandle().getIdentifier();
        if (activeAdmin.isPermissionBased) {
            return identifier;
        }
        if (!isProfileOwnerOfOrganizationOwnedDevice(activeAdmin.info.getComponent(), identifier)) {
            return identifier;
        }
        return getProfileParentId(identifier);
    }

    public void reportSuccessfulPasswordAttempt(final int i) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.BIND_DEVICE_ADMIN"));
        synchronized (getLockObject()) {
            try {
                final com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                if (lambda$getUserDataUnchecked$5.mFailedPasswordAttempts != 0 || lambda$getUserDataUnchecked$5.mPasswordOwner >= 0) {
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda32
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$reportSuccessfulPasswordAttempt$63(lambda$getUserDataUnchecked$5, i);
                        }
                    });
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (this.mInjector.securityLogIsLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210007, new java.lang.Object[]{1, 1});
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reportSuccessfulPasswordAttempt$63(com.android.server.devicepolicy.DevicePolicyData devicePolicyData, int i) throws java.lang.Exception {
        devicePolicyData.mFailedPasswordAttempts = 0;
        devicePolicyData.mPasswordOwner = -1;
        saveSettingsLocked(i);
        if (this.mHasFeature) {
            sendAdminCommandForLockscreenPoliciesLocked("android.app.action.ACTION_PASSWORD_SUCCEEDED", 1, i);
        }
    }

    public void reportFailedBiometricAttempt(int i) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.BIND_DEVICE_ADMIN"));
        if (this.mInjector.securityLogIsLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210007, new java.lang.Object[]{0, 0});
        }
    }

    public void reportSuccessfulBiometricAttempt(int i) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.BIND_DEVICE_ADMIN"));
        if (this.mInjector.securityLogIsLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210007, new java.lang.Object[]{1, 0});
        }
    }

    public void reportKeyguardDismissed(int i) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.BIND_DEVICE_ADMIN"));
        if (this.mInjector.securityLogIsLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210006, new java.lang.Object[0]);
        }
    }

    public void reportKeyguardSecured(int i) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.BIND_DEVICE_ADMIN"));
        if (this.mInjector.securityLogIsLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210008, new java.lang.Object[0]);
        }
    }

    public android.content.ComponentName setGlobalProxy(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        if (!this.mHasFeature) {
            return null;
        }
        synchronized (getLockObject()) {
            try {
                java.util.Objects.requireNonNull(componentName, "ComponentName is null");
                final com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(0);
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 5);
                for (android.content.ComponentName componentName2 : lambda$getUserDataUnchecked$5.mAdminMap.keySet()) {
                    if (lambda$getUserDataUnchecked$5.mAdminMap.get(componentName2).specifiesGlobalProxy && !componentName2.equals(componentName)) {
                        return componentName2;
                    }
                }
                if (android.os.UserHandle.getCallingUserId() != 0) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Only the owner is allowed to set the global proxy. User " + android.os.UserHandle.getCallingUserId() + " is not permitted.");
                    return null;
                }
                if (str == null) {
                    activeAdminForCallerLocked.specifiesGlobalProxy = false;
                    activeAdminForCallerLocked.globalProxySpec = null;
                    activeAdminForCallerLocked.globalProxyExclusionList = null;
                } else {
                    activeAdminForCallerLocked.specifiesGlobalProxy = true;
                    activeAdminForCallerLocked.globalProxySpec = str;
                    activeAdminForCallerLocked.globalProxyExclusionList = str2;
                }
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda95
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setGlobalProxy$64(lambda$getUserDataUnchecked$5);
                    }
                });
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public android.content.ComponentName getGlobalProxyAdmin(int i) {
        if (!this.mHasFeature) {
            return null;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i) && canQueryAdminPolicy(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(0);
                int size = lambda$getUserDataUnchecked$5.mAdminList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5.mAdminList.get(i2);
                    if (activeAdmin.specifiesGlobalProxy) {
                        return activeAdmin.info.getComponent();
                    }
                }
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setRecommendedGlobalProxy(android.content.ComponentName componentName, final android.net.ProxyInfo proxyInfo) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        checkAllUsersAreAffiliatedWithDevice();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda113
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setRecommendedGlobalProxy$65(proxyInfo);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setRecommendedGlobalProxy$65(android.net.ProxyInfo proxyInfo) throws java.lang.Exception {
        this.mInjector.getConnectivityManager().setGlobalProxy(proxyInfo);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: resetGlobalProxyLocked, reason: merged with bridge method [inline-methods] */
    public void lambda$setGlobalProxy$64(com.android.server.devicepolicy.DevicePolicyData devicePolicyData) {
        int size = devicePolicyData.mAdminList.size();
        for (int i = 0; i < size; i++) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = devicePolicyData.mAdminList.get(i);
            if (activeAdmin.specifiesGlobalProxy) {
                saveGlobalProxyLocked(activeAdmin.globalProxySpec, activeAdmin.globalProxyExclusionList);
                return;
            }
        }
        saveGlobalProxyLocked(null, null);
    }

    /* JADX WARN: Removed duplicated region for block: B:11:0x0036  */
    /* JADX WARN: Removed duplicated region for block: B:14:0x0051  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void saveGlobalProxyLocked(java.lang.String str, java.lang.String str2) {
        int parseInt;
        android.net.ProxyInfo buildDirectProxy;
        if (str2 == null) {
            str2 = "";
        }
        if (str == null) {
            str = "";
        }
        java.lang.String[] split = str.trim().split(":");
        if (split.length > 1) {
            try {
                parseInt = java.lang.Integer.parseInt(split[1]);
            } catch (java.lang.NumberFormatException e) {
            }
            java.lang.String trim = str2.trim();
            buildDirectProxy = android.net.ProxyInfo.buildDirectProxy(split[0], parseInt, com.android.net.module.util.ProxyUtils.exclusionStringAsList(trim));
            if (!buildDirectProxy.isValid()) {
                this.mInjector.settingsGlobalPutString("global_http_proxy_host", split[0]);
                this.mInjector.settingsGlobalPutInt("global_http_proxy_port", parseInt);
                this.mInjector.settingsGlobalPutString("global_http_proxy_exclusion_list", trim);
                return;
            } else {
                com.android.server.utils.Slogf.e(LOG_TAG, "Invalid proxy properties, ignoring: " + buildDirectProxy.toString());
                return;
            }
        }
        parseInt = 8080;
        java.lang.String trim2 = str2.trim();
        buildDirectProxy = android.net.ProxyInfo.buildDirectProxy(split[0], parseInt, com.android.net.module.util.ProxyUtils.exclusionStringAsList(trim2));
        if (!buildDirectProxy.isValid()) {
        }
    }

    public int setStorageEncryption(android.content.ComponentName componentName, boolean z) {
        int i;
        if (!this.mHasFeature) {
            return 0;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        int callingUserId = android.os.UserHandle.getCallingUserId();
        synchronized (getLockObject()) {
            try {
                if (callingUserId != 0) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Only owner/system user is allowed to set storage encryption. User " + android.os.UserHandle.getCallingUserId() + " is not permitted.");
                    return 0;
                }
                com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 7);
                if (!isEncryptionSupported()) {
                    return 0;
                }
                if (activeAdminForCallerLocked.encryptionRequested != z) {
                    activeAdminForCallerLocked.encryptionRequested = z;
                    saveSettingsLocked(callingUserId);
                }
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(0);
                int size = lambda$getUserDataUnchecked$5.mAdminList.size();
                boolean z2 = false;
                for (int i2 = 0; i2 < size; i2++) {
                    z2 |= lambda$getUserDataUnchecked$5.mAdminList.get(i2).encryptionRequested;
                }
                setEncryptionRequested(z2);
                if (z2) {
                    i = 3;
                } else {
                    i = 1;
                }
                return i;
            } finally {
            }
        }
    }

    public boolean getStorageEncryption(@android.annotation.Nullable android.content.ComponentName componentName, int i) {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        synchronized (getLockObject()) {
            try {
                if (callerIdentity.hasAdminComponent()) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                    return activeAdminUncheckedLocked != null ? activeAdminUncheckedLocked.encryptionRequested : false;
                }
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                int size = lambda$getUserDataUnchecked$5.mAdminList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    if (lambda$getUserDataUnchecked$5.mAdminList.get(i2).encryptionRequested) {
                        return true;
                    }
                }
                return false;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public int getStorageEncryptionStatus(@android.annotation.Nullable java.lang.String str, int i) {
        boolean z;
        int encryptionStatus;
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(str), i));
        if (str != null) {
            try {
                if (this.mIPackageManager.getApplicationInfo(str, 0L, i).targetSdkVersion <= 23) {
                    z = true;
                    encryptionStatus = getEncryptionStatus();
                    if (encryptionStatus != 5 && z) {
                        return 3;
                    }
                    return encryptionStatus;
                }
            } catch (android.os.RemoteException e) {
                throw new java.lang.SecurityException(e);
            }
        }
        z = false;
        encryptionStatus = getEncryptionStatus();
        if (encryptionStatus != 5) {
        }
        return encryptionStatus;
    }

    private boolean isEncryptionSupported() {
        return getEncryptionStatus() != 0;
    }

    private int getEncryptionStatus() {
        if (this.mInjector.storageManagerIsFileBasedEncryptionEnabled()) {
            return 5;
        }
        return 0;
    }

    private void setEncryptionRequested(boolean z) {
    }

    public void setScreenCaptureDisabled(android.content.ComponentName componentName, java.lang.String str, boolean z, boolean z2) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int identifier = android.os.Binder.getCallingUserHandle().getIdentifier();
        com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_SCREEN_CAPTURE", callerIdentity.getPackageName(), z2 ? getProfileParentId(identifier) : identifier);
        if ((z2 && isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) || isDefaultDeviceOwner(callerIdentity)) {
            if (z) {
                this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.BooleanPolicyValue(z));
            } else {
                this.mDevicePolicyEngine.removeGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED, enforcePermissionAndGetEnforcingAdmin);
            }
        } else if (z) {
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.BooleanPolicyValue(z), identifier);
        } else {
            this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED, enforcePermissionAndGetEnforcingAdmin, identifier);
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(29).setAdmin(callerIdentity.getPackageName()).setBoolean(z).write();
    }

    private void setScreenCaptureDisabled(int i) {
        if (i == this.mPolicyCache.getScreenCaptureDisallowedUser()) {
            return;
        }
        this.mPolicyCache.setScreenCaptureDisallowedUser(i);
        updateScreenCaptureDisabled();
    }

    public boolean getScreenCaptureDisabled(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(componentName), i));
        if (z) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(getCallerIdentity().getUserId()));
        }
        java.lang.Boolean bool = (java.lang.Boolean) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED, i);
        return bool != null && bool.booleanValue();
    }

    private void updateScreenCaptureDisabled() {
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda108
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$updateScreenCaptureDisabled$66();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateScreenCaptureDisabled$66() {
        try {
            this.mInjector.getIWindowManager().refreshScreenCaptureDisabled();
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Unable to notify WindowManager.", e);
        }
    }

    public void setNearbyNotificationStreamingPolicy(int i) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                if (profileOwnerOrDeviceOwnerLocked.mNearbyNotificationStreamingPolicy != i) {
                    profileOwnerOrDeviceOwnerLocked.mNearbyNotificationStreamingPolicy = i;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public int getNearbyNotificationStreamingPolicy(int i) {
        int i2;
        if (!this.mHasFeature) {
            return 0;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || hasCallingOrSelfPermission("android.permission.READ_NEARBY_STREAMING_POLICY"));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCrossUsersPermission(callerIdentity, i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                i2 = deviceOrProfileOwnerAdminLocked != null ? deviceOrProfileOwnerAdminLocked.mNearbyNotificationStreamingPolicy : 0;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return i2;
    }

    public void setNearbyAppStreamingPolicy(int i) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                if (profileOwnerOrDeviceOwnerLocked.mNearbyAppStreamingPolicy != i) {
                    profileOwnerOrDeviceOwnerLocked.mNearbyAppStreamingPolicy = i;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public int getNearbyAppStreamingPolicy(int i) {
        int i2;
        if (!this.mHasFeature) {
            return 0;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || hasCallingOrSelfPermission("android.permission.READ_NEARBY_STREAMING_POLICY"));
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCrossUsersPermission(callerIdentity, i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                i2 = deviceOrProfileOwnerAdminLocked != null ? deviceOrProfileOwnerAdminLocked.mNearbyAppStreamingPolicy : 0;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return i2;
    }

    public void setAutoTimeRequired(android.content.ComponentName componentName, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        boolean z2 = true;
        com.android.internal.util.Preconditions.checkCallAuthorization(isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            if (isManagedProfile(callerIdentity.getUserId())) {
                z2 = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z2, "Managed profile cannot set auto time required");
            setGlobalUserRestrictionInternal(getEnforcingAdminForCaller(componentName, componentName.getPackageName()), "no_config_date_time", z);
        }
        if (z) {
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda190
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setAutoTimeRequired$67();
                }
            });
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(36).setAdmin(componentName).setBoolean(z).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setAutoTimeRequired$67() throws java.lang.Exception {
        this.mInjector.settingsGlobalPutInt("auto_time", 1);
    }

    public boolean getAutoTimeRequired() {
        java.lang.Boolean bool;
        return this.mHasFeature && (bool = (java.lang.Boolean) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction("no_config_date_time"), this.mInjector.binderGetCallingUserHandle().getIdentifier())) != null && bool.booleanValue();
    }

    public void setAutoTimeEnabled(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, final boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (!this.mHasFeature) {
            return;
        }
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isUnicornFlagEnabled()) {
            enforcePermission("android.permission.SET_TIME", callerIdentity.getPackageName(), -1);
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOnUser0(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda40
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setAutoTimeEnabled$68(z);
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(127).setAdmin(callerIdentity.getPackageName()).setBoolean(z).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setAutoTimeEnabled$68(boolean z) throws java.lang.Exception {
        this.mInjector.settingsGlobalPutInt("auto_time", z ? 1 : 0);
    }

    public boolean getAutoTimeEnabled(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (!this.mHasFeature) {
            return false;
        }
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isUnicornFlagEnabled()) {
            enforceCanQuery("android.permission.SET_TIME", callerIdentity.getPackageName(), -1);
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOnUser0(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        }
        return this.mInjector.settingsGlobalGetInt("auto_time", 0) > 0;
    }

    public void setAutoTimeZoneEnabled(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, final boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (!this.mHasFeature) {
            return;
        }
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isUnicornFlagEnabled()) {
            this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.AUTO_TIMEZONE, enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.SET_TIME_ZONE", callerIdentity.getPackageName(), -1), new android.app.admin.BooleanPolicyValue(z));
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOnUser0(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda3
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setAutoTimeZoneEnabled$69(z);
                }
            });
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(128).setAdmin(callerIdentity.getPackageName()).setBoolean(z).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setAutoTimeZoneEnabled$69(boolean z) throws java.lang.Exception {
        this.mInjector.settingsGlobalPutInt("auto_time_zone", z ? 1 : 0);
    }

    public boolean getAutoTimeZoneEnabled(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (!this.mHasFeature) {
            return false;
        }
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isUnicornFlagEnabled()) {
            enforceCanQuery("android.permission.SET_TIME_ZONE", callerIdentity.getPackageName(), -1);
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOnUser0(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        }
        return this.mInjector.settingsGlobalGetInt("auto_time_zone", 0) > 0;
    }

    public void setForceEphemeralUsers(android.content.ComponentName componentName, boolean z) {
        throw new java.lang.UnsupportedOperationException("This method was used by split system user only.");
    }

    public boolean getForceEphemeralUsers(android.content.ComponentName componentName) {
        throw new java.lang.UnsupportedOperationException("This method was used by split system user only.");
    }

    public boolean requestBugreport(android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        checkAllUsersAreAffiliatedWithDevice();
        checkCanExecuteOrThrowUnsafe(29);
        if (!this.mBugreportCollectionManager.requestBugreport()) {
            return false;
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(53).setAdmin(componentName).write();
        long currentTimeMillis = java.lang.System.currentTimeMillis();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(0);
                if (currentTimeMillis > lambda$getUserDataUnchecked$5.mLastBugReportRequestTime) {
                    lambda$getUserDataUnchecked$5.mLastBugReportRequestTime = currentTimeMillis;
                    saveSettingsLocked(0);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return true;
    }

    void sendDeviceOwnerCommand(java.lang.String str, android.os.Bundle bundle) {
        int deviceOwnerUserId;
        android.content.ComponentName deviceOwnerComponent;
        synchronized (getLockObject()) {
            deviceOwnerUserId = this.mOwners.getDeviceOwnerUserId();
            deviceOwnerComponent = this.mOwners.getDeviceOwnerComponent();
        }
        sendActiveAdminCommand(str, bundle, deviceOwnerUserId, deviceOwnerComponent, false);
    }

    void sendDeviceOwnerOrProfileOwnerCommand(java.lang.String str, android.os.Bundle bundle, int i) {
        int i2;
        android.content.ComponentName componentName;
        boolean z;
        android.content.ComponentName componentName2;
        boolean z2 = false;
        if (i != -1) {
            i2 = i;
        } else {
            i2 = 0;
        }
        if (!str.equals("android.app.action.NETWORK_LOGS_AVAILABLE")) {
            componentName = null;
        } else {
            componentName = resolveDelegateReceiver("delegation-network-logging", str, i2);
            z2 = true;
        }
        if (!str.equals("android.app.action.SECURITY_LOGS_AVAILABLE")) {
            z = z2;
        } else {
            componentName = resolveDelegateReceiver("delegation-security-logging", str, i2);
            z = true;
        }
        if (componentName != null) {
            componentName2 = componentName;
        } else {
            componentName2 = getOwnerComponent(i2);
        }
        sendActiveAdminCommand(str, bundle, i2, componentName2, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void sendProfileOwnerCommand(java.lang.String str, android.os.Bundle bundle, int i) {
        sendActiveAdminCommand(str, bundle, i, this.mOwners.getProfileOwnerComponent(i), false);
    }

    private void sendActiveAdminCommand(java.lang.String str, android.os.Bundle bundle, int i, android.content.ComponentName componentName, boolean z) {
        android.content.Intent intent = new android.content.Intent(str);
        intent.setComponent(componentName);
        if (bundle != null) {
            intent.putExtras(bundle);
        }
        if (z) {
            intent.addFlags(268435456);
        }
        this.mContext.sendBroadcastAsUser(intent, android.os.UserHandle.of(i));
    }

    private void sendOwnerChangedBroadcast(java.lang.String str, int i) {
        this.mContext.sendBroadcastAsUser(new android.content.Intent(str).addFlags(16777216), android.os.UserHandle.of(i));
    }

    void sendBugreportToDeviceOwner(android.net.Uri uri, java.lang.String str) {
        synchronized (getLockObject()) {
            android.content.Intent intent = new android.content.Intent("android.app.action.BUGREPORT_SHARE");
            intent.setComponent(this.mOwners.getDeviceOwnerComponent());
            intent.setDataAndType(uri, "application/vnd.android.bugreport");
            intent.putExtra("android.app.extra.BUGREPORT_HASH", str);
            intent.setFlags(1);
            com.android.server.uri.UriGrantsManagerInternal uriGrantsManagerInternal = (com.android.server.uri.UriGrantsManagerInternal) com.android.server.LocalServices.getService(com.android.server.uri.UriGrantsManagerInternal.class);
            uriGrantsManagerInternal.grantUriPermissionUncheckedFromIntent(uriGrantsManagerInternal.checkGrantUriPermissionFromIntent(intent, 2000, this.mOwners.getDeviceOwnerComponent().getPackageName(), this.mOwners.getDeviceOwnerUserId()), null);
            this.mContext.sendBroadcastAsUser(intent, android.os.UserHandle.of(this.mOwners.getDeviceOwnerUserId()));
        }
    }

    void setDeviceOwnerRemoteBugreportUriAndHash(java.lang.String str, java.lang.String str2) {
        synchronized (getLockObject()) {
            this.mOwners.setDeviceOwnerRemoteBugreportUriAndHash(str, str2);
        }
    }

    android.util.Pair<java.lang.String, java.lang.String> getDeviceOwnerRemoteBugreportUriAndHash() {
        android.util.Pair<java.lang.String, java.lang.String> pair;
        synchronized (getLockObject()) {
            java.lang.String deviceOwnerRemoteBugreportUri = this.mOwners.getDeviceOwnerRemoteBugreportUri();
            pair = deviceOwnerRemoteBugreportUri == null ? null : new android.util.Pair<>(deviceOwnerRemoteBugreportUri, this.mOwners.getDeviceOwnerRemoteBugreportHash());
        }
        return pair;
    }

    public void setCameraDisabled(android.content.ComponentName componentName, java.lang.String str, boolean z, boolean z2) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        checkCanExecuteOrThrowUnsafe(31);
        try {
            setBackwardCompatibleUserRestriction(callerIdentity, enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_CAMERA", callerIdentity.getPackageName(), getProfileParentUserIfRequested(userId, z2)), "no_camera", z, z2);
            int profileParentId = z2 ? getProfileParentId(userId) : userId;
            if (android.app.admin.SecurityLog.isLoggingEnabled() && componentName != null) {
                android.app.admin.SecurityLog.writeEvent(210034, new java.lang.Object[]{componentName.getPackageName(), java.lang.Integer.valueOf(userId), java.lang.Integer.valueOf(profileParentId), java.lang.Integer.valueOf(z ? 1 : 0)});
            }
            android.app.admin.DevicePolicyEventLogger.createEvent(30).setAdmin(callerIdentity.getPackageName()).setBoolean(z).setStrings(new java.lang.String[]{z2 ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT}).write();
        } catch (java.lang.IllegalStateException e) {
            throw new java.lang.IllegalStateException("Please use addUserRestriction or addUserRestrictionGlobally using the key UserManager.DISALLOW_CAMERA to disable the camera locally or globally, respectively");
        }
    }

    public boolean getCameraDisabled(android.content.ComponentName componentName, java.lang.String str, int i, boolean z) {
        java.lang.Boolean bool;
        if (!this.mHasFeature) {
            return false;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i) || isCameraServerUid(callerIdentity) || hasPermission("android.permission.MANAGE_DEVICE_POLICY_CAMERA", callerIdentity.getPackageName(), i) || hasPermission("android.permission.QUERY_ADMIN_POLICY", callerIdentity.getPackageName()));
        if (z) {
            i = getProfileParentId(i);
        }
        com.android.server.devicepolicy.PolicyDefinition<java.lang.Boolean> policyDefinitionForUserRestriction = com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction("no_camera");
        if (componentName != null) {
            com.android.server.devicepolicy.EnforcingAdmin enforcingAdminForCaller = getEnforcingAdminForCaller(componentName, str);
            if (isDeviceOwner(callerIdentity)) {
                bool = (java.lang.Boolean) this.mDevicePolicyEngine.getGlobalPolicySetByAdmin(policyDefinitionForUserRestriction, enforcingAdminForCaller);
            } else {
                bool = (java.lang.Boolean) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(policyDefinitionForUserRestriction, enforcingAdminForCaller, i);
            }
            return java.lang.Boolean.TRUE.equals(bool);
        }
        return java.lang.Boolean.TRUE.equals(this.mDevicePolicyEngine.getResolvedPolicy(policyDefinitionForUserRestriction, i));
    }

    public void setKeyguardDisabledFeatures(android.content.ComponentName componentName, java.lang.String str, int i, boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (!this.mHasFeature) {
            return;
        }
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        }
        int userId = callerIdentity.getUserId();
        int profileParentId = z ? getProfileParentId(userId) : userId;
        synchronized (getLockObject()) {
            try {
                if (isUnicornFlagEnabled()) {
                    com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_KEYGUARD", callerIdentity.getPackageName(), profileParentId);
                    if (i == 0) {
                        this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.KEYGUARD_DISABLED_FEATURES, enforcePermissionAndGetEnforcingAdmin, profileParentId);
                    } else {
                        if (isManagedProfile(userId)) {
                            if (z) {
                                if (isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) {
                                    i &= com.android.server.am.ProcessList.CACHED_APP_LMK_FIRST_ADJ;
                                } else {
                                    i &= com.android.internal.util.FrameworkStatsLog.HOTWORD_DETECTION_SERVICE_RESTARTED;
                                }
                            } else {
                                i &= PROFILE_KEYGUARD_FEATURES;
                            }
                        }
                        this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.KEYGUARD_DISABLED_FEATURES, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.IntegerPolicyValue(i), profileParentId);
                    }
                    invalidateBinderCaches();
                } else {
                    com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 9, z);
                    if (isManagedProfile(userId)) {
                        if (z) {
                            if (isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) {
                                i &= com.android.server.am.ProcessList.CACHED_APP_LMK_FIRST_ADJ;
                            } else {
                                i &= com.android.internal.util.FrameworkStatsLog.HOTWORD_DETECTION_SERVICE_RESTARTED;
                            }
                        } else {
                            i &= PROFILE_KEYGUARD_FEATURES;
                        }
                    }
                    if (activeAdminForCallerLocked.disabledKeyguardFeatures != i) {
                        activeAdminForCallerLocked.disabledKeyguardFeatures = i;
                        saveSettingsLocked(userId);
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (android.app.admin.SecurityLog.isLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210021, new java.lang.Object[]{callerIdentity.getPackageName(), java.lang.Integer.valueOf(userId), java.lang.Integer.valueOf(profileParentId), java.lang.Integer.valueOf(i)});
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(9).setAdmin(callerIdentity.getPackageName()).setInt(i).setStrings(new java.lang.String[]{z ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT}).write();
    }

    public boolean requireSecureKeyguard(int i) {
        int storageEncryptionStatus;
        if (this.mHasFeature) {
            return getPasswordQuality(null, i, false) > 0 || (storageEncryptionStatus = getStorageEncryptionStatus(null, i)) == 3 || storageEncryptionStatus == 2 || (getKeyguardDisabledFeatures(null, i, false) & 16) != 0;
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:42:0x00bd A[Catch: all -> 0x00a9, Merged into TryCatch #0 {all -> 0x0066, all -> 0x00a9, blocks: (B:19:0x0043, B:21:0x004a, B:24:0x0064, B:26:0x005f, B:27:0x0069, B:29:0x006f, B:30:0x0071, B:32:0x0073, B:34:0x0079, B:35:0x0092, B:37:0x0094, B:63:0x00e8, B:64:0x00ed, B:60:0x00ef, B:61:0x00f4, B:67:0x009c, B:69:0x00a2, B:40:0x00b4, B:42:0x00bd, B:47:0x00d4, B:49:0x00db, B:53:0x00e1, B:39:0x00ab), top: B:17:0x0041 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int getKeyguardDisabledFeatures(android.content.ComponentName componentName, int i, boolean z) {
        long binderClearCallingIdentity;
        java.util.List<com.android.server.devicepolicy.ActiveAdmin> list;
        int size;
        int i2;
        if (!this.mHasFeature) {
            return 0;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        com.android.internal.util.Preconditions.checkCallAuthorization(componentName == null || isCallingFromPackage(componentName.getPackageName(), callerIdentity.getUid()) || isSystemUid(callerIdentity));
        final int profileParentId = z ? getProfileParentId(i) : i;
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    if (isUnicornFlagEnabled()) {
                        java.lang.Integer num = (java.lang.Integer) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.KEYGUARD_DISABLED_FEATURES, getEnforcingAdminForPackage(componentName, componentName.getPackageName(), i), profileParentId);
                        return num != null ? num.intValue() : 0;
                    }
                    com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i, z);
                    return activeAdminUncheckedLocked != null ? activeAdminUncheckedLocked.disabledKeyguardFeatures : 0;
                }
                if (isUnicornFlagEnabled()) {
                    final java.lang.Integer num2 = (java.lang.Integer) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.KEYGUARD_DISABLED_FEATURES, profileParentId);
                    return ((java.lang.Integer) android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda61
                        public final java.lang.Object getOrThrow() {
                            java.lang.Integer lambda$getKeyguardDisabledFeatures$70;
                            lambda$getKeyguardDisabledFeatures$70 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getKeyguardDisabledFeatures$70(num2, profileParentId);
                            return lambda$getKeyguardDisabledFeatures$70;
                        }
                    })).intValue();
                }
                binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                if (!z) {
                    if (isManagedProfile(i)) {
                        list = getUserDataUnchecked(i).mAdminList;
                        size = list.size();
                        int i3 = 0;
                        for (i2 = 0; i2 < size; i2++) {
                            com.android.server.devicepolicy.ActiveAdmin activeAdmin = list.get(i2);
                            int identifier = activeAdmin.getUserHandle().getIdentifier();
                            if ((!z && identifier == i) || !isManagedProfile(identifier)) {
                                i3 |= activeAdmin.disabledKeyguardFeatures;
                            } else {
                                i3 |= activeAdmin.disabledKeyguardFeatures & com.android.server.am.ProcessList.CACHED_APP_LMK_FIRST_ADJ;
                            }
                        }
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        return i3;
                    }
                }
                list = getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z));
                size = list.size();
                int i32 = 0;
                while (i2 < size) {
                }
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                return i32;
            } catch (java.lang.Throwable th) {
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                throw th;
            } finally {
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$getKeyguardDisabledFeatures$70(java.lang.Integer num, int i) throws java.lang.Exception {
        java.lang.Integer num2;
        int intValue = num == null ? 0 : num.intValue();
        java.util.Iterator it = this.mUserManager.getProfiles(i).iterator();
        while (it.hasNext()) {
            int i2 = ((android.content.pm.UserInfo) it.next()).id;
            if (i2 != i && (num2 = (java.lang.Integer) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.KEYGUARD_DISABLED_FEATURES, i2)) != null) {
                intValue |= num2.intValue() & com.android.server.am.ProcessList.CACHED_APP_LMK_FIRST_ADJ;
            }
        }
        return java.lang.Integer.valueOf(intValue);
    }

    public void setKeepUninstalledPackages(android.content.ComponentName componentName, java.lang.String str, java.util.List<java.lang.String> list) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(list, "packageList is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && isDefaultDeviceOwner(callerIdentity)) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-keep-uninstalled-packages")));
        checkCanExecuteOrThrowUnsafe(17);
        synchronized (getLockObject()) {
            getDeviceOwnerAdminLocked().keepUninstalledPackages = list;
            saveSettingsLocked(callerIdentity.getUserId());
            this.mInjector.getPackageManagerInternal().setKeepUninstalledPackages(list);
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(61).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).setStrings((java.lang.String[]) list.toArray(new java.lang.String[0])).write();
    }

    public java.util.List<java.lang.String> getKeepUninstalledPackages(android.content.ComponentName componentName, java.lang.String str) {
        java.util.List<java.lang.String> keepUninstalledPackagesLocked;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && isDefaultDeviceOwner(callerIdentity)) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-keep-uninstalled-packages")));
        synchronized (getLockObject()) {
            keepUninstalledPackagesLocked = getKeepUninstalledPackagesLocked();
        }
        return keepUninstalledPackagesLocked;
    }

    private java.util.List<java.lang.String> getKeepUninstalledPackagesLocked() {
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
        if (deviceOwnerAdminLocked != null) {
            return deviceOwnerAdminLocked.keepUninstalledPackages;
        }
        return null;
    }

    private void logMissingFeatureAction(java.lang.String str) {
        com.android.server.utils.Slogf.w(LOG_TAG, str + " because device does not have the android.software.device_admin feature.");
    }

    public boolean setDeviceOwner(android.content.ComponentName componentName, final int i, boolean z) {
        boolean z2;
        int currentForegroundUserId;
        if (!this.mHasFeature) {
            logMissingFeatureAction("Cannot set " + android.content.ComponentName.flattenToShortString(componentName) + " as device owner for user " + i);
            return false;
        }
        com.android.internal.util.Preconditions.checkArgument(componentName != null);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        boolean z3 = !isAdb(callerIdentity) || hasIncompatibleAccountsOnAnyUser();
        if (!z3) {
            synchronized (getLockObject()) {
                try {
                    if (!isAdminTestOnlyLocked(componentName, i) && hasAccountsOnAnyUser()) {
                        com.android.server.utils.Slogf.w(LOG_TAG, "Non test-only owner can't be installed with existing accounts.");
                        return false;
                    }
                } finally {
                }
            }
        }
        synchronized (getLockObject()) {
            try {
                enforceCanSetDeviceOwnerLocked(callerIdentity, componentName, i, z3);
                com.android.internal.util.Preconditions.checkArgument(isPackageInstalledForUser(componentName.getPackageName(), i), "Invalid component " + componentName + " for device owner");
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked != null && !lambda$getUserDataUnchecked$5(i).mRemovingAdmins.contains(componentName)) {
                    z2 = true;
                } else {
                    z2 = false;
                }
                com.android.internal.util.Preconditions.checkArgument(z2, "Not active admin: " + componentName);
                toggleBackupServiceActive(0, false);
                if (isAdb(callerIdentity)) {
                    com.android.internal.logging.MetricsLogger.action(this.mContext, 617, LOG_TAG_DEVICE_OWNER);
                    android.app.admin.DevicePolicyEventLogger.createEvent(82).setAdmin(componentName).setStrings(new java.lang.String[]{LOG_TAG_DEVICE_OWNER}).write();
                }
                this.mOwners.setDeviceOwner(componentName, i);
                this.mOwners.writeDeviceOwner();
                setDeviceOwnershipSystemPropertyLocked();
                if (isAdb(callerIdentity)) {
                    activeAdminUncheckedLocked.mAdminCanGrantSensorsPermissions = true;
                    this.mPolicyCache.setAdminCanGrantSensorsPermissions(true);
                    saveSettingsLocked(i);
                }
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda150
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDeviceOwner$71(i);
                    }
                });
                this.mDeviceAdminServiceController.startServiceForAdmin(componentName.getPackageName(), i, "set-device-owner");
                com.android.server.utils.Slogf.i(LOG_TAG, "Device owner set: " + componentName + " on user " + i);
            } finally {
            }
        }
        if (z && this.mInjector.userManagerIsHeadlessSystemUserMode() && getHeadlessDeviceOwnerMode() == 1) {
            synchronized (getLockObject()) {
                currentForegroundUserId = getCurrentForegroundUserId();
            }
            com.android.server.utils.Slogf.i(LOG_TAG, "setDeviceOwner(): setting " + componentName + " as profile owner on user " + currentForegroundUserId);
            manageUserUnchecked(componentName, componentName, currentForegroundUserId, null, false);
        }
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDeviceOwner$71(int i) throws java.lang.Exception {
        for (int i2 : this.mUserManagerInternal.getUserIds()) {
            this.mUserManager.setUserRestriction("no_add_managed_profile", true, android.os.UserHandle.of(i2));
            this.mUserManager.setUserRestriction("no_add_clone_profile", true, android.os.UserHandle.of(i2));
            this.mUserManager.setUserRestriction("no_add_private_profile", true, android.os.UserHandle.of(i2));
        }
        sendOwnerChangedBroadcast("android.app.action.DEVICE_OWNER_CHANGED", i);
    }

    private int getHeadlessDeviceOwnerMode() {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                if (deviceOwnerAdminLocked == null) {
                    return 0;
                }
                return deviceOwnerAdminLocked.info.getHeadlessDeviceOwnerMode();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean hasDeviceOwner() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || canManageUsers(callerIdentity) || isFinancedDeviceOwner(callerIdentity) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        return this.mOwners.hasDeviceOwner();
    }

    boolean isDeviceOwner(com.android.server.devicepolicy.ActiveAdmin activeAdmin) {
        return isDeviceOwner(activeAdmin.info.getComponent(), activeAdmin.getUserHandle().getIdentifier());
    }

    public boolean isDeviceOwner(@android.annotation.Nullable android.content.ComponentName componentName, int i) {
        boolean z;
        synchronized (getLockObject()) {
            try {
                z = this.mOwners.hasDeviceOwner() && this.mOwners.getDeviceOwnerUserId() == i && this.mOwners.getDeviceOwnerComponent().equals(componentName);
            } finally {
            }
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isDefaultDeviceOwner(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        boolean z;
        synchronized (getLockObject()) {
            try {
                z = isDeviceOwnerLocked(callerIdentity) && getDeviceOwnerTypeLocked(this.mOwners.getDeviceOwnerPackageName()) == 0;
            } finally {
            }
        }
        return z;
    }

    public boolean isDeviceOwner(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        boolean isDeviceOwnerLocked;
        synchronized (getLockObject()) {
            isDeviceOwnerLocked = isDeviceOwnerLocked(callerIdentity);
        }
        return isDeviceOwnerLocked;
    }

    private boolean isDeviceOwnerLocked(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        if (!this.mOwners.hasDeviceOwner() || this.mOwners.getDeviceOwnerUserId() != callerIdentity.getUserId()) {
            return false;
        }
        if (callerIdentity.hasAdminComponent()) {
            return this.mOwners.getDeviceOwnerComponent().equals(callerIdentity.getComponentName());
        }
        return isUidDeviceOwnerLocked(callerIdentity.getUid());
    }

    private boolean isDeviceOwnerUserId(int i) {
        boolean z;
        synchronized (getLockObject()) {
            try {
                z = this.mOwners.getDeviceOwnerComponent() != null && this.mOwners.getDeviceOwnerUserId() == i;
            } finally {
            }
        }
        return z;
    }

    public boolean isProfileOwner(@android.annotation.Nullable android.content.ComponentName componentName, final int i) {
        return componentName != null && componentName.equals((android.content.ComponentName) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda215
            public final java.lang.Object getOrThrow() {
                android.content.ComponentName lambda$isProfileOwner$72;
                lambda$isProfileOwner$72 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isProfileOwner$72(i);
                return lambda$isProfileOwner$72;
            }
        }));
    }

    public boolean isProfileOwner(final com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        synchronized (getLockObject()) {
            try {
                android.content.ComponentName componentName = (android.content.ComponentName) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda100
                    public final java.lang.Object getOrThrow() {
                        android.content.ComponentName lambda$isProfileOwner$73;
                        lambda$isProfileOwner$73 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isProfileOwner$73(callerIdentity);
                        return lambda$isProfileOwner$73;
                    }
                });
                if (componentName == null) {
                    return false;
                }
                if (callerIdentity.hasAdminComponent()) {
                    return componentName.equals(callerIdentity.getComponentName());
                }
                return isUidProfileOwnerLocked(callerIdentity.getUid());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.content.ComponentName lambda$isProfileOwner$73(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        return lambda$isProfileOwner$72(callerIdentity.getUserId());
    }

    private boolean isUidProfileOwnerLocked(int i) {
        ensureLocked();
        int userId = android.os.UserHandle.getUserId(i);
        android.content.ComponentName profileOwnerComponent = this.mOwners.getProfileOwnerComponent(userId);
        if (profileOwnerComponent == null) {
            return false;
        }
        java.util.Iterator<com.android.server.devicepolicy.ActiveAdmin> it = lambda$getUserDataUnchecked$5(userId).mAdminList.iterator();
        while (it.hasNext()) {
            com.android.server.devicepolicy.ActiveAdmin next = it.next();
            android.content.ComponentName component = next.info.getComponent();
            if (next.getUid() == i && profileOwnerComponent.equals(component)) {
                return true;
            }
        }
        return false;
    }

    private boolean hasProfileOwner(int i) {
        boolean hasProfileOwner;
        synchronized (getLockObject()) {
            hasProfileOwner = this.mOwners.hasProfileOwner(i);
        }
        return hasProfileOwner;
    }

    private boolean isProfileOwnerOfOrganizationOwnedDevice(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return isProfileOwner(callerIdentity) && isProfileOwnerOfOrganizationOwnedDevice(callerIdentity.getUserId());
    }

    private boolean isProfileOwnerOfOrganizationOwnedDevice(int i) {
        boolean isProfileOwnerOfOrganizationOwnedDevice;
        synchronized (getLockObject()) {
            isProfileOwnerOfOrganizationOwnedDevice = this.mOwners.isProfileOwnerOfOrganizationOwnedDevice(i);
        }
        return isProfileOwnerOfOrganizationOwnedDevice;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isProfileOwnerOfOrganizationOwnedDevice(android.content.ComponentName componentName, int i) {
        return isProfileOwner(componentName, i) && isProfileOwnerOfOrganizationOwnedDevice(i);
    }

    private boolean isProfileOwnerOnUser0(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return isProfileOwner(callerIdentity) && callerIdentity.getUserHandle().isSystem();
    }

    private boolean isPackage(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) {
        return isCallingFromPackage(str, callerIdentity.getUid());
    }

    public android.content.ComponentName getDeviceOwnerComponent(boolean z) {
        if (!this.mHasFeature) {
            return null;
        }
        if (!z) {
            com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        }
        synchronized (getLockObject()) {
            try {
                if (!this.mOwners.hasDeviceOwner()) {
                    return null;
                }
                if (!z || this.mInjector.userHandleGetCallingUserId() == this.mOwners.getDeviceOwnerUserId()) {
                    return this.mOwners.getDeviceOwnerComponent();
                }
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public android.content.ComponentName getDeviceOwnerComponentOnUser(int i) {
        if (!this.mHasFeature) {
            return null;
        }
        if (this.mInjector.userHandleGetCallingUserId() != i) {
            com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        }
        synchronized (getLockObject()) {
            try {
                if (this.mOwners.getDeviceOwnerUserId() == i || i == -1) {
                    return this.mOwners.getDeviceOwnerComponent();
                }
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private int getDeviceOwnerUserIdUncheckedLocked() {
        return this.mOwners.hasDeviceOwner() ? this.mOwners.getDeviceOwnerUserId() : com.android.server.am.ProcessList.INVALID_ADJ;
    }

    public int getDeviceOwnerUserId() {
        int deviceOwnerUserIdUncheckedLocked;
        if (!this.mHasFeature) {
            return com.android.server.am.ProcessList.INVALID_ADJ;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()));
        synchronized (getLockObject()) {
            deviceOwnerUserIdUncheckedLocked = getDeviceOwnerUserIdUncheckedLocked();
        }
        return deviceOwnerUserIdUncheckedLocked;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getMainUserId() {
        int mainUserId = this.mUserManagerInternal.getMainUserId();
        if (mainUserId == -10000) {
            com.android.server.utils.Slogf.d(LOG_TAG, "getMainUserId(): no main user, returning USER_SYSTEM");
            return 0;
        }
        return mainUserId;
    }

    public java.lang.String getDeviceOwnerName() {
        if (!this.mHasFeature) {
            return null;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        synchronized (getLockObject()) {
            try {
                if (this.mOwners.hasDeviceOwner()) {
                    return getApplicationLabel(this.mOwners.getDeviceOwnerPackageName(), 0);
                }
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    @com.android.internal.annotations.VisibleForTesting
    com.android.server.devicepolicy.ActiveAdmin getDeviceOwnerAdminLocked() {
        ensureLocked();
        android.content.ComponentName deviceOwnerComponent = this.mOwners.getDeviceOwnerComponent();
        if (deviceOwnerComponent == null) {
            return null;
        }
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(this.mOwners.getDeviceOwnerUserId());
        int size = lambda$getUserDataUnchecked$5.mAdminList.size();
        for (int i = 0; i < size; i++) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5.mAdminList.get(i);
            if (deviceOwnerComponent.equals(activeAdmin.info.getComponent())) {
                return activeAdmin;
            }
        }
        com.android.server.utils.Slogf.wtf(LOG_TAG, "Active admin for device owner not found. component=" + deviceOwnerComponent);
        return null;
    }

    @java.lang.Deprecated
    com.android.server.devicepolicy.ActiveAdmin getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked(int i) {
        ensureLocked();
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
        if (deviceOwnerAdminLocked == null) {
            return getProfileOwnerOfOrganizationOwnedDeviceLocked(i);
        }
        return deviceOwnerAdminLocked;
    }

    com.android.server.devicepolicy.ActiveAdmin getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked() {
        ensureLocked();
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
        if (deviceOwnerAdminLocked == null) {
            return getProfileOwnerOfOrganizationOwnedDeviceLocked();
        }
        return deviceOwnerAdminLocked;
    }

    com.android.server.devicepolicy.ActiveAdmin getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceOrSystemPermissionBasedAdminLocked() {
        ensureLocked();
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
        if (isPermissionCheckFlagEnabled() && deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked == null) {
            return lambda$getUserDataUnchecked$5(0).mPermissionBasedAdmin;
        }
        return deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked;
    }

    com.android.server.devicepolicy.ActiveAdmin getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceParentLocked(int i) {
        ensureLocked();
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
        if (deviceOwnerAdminLocked != null) {
            return deviceOwnerAdminLocked;
        }
        com.android.server.devicepolicy.ActiveAdmin profileOwnerOfOrganizationOwnedDeviceLocked = getProfileOwnerOfOrganizationOwnedDeviceLocked(i);
        if (profileOwnerOfOrganizationOwnedDeviceLocked != null) {
            return profileOwnerOfOrganizationOwnedDeviceLocked.getParentActiveAdmin();
        }
        return null;
    }

    public void clearDeviceOwner(java.lang.String str) {
        java.util.Objects.requireNonNull(str, "packageName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        synchronized (getLockObject()) {
            try {
                final android.content.ComponentName deviceOwnerComponent = this.mOwners.getDeviceOwnerComponent();
                final int deviceOwnerUserId = this.mOwners.getDeviceOwnerUserId();
                if (!this.mOwners.hasDeviceOwner() || !deviceOwnerComponent.getPackageName().equals(str) || deviceOwnerUserId != callerIdentity.getUserId()) {
                    throw new java.lang.SecurityException("clearDeviceOwner can only be called by the device owner");
                }
                enforceUserUnlocked(deviceOwnerUserId);
                final com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda48
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$clearDeviceOwner$74(deviceOwnerAdminLocked, deviceOwnerUserId, deviceOwnerComponent);
                    }
                });
                com.android.server.utils.Slogf.i(LOG_TAG, "Device owner removed: " + deviceOwnerComponent);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearDeviceOwner$74(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i, android.content.ComponentName componentName) throws java.lang.Exception {
        clearDeviceOwnerLocked(activeAdmin, i);
        lambda$removeActiveAdmin$16(componentName, i);
        sendOwnerChangedBroadcast("android.app.action.DEVICE_OWNER_CHANGED", i);
    }

    private void clearOverrideApnUnchecked() {
        if (!this.mHasTelephonyFeature) {
            return;
        }
        setOverrideApnsEnabledUnchecked(false);
        java.util.List<android.telephony.data.ApnSetting> overrideApnsUnchecked = getOverrideApnsUnchecked();
        for (int i = 0; i < overrideApnsUnchecked.size(); i++) {
            removeOverrideApnUnchecked(overrideApnsUnchecked.get(i).getId());
        }
    }

    private void clearManagedProfileApnUnchecked() {
        if (!this.mHasTelephonyFeature) {
            return;
        }
        if (!((com.android.server.SystemServiceManager) com.android.server.LocalServices.getService(com.android.server.SystemServiceManager.class)).isBootCompleted()) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Skip clearing managed profile Apn before boot completed");
            return;
        }
        for (android.telephony.data.ApnSetting apnSetting : getOverrideApnsUnchecked()) {
            if (apnSetting.getApnTypeBitmask() == 16384) {
                removeOverrideApnUnchecked(apnSetting.getId());
            }
        }
    }

    private void clearDeviceOwnerLocked(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i) {
        java.lang.String deviceOwnerPackageName = this.mOwners.getDeviceOwnerPackageName();
        if (deviceOwnerPackageName != null) {
            this.mDeviceAdminServiceController.stopServiceForAdmin(deviceOwnerPackageName, i, "clear-device-owner");
        }
        if (activeAdmin != null) {
            activeAdmin.disableCamera = false;
            activeAdmin.userRestrictions = null;
            activeAdmin.defaultEnabledRestrictionsAlreadySet.clear();
            activeAdmin.forceEphemeralUsers = false;
            activeAdmin.isNetworkLoggingEnabled = false;
            activeAdmin.requireAutoTime = false;
            this.mUserManagerInternal.setForceEphemeralUsers(activeAdmin.forceEphemeralUsers);
        }
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        lambda$getUserDataUnchecked$5.mCurrentInputMethodSet = false;
        if (lambda$getUserDataUnchecked$5.mPasswordTokenHandle != 0) {
            this.mLockPatternUtils.removeEscrowToken(lambda$getUserDataUnchecked$5.mPasswordTokenHandle, i);
            lambda$getUserDataUnchecked$5.mPasswordTokenHandle = 0L;
        }
        saveSettingsLocked(i);
        this.mPolicyCache.onUserRemoved(i);
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$52 = lambda$getUserDataUnchecked$5(0);
        lambda$getUserDataUnchecked$52.mLastSecurityLogRetrievalTime = -1L;
        lambda$getUserDataUnchecked$52.mLastBugReportRequestTime = -1L;
        lambda$getUserDataUnchecked$52.mLastNetworkLogsRetrievalTime = -1L;
        saveSettingsLocked(0);
        clearUserPoliciesLocked(i);
        clearOverrideApnUnchecked();
        clearApplicationRestrictions(i);
        this.mOwners.clearDeviceOwner();
        this.mOwners.writeDeviceOwner();
        updateAdminCanGrantSensorsPermissionCache(i);
        clearDeviceOwnerUserRestriction(android.os.UserHandle.of(i));
        this.mInjector.securityLogSetLoggingEnabledProperty(false);
        this.mSecurityLogMonitor.stop();
        setNetworkLoggingActiveInternal(false);
        deleteTransferOwnershipBundleLocked(i);
        toggleBackupServiceActive(0, true);
        setGlobalSettingDeviceOwnerType(0);
        this.mDevicePolicyEngine.removePoliciesForAdmin(com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(activeAdmin.info.getComponent(), i, activeAdmin));
    }

    private void clearApplicationRestrictions(final int i) {
        this.mBackgroundHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda0
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$clearApplicationRestrictions$75(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearApplicationRestrictions$75(int i) {
        java.util.List<android.content.pm.PackageInfo> installedPackages = this.mInjector.getPackageManager(i).getInstalledPackages(786432);
        android.os.UserHandle of = android.os.UserHandle.of(i);
        java.util.Iterator<android.content.pm.PackageInfo> it = installedPackages.iterator();
        while (it.hasNext()) {
            this.mInjector.getUserManager().setApplicationRestrictions(it.next().packageName, null, of);
        }
    }

    public boolean setProfileOwner(android.content.ComponentName componentName, final int i) {
        boolean z;
        if (!this.mHasFeature) {
            logMissingFeatureAction("Cannot set " + android.content.ComponentName.flattenToShortString(componentName) + " as profile owner for user " + i);
            return false;
        }
        com.android.internal.util.Preconditions.checkArgument(componentName != null);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        boolean hasIncompatibleAccountsOrNonAdbNoLock = hasIncompatibleAccountsOrNonAdbNoLock(callerIdentity, i, componentName);
        synchronized (getLockObject()) {
            try {
                enforceCanSetProfileOwnerLocked(callerIdentity, componentName, i, hasIncompatibleAccountsOrNonAdbNoLock);
                final com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (isPackageInstalledForUser(componentName.getPackageName(), i) && activeAdminUncheckedLocked != null && !lambda$getUserDataUnchecked$5(i).mRemovingAdmins.contains(componentName)) {
                    z = true;
                } else {
                    z = false;
                }
                com.android.internal.util.Preconditions.checkArgument(z, "Not active admin: " + componentName);
                int profileParentId = getProfileParentId(i);
                if (profileParentId != i && this.mUserManager.hasUserRestriction("no_add_managed_profile", android.os.UserHandle.of(profileParentId))) {
                    com.android.server.utils.Slogf.i(LOG_TAG, "Cannot set profile owner because of restriction.");
                    return false;
                }
                if (isAdb(callerIdentity)) {
                    com.android.internal.logging.MetricsLogger.action(this.mContext, 617, LOG_TAG_PROFILE_OWNER);
                    android.app.admin.DevicePolicyEventLogger.createEvent(82).setAdmin(componentName).setStrings(new java.lang.String[]{LOG_TAG_PROFILE_OWNER}).write();
                }
                toggleBackupServiceActive(i, false);
                this.mOwners.setProfileOwner(componentName, i);
                this.mOwners.writeProfileOwner(i);
                com.android.server.utils.Slogf.i(LOG_TAG, "Profile owner set: " + componentName + " on user " + i);
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda156
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setProfileOwner$76(i, activeAdminUncheckedLocked);
                    }
                });
                this.mDeviceAdminServiceController.startServiceForAdmin(componentName.getPackageName(), i, "set-profile-owner");
                return true;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setProfileOwner$76(int i, com.android.server.devicepolicy.ActiveAdmin activeAdmin) throws java.lang.Exception {
        if (this.mUserManager.isManagedProfile(i)) {
            maybeSetDefaultRestrictionsForAdminLocked(i, activeAdmin);
            ensureUnknownSourcesRestrictionForProfileOwnerLocked(i, activeAdmin, true);
        }
        sendOwnerChangedBroadcast("android.app.action.PROFILE_OWNER_CHANGED", i);
    }

    private void toggleBackupServiceActive(int i, boolean z) {
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                if (this.mInjector.getIBackupManager() != null) {
                    this.mInjector.getIBackupManager().setBackupServiceActive(i, z);
                }
            } catch (android.os.RemoteException e) {
                throw new java.lang.IllegalStateException(java.lang.String.format("Failed %s backup service.", z ? "activating" : "deactivating"), e);
            }
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    public void clearProfileOwner(final android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        final int userId = callerIdentity.getUserId();
        com.android.internal.util.Preconditions.checkCallingUser(!isManagedProfile(userId));
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        enforceUserUnlocked(userId);
        synchronized (getLockObject()) {
            final com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda122
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$clearProfileOwner$77(profileOwnerLocked, userId, componentName);
                }
            });
            com.android.server.utils.Slogf.i(LOG_TAG, "Profile owner " + componentName + " removed from user " + userId);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$clearProfileOwner$77(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i, android.content.ComponentName componentName) throws java.lang.Exception {
        clearProfileOwnerLocked(activeAdmin, i);
        lambda$removeActiveAdmin$16(componentName, i);
        sendOwnerChangedBroadcast("android.app.action.PROFILE_OWNER_CHANGED", i);
    }

    public void clearProfileOwnerLocked(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i) {
        java.lang.String profileOwnerPackage = this.mOwners.getProfileOwnerPackage(i);
        if (profileOwnerPackage != null) {
            this.mDeviceAdminServiceController.stopServiceForAdmin(profileOwnerPackage, i, "clear-profile-owner");
        }
        if (activeAdmin != null) {
            activeAdmin.disableCamera = false;
            activeAdmin.userRestrictions = null;
            activeAdmin.defaultEnabledRestrictionsAlreadySet.clear();
        }
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        lambda$getUserDataUnchecked$5.mCurrentInputMethodSet = false;
        lambda$getUserDataUnchecked$5.mOwnerInstalledCaCerts.clear();
        saveSettingsLocked(i);
        clearUserPoliciesLocked(i);
        clearApplicationRestrictions(i);
        this.mOwners.removeProfileOwner(i);
        this.mOwners.writeProfileOwner(i);
        deleteTransferOwnershipBundleLocked(i);
        toggleBackupServiceActive(i, true);
        applyProfileRestrictionsIfDeviceOwnerLocked();
        setNetworkLoggingActiveInternal(false);
        this.mDevicePolicyEngine.removePoliciesForAdmin(com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(activeAdmin.info.getComponent(), i, activeAdmin));
    }

    public void setDeviceOwnerLockScreenInfo(android.content.ComponentName componentName, final java.lang.CharSequence charSequence) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda214
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDeviceOwnerLockScreenInfo$78(charSequence);
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(42).setAdmin(callerIdentity.getComponentName()).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDeviceOwnerLockScreenInfo$78(java.lang.CharSequence charSequence) throws java.lang.Exception {
        this.mLockPatternUtils.setDeviceOwnerInfo(charSequence != null ? charSequence.toString() : null);
    }

    public java.lang.CharSequence getDeviceOwnerLockScreenInfo() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        return (java.lang.CharSequence) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda93
            public final java.lang.Object getOrThrow() {
                java.lang.String lambda$getDeviceOwnerLockScreenInfo$79;
                lambda$getDeviceOwnerLockScreenInfo$79 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getDeviceOwnerLockScreenInfo$79();
                return lambda$getDeviceOwnerLockScreenInfo$79;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.String lambda$getDeviceOwnerLockScreenInfo$79() throws java.lang.Exception {
        return this.mLockPatternUtils.getDeviceOwnerInfo();
    }

    private void clearUserPoliciesLocked(int i) {
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        lambda$getUserDataUnchecked$5.mPermissionPolicy = 0;
        lambda$getUserDataUnchecked$5.mDelegationMap.clear();
        lambda$getUserDataUnchecked$5.mStatusBarDisabled = false;
        lambda$getUserDataUnchecked$5.mSecondaryLockscreenEnabled = false;
        lambda$getUserDataUnchecked$5.mUserProvisioningState = 0;
        lambda$getUserDataUnchecked$5.mAffiliationIds.clear();
        resetAffiliationCacheLocked();
        lambda$getUserDataUnchecked$5.mLockTaskPackages.clear();
        lambda$getUserDataUnchecked$5.mLockTaskFeatures = 0;
        saveSettingsLocked(i);
        try {
            this.mIPermissionManager.updatePermissionFlagsForAllApps(4, 0, i);
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Failing in updatePermissionFlagsForAllApps", e);
        }
    }

    public boolean hasUserSetupCompleted() {
        return hasUserSetupCompleted(this.mInjector.userHandleGetCallingUserId());
    }

    private boolean hasUserSetupCompleted(int i) {
        if (!this.mHasFeature) {
            return true;
        }
        return this.mInjector.hasUserSetupCompleted(lambda$getUserDataUnchecked$5(i));
    }

    private boolean hasPaired(int i) {
        if (!this.mHasFeature) {
            return true;
        }
        return lambda$getUserDataUnchecked$5(i).mPaired;
    }

    public int getUserProvisioningState(int i) {
        if (!this.mHasFeature) {
            return 0;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(callerIdentity) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        if (i != callerIdentity.getUserId()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(callerIdentity) || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS"));
        }
        return lambda$getUserDataUnchecked$5(i).mUserProvisioningState;
    }

    public void setUserProvisioningState(int i, int i2) {
        boolean z;
        boolean hasProfileOwner;
        if (!this.mHasFeature) {
            logMissingFeatureAction("Cannot set provisioning state " + i + " for user " + i2);
            return;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            int deviceOwnerUserId = this.mOwners.getDeviceOwnerUserId();
            if (i2 != deviceOwnerUserId && !(hasProfileOwner = this.mOwners.hasProfileOwner(i2))) {
                int managedUserId = getManagedUserId(i2);
                if (managedUserId < 0 && i != 0) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "setUserProvisioningState(newState=%d, userId=%d) failed: deviceOwnerId=%d, hasProfileOwner=%b, managedUserId=%d, err=%s", java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(i2), java.lang.Integer.valueOf(deviceOwnerUserId), java.lang.Boolean.valueOf(hasProfileOwner), java.lang.Integer.valueOf(managedUserId), "Not allowed to change provisioning state unless a device or profile owner is set.");
                    throw new java.lang.IllegalStateException("Not allowed to change provisioning state unless a device or profile owner is set.");
                }
            }
            synchronized (getLockObject()) {
                try {
                    if (!isAdb(callerIdentity)) {
                        z = true;
                    } else {
                        if (getUserProvisioningState(i2) != 0 || i != 3) {
                            throw new java.lang.IllegalStateException("Not allowed to change provisioning state unless current provisioning state is unmanaged, and new stateis finalized.");
                        }
                        z = false;
                    }
                    com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i2);
                    if (z) {
                        checkUserProvisioningStateTransition(lambda$getUserDataUnchecked$5.mUserProvisioningState, i);
                    }
                    lambda$getUserDataUnchecked$5.mUserProvisioningState = i;
                    saveSettingsLocked(i2);
                } finally {
                }
            }
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        } catch (java.lang.Throwable th) {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            throw th;
        }
    }

    private void checkUserProvisioningStateTransition(int i, int i2) {
        switch (i) {
            case 0:
                if (i2 != 0) {
                    return;
                }
                break;
            case 1:
            case 2:
                if (i2 == 3) {
                    return;
                }
                break;
            case 4:
                if (i2 == 5) {
                    return;
                }
                break;
            case 5:
                if (i2 == 0) {
                    return;
                }
                break;
        }
        throw new java.lang.IllegalStateException("Cannot move to user provisioning state [" + i2 + "] from state [" + i + "]");
    }

    public void setProfileEnabled(android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            logMissingFeatureAction("Cannot enable profile for " + android.content.ComponentName.flattenToShortString(componentName));
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        final int userId = callerIdentity.getUserId();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        com.android.internal.util.Preconditions.checkCallingUser(isManagedProfile(userId));
        synchronized (getLockObject()) {
            try {
                if (getUserInfo(userId).isEnabled()) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "setProfileEnabled is called when the profile is already enabled");
                } else {
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda65
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setProfileEnabled$80(userId);
                        }
                    });
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setProfileEnabled$80(int i) throws java.lang.Exception {
        this.mUserManager.setUserEnabled(i);
        android.content.pm.UserInfo profileParent = this.mUserManager.getProfileParent(i);
        android.content.Intent intent = new android.content.Intent("android.intent.action.MANAGED_PROFILE_ADDED");
        intent.putExtra("android.intent.extra.USER", new android.os.UserHandle(i));
        android.os.UserHandle userHandle = new android.os.UserHandle(profileParent.id);
        this.mLocalService.broadcastIntentToManifestReceivers(intent, userHandle, true);
        intent.addFlags(com.android.server.tare.AlarmManagerEconomicPolicy.ACTION_ALARM_WAKEUP_EXACT_ALLOW_WHILE_IDLE);
        this.mContext.sendBroadcastAsUser(intent, userHandle);
    }

    public void setProfileName(android.content.ComponentName componentName, java.lang.String str) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        final java.lang.String substring = str.substring(0, java.lang.Math.min(str.length(), 200));
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda104
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setProfileName$81(callerIdentity, substring);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setProfileName$81(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) throws java.lang.Exception {
        this.mUserManager.setUserName(callerIdentity.getUserId(), str);
        android.app.admin.DevicePolicyEventLogger.createEvent(40).setAdmin(callerIdentity.getComponentName()).write();
    }

    /* renamed from: getProfileOwnerAsUser, reason: merged with bridge method [inline-methods] */
    public android.content.ComponentName lambda$isProfileOwner$72(int i) {
        android.content.ComponentName profileOwnerComponent;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCrossUsersPermission(callerIdentity, i) || hasFullCrossUsersPermission(callerIdentity, i));
        synchronized (getLockObject()) {
            profileOwnerComponent = this.mOwners.getProfileOwnerComponent(i);
        }
        return profileOwnerComponent;
    }

    @com.android.internal.annotations.VisibleForTesting
    com.android.server.devicepolicy.ActiveAdmin getProfileOwnerAdminLocked(int i) {
        android.content.ComponentName profileOwnerComponent = this.mOwners.getProfileOwnerComponent(i);
        if (profileOwnerComponent == null) {
            return null;
        }
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        int size = lambda$getUserDataUnchecked$5.mAdminList.size();
        for (int i2 = 0; i2 < size; i2++) {
            com.android.server.devicepolicy.ActiveAdmin activeAdmin = lambda$getUserDataUnchecked$5.mAdminList.get(i2);
            if (profileOwnerComponent.equals(activeAdmin.info.getComponent())) {
                return activeAdmin;
            }
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    @android.annotation.Nullable
    public com.android.server.devicepolicy.ActiveAdmin getDeviceOrProfileOwnerAdminLocked(int i) {
        com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
        if (profileOwnerAdminLocked == null && getDeviceOwnerUserIdUncheckedLocked() == i) {
            return getDeviceOwnerAdminLocked();
        }
        return profileOwnerAdminLocked;
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    com.android.server.devicepolicy.ActiveAdmin getProfileOwnerOfOrganizationOwnedDeviceLocked(final int i) {
        return (com.android.server.devicepolicy.ActiveAdmin) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda195
            public final java.lang.Object getOrThrow() {
                com.android.server.devicepolicy.ActiveAdmin lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$82;
                lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$82 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$82(i);
                return lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$82;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ com.android.server.devicepolicy.ActiveAdmin lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$82(int i) throws java.lang.Exception {
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getProfiles(i)) {
            if (userInfo.isManagedProfile() && lambda$isProfileOwner$72(userInfo.id) != null && isProfileOwnerOfOrganizationOwnedDevice(userInfo.id)) {
                return getActiveAdminUncheckedLocked(lambda$isProfileOwner$72(userInfo.id), userInfo.id);
            }
        }
        return null;
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    com.android.server.devicepolicy.ActiveAdmin getProfileOwnerOfOrganizationOwnedDeviceLocked() {
        return (com.android.server.devicepolicy.ActiveAdmin) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda18
            public final java.lang.Object getOrThrow() {
                com.android.server.devicepolicy.ActiveAdmin lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$83;
                lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$83 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$83();
                return lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$83;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ com.android.server.devicepolicy.ActiveAdmin lambda$getProfileOwnerOfOrganizationOwnedDeviceLocked$83() throws java.lang.Exception {
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getUsers()) {
            if (userInfo.isManagedProfile() && lambda$isProfileOwner$72(userInfo.id) != null && isProfileOwnerOfOrganizationOwnedDevice(userInfo.id)) {
                return getActiveAdminUncheckedLocked(lambda$isProfileOwner$72(userInfo.id), userInfo.id);
            }
        }
        return null;
    }

    @android.annotation.Nullable
    public android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(@android.annotation.NonNull android.os.UserHandle userHandle) {
        if (!this.mHasFeature) {
            return null;
        }
        synchronized (getLockObject()) {
            try {
                android.content.ComponentName deviceOwnerComponent = this.mOwners.getDeviceOwnerComponent();
                android.content.ComponentName profileOwnerComponent = this.mOwners.getProfileOwnerComponent(userHandle.getIdentifier());
                if (this.mConstants.USE_TEST_ADMIN_AS_SUPERVISION_COMPONENT) {
                    if (isAdminTestOnlyLocked(deviceOwnerComponent, userHandle.getIdentifier())) {
                        return deviceOwnerComponent;
                    }
                    if (isAdminTestOnlyLocked(profileOwnerComponent, userHandle.getIdentifier())) {
                        return profileOwnerComponent;
                    }
                }
                if (isSupervisionComponentLocked(profileOwnerComponent)) {
                    return profileOwnerComponent;
                }
                if (isSupervisionComponentLocked(deviceOwnerComponent)) {
                    return deviceOwnerComponent;
                }
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean isSupervisionComponent(@android.annotation.NonNull android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return false;
        }
        synchronized (getLockObject()) {
            try {
                if (this.mConstants.USE_TEST_ADMIN_AS_SUPERVISION_COMPONENT && isAdminTestOnlyLocked(componentName, getCallerIdentity().getUserId())) {
                    return true;
                }
                return isSupervisionComponentLocked(componentName);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isSupervisionComponentLocked(@android.annotation.Nullable android.content.ComponentName componentName) {
        if (componentName == null) {
            return false;
        }
        java.lang.String string = this.mContext.getResources().getString(android.R.string.config_defaultOnDeviceSpeechRecognitionService);
        if (string != null && componentName.equals(android.content.ComponentName.unflattenFromString(string))) {
            return true;
        }
        return componentName.getPackageName().equals(this.mContext.getResources().getString(android.R.string.config_systemSupervision));
    }

    public java.lang.String getProfileOwnerName(int i) {
        if (!this.mHasFeature) {
            return null;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        return getProfileOwnerNameUnchecked(i);
    }

    private java.lang.String getProfileOwnerNameUnchecked(int i) {
        android.content.ComponentName lambda$isProfileOwner$72 = lambda$isProfileOwner$72(i);
        if (lambda$isProfileOwner$72 == null) {
            return null;
        }
        return getApplicationLabel(lambda$isProfileOwner$72.getPackageName(), i);
    }

    private int getOrganizationOwnedProfileUserId() {
        for (android.content.pm.UserInfo userInfo : this.mUserManagerInternal.getUserInfos()) {
            if (userInfo.isManagedProfile() && isProfileOwnerOfOrganizationOwnedDevice(userInfo.id)) {
                return userInfo.id;
            }
        }
        return com.android.server.am.ProcessList.INVALID_ADJ;
    }

    public boolean isOrganizationOwnedDeviceWithManagedProfile() {
        return this.mHasFeature && getOrganizationOwnedProfileUserId() != -10000;
    }

    public boolean checkDeviceIdentifierAccess(java.lang.String str, int i, int i2) {
        ensureCallerIdentityMatchesIfNotSystem(str, i, i2, getCallerIdentity());
        if (doesPackageMatchUid(str, i2) && hasPermission("android.permission.READ_PHONE_STATE", i, i2)) {
            return hasDeviceIdAccessUnchecked(str, i2);
        }
        return false;
    }

    @com.android.internal.annotations.VisibleForTesting
    boolean hasDeviceIdAccessUnchecked(java.lang.String str, int i) {
        boolean z;
        int userId = android.os.UserHandle.getUserId(i);
        if (isPermissionCheckFlagEnabled() && !isUidProfileOwnerLocked(i) && !isUidDeviceOwnerLocked(i)) {
            return hasPermission("android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", str, userId);
        }
        android.content.ComponentName deviceOwnerComponent = getDeviceOwnerComponent(true);
        if (deviceOwnerComponent != null && (deviceOwnerComponent.getPackageName().equals(str) || isCallerDelegate(str, i, "delegation-cert-install"))) {
            return true;
        }
        android.content.ComponentName lambda$isProfileOwner$72 = lambda$isProfileOwner$72(userId);
        if (lambda$isProfileOwner$72 != null && (lambda$isProfileOwner$72.getPackageName().equals(str) || isCallerDelegate(str, i, "delegation-cert-install"))) {
            z = true;
        } else {
            z = false;
        }
        if (z && (isProfileOwnerOfOrganizationOwnedDevice(userId) || isUserAffiliatedWithDevice(userId))) {
            return true;
        }
        return false;
    }

    private boolean doesPackageMatchUid(java.lang.String str, int i) {
        try {
            android.content.pm.ApplicationInfo applicationInfo = this.mIPackageManager.getApplicationInfo(str, 0L, android.os.UserHandle.getUserId(i));
            if (applicationInfo == null) {
                com.android.server.utils.Slogf.w(LOG_TAG, "appInfo could not be found for package %s", str);
                return false;
            }
            if (i != applicationInfo.uid) {
                java.lang.String format = java.lang.String.format("Package %s (uid=%d) does not match provided uid %d", str, java.lang.Integer.valueOf(applicationInfo.uid), java.lang.Integer.valueOf(i));
                com.android.server.utils.Slogf.w(LOG_TAG, format);
                throw new java.lang.SecurityException(format);
            }
            return true;
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.e(LOG_TAG, e, "Exception caught obtaining appInfo for package %s", str);
            return false;
        }
    }

    private void ensureCallerIdentityMatchesIfNotSystem(java.lang.String str, int i, int i2, com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        int uid = callerIdentity.getUid();
        int binderGetCallingPid = this.mInjector.binderGetCallingPid();
        if (android.os.UserHandle.getAppId(uid) >= 10000) {
            if (uid != i2 || binderGetCallingPid != i) {
                java.lang.String format = java.lang.String.format("Calling uid %d, pid %d cannot check device identifier access for package %s (uid=%d, pid=%d)", java.lang.Integer.valueOf(uid), java.lang.Integer.valueOf(binderGetCallingPid), str, java.lang.Integer.valueOf(i2), java.lang.Integer.valueOf(i));
                com.android.server.utils.Slogf.w(LOG_TAG, format);
                throw new java.lang.SecurityException(format);
            }
        }
    }

    private java.lang.String getApplicationLabel(final java.lang.String str, final int i) {
        return (java.lang.String) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda22
            public final java.lang.Object getOrThrow() {
                java.lang.String lambda$getApplicationLabel$84;
                lambda$getApplicationLabel$84 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getApplicationLabel$84(i, str);
                return lambda$getApplicationLabel$84;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.String lambda$getApplicationLabel$84(int i, java.lang.String str) throws java.lang.Exception {
        java.lang.CharSequence charSequence;
        try {
            android.content.Context createPackageContextAsUser = this.mContext.createPackageContextAsUser(str, 0, android.os.UserHandle.of(i));
            android.content.pm.ApplicationInfo applicationInfo = createPackageContextAsUser.getApplicationInfo();
            if (applicationInfo == null) {
                charSequence = null;
            } else {
                charSequence = applicationInfo.loadUnsafeLabel(createPackageContextAsUser.getPackageManager());
            }
            if (charSequence != null) {
                return charSequence.toString();
            }
            return null;
        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
            com.android.server.utils.Slogf.w(LOG_TAG, e, "%s is not installed for user %d", str, java.lang.Integer.valueOf(i));
            return null;
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void enforceCanSetProfileOwnerLocked(com.android.server.devicepolicy.CallerIdentity callerIdentity, @android.annotation.Nullable android.content.ComponentName componentName, int i, boolean z) {
        android.content.pm.UserInfo userInfo = getUserInfo(i);
        if (userInfo == null) {
            throw new java.lang.IllegalArgumentException("Attempted to set profile owner for invalid userId: " + i);
        }
        if (userInfo.isGuest()) {
            throw new java.lang.IllegalStateException("Cannot set a profile owner on a guest");
        }
        if (this.mOwners.hasProfileOwner(i)) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder("Trying to set the profile owner");
            if (!z) {
                java.lang.StringBuilder append = append(sb, componentName);
                append.append(" on user ");
                append.append(i);
            }
            sb.append(", but profile owner");
            if (!z) {
                appendProfileOwnerLocked(sb, i);
            }
            sb.append(" is already set.");
            throw new java.lang.IllegalStateException(sb.toString());
        }
        if (this.mOwners.hasDeviceOwner() && this.mOwners.getDeviceOwnerUserId() == i) {
            java.lang.StringBuilder sb2 = new java.lang.StringBuilder("Trying to set the profile owner");
            if (!z) {
                java.lang.StringBuilder append2 = append(sb2, componentName);
                append2.append(" on user ");
                append2.append(i);
            }
            sb2.append(", but the user already has a device owner");
            if (!z) {
                appendDeviceOwnerLocked(sb2);
            }
            sb2.append('.');
            throw new java.lang.IllegalStateException(sb2.toString());
        }
        if (isAdb(callerIdentity)) {
            if ((this.mIsWatch || hasUserSetupCompleted(i)) && z) {
                java.lang.StringBuilder sb3 = new java.lang.StringBuilder("Not allowed to set the profile owner");
                if (!z) {
                    java.lang.StringBuilder append3 = append(sb3, componentName);
                    append3.append(" on user ");
                    append3.append(i);
                    append3.append(' ');
                }
                sb3.append(" because there are already some accounts on the profile.");
                throw new java.lang.IllegalStateException(sb3.toString());
            }
            return;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        if (this.mIsWatch || hasUserSetupCompleted(i)) {
            com.android.internal.util.Preconditions.checkState(isSystemUid(callerIdentity), "Cannot set the profile owner on a user which is already set-up");
            if (!this.mIsWatch && !isSupervisionComponentLocked(componentName)) {
                throw new java.lang.IllegalStateException("Unable to set non-default profile owner post-setup " + componentName);
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void enforceCanSetDeviceOwnerLocked(com.android.server.devicepolicy.CallerIdentity callerIdentity, @android.annotation.Nullable android.content.ComponentName componentName, int i, boolean z) {
        boolean z2;
        if (!isAdb(callerIdentity)) {
            com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
            z2 = false;
        } else {
            z2 = true;
        }
        int checkDeviceOwnerProvisioningPreConditionLocked = checkDeviceOwnerProvisioningPreConditionLocked(componentName, i, callerIdentity.getUserId(), isAdb(callerIdentity), z);
        if (checkDeviceOwnerProvisioningPreConditionLocked != 0) {
            java.lang.String computeProvisioningErrorStringLocked = computeProvisioningErrorStringLocked(checkDeviceOwnerProvisioningPreConditionLocked, i, componentName, z2);
            if (checkDeviceOwnerProvisioningPreConditionLocked == 16) {
                throw new android.os.ServiceSpecificException(checkDeviceOwnerProvisioningPreConditionLocked, computeProvisioningErrorStringLocked);
            }
            throw new java.lang.IllegalStateException(computeProvisioningErrorStringLocked);
        }
    }

    private java.lang.String computeProvisioningErrorString(int i, int i2) {
        java.lang.String computeProvisioningErrorStringLocked;
        synchronized (getLockObject()) {
            computeProvisioningErrorStringLocked = computeProvisioningErrorStringLocked(i, i2, null, false);
        }
        return computeProvisioningErrorStringLocked;
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private java.lang.String computeProvisioningErrorStringLocked(int i, int i2, @android.annotation.Nullable android.content.ComponentName componentName, boolean z) {
        switch (i) {
            case 0:
                return "OK";
            case 1:
                java.lang.StringBuilder sb = new java.lang.StringBuilder("Trying to set the device owner");
                if (z && componentName != null) {
                    append(sb, componentName);
                }
                sb.append(", but device owner");
                if (z) {
                    appendDeviceOwnerLocked(sb);
                }
                sb.append(" is already set.");
                return sb.toString();
            case 2:
                java.lang.StringBuilder sb2 = new java.lang.StringBuilder("Trying to set the device owner");
                if (z && componentName != null) {
                    append(sb2, componentName);
                }
                sb2.append(", but the user already has a profile owner");
                if (z) {
                    appendProfileOwnerLocked(sb2, i2);
                }
                sb2.append(".");
                return sb2.toString();
            case 3:
                return "User " + i2 + " not running.";
            case 4:
                return "Cannot set the device owner if the device is already set-up.";
            case 5:
                return "Not allowed to set the device owner because there are already several users on the device.";
            case 6:
                return "Not allowed to set the device owner because there are already some accounts on the device.";
            case 7:
                return "User " + i2 + " is not system user.";
            case 8:
                return "Not allowed to set the device owner because this device has already paired.";
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            default:
                return "Unexpected @ProvisioningPreCondition: " + i;
            case 16:
                return "Cannot provision an unsupported DPC into DO on a headless device";
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void appendDeviceOwnerLocked(java.lang.StringBuilder sb) {
        android.content.ComponentName deviceOwnerComponent = getDeviceOwnerComponent(false);
        if (deviceOwnerComponent == null) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "appendDeviceOwnerLocked(): device has no DO set");
        } else {
            append(sb, deviceOwnerComponent);
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void appendProfileOwnerLocked(java.lang.StringBuilder sb, int i) {
        android.content.ComponentName profileOwnerComponent = this.mOwners.getProfileOwnerComponent(i);
        if (profileOwnerComponent == null) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "profileOwner(%d): PO not set", java.lang.Integer.valueOf(i));
        } else {
            append(sb, profileOwnerComponent);
        }
    }

    private static java.lang.StringBuilder append(java.lang.StringBuilder sb, android.content.ComponentName componentName) {
        sb.append(" (");
        sb.append(componentName.flattenToShortString());
        sb.append(')');
        return sb;
    }

    private void enforceUserUnlocked(int i) {
        com.android.internal.util.Preconditions.checkState(this.mUserManager.isUserUnlocked(i), "User must be running and unlocked");
    }

    private void enforceUserUnlocked(int i, boolean z) {
        if (z) {
            enforceUserUnlocked(getProfileParentId(i));
        } else {
            enforceUserUnlocked(i);
        }
    }

    private boolean canManageUsers(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return hasCallingOrSelfPermission("android.permission.MANAGE_USERS");
    }

    private boolean canQueryAdminPolicy(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return hasCallingOrSelfPermission("android.permission.QUERY_ADMIN_POLICY");
    }

    private boolean hasPermission(java.lang.String str, int i, int i2) {
        return this.mContext.checkPermission(str, i, i2) == 0;
    }

    private boolean hasCallingPermission(java.lang.String str) {
        return this.mContext.checkCallingPermission(str) == 0;
    }

    private boolean hasCallingOrSelfPermission(java.lang.String str) {
        return this.mContext.checkCallingOrSelfPermission(str) == 0;
    }

    private boolean hasPermissionForPreflight(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) {
        return android.content.PermissionChecker.checkPermissionForPreflight(this.mContext, str, this.mInjector.binderGetCallingPid(), callerIdentity.getUid(), this.mContext.getPackageName()) == 0;
    }

    private boolean hasFullCrossUsersPermission(com.android.server.devicepolicy.CallerIdentity callerIdentity, int i) {
        return i == callerIdentity.getUserId() || isSystemUid(callerIdentity) || isRootUid(callerIdentity) || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL");
    }

    private boolean hasCrossUsersPermission(com.android.server.devicepolicy.CallerIdentity callerIdentity, int i) {
        return i == callerIdentity.getUserId() || isSystemUid(callerIdentity) || isRootUid(callerIdentity) || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS");
    }

    private boolean canDPCManagedUserUseLockTaskLocked(int i) {
        if (isUserAffiliatedWithDeviceLocked(i)) {
            return true;
        }
        return (this.mOwners.hasDeviceOwner() || lambda$isProfileOwner$72(i) == null || isManagedProfile(i)) ? false : true;
    }

    private void enforceCanQueryLockTaskLocked(android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        enforceCanQuery("android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK", callerIdentity.getPackageName(), userId);
        if ((isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity)) && !canDPCManagedUserUseLockTaskLocked(userId)) {
            throw new java.lang.SecurityException("User " + userId + " is not allowed to use lock task");
        }
    }

    private com.android.server.devicepolicy.EnforcingAdmin enforceCanCallLockTaskLocked(android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK", callerIdentity.getPackageName(), userId);
        if ((isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity)) && !canDPCManagedUserUseLockTaskLocked(userId)) {
            throw new java.lang.SecurityException("User " + userId + " is not allowed to use lock task");
        }
        return enforcePermissionAndGetEnforcingAdmin;
    }

    private void enforceCanCallLockTaskLocked(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || isFinancedDeviceOwner(callerIdentity));
        int userId = callerIdentity.getUserId();
        if (!canDPCManagedUserUseLockTaskLocked(userId)) {
            throw new java.lang.SecurityException("User " + userId + " is not allowed to use lock task");
        }
    }

    private boolean isSystemUid(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return android.os.UserHandle.isSameApp(callerIdentity.getUid(), 1000);
    }

    private boolean isRootUid(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return android.os.UserHandle.isSameApp(callerIdentity.getUid(), 0);
    }

    private boolean isShellUid(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return android.os.UserHandle.isSameApp(callerIdentity.getUid(), 2000);
    }

    private boolean isCameraServerUid(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return android.os.UserHandle.isSameApp(callerIdentity.getUid(), 1047);
    }

    private int getCurrentForegroundUserId() {
        try {
            android.content.pm.UserInfo currentUser = this.mInjector.getIActivityManager().getCurrentUser();
            if (currentUser == null) {
                com.android.server.utils.Slogf.wtf(LOG_TAG, "getCurrentForegroundUserId(): mInjector.getIActivityManager().getCurrentUser() returned null, please ignore when running unit tests");
                return android.app.ActivityManager.getCurrentUser();
            }
            return currentUser.id;
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "cannot get current user", e);
            return com.android.server.am.ProcessList.INVALID_ADJ;
        }
    }

    public java.util.List<android.os.UserHandle> listForegroundAffiliatedUsers() {
        checkIsDeviceOwner(getCallerIdentity());
        return (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda89
            public final java.lang.Object getOrThrow() {
                java.util.List lambda$listForegroundAffiliatedUsers$85;
                lambda$listForegroundAffiliatedUsers$85 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$listForegroundAffiliatedUsers$85();
                return lambda$listForegroundAffiliatedUsers$85;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.List lambda$listForegroundAffiliatedUsers$85() throws java.lang.Exception {
        boolean isUserAffiliatedWithDeviceLocked;
        int currentForegroundUserId = getCurrentForegroundUserId();
        synchronized (getLockObject()) {
            isUserAffiliatedWithDeviceLocked = isUserAffiliatedWithDeviceLocked(currentForegroundUserId);
        }
        if (!isUserAffiliatedWithDeviceLocked) {
            return java.util.Collections.emptyList();
        }
        java.util.ArrayList arrayList = new java.util.ArrayList(1);
        arrayList.add(android.os.UserHandle.of(currentForegroundUserId));
        return arrayList;
    }

    protected int getProfileParentId(final int i) {
        return ((java.lang.Integer) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda127
            public final java.lang.Object getOrThrow() {
                java.lang.Integer lambda$getProfileParentId$86;
                lambda$getProfileParentId$86 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getProfileParentId$86(i);
                return lambda$getProfileParentId$86;
            }
        })).intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$getProfileParentId$86(int i) throws java.lang.Exception {
        android.content.pm.UserInfo profileParent = this.mUserManager.getProfileParent(i);
        if (profileParent != null) {
            i = profileParent.id;
        }
        return java.lang.Integer.valueOf(i);
    }

    private int getProfileParentUserIfRequested(int i, boolean z) {
        if (z) {
            return getProfileParentId(i);
        }
        return i;
    }

    private int getCredentialOwner(final int i, final boolean z) {
        return ((java.lang.Integer) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda9
            public final java.lang.Object getOrThrow() {
                java.lang.Integer lambda$getCredentialOwner$87;
                lambda$getCredentialOwner$87 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getCredentialOwner$87(i, z);
                return lambda$getCredentialOwner$87;
            }
        })).intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$getCredentialOwner$87(int i, boolean z) throws java.lang.Exception {
        android.content.pm.UserInfo profileParent;
        if (z && (profileParent = this.mUserManager.getProfileParent(i)) != null) {
            i = profileParent.id;
        }
        return java.lang.Integer.valueOf(this.mUserManager.getCredentialOwnerProfile(i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isManagedProfile(int i) {
        android.content.pm.UserInfo userInfo = getUserInfo(i);
        return userInfo != null && userInfo.isManagedProfile();
    }

    private void enableIfNecessary(java.lang.String str, int i) {
        try {
            if (this.mIPackageManager.getApplicationInfo(str, 32768L, i).enabledSetting == 4) {
                this.mIPackageManager.setApplicationEnabledSetting(str, 0, 1, i, LOG_TAG);
            }
        } catch (android.os.RemoteException e) {
        }
    }

    private void dumpPersonalAppInfoForSystemUserNoLock(android.util.IndentingPrintWriter indentingPrintWriter) {
        wtfIfInLock();
        com.android.server.devicepolicy.PersonalAppsSuspensionHelper.forUser(this.mContext, 0).dump(indentingPrintWriter);
    }

    private void dumpPerUserPolicyData(android.util.IndentingPrintWriter indentingPrintWriter) {
        int size = this.mUserData.size();
        for (int i = 0; i < size; i++) {
            lambda$getUserDataUnchecked$5(this.mUserData.keyAt(i)).dump(indentingPrintWriter);
            indentingPrintWriter.println();
        }
    }

    protected void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
        if (com.android.internal.util.DumpUtils.checkDumpPermission(this.mContext, LOG_TAG, printWriter)) {
            final android.util.IndentingPrintWriter indentingPrintWriter = new android.util.IndentingPrintWriter(printWriter, "  ");
            try {
                indentingPrintWriter.println("Current Device Policy Manager state:");
                indentingPrintWriter.increaseIndent();
                dumpImmutableState(indentingPrintWriter);
                synchronized (getLockObject()) {
                    try {
                        this.mOwners.dump(indentingPrintWriter);
                        indentingPrintWriter.println();
                        this.mDeviceAdminServiceController.dump(indentingPrintWriter);
                        indentingPrintWriter.println();
                        dumpPerUserPolicyData(indentingPrintWriter);
                        indentingPrintWriter.println();
                        this.mConstants.dump(indentingPrintWriter);
                        indentingPrintWriter.println();
                        this.mStatLogger.dump(indentingPrintWriter);
                        indentingPrintWriter.println();
                        if (android.app.admin.flags.Flags.dumpsysPolicyEngineMigrationEnabled()) {
                            this.mDevicePolicyEngine.dump(indentingPrintWriter);
                            indentingPrintWriter.println();
                        }
                        indentingPrintWriter.println("Encryption Status: " + getEncryptionStatusName(getEncryptionStatus()));
                        indentingPrintWriter.println("Logout user: " + getLogoutUserIdUnchecked());
                        indentingPrintWriter.println();
                        if (this.mPendingUserCreatedCallbackTokens.isEmpty()) {
                            indentingPrintWriter.println("no pending user created callback tokens");
                        } else {
                            int size = this.mPendingUserCreatedCallbackTokens.size();
                            indentingPrintWriter.printf("%d pending user created callback token%s\n", new java.lang.Object[]{java.lang.Integer.valueOf(size), size == 1 ? "" : "s"});
                        }
                        indentingPrintWriter.println();
                        this.mPolicyCache.dump(indentingPrintWriter);
                        indentingPrintWriter.println();
                        this.mStateCache.dump(indentingPrintWriter);
                        indentingPrintWriter.println();
                    } catch (java.lang.Throwable th) {
                        throw th;
                    }
                }
                dumpPersonalAppInfoForSystemUserNoLock(indentingPrintWriter);
                synchronized (this.mSubscriptionsChangedListenerLock) {
                    indentingPrintWriter.println("Subscription changed listener : " + this.mSubscriptionsChangedListener);
                }
                indentingPrintWriter.println("DPM global setting ALLOW_WORK_PROFILE_TELEPHONY_FOR_NON_DPM_ROLE_HOLDERS : " + this.mInjector.settingsGlobalGetString("allow_work_profile_telephony_for_non_dpm_role_holders"));
                this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda44
                    @Override // java.lang.Runnable
                    public final void run() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$dump$88(indentingPrintWriter);
                    }
                });
                dumpResources(indentingPrintWriter);
                indentingPrintWriter.close();
            } catch (java.lang.Throwable th2) {
                try {
                    indentingPrintWriter.close();
                } catch (java.lang.Throwable th3) {
                    th2.addSuppressed(th3);
                }
                throw th2;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handleDump, reason: merged with bridge method [inline-methods] */
    public void lambda$dump$88(android.util.IndentingPrintWriter indentingPrintWriter) {
        if (this.mNetworkLoggingNotificationUserId != -10000) {
            indentingPrintWriter.println("mNetworkLoggingNotificationUserId:  " + this.mNetworkLoggingNotificationUserId);
        }
    }

    private void dumpImmutableState(android.util.IndentingPrintWriter indentingPrintWriter) {
        indentingPrintWriter.println("Immutable state:");
        indentingPrintWriter.increaseIndent();
        indentingPrintWriter.printf("mHasFeature=%b\n", new java.lang.Object[]{java.lang.Boolean.valueOf(this.mHasFeature)});
        indentingPrintWriter.printf("mIsWatch=%b\n", new java.lang.Object[]{java.lang.Boolean.valueOf(this.mIsWatch)});
        indentingPrintWriter.printf("mIsAutomotive=%b\n", new java.lang.Object[]{java.lang.Boolean.valueOf(this.mIsAutomotive)});
        indentingPrintWriter.printf("mHasTelephonyFeature=%b\n", new java.lang.Object[]{java.lang.Boolean.valueOf(this.mHasTelephonyFeature)});
        indentingPrintWriter.printf("mSafetyChecker=%s\n", new java.lang.Object[]{this.mSafetyChecker});
        indentingPrintWriter.decreaseIndent();
    }

    private void dumpResources(android.util.IndentingPrintWriter indentingPrintWriter) {
        this.mOverlayPackagesProvider.dump(indentingPrintWriter);
        indentingPrintWriter.println();
        indentingPrintWriter.println("Other overlayable app resources");
        indentingPrintWriter.increaseIndent();
        dumpResources(indentingPrintWriter, this.mContext, "cross_profile_apps", android.R.array.config_waterfallCutoutArray);
        dumpResources(indentingPrintWriter, this.mContext, "vendor_cross_profile_apps", android.R.array.special_locale_names);
        dumpResources(indentingPrintWriter, this.mContext, "config_packagesExemptFromSuspension", android.R.array.config_oemUsbModeOverride);
        dumpResources(indentingPrintWriter, this.mContext, "policy_exempt_apps", android.R.array.no_ems_support_sim_operators);
        dumpResources(indentingPrintWriter, this.mContext, "vendor_policy_exempt_apps", android.R.array.vendor_disallowed_apps_managed_device);
        indentingPrintWriter.decreaseIndent();
        indentingPrintWriter.println();
    }

    static void dumpResources(android.util.IndentingPrintWriter indentingPrintWriter, android.content.Context context, java.lang.String str, int i) {
        dumpApps(indentingPrintWriter, str, context.getResources().getStringArray(i));
    }

    static void dumpApps(android.util.IndentingPrintWriter indentingPrintWriter, java.lang.String str, java.lang.String[] strArr) {
        dumpApps(indentingPrintWriter, str, java.util.Arrays.asList(strArr));
    }

    static void dumpApps(android.util.IndentingPrintWriter indentingPrintWriter, java.lang.String str, java.util.List list) {
        if (list == null || list.isEmpty()) {
            indentingPrintWriter.printf("%s: empty\n", new java.lang.Object[]{str});
            return;
        }
        int size = list.size();
        indentingPrintWriter.printf("%s: %d app%s\n", new java.lang.Object[]{str, java.lang.Integer.valueOf(size), size == 1 ? "" : "s"});
        indentingPrintWriter.increaseIndent();
        for (int i = 0; i < size; i++) {
            indentingPrintWriter.printf("%d: %s\n", new java.lang.Object[]{java.lang.Integer.valueOf(i), list.get(i)});
        }
        indentingPrintWriter.decreaseIndent();
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void onShellCommand(java.io.FileDescriptor fileDescriptor, java.io.FileDescriptor fileDescriptor2, java.io.FileDescriptor fileDescriptor3, java.lang.String[] strArr, android.os.ShellCallback shellCallback, android.os.ResultReceiver resultReceiver) {
        new com.android.server.devicepolicy.DevicePolicyManagerServiceShellCommand(this).exec(this, fileDescriptor, fileDescriptor2, fileDescriptor3, strArr, shellCallback, resultReceiver);
    }

    private java.lang.String getEncryptionStatusName(int i) {
        switch (i) {
            case 0:
                return "unsupported";
            case 5:
                return "per-user";
            default:
                return "unknown";
        }
    }

    public void addPersistentPreferredActivity(android.content.ComponentName componentName, java.lang.String str, android.content.IntentFilter intentFilter, android.content.ComponentName componentName2) {
        com.android.server.devicepolicy.EnforcingAdmin enforcingAdminForCaller;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        if (componentName == null) {
            enforcingAdminForCaller = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK", callerIdentity.getPackageName(), userId);
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || isFinancedDeviceOwner(callerIdentity));
            enforcingAdminForCaller = getEnforcingAdminForCaller(componentName, str);
        }
        if (!isPackageInstalledForUser(componentName2.getPackageName(), userId)) {
            return;
        }
        this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PERSISTENT_PREFERRED_ACTIVITY(intentFilter), enforcingAdminForCaller, new android.app.admin.ComponentNamePolicyValue(componentName2), userId);
        android.app.admin.DevicePolicyEventLogger.createEvent(52).setAdmin(callerIdentity.getPackageName()).setStrings(componentName2.getPackageName(), getIntentFilterActions(intentFilter)).write();
    }

    public void clearPackagePersistentPreferredActivities(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        com.android.server.devicepolicy.EnforcingAdmin enforcingAdminForCaller;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        if (componentName == null) {
            enforcingAdminForCaller = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_LOCK_TASK", callerIdentity.getPackageName(), userId);
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || isFinancedDeviceOwner(callerIdentity));
            enforcingAdminForCaller = getEnforcingAdminForCaller(componentName, str);
        }
        clearPackagePersistentPreferredActivitiesFromPolicyEngine(enforcingAdminForCaller, str2, userId);
    }

    private void clearPackagePersistentPreferredActivitiesFromPolicyEngine(com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin, java.lang.String str, int i) {
        java.util.Iterator<android.app.admin.PolicyKey> it = this.mDevicePolicyEngine.getLocalPolicyKeysSetByAdmin(com.android.server.devicepolicy.PolicyDefinition.GENERIC_PERSISTENT_PREFERRED_ACTIVITY, enforcingAdmin, i).iterator();
        while (it.hasNext()) {
            android.app.admin.IntentFilterPolicyKey intentFilterPolicyKey = (android.app.admin.PolicyKey) it.next();
            if (!(intentFilterPolicyKey instanceof android.app.admin.IntentFilterPolicyKey)) {
                throw new java.lang.IllegalStateException("PolicyKey for PERSISTENT_PREFERRED_ACTIVITY is notof type IntentFilterPolicyKey");
            }
            android.content.IntentFilter intentFilter = intentFilterPolicyKey.getIntentFilter();
            java.util.Objects.requireNonNull(intentFilter);
            android.content.ComponentName componentName = (android.content.ComponentName) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.PERSISTENT_PREFERRED_ACTIVITY(intentFilter), enforcingAdmin, i);
            if (componentName != null && componentName.getPackageName().equals(str)) {
                this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PERSISTENT_PREFERRED_ACTIVITY(intentFilter), enforcingAdmin, i);
            }
        }
    }

    public void setDefaultSmsApplication(android.content.ComponentName componentName, java.lang.String str, final java.lang.String str2, boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        final int userHandleGetCallingUserId;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isPermissionCheckFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_DEFAULT_SMS", callerIdentity.getPackageName(), getAffectedUser(z));
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        }
        if (!z && isManagedProfile(callerIdentity.getUserId()) && getManagedSubscriptionsPolicy().getPolicyType() != 1) {
            throw new java.lang.IllegalStateException("Default sms application can only be set on the profile, when ManagedSubscriptions policy is set");
        }
        if (z) {
            userHandleGetCallingUserId = getProfileParentId(this.mInjector.userHandleGetCallingUserId());
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda115
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDefaultSmsApplication$89(str2, userHandleGetCallingUserId);
                }
            });
        } else {
            userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda116
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDefaultSmsApplication$90(str2, userHandleGetCallingUserId);
            }
        });
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin parentOfAdminIfRequired = getParentOfAdminIfRequired(getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()), z);
                if (isManagedProfile(userHandleGetCallingUserId)) {
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda117
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDefaultSmsApplication$91();
                        }
                    });
                }
                if (!java.util.Objects.equals(parentOfAdminIfRequired.mSmsPackage, str2)) {
                    parentOfAdminIfRequired.mSmsPackage = str2;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultSmsApplication$90(java.lang.String str, int i) throws java.lang.Exception {
        com.android.internal.telephony.SmsApplication.setDefaultApplicationAsUser(str, this.mContext, i);
    }

    public void setDefaultDialerApplication(final java.lang.String str) {
        if (!this.mHasFeature || !this.mHasTelephonyFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        final int userId = callerIdentity.getUserId();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda63
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDefaultDialerApplication$93(str, userId);
            }
        });
        synchronized (getLockObject()) {
            try {
                if (isManagedProfile(userId)) {
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda64
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDefaultDialerApplication$94();
                        }
                    });
                }
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(userId);
                if (!java.util.Objects.equals(profileOwnerOrDeviceOwnerLocked.mDialerPackage, str)) {
                    profileOwnerOrDeviceOwnerLocked.mDialerPackage = str;
                    saveSettingsLocked(userId);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultDialerApplication$93(final java.lang.String str, int i) throws java.lang.Exception {
        final java.util.concurrent.CompletableFuture completableFuture = new java.util.concurrent.CompletableFuture();
        this.mRoleManager.addRoleHolderAsUser("android.app.role.DIALER", str, 0, android.os.UserHandle.of(i), android.os.AsyncTask.THREAD_POOL_EXECUTOR, new java.util.function.Consumer() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda109
            @Override // java.util.function.Consumer
            public final void accept(java.lang.Object obj) {
                com.android.server.devicepolicy.DevicePolicyManagerService.lambda$setDefaultDialerApplication$92(completableFuture, str, (java.lang.Boolean) obj);
            }
        });
        try {
            completableFuture.get(20L, java.util.concurrent.TimeUnit.SECONDS);
        } catch (java.util.concurrent.ExecutionException e) {
            java.lang.Throwable cause = e.getCause();
            if (cause instanceof java.lang.IllegalArgumentException) {
                throw ((java.lang.IllegalArgumentException) cause);
            }
            throw new java.lang.IllegalStateException(cause);
        } catch (java.util.concurrent.TimeoutException e2) {
            throw new java.lang.IllegalArgumentException("Timeout when setting the app as the dialer", e2);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$setDefaultDialerApplication$92(java.util.concurrent.CompletableFuture completableFuture, java.lang.String str, java.lang.Boolean bool) {
        if (bool.booleanValue()) {
            completableFuture.complete(null);
            return;
        }
        completableFuture.completeExceptionally(new java.lang.IllegalArgumentException(str + " cannot be set as the dialer"));
    }

    public boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName componentName, java.lang.String str) {
        try {
            setDelegatedScopePreO(componentName, str, "delegation-app-restrictions");
            return true;
        } catch (java.lang.IllegalArgumentException e) {
            return false;
        }
    }

    public java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName componentName) {
        java.util.List<java.lang.String> delegatePackages = getDelegatePackages(componentName, "delegation-app-restrictions");
        if (delegatePackages.size() > 0) {
            return delegatePackages.get(0);
        }
        return null;
    }

    public boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String str) {
        return isCallerDelegate(str, getCallerIdentity().getUid(), "delegation-app-restrictions");
    }

    public void setApplicationRestrictions(android.content.ComponentName componentName, java.lang.String str, final java.lang.String str2, final android.os.Bundle bundle) {
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        checkCanExecuteOrThrowUnsafe(16);
        boolean z = false;
        if (isUnicornFlagEnabled()) {
            com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_APP_RESTRICTIONS", callerIdentity.getPackageName(), callerIdentity.getUserId());
            java.lang.String validateName = android.content.pm.parsing.FrameworkParsingPackageUtils.validateName(str2, false, false);
            if (validateName != null) {
                throw new java.lang.IllegalArgumentException("Invalid package name: " + validateName);
            }
            if (bundle == null || bundle.isEmpty()) {
                this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.APPLICATION_RESTRICTIONS(str2), enforcePermissionAndGetEnforcingAdmin, callerIdentity.getUserId());
            } else {
                this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.APPLICATION_RESTRICTIONS(str2), enforcePermissionAndGetEnforcingAdmin, new android.app.admin.BundlePolicyValue(bundle), callerIdentity.getUserId());
            }
            setBackwardsCompatibleAppRestrictions(callerIdentity, str2, bundle, callerIdentity.getUserHandle());
        } else {
            if ((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-app-restrictions"))) {
                z = true;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z);
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda74
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setApplicationRestrictions$95(str2, bundle, callerIdentity);
                }
            });
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(62).setAdmin(callerIdentity.getPackageName()).setBoolean(isCallerDelegate(callerIdentity)).setStrings(new java.lang.String[]{str2}).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setApplicationRestrictions$95(java.lang.String str, android.os.Bundle bundle, com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        this.mUserManager.setApplicationRestrictions(str, bundle, callerIdentity.getUserHandle());
    }

    private void setBackwardsCompatibleAppRestrictions(com.android.server.devicepolicy.CallerIdentity callerIdentity, final java.lang.String str, final android.os.Bundle bundle, final android.os.UserHandle userHandle) {
        if ((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-app-restrictions"))) {
            if (bundle == null || bundle.isEmpty()) {
                bundle = getAppRestrictionsSetByAnyAdmin(str, userHandle);
            }
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda207
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setBackwardsCompatibleAppRestrictions$96(str, bundle, userHandle);
                }
            });
            return;
        }
        android.content.Intent intent = new android.content.Intent("android.intent.action.APPLICATION_RESTRICTIONS_CHANGED");
        intent.setPackage(str);
        intent.addFlags(1073741824);
        this.mContext.sendBroadcastAsUser(intent, userHandle);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setBackwardsCompatibleAppRestrictions$96(java.lang.String str, android.os.Bundle bundle, android.os.UserHandle userHandle) throws java.lang.Exception {
        this.mUserManager.setApplicationRestrictions(str, bundle, userHandle);
    }

    private android.os.Bundle getAppRestrictionsSetByAnyAdmin(java.lang.String str, android.os.UserHandle userHandle) {
        java.util.LinkedHashMap localPoliciesSetByAdmins = this.mDevicePolicyEngine.getLocalPoliciesSetByAdmins(com.android.server.devicepolicy.PolicyDefinition.APPLICATION_RESTRICTIONS(str), userHandle.getIdentifier());
        if (localPoliciesSetByAdmins.isEmpty()) {
            return null;
        }
        return (android.os.Bundle) ((android.app.admin.PolicyValue) ((java.util.Map.Entry) localPoliciesSetByAdmins.entrySet().stream().findAny().get()).getValue()).getValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int getUidForPackage(final java.lang.String str, final int i) {
        return ((java.lang.Integer) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda92
            public final java.lang.Object getOrThrow() {
                java.lang.Integer lambda$getUidForPackage$97;
                lambda$getUidForPackage$97 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getUidForPackage$97(str, i);
                return lambda$getUidForPackage$97;
            }
        })).intValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$getUidForPackage$97(java.lang.String str, int i) throws java.lang.Exception {
        try {
            return java.lang.Integer.valueOf(this.mContext.getPackageManager().getApplicationInfoAsUser(str, 0, i).uid);
        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
            return -1;
        }
    }

    public void setTrustAgentConfiguration(android.content.ComponentName componentName, java.lang.String str, android.content.ComponentName componentName2, android.os.PersistableBundle persistableBundle, boolean z) {
        com.android.server.devicepolicy.ActiveAdmin activeAdminForCallerLocked;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return;
        }
        if (!isPermissionCheckFlagEnabled()) {
            java.util.Objects.requireNonNull(componentName, "admin is null");
        }
        java.util.Objects.requireNonNull(componentName2, "agent is null");
        android.app.admin.PolicySizeVerifier.enforceMaxPackageNameLength(componentName2.getPackageName());
        java.lang.String flattenToString = componentName2.flattenToString();
        android.app.admin.PolicySizeVerifier.enforceMaxStringLength(flattenToString, "agent name");
        if (persistableBundle != null) {
            android.app.admin.PolicySizeVerifier.enforceMaxStringLength(persistableBundle, "args");
        }
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    activeAdminForCallerLocked = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_KEYGUARD", 9, getCallerIdentity(componentName, str).getPackageName(), z ? getProfileParentId(userHandleGetCallingUserId) : userHandleGetCallingUserId).getActiveAdmin();
                } else {
                    activeAdminForCallerLocked = getActiveAdminForCallerLocked(componentName, 9, z);
                }
                checkCanExecuteOrThrowUnsafe(21);
                activeAdminForCallerLocked.trustAgentInfos.put(flattenToString, new com.android.server.devicepolicy.ActiveAdmin.TrustAgentInfo(persistableBundle));
                saveSettingsLocked(userHandleGetCallingUserId);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public java.util.List<android.os.PersistableBundle> getTrustAgentConfiguration(android.content.ComponentName componentName, android.content.ComponentName componentName2, int i, boolean z) {
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName2, "agent null");
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(componentName), i));
        synchronized (getLockObject()) {
            try {
                java.lang.String flattenToString = componentName2.flattenToString();
                if (componentName != null) {
                    com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i, z);
                    if (activeAdminUncheckedLocked == null) {
                        return null;
                    }
                    com.android.server.devicepolicy.ActiveAdmin.TrustAgentInfo trustAgentInfo = activeAdminUncheckedLocked.trustAgentInfos.get(flattenToString);
                    if (trustAgentInfo == null || trustAgentInfo.options == null) {
                        return null;
                    }
                    java.util.ArrayList arrayList = new java.util.ArrayList();
                    arrayList.add(trustAgentInfo.options);
                    return arrayList;
                }
                java.util.List<com.android.server.devicepolicy.ActiveAdmin> activeAdminsForLockscreenPoliciesLocked = getActiveAdminsForLockscreenPoliciesLocked(getProfileParentUserIfRequested(i, z));
                int size = activeAdminsForLockscreenPoliciesLocked.size();
                boolean z2 = false;
                int i2 = 0;
                java.util.ArrayList arrayList2 = null;
                while (true) {
                    boolean z3 = true;
                    if (i2 >= size) {
                        z2 = true;
                        break;
                    }
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = activeAdminsForLockscreenPoliciesLocked.get(i2);
                    if ((activeAdmin.disabledKeyguardFeatures & 16) == 0) {
                        z3 = false;
                    }
                    com.android.server.devicepolicy.ActiveAdmin.TrustAgentInfo trustAgentInfo2 = activeAdmin.trustAgentInfos.get(flattenToString);
                    if (trustAgentInfo2 != null && trustAgentInfo2.options != null && !trustAgentInfo2.options.isEmpty()) {
                        if (z3) {
                            if (arrayList2 == null) {
                                arrayList2 = new java.util.ArrayList();
                            }
                            arrayList2.add(trustAgentInfo2.options);
                        } else {
                            com.android.server.utils.Slogf.w(LOG_TAG, "Ignoring admin %s because it has trust options but doesn't declare KEYGUARD_DISABLE_TRUST_AGENTS", activeAdmin.info);
                        }
                    } else if (z3) {
                    }
                    i2++;
                }
                return z2 ? arrayList2 : null;
            } finally {
            }
        }
    }

    public void setRestrictionsProvider(android.content.ComponentName componentName, android.content.ComponentName componentName2) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(39);
        synchronized (getLockObject()) {
            int userId = callerIdentity.getUserId();
            lambda$getUserDataUnchecked$5(userId).mRestrictionsProvider = componentName2;
            saveSettingsLocked(userId);
        }
    }

    public android.content.ComponentName getRestrictionsProvider(int i) {
        android.content.ComponentName componentName;
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "query the permission provider"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                componentName = lambda$getUserDataUnchecked$5 != null ? lambda$getUserDataUnchecked$5.mRestrictionsProvider : null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return componentName;
    }

    /* JADX WARN: Not initialized variable reg: 8, insn: 0x00ba: INVOKE (r13v3 ?? I:com.android.server.devicepolicy.DevicePolicyManagerService$Injector), (r8 I:long) VIRTUAL call: com.android.server.devicepolicy.DevicePolicyManagerService.Injector.binderRestoreCallingIdentity(long):void A[Catch: all -> 0x005d, MD:(long):void (m)], block:B:37:0x00b8 */
    public void addCrossProfileIntentFilter(android.content.ComponentName componentName, java.lang.String str, android.content.IntentFilter intentFilter, int i) {
        long binderRestoreCallingIdentity;
        com.android.server.devicepolicy.DevicePolicyManagerService.Injector injector;
        android.content.pm.UserInfo profileParent;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = isPermissionCheckFlagEnabled() ? getCallerIdentity(componentName, str) : getCallerIdentity(componentName);
        int userId = callerIdentity.getUserId();
        if (isPermissionCheckFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", callerIdentity.getPackageName(), userId);
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        }
        synchronized (getLockObject()) {
            try {
                long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                try {
                    profileParent = this.mUserManager.getProfileParent(userId);
                } catch (android.os.RemoteException e) {
                    com.android.server.utils.Slogf.wtf(LOG_TAG, "Error adding cross profile intent filter", e);
                    injector = this.mInjector;
                }
                if (profileParent == null) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "Cannot call addCrossProfileIntentFilter if there is no parent");
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    return;
                }
                if ((i & 1) != 0) {
                    this.mIPackageManager.addCrossProfileIntentFilter(intentFilter, componentName.getPackageName(), userId, profileParent.id, 0);
                }
                if ((i & 2) != 0) {
                    this.mIPackageManager.addCrossProfileIntentFilter(intentFilter, componentName.getPackageName(), profileParent.id, userId, 0);
                }
                injector = this.mInjector;
                injector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                android.app.admin.DevicePolicyEventLogger.createEvent(48).setAdmin(callerIdentity.getPackageName()).setStrings(getIntentFilterActions(intentFilter)).setInt(i).write();
            } catch (java.lang.Throwable th) {
                this.mInjector.binderRestoreCallingIdentity(binderRestoreCallingIdentity);
                throw th;
            }
        }
    }

    private static java.lang.String[] getIntentFilterActions(android.content.IntentFilter intentFilter) {
        if (intentFilter == null) {
            return null;
        }
        int countActions = intentFilter.countActions();
        java.lang.String[] strArr = new java.lang.String[countActions];
        for (int i = 0; i < countActions; i++) {
            strArr[i] = intentFilter.getAction(i);
        }
        return strArr;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void clearCrossProfileIntentFilters(android.content.ComponentName componentName, java.lang.String str) {
        long j;
        com.android.server.devicepolicy.DevicePolicyManagerService.Injector injector;
        android.content.pm.UserInfo profileParent;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = isPermissionCheckFlagEnabled() ? getCallerIdentity(componentName, str) : getCallerIdentity(componentName);
        int userId = callerIdentity.getUserId();
        if (isPermissionCheckFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION", callerIdentity.getPackageName(), userId);
            j = "android.permission.MANAGE_DEVICE_POLICY_PROFILE_INTERACTION";
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            boolean isProfileOwner = isProfileOwner(callerIdentity);
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner || isDefaultDeviceOwner(callerIdentity));
            j = isProfileOwner;
        }
        synchronized (getLockObject()) {
            try {
                long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                try {
                    profileParent = this.mUserManager.getProfileParent(userId);
                } catch (android.os.RemoteException e) {
                    com.android.server.utils.Slogf.wtf(LOG_TAG, "Error clearing cross profile intent filters", e);
                    injector = this.mInjector;
                }
                if (profileParent == null) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "Cannot call clearCrossProfileIntentFilter if there is no parent");
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                } else {
                    this.mIPackageManager.clearCrossProfileIntentFilters(userId, componentName.getPackageName());
                    this.mIPackageManager.clearCrossProfileIntentFilters(profileParent.id, componentName.getPackageName());
                    injector = this.mInjector;
                    injector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                }
            } catch (java.lang.Throwable th) {
                this.mInjector.binderRestoreCallingIdentity(j);
                throw th;
            }
        }
    }

    private boolean checkPackagesInPermittedListOrSystem(java.util.List<java.lang.String> list, java.util.List<java.lang.String> list2, int i) {
        android.content.pm.ApplicationInfo applicationInfo;
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            android.content.pm.UserInfo userInfo = getUserInfo(i);
            if (userInfo.isManagedProfile()) {
                i = userInfo.profileGroupId;
            }
            java.util.Iterator<java.lang.String> it = list.iterator();
            while (true) {
                boolean z = true;
                if (!it.hasNext()) {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    return true;
                }
                java.lang.String next = it.next();
                try {
                    applicationInfo = this.mIPackageManager.getApplicationInfo(next, 8192L, i);
                } catch (android.os.RemoteException e) {
                    com.android.server.utils.Slogf.i(LOG_TAG, "Can't talk to package managed", e);
                    z = false;
                }
                if (applicationInfo == null) {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    return false;
                }
                if ((applicationInfo.flags & 1) == 0) {
                    z = false;
                }
                if (!z && !list2.contains(next)) {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    return false;
                }
            }
        } catch (java.lang.Throwable th) {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            throw th;
        }
    }

    private <T> T withAccessibilityManager(int i, java.util.function.Function<android.view.accessibility.AccessibilityManager, T> function) {
        android.os.IBinder service = android.os.ServiceManager.getService("accessibility");
        android.view.accessibility.AccessibilityManager accessibilityManager = new android.view.accessibility.AccessibilityManager(this.mContext, service == null ? null : android.view.accessibility.IAccessibilityManager.Stub.asInterface(service), i);
        try {
            return function.apply(accessibilityManager);
        } finally {
            accessibilityManager.removeClient();
        }
    }

    public boolean setPermittedAccessibilityServices(android.content.ComponentName componentName, java.util.List<java.lang.String> list) {
        if (!this.mHasFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        if (list != null) {
            java.util.Iterator<java.lang.String> it = list.iterator();
            while (it.hasNext()) {
                android.app.admin.PolicySizeVerifier.enforceMaxPackageNameLength(it.next());
            }
            int userId = callerIdentity.getUserId();
            long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
            try {
                android.content.pm.UserInfo userInfo = getUserInfo(userId);
                if (userInfo.isManagedProfile()) {
                    userId = userInfo.profileGroupId;
                }
                java.util.List list2 = (java.util.List) withAccessibilityManager(userId, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda173
                    @Override // java.util.function.Function
                    public final java.lang.Object apply(java.lang.Object obj) {
                        java.util.List lambda$setPermittedAccessibilityServices$98;
                        lambda$setPermittedAccessibilityServices$98 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$setPermittedAccessibilityServices$98((android.view.accessibility.AccessibilityManager) obj);
                        return lambda$setPermittedAccessibilityServices$98;
                    }
                });
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                if (list2 != null) {
                    java.util.ArrayList arrayList = new java.util.ArrayList();
                    java.util.Iterator it2 = list2.iterator();
                    while (it2.hasNext()) {
                        arrayList.add(((android.accessibilityservice.AccessibilityServiceInfo) it2.next()).getResolveInfo().serviceInfo.packageName);
                    }
                    if (!checkPackagesInPermittedListOrSystem(arrayList, list, userId)) {
                        com.android.server.utils.Slogf.e(LOG_TAG, "Cannot set permitted accessibility services, because it contains already enabled accesibility services.");
                        return false;
                    }
                }
            } catch (java.lang.Throwable th) {
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                throw th;
            }
        }
        synchronized (getLockObject()) {
            getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).permittedAccessiblityServices = list;
            saveSettingsLocked(android.os.UserHandle.getCallingUserId());
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(28).setAdmin(componentName).setStrings(list != null ? (java.lang.String[]) list.toArray(new java.lang.String[0]) : null).write();
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.util.List lambda$setPermittedAccessibilityServices$98(android.view.accessibility.AccessibilityManager accessibilityManager) {
        return accessibilityManager.getEnabledAccessibilityServiceList(-1);
    }

    public java.util.List<java.lang.String> getPermittedAccessibilityServices(android.content.ComponentName componentName) {
        java.util.List<java.lang.String> list;
        if (!this.mHasFeature) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            list = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).permittedAccessiblityServices;
        }
        return list;
    }

    public java.util.List<java.lang.String> getPermittedAccessibilityServicesForUser(int i) {
        java.util.ArrayList arrayList = null;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(callerIdentity) || canQueryAdminPolicy(callerIdentity));
        synchronized (getLockObject()) {
            try {
                for (int i2 : this.mUserManager.getProfileIdsWithDisabled(i)) {
                    com.android.server.devicepolicy.DevicePolicyData userDataUnchecked = getUserDataUnchecked(i2);
                    int size = userDataUnchecked.mAdminList.size();
                    for (int i3 = 0; i3 < size; i3++) {
                        java.util.List<java.lang.String> list = userDataUnchecked.mAdminList.get(i3).permittedAccessiblityServices;
                        if (list != null) {
                            if (arrayList == null) {
                                arrayList = new java.util.ArrayList(list);
                            } else {
                                arrayList.retainAll(list);
                            }
                        }
                    }
                }
            } finally {
            }
        }
        if (arrayList != null) {
            long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
            try {
                android.content.pm.UserInfo userInfo = getUserInfo(i);
                if (userInfo.isManagedProfile()) {
                    i = userInfo.profileGroupId;
                }
                java.util.List list2 = (java.util.List) withAccessibilityManager(i, new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda15
                    @Override // java.util.function.Function
                    public final java.lang.Object apply(java.lang.Object obj) {
                        return ((android.view.accessibility.AccessibilityManager) obj).getInstalledAccessibilityServiceList();
                    }
                });
                if (list2 != null) {
                    java.util.Iterator it = list2.iterator();
                    while (it.hasNext()) {
                        android.content.pm.ServiceInfo serviceInfo = ((android.accessibilityservice.AccessibilityServiceInfo) it.next()).getResolveInfo().serviceInfo;
                        if ((serviceInfo.applicationInfo.flags & 1) != 0) {
                            arrayList.add(serviceInfo.packageName);
                        }
                    }
                }
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            } finally {
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            }
        }
        return arrayList;
    }

    public boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName componentName, java.lang.String str, int i) {
        if (!this.mHasFeature) {
            return true;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkStringNotEmpty(str, "packageName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "query if an accessibility service is disabled by admin"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked == null) {
                    return false;
                }
                if (activeAdminUncheckedLocked.permittedAccessiblityServices == null) {
                    return true;
                }
                return checkPackagesInPermittedListOrSystem(java.util.Collections.singletonList(str), activeAdminUncheckedLocked.permittedAccessiblityServices, i);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean setPermittedInputMethods(android.content.ComponentName componentName, java.lang.String str, java.util.List<java.lang.String> list, boolean z) {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        final int profileParentUserIfRequested = getProfileParentUserIfRequested(callerIdentity.getUserId(), z);
        if (z) {
            com.android.internal.util.Preconditions.checkArgument(list == null || list.isEmpty(), "Permitted input methods must allow all input methods or only system input methods when called on the parent instance of an organization-owned device");
        }
        if (list != null) {
            if (!android.app.admin.flags.Flags.devicePolicySizeTrackingEnabled()) {
                java.util.Iterator<java.lang.String> it = list.iterator();
                while (it.hasNext()) {
                    android.app.admin.PolicySizeVerifier.enforceMaxPackageNameLength(it.next());
                }
            }
            java.util.List list2 = (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda211
                public final java.lang.Object getOrThrow() {
                    java.util.List lambda$setPermittedInputMethods$99;
                    lambda$setPermittedInputMethods$99 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$setPermittedInputMethods$99(profileParentUserIfRequested);
                    return lambda$setPermittedInputMethods$99;
                }
            });
            if (list2 != null) {
                java.util.ArrayList arrayList = new java.util.ArrayList();
                java.util.Iterator it2 = list2.iterator();
                while (it2.hasNext()) {
                    arrayList.add(((android.view.inputmethod.InputMethodInfo) it2.next()).getPackageName());
                }
                if (!checkPackagesInPermittedListOrSystem(arrayList, list, profileParentUserIfRequested)) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "Cannot set permitted input methods, because the list of permitted input methods excludes an already-enabled input method.");
                    return false;
                }
            }
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_INPUT_METHODS", callerIdentity.getPackageName(), profileParentUserIfRequested);
                if (list == null) {
                    this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PERMITTED_INPUT_METHODS, enforcePermissionAndGetEnforcingAdmin, profileParentUserIfRequested);
                } else {
                    this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PERMITTED_INPUT_METHODS, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.StringSetPolicyValue(new java.util.HashSet(list)), profileParentUserIfRequested);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(27).setAdmin(callerIdentity.getPackageName()).setStrings(getStringArrayForLogging(list, z)).write();
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.util.List lambda$setPermittedInputMethods$99(int i) throws java.lang.Exception {
        return com.android.server.inputmethod.InputMethodManagerInternal.get().getEnabledInputMethodListAsUser(i);
    }

    private java.lang.String[] getStringArrayForLogging(java.util.List list, boolean z) {
        java.util.ArrayList arrayList = new java.util.ArrayList();
        arrayList.add(z ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT);
        if (list == null) {
            arrayList.add(NULL_STRING_ARRAY);
        } else {
            arrayList.addAll(list);
        }
        return (java.lang.String[]) arrayList.toArray(new java.lang.String[0]);
    }

    public java.util.List<java.lang.String> getPermittedInputMethods(android.content.ComponentName componentName, java.lang.String str, boolean z) {
        int userId;
        java.util.ArrayList arrayList;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        synchronized (getLockObject()) {
            try {
                if (z) {
                    userId = getProfileParentId(callerIdentity.getUserId());
                } else {
                    userId = callerIdentity.getUserId();
                }
                java.util.Set set = (java.util.Set) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.PERMITTED_INPUT_METHODS, userId);
                arrayList = set != null ? new java.util.ArrayList(set) : null;
            } finally {
            }
        }
        return arrayList;
    }

    @android.annotation.Nullable
    public java.util.List<java.lang.String> getPermittedInputMethodsAsUser(int i) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(callerIdentity) || canQueryAdminPolicy(callerIdentity));
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            return getPermittedInputMethodsUnchecked(i);
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    @android.annotation.Nullable
    private java.util.List<java.lang.String> getPermittedInputMethodsUnchecked(int i) {
        java.util.List<android.view.inputmethod.InputMethodInfo> inputMethodListAsUser;
        java.util.Set set = (java.util.Set) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.PERMITTED_INPUT_METHODS, i);
        java.util.ArrayList arrayList = set == null ? null : new java.util.ArrayList(set);
        if (arrayList != null && (inputMethodListAsUser = com.android.server.inputmethod.InputMethodManagerInternal.get().getInputMethodListAsUser(i)) != null) {
            java.util.Iterator<android.view.inputmethod.InputMethodInfo> it = inputMethodListAsUser.iterator();
            while (it.hasNext()) {
                android.content.pm.ServiceInfo serviceInfo = it.next().getServiceInfo();
                if ((serviceInfo.applicationInfo.flags & 1) != 0) {
                    arrayList.add(serviceInfo.packageName);
                }
            }
        }
        return arrayList;
    }

    public boolean isInputMethodPermittedByAdmin(android.content.ComponentName componentName, java.lang.String str, int i, boolean z) {
        if (!this.mHasFeature) {
            return true;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkStringNotEmpty(str, "packageName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "query if an input method is disabled by admin"));
        if (z) {
            i = getProfileParentId(i);
        }
        java.util.LinkedHashMap localPoliciesSetByAdmins = this.mDevicePolicyEngine.getLocalPoliciesSetByAdmins(com.android.server.devicepolicy.PolicyDefinition.PERMITTED_INPUT_METHODS, i);
        for (com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin : localPoliciesSetByAdmins.keySet()) {
            if (enforcingAdmin.getPackageName().equals(componentName.getPackageName())) {
                if (((android.app.admin.PolicyValue) localPoliciesSetByAdmins.get(enforcingAdmin)).getValue() == null) {
                    return true;
                }
                return checkPackagesInPermittedListOrSystem(java.util.Collections.singletonList(str), new java.util.ArrayList((java.util.Collection) ((android.app.admin.PolicyValue) localPoliciesSetByAdmins.get(enforcingAdmin)).getValue()), i);
            }
        }
        return false;
    }

    public boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName componentName, java.util.List<java.lang.String> list) {
        if (!this.mHasFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        if (!isManagedProfile(callerIdentity.getUserId())) {
            return false;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            getProfileOwnerLocked(callerIdentity.getUserId()).permittedNotificationListeners = list;
            saveSettingsLocked(callerIdentity.getUserId());
        }
        return true;
    }

    public java.util.List<java.lang.String> getPermittedCrossProfileNotificationListeners(android.content.ComponentName componentName) {
        java.util.List<java.lang.String> list;
        if (!this.mHasFeature) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            list = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).permittedNotificationListeners;
        }
        return list;
    }

    public boolean isNotificationListenerServicePermitted(java.lang.String str, int i) {
        if (!this.mHasFeature) {
            return true;
        }
        com.android.internal.util.Preconditions.checkStringNotEmpty(str, "packageName is null or empty");
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "query if a notification listener service is permitted"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                if (profileOwnerAdminLocked == null || profileOwnerAdminLocked.permittedNotificationListeners == null) {
                    return true;
                }
                return checkPackagesInPermittedListOrSystem(java.util.Collections.singletonList(str), profileOwnerAdminLocked.permittedNotificationListeners, i);
            } finally {
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void maybeSendAdminEnabledBroadcastLocked(int i) {
        boolean z;
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
        if (lambda$getUserDataUnchecked$5.mAdminBroadcastPending) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
            if (profileOwnerAdminLocked == null) {
                z = true;
            } else {
                android.os.PersistableBundle persistableBundle = lambda$getUserDataUnchecked$5.mInitBundle;
                z = sendAdminCommandLocked(profileOwnerAdminLocked, "android.app.action.DEVICE_ADMIN_ENABLED", persistableBundle == null ? null : new android.os.Bundle(persistableBundle), null, true);
            }
            if (z) {
                lambda$getUserDataUnchecked$5.mInitBundle = null;
                lambda$getUserDataUnchecked$5.mAdminBroadcastPending = false;
                saveSettingsLocked(i);
            }
        }
    }

    public android.os.UserHandle createAndManageUser(android.content.ComponentName componentName, java.lang.String str, android.content.ComponentName componentName2, android.os.PersistableBundle persistableBundle, int i) {
        android.os.UserHandle userHandle;
        java.util.Objects.requireNonNull(componentName, "admin is null");
        java.util.Objects.requireNonNull(componentName2, "profileOwner is null");
        if (!componentName.getPackageName().equals(componentName2.getPackageName())) {
            throw new java.lang.IllegalArgumentException("profileOwner " + componentName2 + " and admin " + componentName + " are not in the same package");
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(callerIdentity.getUserHandle().isSystem(), "createAndManageUser was called from non-system user");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(5);
        if (android.app.admin.flags.Flags.headlessDeviceOwnerSingleUserEnabled()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(getHeadlessDeviceOwnerMode() != 2, "createAndManageUser was called while in headless single user mode");
        }
        boolean z = (i & 2) != 0;
        boolean z2 = (i & 4) != 0 && android.os.UserManager.isDeviceInDemoMode(this.mContext);
        boolean z3 = (i & 16) != 0;
        synchronized (getLockObject()) {
            long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
            try {
                int uidTargetSdkVersion = this.mInjector.getPackageManagerInternal().getUidTargetSdkVersion(callerIdentity.getUid());
                if (((com.android.server.storage.DeviceStorageMonitorInternal) com.android.server.LocalServices.getService(com.android.server.storage.DeviceStorageMonitorInternal.class)).isMemoryLow()) {
                    if (uidTargetSdkVersion < 28) {
                        return null;
                    }
                    throw new android.os.ServiceSpecificException(5, "low device storage");
                }
                java.lang.String str2 = z2 ? "android.os.usertype.full.DEMO" : "android.os.usertype.full.SECONDARY";
                int i2 = z ? 256 : 0;
                if (!this.mUserManager.canAddMoreUsers(str2)) {
                    if (uidTargetSdkVersion < 28) {
                        return null;
                    }
                    throw new android.os.ServiceSpecificException(6, "user limit reached");
                }
                java.lang.String[] strArr = !z3 ? (java.lang.String[]) this.mOverlayPackagesProvider.getNonRequiredApps(componentName, android.os.UserHandle.myUserId(), "android.app.action.PROVISION_MANAGED_USER").toArray(new java.lang.String[0]) : null;
                java.lang.Object obj = new java.lang.Object();
                com.android.server.utils.Slogf.d(LOG_TAG, "Adding new pending token: " + obj);
                this.mPendingUserCreatedCallbackTokens.add(obj);
                try {
                    android.content.pm.UserInfo createUserEvenWhenDisallowed = this.mUserManagerInternal.createUserEvenWhenDisallowed(str, str2, i2, strArr, obj);
                    userHandle = createUserEvenWhenDisallowed != null ? createUserEvenWhenDisallowed.getUserHandle() : null;
                } catch (android.os.UserManager.CheckedUserOperationException e) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "Couldn't createUserEvenWhenDisallowed", (java.lang.Throwable) e);
                    userHandle = null;
                }
                if (userHandle == null) {
                    if (uidTargetSdkVersion < 28) {
                        return null;
                    }
                    throw new android.os.ServiceSpecificException(1, "failed to create user");
                }
                int identifier = userHandle.getIdentifier();
                binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                try {
                    maybeInstallDevicePolicyManagementRoleHolderInUser(identifier);
                    manageUserUnchecked(componentName, componentName2, identifier, persistableBundle, true);
                    if ((i & 1) != 0) {
                        android.provider.Settings.Secure.putIntForUser(this.mContext.getContentResolver(), "user_setup_complete", 1, identifier);
                    }
                    sendProvisioningCompletedBroadcast(identifier, "android.app.action.PROVISION_MANAGED_USER", z3);
                    return userHandle;
                } catch (java.lang.Throwable th) {
                    try {
                        this.mUserManager.removeUser(identifier);
                        if (uidTargetSdkVersion < 28) {
                            return null;
                        }
                        throw new android.os.ServiceSpecificException(1, th.getMessage());
                    } finally {
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    }
                }
            } catch (java.lang.Throwable th2) {
                throw th2;
            }
        }
    }

    private void sendProvisioningCompletedBroadcast(int i, java.lang.String str, boolean z) {
        this.mContext.sendBroadcastAsUser(new android.content.Intent("android.app.action.PROVISIONING_COMPLETED").putExtra("android.intent.extra.user_handle", i).putExtra("android.intent.extra.USER", android.os.UserHandle.of(i)).putExtra("android.app.extra.PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED", z).putExtra("android.app.extra.PROVISIONING_ACTION", str).setPackage(getManagedProvisioningPackage(this.mContext)).addFlags(268435456), android.os.UserHandle.SYSTEM);
    }

    private void manageUserUnchecked(android.content.ComponentName componentName, android.content.ComponentName componentName2, final int i, @android.annotation.Nullable android.os.PersistableBundle persistableBundle, boolean z) {
        java.lang.String str;
        synchronized (getLockObject()) {
        }
        final java.lang.String packageName = componentName.getPackageName();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda23
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$manageUserUnchecked$100(packageName, i);
            }
        });
        setActiveAdmin(componentName2, true, i);
        setProfileOwner(componentName2, i);
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                lambda$getUserDataUnchecked$5.mInitBundle = persistableBundle;
                lambda$getUserDataUnchecked$5.mAdminBroadcastPending = true;
                if (z) {
                    str = "needed";
                } else {
                    str = "not_needed";
                }
                lambda$getUserDataUnchecked$5.mNewUserDisclaimer = str;
                saveSettingsLocked(i);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$manageUserUnchecked$100(java.lang.String str, int i) throws java.lang.Exception {
        try {
            if (!this.mIPackageManager.isPackageAvailable(str, i)) {
                this.mIPackageManager.installExistingPackageAsUser(str, i, 4194304, 1, (java.util.List) null);
            }
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, e, "Failed to install admin package %s for user %d", str, java.lang.Integer.valueOf(i));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handleNewUserCreated(android.content.pm.UserInfo userInfo, @android.annotation.Nullable java.lang.Object obj) {
        this.mDevicePolicyEngine.handleUserCreated(userInfo);
        int i = userInfo.id;
        if (obj != null) {
            synchronized (getLockObject()) {
                try {
                    if (this.mPendingUserCreatedCallbackTokens.contains(obj)) {
                        com.android.server.utils.Slogf.d(LOG_TAG, "handleNewUserCreated(): ignoring for user " + i + " due to token " + obj);
                        this.mPendingUserCreatedCallbackTokens.remove(obj);
                        return;
                    }
                } finally {
                }
            }
        }
        if (!this.mOwners.hasDeviceOwner() || !userInfo.isFull() || userInfo.isManagedProfile() || userInfo.isGuest()) {
            return;
        }
        if (this.mInjector.userManagerIsHeadlessSystemUserMode()) {
            android.content.ComponentName deviceOwnerComponent = this.mOwners.getDeviceOwnerComponent();
            com.android.server.utils.Slogf.i(LOG_TAG, "Automatically setting profile owner (" + deviceOwnerComponent + ") on new user " + i);
            manageUserUnchecked(deviceOwnerComponent, deviceOwnerComponent, i, null, true);
            return;
        }
        com.android.server.utils.Slogf.i(LOG_TAG, "User %d added on DO mode; setting ShowNewUserDisclaimer", java.lang.Integer.valueOf(i));
        setShowNewUserDisclaimer(i, "needed");
    }

    public void acknowledgeNewUserDisclaimer(int i) {
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS"));
        setShowNewUserDisclaimer(i, "acked");
    }

    private void setShowNewUserDisclaimer(int i, java.lang.String str) {
        com.android.server.utils.Slogf.i(LOG_TAG, "Setting new user disclaimer for user " + i + " as " + str);
        synchronized (getLockObject()) {
            lambda$getUserDataUnchecked$5(i).mNewUserDisclaimer = str;
            saveSettingsLocked(i);
        }
    }

    private void showNewUserDisclaimerIfNecessary(int i) {
        boolean equals;
        synchronized (getLockObject()) {
            equals = "needed".equals(lambda$getUserDataUnchecked$5(i).mNewUserDisclaimer);
        }
        if (equals) {
            android.content.Intent intent = new android.content.Intent("android.app.action.SHOW_NEW_USER_DISCLAIMER");
            com.android.server.utils.Slogf.i(LOG_TAG, "Dispatching ACTION_SHOW_NEW_USER_DISCLAIMER intent");
            this.mContext.sendBroadcastAsUser(intent, android.os.UserHandle.of(i));
        }
    }

    public boolean isNewUserDisclaimerAcknowledged(int i) {
        boolean isNewUserDisclaimerAcknowledged;
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS"));
        synchronized (getLockObject()) {
            isNewUserDisclaimerAcknowledged = lambda$getUserDataUnchecked$5(i).isNewUserDisclaimerAcknowledged();
        }
        return isNewUserDisclaimerAcknowledged;
    }

    public boolean removeUser(final android.content.ComponentName componentName, final android.os.UserHandle userHandle) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(userHandle, "UserHandle is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(6);
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda213
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$removeUser$101;
                lambda$removeUser$101 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$removeUser$101(userHandle, componentName, callerIdentity);
                return lambda$removeUser$101;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$removeUser$101(android.os.UserHandle userHandle, android.content.ComponentName componentName, com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        java.lang.String str;
        if (isManagedProfile(userHandle.getIdentifier())) {
            str = "no_remove_managed_profile";
        } else {
            str = "no_remove_user";
        }
        if (isAdminAffectedByRestriction(componentName, str, callerIdentity.getUserId())) {
            com.android.server.utils.Slogf.w(LOG_TAG, "The device owner cannot remove a user because %s is enabled, and was not set by the device owner", str);
            return false;
        }
        return java.lang.Boolean.valueOf(this.mUserManagerInternal.removeUserEvenWhenDisallowed(userHandle.getIdentifier()));
    }

    private boolean isAdminAffectedByRestriction(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, int i) {
        switch (this.mUserManager.getUserRestrictionSource(str, android.os.UserHandle.of(i))) {
            case 2:
            case 4:
                if (!isDeviceOwner(componentName, i) && !isProfileOwner(componentName, i)) {
                    break;
                }
                break;
        }
        return true;
    }

    /* JADX WARN: Not initialized variable reg: 4, insn: 0x0068: MOVE (r3 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r4 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]), block:B:41:0x0068 */
    /* JADX WARN: Removed duplicated region for block: B:26:0x0093 A[Catch: all -> 0x007f, TryCatch #4 {all -> 0x007f, blocks: (B:4:0x001e, B:13:0x0074, B:15:0x007b, B:16:0x0081, B:34:0x0098, B:36:0x009f, B:37:0x00a2, B:24:0x008c, B:26:0x0093, B:27:0x0096), top: B:3:0x001e }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean switchUser(android.content.ComponentName componentName, android.os.UserHandle userHandle) {
        boolean z;
        int identifier;
        boolean z2;
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        checkCanExecuteOrThrowUnsafe(2);
        int logoutUserIdUnchecked = getLogoutUserIdUnchecked();
        synchronized (getLockObject()) {
            try {
                long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                boolean z3 = false;
                try {
                    if (userHandle != null) {
                        try {
                            identifier = userHandle.getIdentifier();
                        } catch (android.os.RemoteException e) {
                            e = e;
                            z2 = false;
                            com.android.server.utils.Slogf.e(LOG_TAG, "Couldn't switch user", e);
                            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                            if (!z2) {
                            }
                            return false;
                        } catch (java.lang.Throwable th) {
                            th = th;
                            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                            if (!z3) {
                                setLogoutUserIdLocked(logoutUserIdUnchecked);
                            }
                            throw th;
                        }
                    } else {
                        identifier = 0;
                    }
                    com.android.server.utils.Slogf.i(LOG_TAG, "Switching to user %d (logout user is %d)", java.lang.Integer.valueOf(identifier), java.lang.Integer.valueOf(logoutUserIdUnchecked));
                    setLogoutUserIdLocked(-2);
                    z2 = this.mInjector.getIActivityManager().switchUser(identifier);
                    try {
                        if (z2) {
                            com.android.server.utils.Slogf.d(LOG_TAG, "Switched");
                        } else {
                            com.android.server.utils.Slogf.w(LOG_TAG, "Failed to switch to user %d", java.lang.Integer.valueOf(identifier));
                        }
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        if (!z2) {
                            setLogoutUserIdLocked(logoutUserIdUnchecked);
                        }
                        return z2;
                    } catch (android.os.RemoteException e2) {
                        e = e2;
                        com.android.server.utils.Slogf.e(LOG_TAG, "Couldn't switch user", e);
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        if (!z2) {
                            setLogoutUserIdLocked(logoutUserIdUnchecked);
                        }
                        return false;
                    }
                } catch (java.lang.Throwable th2) {
                    th = th2;
                    z3 = z;
                }
            } catch (java.lang.Throwable th3) {
                throw th3;
            }
        }
    }

    public int getLogoutUserId() {
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS"));
        return getLogoutUserIdUnchecked();
    }

    private int getLogoutUserIdUnchecked() {
        int i;
        synchronized (getLockObject()) {
            i = this.mLogoutUserId;
        }
        return i;
    }

    private void clearLogoutUser() {
        synchronized (getLockObject()) {
            setLogoutUserIdLocked(com.android.server.am.ProcessList.INVALID_ADJ);
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void setLogoutUserIdLocked(int i) {
        if (i == -2) {
            i = getCurrentForegroundUserId();
        }
        com.android.server.utils.Slogf.d(LOG_TAG, "setLogoutUserId(): %d -> %d", java.lang.Integer.valueOf(this.mLogoutUserId), java.lang.Integer.valueOf(i));
        this.mLogoutUserId = i;
    }

    public int startUserInBackground(android.content.ComponentName componentName, android.os.UserHandle userHandle) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(userHandle, "UserHandle is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        checkCanExecuteOrThrowUnsafe(3);
        int identifier = userHandle.getIdentifier();
        if (isManagedProfile(identifier)) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Managed profile cannot be started in background");
            return 2;
        }
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            if (!this.mInjector.getActivityManagerInternal().canStartMoreUsers()) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Cannot start user %d, too many users in background", java.lang.Integer.valueOf(identifier));
                return 3;
            }
            com.android.server.utils.Slogf.i(LOG_TAG, "Starting user %d in background", java.lang.Integer.valueOf(identifier));
            if (this.mInjector.getIActivityManager().startUserInBackground(identifier)) {
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                return 0;
            }
            com.android.server.utils.Slogf.w(LOG_TAG, "failed to start user %d in background", java.lang.Integer.valueOf(identifier));
            return 1;
        } catch (android.os.RemoteException e) {
            return 1;
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    public int stopUser(android.content.ComponentName componentName, android.os.UserHandle userHandle) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(userHandle, "UserHandle is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        checkCanExecuteOrThrowUnsafe(4);
        int identifier = userHandle.getIdentifier();
        if (isManagedProfile(identifier)) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Managed profile cannot be stopped");
            return 2;
        }
        return stopUserUnchecked(identifier);
    }

    public int logoutUser(android.content.ComponentName componentName) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(9);
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            if (!isUserAffiliatedWithDeviceLocked(userId)) {
                throw new java.lang.SecurityException("Admin " + componentName + " is neither the device owner or affiliated user's profile owner.");
            }
        }
        if (isManagedProfile(userId)) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Managed profile cannot be logout");
            return 2;
        }
        if (userId != ((java.lang.Integer) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda83
            public final java.lang.Object getOrThrow() {
                java.lang.Integer lambda$logoutUser$102;
                lambda$logoutUser$102 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$logoutUser$102();
                return lambda$logoutUser$102;
            }
        })).intValue()) {
            com.android.server.utils.Slogf.d(LOG_TAG, "logoutUser(): user %d is in background, just stopping, not switching", java.lang.Integer.valueOf(userId));
            return stopUserUnchecked(userId);
        }
        return logoutUserUnchecked(userId);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$logoutUser$102() throws java.lang.Exception {
        return java.lang.Integer.valueOf(getCurrentForegroundUserId());
    }

    public int logoutUserInternal() {
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS"));
        return logoutUserUnchecked(getCurrentForegroundUserId());
    }

    private int logoutUserUnchecked(int i) {
        int logoutUserIdUnchecked = getLogoutUserIdUnchecked();
        if (logoutUserIdUnchecked == -10000) {
            com.android.server.utils.Slogf.w(LOG_TAG, "logoutUser(): could not determine which user to switch to");
            return 1;
        }
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            com.android.server.utils.Slogf.i(LOG_TAG, "logoutUser(): switching to user %d", java.lang.Integer.valueOf(logoutUserIdUnchecked));
            if (!this.mInjector.getIActivityManager().switchUser(logoutUserIdUnchecked)) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Failed to switch to user %d", java.lang.Integer.valueOf(logoutUserIdUnchecked));
                return 1;
            }
            clearLogoutUser();
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            return stopUserUnchecked(i);
        } catch (android.os.RemoteException e) {
            return 1;
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    private int stopUserUnchecked(int i) {
        com.android.server.utils.Slogf.i(LOG_TAG, "Stopping user %d", java.lang.Integer.valueOf(i));
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            switch (this.mInjector.getIActivityManager().stopUser(i, true, (android.app.IStopUserCallback) null)) {
                case -2:
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    return 4;
                case -1:
                default:
                    return 1;
                case 0:
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    return 0;
            }
        } catch (android.os.RemoteException e) {
            return 1;
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    public java.util.List<android.os.UserHandle> getSecondaryUsers(android.content.ComponentName componentName) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        return (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda205
            public final java.lang.Object getOrThrow() {
                java.util.List lambda$getSecondaryUsers$103;
                lambda$getSecondaryUsers$103 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getSecondaryUsers$103();
                return lambda$getSecondaryUsers$103;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.List lambda$getSecondaryUsers$103() throws java.lang.Exception {
        java.util.List<android.content.pm.UserInfo> aliveUsers = this.mInjector.getUserManager().getAliveUsers();
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (android.content.pm.UserInfo userInfo : aliveUsers) {
            android.os.UserHandle userHandle = userInfo.getUserHandle();
            if (!userHandle.isSystem() && !isManagedProfile(userHandle.getIdentifier())) {
                arrayList.add(userInfo.getUserHandle());
            }
        }
        return arrayList;
    }

    public boolean isEphemeralUser(android.content.ComponentName componentName) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda11
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isEphemeralUser$104;
                lambda$isEphemeralUser$104 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isEphemeralUser$104(callerIdentity);
                return lambda$isEphemeralUser$104;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isEphemeralUser$104(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(this.mInjector.getUserManager().isUserEphemeral(callerIdentity.getUserId()));
    }

    public android.os.Bundle getApplicationRestrictions(android.content.ComponentName componentName, java.lang.String str, final java.lang.String str2) {
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        if (isUnicornFlagEnabled()) {
            com.android.server.devicepolicy.EnforcingAdmin enforceCanQueryAndGetEnforcingAdmin = enforceCanQueryAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_APP_RESTRICTIONS", callerIdentity.getPackageName(), callerIdentity.getUserId());
            java.util.LinkedHashMap localPoliciesSetByAdmins = this.mDevicePolicyEngine.getLocalPoliciesSetByAdmins(com.android.server.devicepolicy.PolicyDefinition.APPLICATION_RESTRICTIONS(str2), callerIdentity.getUserId());
            if (localPoliciesSetByAdmins.isEmpty() || !localPoliciesSetByAdmins.containsKey(enforceCanQueryAndGetEnforcingAdmin)) {
                return android.os.Bundle.EMPTY;
            }
            return (android.os.Bundle) ((android.app.admin.PolicyValue) localPoliciesSetByAdmins.get(enforceCanQueryAndGetEnforcingAdmin)).getValue();
        }
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-app-restrictions")));
        return (android.os.Bundle) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda99
            public final java.lang.Object getOrThrow() {
                android.os.Bundle lambda$getApplicationRestrictions$105;
                lambda$getApplicationRestrictions$105 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getApplicationRestrictions$105(str2, callerIdentity);
                return lambda$getApplicationRestrictions$105;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.os.Bundle lambda$getApplicationRestrictions$105(java.lang.String str, com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        android.os.Bundle applicationRestrictions = this.mUserManager.getApplicationRestrictions(str, callerIdentity.getUserHandle());
        return applicationRestrictions != null ? applicationRestrictions : android.os.Bundle.EMPTY;
    }

    private java.lang.String[] populateNonExemptAndExemptFromPolicyApps(java.lang.String[] strArr, java.util.Set<java.lang.String> set) {
        com.android.internal.util.Preconditions.checkArgument(set.isEmpty(), "outputExemptApps is not empty");
        java.util.List<java.lang.String> listPolicyExemptAppsUnchecked = listPolicyExemptAppsUnchecked(this.mContext);
        if (listPolicyExemptAppsUnchecked.isEmpty()) {
            return strArr;
        }
        java.util.HashSet hashSet = new java.util.HashSet(listPolicyExemptAppsUnchecked);
        java.util.ArrayList arrayList = new java.util.ArrayList(strArr.length);
        for (java.lang.String str : strArr) {
            if (hashSet.contains(str)) {
                set.add(str);
            } else {
                arrayList.add(str);
            }
        }
        java.lang.String[] strArr2 = new java.lang.String[arrayList.size()];
        arrayList.toArray(strArr2);
        return strArr2;
    }

    public java.lang.String[] setPackagesSuspended(android.content.ComponentName componentName, java.lang.String str, java.lang.String[] strArr, boolean z) {
        com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked;
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        java.lang.String[] packagesSuspendedByAdmin;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        if (isUnicornFlagEnabled()) {
            activeAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_PACKAGE_STATE", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-package-access")));
            synchronized (getLockObject()) {
                profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
            }
            activeAdmin = profileOwnerOrDeviceOwnerLocked;
        }
        checkCanExecuteOrThrowUnsafe(20);
        java.util.HashSet hashSet = new java.util.HashSet();
        java.lang.String[] populateNonExemptAndExemptFromPolicyApps = populateNonExemptAndExemptFromPolicyApps(strArr, hashSet);
        synchronized (getLockObject()) {
            long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
            try {
                packagesSuspendedByAdmin = this.mInjector.getPackageManagerInternal().setPackagesSuspendedByAdmin(callerIdentity.getUserId(), populateNonExemptAndExemptFromPolicyApps, z);
            } finally {
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(68).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).setStrings(populateNonExemptAndExemptFromPolicyApps).write();
        if (packagesSuspendedByAdmin == null) {
            com.android.server.utils.Slogf.w(LOG_TAG, "PM failed to suspend packages (%s)", java.util.Arrays.toString(populateNonExemptAndExemptFromPolicyApps));
            return populateNonExemptAndExemptFromPolicyApps;
        }
        android.util.ArraySet arraySet = new android.util.ArraySet(populateNonExemptAndExemptFromPolicyApps);
        if (z) {
            arraySet.removeAll(java.util.List.of((java.lang.Object[]) packagesSuspendedByAdmin));
        } else {
            arraySet.addAll(hashSet);
        }
        synchronized (getLockObject()) {
            try {
                android.util.ArraySet arraySet2 = new android.util.ArraySet(activeAdmin.suspendedPackages);
                if (z) {
                    arraySet2.addAll(arraySet);
                } else {
                    arraySet2.removeAll(arraySet);
                }
                activeAdmin.suspendedPackages = arraySet2.isEmpty() ? null : new java.util.ArrayList(arraySet2);
                saveSettingsLocked(callerIdentity.getUserId());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (hashSet.isEmpty()) {
            return packagesSuspendedByAdmin;
        }
        return buildNonSuspendedPackagesUnionArray(packagesSuspendedByAdmin, hashSet);
    }

    private java.lang.String[] buildNonSuspendedPackagesUnionArray(java.lang.String[] strArr, java.util.Set<java.lang.String> set) {
        java.lang.String[] strArr2 = new java.lang.String[strArr.length + set.size()];
        int length = strArr.length;
        int i = 0;
        int i2 = 0;
        while (i < length) {
            strArr2[i2] = strArr[i];
            i++;
            i2++;
        }
        java.util.Iterator<java.lang.String> it = set.iterator();
        while (it.hasNext()) {
            strArr2[i2] = it.next();
            i2++;
        }
        return strArr2;
    }

    public boolean isPackageSuspended(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        boolean isPackageSuspendedForUser;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        if (isUnicornFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_PACKAGE_STATE", callerIdentity.getPackageName(), callerIdentity.getUserId());
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-package-access")));
        }
        synchronized (getLockObject()) {
            long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
            try {
                try {
                    isPackageSuspendedForUser = this.mIPackageManager.isPackageSuspendedForUser(str2, callerIdentity.getUserId());
                } finally {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                }
            } catch (android.os.RemoteException e) {
                com.android.server.utils.Slogf.e(LOG_TAG, "Failed talking to the package manager", e);
                return false;
            }
        }
        return isPackageSuspendedForUser;
    }

    public java.util.List<java.lang.String> listPolicyExemptApps() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_ADMINS") || isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        return listPolicyExemptAppsUnchecked(this.mContext);
    }

    private static java.util.List<java.lang.String> listPolicyExemptAppsUnchecked(android.content.Context context) {
        java.lang.String[] stringArray = context.getResources().getStringArray(android.R.array.no_ems_support_sim_operators);
        java.lang.String[] stringArray2 = context.getResources().getStringArray(android.R.array.vendor_disallowed_apps_managed_device);
        android.util.ArraySet arraySet = new android.util.ArraySet(stringArray.length + stringArray2.length);
        for (java.lang.String str : stringArray) {
            arraySet.add(str);
        }
        for (java.lang.String str2 : stringArray2) {
            arraySet.add(str2);
        }
        return new java.util.ArrayList(arraySet);
    }

    public void setUserRestriction(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, boolean z, boolean z2) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        int profileParentId = z2 ? getProfileParentId(userId) : userId;
        checkCanExecuteOrThrowUnsafe(10);
        if (!isDeviceOwner(callerIdentity) && !isProfileOwner(callerIdentity)) {
            com.android.server.devicepolicy.EnforcingAdmin enforcePermissionForUserRestriction = enforcePermissionForUserRestriction(componentName, str2, callerIdentity.getPackageName(), profileParentId);
            if (!this.mInjector.isChangeEnabled(ENABLE_COEXISTENCE_CHANGE, str, userId)) {
                throw new java.lang.IllegalStateException("Calling package is not targeting Android U.");
            }
            if (!com.android.server.pm.UserRestrictionsUtils.isValidRestriction(str2)) {
                throw new java.lang.IllegalArgumentException("Invalid restriction key: " + str2);
            }
            com.android.server.devicepolicy.PolicyDefinition<java.lang.Boolean> policyDefinitionForUserRestriction = com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction(str2);
            if (z) {
                setLocalUserRestrictionInternal(enforcePermissionForUserRestriction, str2, true, profileParentId);
            } else {
                if (!policyDefinitionForUserRestriction.isLocalOnlyPolicy()) {
                    setGlobalUserRestrictionInternal(enforcePermissionForUserRestriction, str2, false);
                }
                if (!policyDefinitionForUserRestriction.isGlobalOnlyPolicy()) {
                    setLocalUserRestrictionInternal(enforcePermissionForUserRestriction, str2, false, userId);
                    int profileParentId2 = getProfileParentId(userId);
                    if (profileParentId2 != userId) {
                        setLocalUserRestrictionInternal(enforcePermissionForUserRestriction, str2, false, profileParentId2);
                    }
                }
            }
        } else {
            if (!com.android.server.pm.UserRestrictionsUtils.isValidRestriction(str2)) {
                return;
            }
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.server.devicepolicy.EnforcingAdmin enforcingAdminForCaller = getEnforcingAdminForCaller(componentName, str);
            checkAdminCanSetRestriction(callerIdentity, z2, str2);
            setBackwardCompatibleUserRestriction(callerIdentity, enforcingAdminForCaller, str2, z, z2);
        }
        logUserRestrictionCall(str2, z, z2, callerIdentity);
    }

    private void checkAdminCanSetRestriction(com.android.server.devicepolicy.CallerIdentity callerIdentity, boolean z, java.lang.String str) {
        boolean z2;
        boolean isProfileOwnerOfOrganizationOwnedDevice = isProfileOwnerOfOrganizationOwnedDevice(callerIdentity);
        boolean z3 = true;
        if (z) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice);
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        }
        synchronized (getLockObject()) {
            try {
                if (isDefaultDeviceOwner(callerIdentity)) {
                    if (!com.android.server.pm.UserRestrictionsUtils.canDeviceOwnerChange(str)) {
                        throw new java.lang.SecurityException("Device owner cannot set user restriction " + str);
                    }
                    if (z) {
                        z3 = false;
                    }
                    com.android.internal.util.Preconditions.checkArgument(z3, "Cannot use the parent instance in Device Owner mode");
                } else if (isFinancedDeviceOwner(callerIdentity)) {
                    if (!com.android.server.pm.UserRestrictionsUtils.canFinancedDeviceOwnerChange(str)) {
                        throw new java.lang.SecurityException("Cannot set user restriction " + str + " when managing a financed device");
                    }
                    if (z) {
                        z3 = false;
                    }
                    com.android.internal.util.Preconditions.checkArgument(z3, "Cannot use the parent instance in Financed Device Owner mode");
                } else {
                    if (!z) {
                        if (com.android.server.pm.UserRestrictionsUtils.canProfileOwnerChange(str, callerIdentity.getUserId() == getMainUserId(), isProfileOwnerOfOrganizationOwnedDevice)) {
                            z2 = true;
                            if (z || !isProfileOwnerOfOrganizationOwnedDevice || !com.android.server.pm.UserRestrictionsUtils.canParentOfProfileOwnerOfOrganizationOwnedDeviceChange(str)) {
                                z3 = false;
                            }
                            if (z2 && !z3) {
                                throw new java.lang.SecurityException("Profile owner cannot set user restriction " + str);
                            }
                        }
                    }
                    z2 = false;
                    if (z) {
                    }
                    z3 = false;
                    if (z2) {
                    }
                }
            } finally {
            }
        }
    }

    private void setBackwardCompatibleUserRestriction(com.android.server.devicepolicy.CallerIdentity callerIdentity, com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin, java.lang.String str, boolean z, boolean z2) {
        int i;
        synchronized (getLockObject()) {
            try {
                if (isDeviceOwner(callerIdentity)) {
                    i = 0;
                } else if (isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) {
                    i = 2;
                } else if (isProfileOwner(callerIdentity)) {
                    i = 1;
                } else {
                    throw new java.lang.IllegalStateException("Non-DO/Non-PO cannot set restriction " + str + " while targetSdkVersion is less than UPSIDE_DOWN_CAKE");
                }
                setBackwardCompatibleUserRestrictionLocked(i, enforcingAdmin, callerIdentity.getUserId(), str, z, z2);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void setBackwardCompatibleUserRestrictionLocked(int i, com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin, int i2, java.lang.String str, boolean z, boolean z2) {
        if (i == 0) {
            if (com.android.server.pm.UserRestrictionsUtils.isGlobal(0, str)) {
                setGlobalUserRestrictionInternal(enforcingAdmin, str, z);
                return;
            } else {
                setLocalUserRestrictionInternal(enforcingAdmin, str, z, i2);
                return;
            }
        }
        if (i == 1 || i == 2) {
            if (com.android.server.pm.UserRestrictionsUtils.isGlobal(1, str) || (z2 && i == 2 && com.android.server.pm.UserRestrictionsUtils.isGlobal(2, str))) {
                setGlobalUserRestrictionInternal(enforcingAdmin, str, z);
                return;
            }
            if (z2) {
                i2 = getProfileParentId(i2);
            }
            setLocalUserRestrictionInternal(enforcingAdmin, str, z, i2);
            return;
        }
        throw new java.lang.IllegalStateException("Non-DO/Non-PO cannot set restriction " + str + " while targetSdkVersion is less than UPSIDE_DOWN_CAKE");
    }

    public void setUserRestrictionGlobally(java.lang.String str, java.lang.String str2) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        com.android.server.devicepolicy.EnforcingAdmin enforcePermissionForUserRestriction = enforcePermissionForUserRestriction(null, str2, callerIdentity.getPackageName(), -1);
        checkCanExecuteOrThrowUnsafe(10);
        if (isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity)) {
            throw new java.lang.SecurityException("Admins are not allowed to call this API.");
        }
        if (!this.mInjector.isChangeEnabled(ENABLE_COEXISTENCE_CHANGE, str, callerIdentity.getUserId())) {
            throw new java.lang.IllegalStateException("Calling package is not targeting Android U.");
        }
        if (!com.android.server.pm.UserRestrictionsUtils.isValidRestriction(str2)) {
            throw new java.lang.IllegalArgumentException("Invalid restriction key: " + str2);
        }
        setGlobalUserRestrictionInternal(enforcePermissionForUserRestriction, str2, true);
        logUserRestrictionCall(str2, true, false, callerIdentity);
    }

    private void setLocalUserRestrictionInternal(com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin, java.lang.String str, boolean z, int i) {
        com.android.server.devicepolicy.PolicyDefinition<java.lang.Boolean> policyDefinitionForUserRestriction = com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction(str);
        if (z) {
            this.mDevicePolicyEngine.setLocalPolicy(policyDefinitionForUserRestriction, enforcingAdmin, new android.app.admin.BooleanPolicyValue(true), i);
        } else {
            this.mDevicePolicyEngine.removeLocalPolicy(policyDefinitionForUserRestriction, enforcingAdmin, i);
        }
    }

    private void setGlobalUserRestrictionInternal(com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin, java.lang.String str, boolean z) {
        com.android.server.devicepolicy.PolicyDefinition<java.lang.Boolean> policyDefinitionForUserRestriction = com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction(str);
        if (z) {
            this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction(str), enforcingAdmin, new android.app.admin.BooleanPolicyValue(true));
        } else {
            this.mDevicePolicyEngine.removeGlobalPolicy(policyDefinitionForUserRestriction, enforcingAdmin);
        }
    }

    private void logUserRestrictionCall(java.lang.String str, boolean z, boolean z2, com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        int i;
        int i2;
        if (z) {
            i = 12;
        } else {
            i = 13;
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(i).setAdmin(callerIdentity.getComponentName()).setStrings(new java.lang.String[]{str, z2 ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT}).write();
        if (android.app.admin.SecurityLog.isLoggingEnabled()) {
            if (z) {
                i2 = 210027;
            } else {
                i2 = 210028;
            }
            android.app.admin.SecurityLog.writeEvent(i2, new java.lang.Object[]{callerIdentity.getPackageName(), java.lang.Integer.valueOf(callerIdentity.getUserId()), str});
        }
        com.android.server.utils.Slogf.i(LOG_TAG, "Changing user restriction %s to: %b caller: %s", str, java.lang.Boolean.valueOf(z), callerIdentity.toString());
    }

    public android.os.Bundle getUserRestrictions(android.content.ComponentName componentName, java.lang.String str, boolean z) {
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int profileParentId = z ? getProfileParentId(callerIdentity.getUserId()) : callerIdentity.getUserId();
        com.android.server.devicepolicy.EnforcingAdmin enforcingAdminForCaller = getEnforcingAdminForCaller(componentName, str);
        if (isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity)) {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isFinancedDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity) || (z && isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)));
            android.os.Bundle userRestrictionsFromPolicyEngine = getUserRestrictionsFromPolicyEngine(enforcingAdminForCaller, profileParentId);
            userRestrictionsFromPolicyEngine.putAll(getUserRestrictionsFromPolicyEngine(enforcingAdminForCaller, -1));
            return userRestrictionsFromPolicyEngine;
        }
        if (!this.mInjector.isChangeEnabled(ENABLE_COEXISTENCE_CHANGE, str, callerIdentity.getUserId())) {
            throw new java.lang.IllegalStateException("Calling package is not targeting Android U.");
        }
        return getUserRestrictionsFromPolicyEngine(enforcingAdminForCaller, profileParentId);
    }

    private com.android.server.devicepolicy.EnforcingAdmin enforcePermissionForUserRestriction(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, int i) {
        java.lang.String[] strArr = USER_RESTRICTION_PERMISSIONS.get(str);
        if (strArr.length > 0) {
            try {
                return enforcePermissionsAndGetEnforcingAdmin(componentName, strArr, str2, i);
            } catch (java.lang.SecurityException e) {
                throw new java.lang.SecurityException("Caller does not hold the required permission for this user restriction: " + str + ".\n" + e.getMessage());
            }
        }
        throw new java.lang.SecurityException("Admins are not permitted to set User Restriction: " + str);
    }

    public android.os.Bundle getUserRestrictionsGlobally(java.lang.String str) {
        if (this.mHasFeature) {
            return getUserRestrictionsFromPolicyEngine(getEnforcingAdminForCaller(null, getCallerIdentity(str).getPackageName()), -1);
        }
        return null;
    }

    private android.os.Bundle getUserRestrictionsFromPolicyEngine(com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin, int i) {
        java.util.Set<android.app.admin.UserRestrictionPolicyKey> userRestrictionPolicyKeysForAdmin = this.mDevicePolicyEngine.getUserRestrictionPolicyKeysForAdmin(enforcingAdmin, i);
        android.os.Bundle bundle = new android.os.Bundle();
        java.util.Iterator<android.app.admin.UserRestrictionPolicyKey> it = userRestrictionPolicyKeysForAdmin.iterator();
        while (it.hasNext()) {
            bundle.putBoolean(it.next().getRestriction(), true);
        }
        return bundle;
    }

    public boolean setApplicationHidden(android.content.ComponentName componentName, java.lang.String str, final java.lang.String str2, final boolean z, boolean z2) {
        boolean booleanValue;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        final int userId = callerIdentity.getUserId();
        if (z2) {
            userId = getProfileParentId(userId);
        }
        enforcePermission("android.permission.MANAGE_DEVICE_POLICY_PACKAGE_STATE", callerIdentity.getPackageName(), userId);
        if (listPolicyExemptAppsUnchecked(this.mContext).contains(str2)) {
            com.android.server.utils.Slogf.d(LOG_TAG, "setApplicationHidden(): ignoring %s as it's on policy-exempt list", str2);
            return false;
        }
        synchronized (getLockObject()) {
            if (z2) {
                try {
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda133
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setApplicationHidden$106(str2, userId);
                        }
                    });
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            checkCanExecuteOrThrowUnsafe(15);
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.APPLICATION_HIDDEN(str2), getEnforcingAdminForCaller(componentName, str), new android.app.admin.BooleanPolicyValue(z), userId);
            booleanValue = ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda134
                public final java.lang.Object getOrThrow() {
                    java.lang.Boolean lambda$setApplicationHidden$107;
                    lambda$setApplicationHidden$107 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setApplicationHidden$107(str2, userId, z);
                    return lambda$setApplicationHidden$107;
                }
            })).booleanValue();
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(63).setAdmin(callerIdentity.getPackageName()).setBoolean(isCallerDelegate(callerIdentity)).setStrings(new java.lang.String[]{str2, z ? "hidden" : "not_hidden", z2 ? CALLED_FROM_PARENT : NOT_CALLED_FROM_PARENT}).write();
        return booleanValue;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$setApplicationHidden$107(java.lang.String str, int i, boolean z) throws java.lang.Exception {
        try {
            return java.lang.Boolean.valueOf(this.mInjector.getIPackageManager().getPackageInfo(str, 8192L, i) != null && this.mIPackageManager.getApplicationHiddenSettingAsUser(str, i) == z);
        } catch (android.os.RemoteException e) {
            return false;
        }
    }

    public boolean isApplicationHidden(android.content.ComponentName componentName, java.lang.String str, final java.lang.String str2, boolean z) {
        boolean booleanValue;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        final int userId = callerIdentity.getUserId();
        if (z) {
            userId = getProfileParentId(userId);
        }
        enforcePermission("android.permission.MANAGE_DEVICE_POLICY_PACKAGE_STATE", callerIdentity.getPackageName(), userId);
        synchronized (getLockObject()) {
            if (z) {
                try {
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda101
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isApplicationHidden$108(str2, userId);
                        }
                    });
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            booleanValue = ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda102
                public final java.lang.Object getOrThrow() {
                    java.lang.Boolean lambda$isApplicationHidden$109;
                    lambda$isApplicationHidden$109 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isApplicationHidden$109(str2, userId);
                    return lambda$isApplicationHidden$109;
                }
            })).booleanValue();
        }
        return booleanValue;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isApplicationHidden$109(java.lang.String str, int i) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(this.mIPackageManager.getApplicationHiddenSettingAsUser(str, i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: enforcePackageIsSystemPackage, reason: merged with bridge method [inline-methods] and merged with bridge method [inline-methods] and merged with bridge method [inline-methods] */
    public void lambda$setDefaultSmsApplication$89(java.lang.String str, int i) throws android.os.RemoteException {
        boolean z;
        try {
            z = isSystemApp(this.mIPackageManager, str, i);
        } catch (java.lang.IllegalArgumentException e) {
            z = false;
        }
        if (!z) {
            throw new java.lang.IllegalArgumentException("The provided package is not a system package");
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:14:0x0062 A[Catch: all -> 0x004b, RemoteException -> 0x004d, TRY_LEAVE, TryCatch #0 {RemoteException -> 0x004d, blocks: (B:32:0x003c, B:12:0x0050, B:14:0x0062), top: B:31:0x003c, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:28:0x009c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void enableSystemApp(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        boolean z;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-enable-system-app")));
        boolean isCurrentUserDemo = isCurrentUserDemo();
        int userId = callerIdentity.getUserId();
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        if (!isCurrentUserDemo) {
            try {
                try {
                } catch (android.os.RemoteException e) {
                    com.android.server.utils.Slogf.wtf(LOG_TAG, "Failed to install " + str2, e);
                }
                if (!isSystemApp(this.mIPackageManager, str2, getProfileParentId(userId))) {
                    z = false;
                    com.android.internal.util.Preconditions.checkArgument(z, "Only system apps can be enabled this way");
                    this.mIPackageManager.installExistingPackageAsUser(str2, userId, 4194304, 1, (java.util.List) null);
                    if (isCurrentUserDemo) {
                        this.mIPackageManager.setApplicationEnabledSetting(str2, 1, 1, userId, LOG_TAG);
                    }
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    android.app.admin.DevicePolicyEventLogger.createEvent(64).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).setStrings(new java.lang.String[]{str2}).write();
                }
            } catch (java.lang.Throwable th) {
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                throw th;
            }
        }
        z = true;
        com.android.internal.util.Preconditions.checkArgument(z, "Only system apps can be enabled this way");
        this.mIPackageManager.installExistingPackageAsUser(str2, userId, 4194304, 1, (java.util.List) null);
        if (isCurrentUserDemo) {
        }
        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        android.app.admin.DevicePolicyEventLogger.createEvent(64).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).setStrings(new java.lang.String[]{str2}).write();
    }

    public int enableSystemAppWithIntent(android.content.ComponentName componentName, java.lang.String str, android.content.Intent intent) {
        int i;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-enable-system-app")));
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                int profileParentId = getProfileParentId(callerIdentity.getUserId());
                java.util.List<android.content.pm.ResolveInfo> list = this.mIPackageManager.queryIntentActivities(intent, intent.resolveTypeIfNeeded(this.mContext.getContentResolver()), 786432L, profileParentId).getList();
                if (list != null) {
                    i = 0;
                    for (android.content.pm.ResolveInfo resolveInfo : list) {
                        if (resolveInfo.activityInfo != null) {
                            java.lang.String str2 = resolveInfo.activityInfo.packageName;
                            if (isSystemApp(this.mIPackageManager, str2, profileParentId)) {
                                i++;
                                this.mIPackageManager.installExistingPackageAsUser(str2, callerIdentity.getUserId(), 4194304, 1, (java.util.List) null);
                            } else {
                                com.android.server.utils.Slogf.d(LOG_TAG, "Not enabling " + str2 + " since is not a system app");
                            }
                        }
                    }
                } else {
                    i = 0;
                }
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                android.app.admin.DevicePolicyEventLogger.createEvent(65).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).setStrings(new java.lang.String[]{intent.getAction()}).write();
                return i;
            } catch (android.os.RemoteException e) {
                com.android.server.utils.Slogf.wtf(LOG_TAG, "Failed to resolve intent for: " + intent, e);
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                return 0;
            }
        } catch (java.lang.Throwable th) {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            throw th;
        }
    }

    private boolean isSystemApp(android.content.pm.IPackageManager iPackageManager, java.lang.String str, int i) throws android.os.RemoteException {
        android.content.pm.ApplicationInfo applicationInfo = iPackageManager.getApplicationInfo(str, 8192L, i);
        if (applicationInfo != null) {
            return (applicationInfo.flags & 1) != 0;
        }
        throw new java.lang.IllegalArgumentException("The application " + str + " is not present on this device");
    }

    public boolean installExistingPackage(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2) {
        boolean z;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-install-existing-package")));
        synchronized (getLockObject()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isUserAffiliatedWithDeviceLocked(callerIdentity.getUserId()), "Admin %s is neither the device owner or affiliated user's profile owner.", new java.lang.Object[]{componentName});
            long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
            try {
                try {
                    z = this.mIPackageManager.installExistingPackageAsUser(str2, callerIdentity.getUserId(), 4194304, 1, (java.util.List) null) == 1;
                } finally {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                }
            } catch (android.os.RemoteException e) {
                com.android.server.utils.Slogf.wtf(LOG_TAG, "Error installing package", e);
                return false;
            }
        }
        if (z) {
            android.app.admin.DevicePolicyEventLogger.createEvent(66).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).setStrings(new java.lang.String[]{str2}).write();
        }
        return z;
    }

    public void setAccountManagementDisabled(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, boolean z, boolean z2) {
        if (!this.mHasFeature) {
            return;
        }
        if (!android.app.admin.flags.Flags.devicePolicySizeTrackingEnabled()) {
            android.app.admin.PolicySizeVerifier.enforceMaxStringLength(str2, "account type");
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        synchronized (getLockObject()) {
            try {
                int affectedUser = getAffectedUser(z2);
                com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT", callerIdentity.getPackageName(), affectedUser);
                if (z) {
                    this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.ACCOUNT_MANAGEMENT_DISABLED(str2), enforcePermissionAndGetEnforcingAdmin, new android.app.admin.BooleanPolicyValue(z), affectedUser);
                } else {
                    this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.ACCOUNT_MANAGEMENT_DISABLED(str2), enforcePermissionAndGetEnforcingAdmin, affectedUser);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public java.lang.String[] getAccountTypesWithManagementDisabled(java.lang.String str) {
        return getAccountTypesWithManagementDisabledAsUser(android.os.UserHandle.getCallingUserId(), str, false);
    }

    public java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int i, java.lang.String str, boolean z) {
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        android.util.ArraySet arraySet = new android.util.ArraySet();
        int profileParentId = z ? getProfileParentId(i) : i;
        if (!hasPermission("android.permission.MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT", str, profileParentId) && !hasFullCrossUsersPermission(callerIdentity, i)) {
            throw new java.lang.SecurityException("Caller does not have permission to call this on user: " + profileParentId);
        }
        java.util.Iterator<android.app.admin.PolicyKey> it = this.mDevicePolicyEngine.getLocalPolicyKeysSetByAllAdmins(com.android.server.devicepolicy.PolicyDefinition.GENERIC_ACCOUNT_MANAGEMENT_DISABLED, profileParentId).iterator();
        while (it.hasNext()) {
            android.app.admin.AccountTypePolicyKey accountTypePolicyKey = (android.app.admin.PolicyKey) it.next();
            if (!(accountTypePolicyKey instanceof android.app.admin.AccountTypePolicyKey)) {
                throw new java.lang.IllegalStateException("PolicyKey for MANAGE_DEVICE_POLICY_ACCOUNT_MANAGEMENT is not of type AccountTypePolicyKey");
            }
            java.lang.String accountType = accountTypePolicyKey.getAccountType();
            java.util.Objects.requireNonNull(accountType);
            java.lang.Boolean bool = (java.lang.Boolean) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.ACCOUNT_MANAGEMENT_DISABLED(accountType), profileParentId);
            if (bool != null && bool.booleanValue()) {
                arraySet.add(accountType);
            }
        }
        return (java.lang.String[]) arraySet.toArray(new java.lang.String[arraySet.size()]);
    }

    public void setUninstallBlocked(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PACKAGE_UNINSTALL_BLOCKED(str2), enforcePermissionsAndGetEnforcingAdmin(componentName, new java.lang.String[]{"android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL", "android.permission.MANAGE_DEVICE_POLICY_BLOCK_UNINSTALL"}, callerIdentity.getPackageName(), callerIdentity.getUserId()), new android.app.admin.BooleanPolicyValue(z), callerIdentity.getUserId());
        android.app.admin.DevicePolicyEventLogger.createEvent(67).setAdmin(callerIdentity.getPackageName()).setBoolean(isCallerDelegate(callerIdentity)).setStrings(new java.lang.String[]{str2}).write();
    }

    static void setUninstallBlockedUnchecked(final java.lang.String str, final boolean z, final int i) {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda124
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.lambda$setUninstallBlockedUnchecked$110(str, z, i);
            }
        });
        if (z) {
            android.content.pm.PackageManagerInternal packageManagerInternal = (android.content.pm.PackageManagerInternal) com.android.server.LocalServices.getService(android.content.pm.PackageManagerInternal.class);
            packageManagerInternal.removeNonSystemPackageSuspensions(str, i);
            packageManagerInternal.removeDistractingPackageRestrictions(str, i);
            packageManagerInternal.flushPackageRestrictions(i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$setUninstallBlockedUnchecked$110(java.lang.String str, boolean z, int i) throws java.lang.Exception {
        try {
            android.app.AppGlobals.getPackageManager().setBlockUninstallForUser(str, z, i);
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Failed to setBlockUninstallForUser", e);
        }
    }

    public boolean isUninstallBlocked(java.lang.String str) {
        boolean blockUninstallForUser;
        int callingUserId = android.os.UserHandle.getCallingUserId();
        synchronized (getLockObject()) {
            try {
                try {
                    blockUninstallForUser = this.mIPackageManager.getBlockUninstallForUser(str, callingUserId);
                } catch (android.os.RemoteException e) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "Failed to getBlockUninstallForUser", e);
                    return false;
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return blockUninstallForUser;
    }

    public void setCrossProfileCallerIdDisabled(android.content.ComponentName componentName, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                if (z) {
                    profileOwnerLocked.mManagedProfileCallerIdAccess = new android.app.admin.PackagePolicy(3);
                } else {
                    profileOwnerLocked.mManagedProfileCallerIdAccess = new android.app.admin.PackagePolicy(1);
                }
                saveSettingsLocked(callerIdentity.getUserId());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(46).setAdmin(componentName).setBoolean(z).write();
    }

    public boolean getCrossProfileCallerIdDisabled(android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                if (profileOwnerLocked == null) {
                    return false;
                }
                if (profileOwnerLocked.mManagedProfileCallerIdAccess == null) {
                    return profileOwnerLocked.disableCallerId;
                }
                if (profileOwnerLocked.mManagedProfileCallerIdAccess.getPolicyType() == 2) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Denying callerId due to PACKAGE_POLICY_SYSTEM policyType");
                }
                return profileOwnerLocked.mManagedProfileCallerIdAccess.getPolicyType() != 1;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean getCrossProfileCallerIdDisabledForUser(int i) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                if (profileOwnerAdminLocked == null) {
                    return false;
                }
                if (profileOwnerAdminLocked.mManagedProfileCallerIdAccess == null) {
                    return profileOwnerAdminLocked.disableCallerId;
                }
                return profileOwnerAdminLocked.mManagedProfileCallerIdAccess.getPolicyType() == 3;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setManagedProfileCallerIdAccessPolicy(android.app.admin.PackagePolicy packagePolicy) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId()));
        synchronized (getLockObject()) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
            profileOwnerLocked.disableCallerId = false;
            profileOwnerLocked.mManagedProfileCallerIdAccess = packagePolicy;
            saveSettingsLocked(callerIdentity.getUserId());
        }
    }

    public android.app.admin.PackagePolicy getManagedProfileCallerIdAccessPolicy() {
        android.app.admin.PackagePolicy packagePolicy;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId()));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                packagePolicy = profileOwnerLocked != null ? profileOwnerLocked.mManagedProfileCallerIdAccess : null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return packagePolicy;
    }

    public boolean hasManagedProfileCallerIdAccess(int i, java.lang.String str) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                boolean z = true;
                if (profileOwnerAdminLocked == null) {
                    return true;
                }
                if (profileOwnerAdminLocked.mManagedProfileCallerIdAccess == null) {
                    if (profileOwnerAdminLocked.disableCallerId) {
                        z = false;
                    }
                    return z;
                }
                return profileOwnerAdminLocked.mManagedProfileCallerIdAccess.isPackageAllowed(str, this.mContactSystemRoleHolders);
            } finally {
            }
        }
    }

    public void setManagedProfileContactsAccessPolicy(android.app.admin.PackagePolicy packagePolicy) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId()));
        synchronized (getLockObject()) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
            profileOwnerLocked.disableContactsSearch = false;
            profileOwnerLocked.mManagedProfileContactsAccess = packagePolicy;
            saveSettingsLocked(callerIdentity.getUserId());
        }
    }

    public android.app.admin.PackagePolicy getManagedProfileContactsAccessPolicy() {
        android.app.admin.PackagePolicy packagePolicy;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId()));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                packagePolicy = profileOwnerLocked != null ? profileOwnerLocked.mManagedProfileContactsAccess : null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return packagePolicy;
    }

    public boolean hasManagedProfileContactsAccess(int i, java.lang.String str) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                boolean z = true;
                if (profileOwnerAdminLocked == null) {
                    return true;
                }
                if (profileOwnerAdminLocked.mManagedProfileContactsAccess == null) {
                    if (profileOwnerAdminLocked.disableContactsSearch) {
                        z = false;
                    }
                    return z;
                }
                return profileOwnerAdminLocked.mManagedProfileContactsAccess.isPackageAllowed(str, this.mContactSystemRoleHolders);
            } finally {
            }
        }
    }

    public void setCrossProfileContactsSearchDisabled(android.content.ComponentName componentName, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                if (z) {
                    profileOwnerLocked.mManagedProfileContactsAccess = new android.app.admin.PackagePolicy(3);
                } else {
                    profileOwnerLocked.mManagedProfileContactsAccess = new android.app.admin.PackagePolicy(1);
                }
                saveSettingsLocked(callerIdentity.getUserId());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(45).setAdmin(componentName).setBoolean(z).write();
    }

    public boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                if (profileOwnerLocked == null) {
                    return false;
                }
                if (profileOwnerLocked.mManagedProfileContactsAccess == null) {
                    return profileOwnerLocked.disableContactsSearch;
                }
                return profileOwnerLocked.mManagedProfileContactsAccess.getPolicyType() != 1;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean getCrossProfileContactsSearchDisabledForUser(int i) {
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCrossUsersPermission(getCallerIdentity(), i));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                if (profileOwnerAdminLocked == null) {
                    return false;
                }
                if (profileOwnerAdminLocked.mManagedProfileContactsAccess == null) {
                    return profileOwnerAdminLocked.disableContactsSearch;
                }
                if (profileOwnerAdminLocked.mManagedProfileContactsAccess.getPolicyType() == 2) {
                    com.android.server.utils.Slogf.w(LOG_TAG, "Denying contacts due to PACKAGE_POLICY_SYSTEM policyType");
                }
                return profileOwnerAdminLocked.mManagedProfileContactsAccess.getPolicyType() != 1;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void startManagedQuickContact(java.lang.String str, long j, boolean z, long j2, android.content.Intent intent) {
        final android.content.Intent rebuildManagedQuickContactsIntent = android.provider.ContactsContract.QuickContact.rebuildManagedQuickContactsIntent(str, j, z, j2, intent);
        final int callingUserId = android.os.UserHandle.getCallingUserId();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda132
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$startManagedQuickContact$111(callingUserId, rebuildManagedQuickContactsIntent);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startManagedQuickContact$111(int i, android.content.Intent intent) throws java.lang.Exception {
        synchronized (getLockObject()) {
            try {
                int managedUserId = getManagedUserId(i);
                if (managedUserId < 0) {
                    return;
                }
                if (isCrossProfileQuickContactDisabled(managedUserId)) {
                    return;
                }
                android.provider.ContactsInternal.startQuickContactWithErrorToastForUser(this.mContext, intent, new android.os.UserHandle(managedUserId));
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean isCrossProfileQuickContactDisabled(int i) {
        return getCrossProfileCallerIdDisabledForUser(i) && getCrossProfileContactsSearchDisabledForUser(i);
    }

    public int getManagedUserId(int i) {
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getProfiles(i)) {
            if (userInfo.id != i && userInfo.isManagedProfile()) {
                return userInfo.id;
            }
        }
        return com.android.server.am.ProcessList.INVALID_ADJ;
    }

    private int getManagedUserId() {
        android.os.UserHandle mainUser = this.mUserManager.getMainUser();
        return mainUser == null ? com.android.server.am.ProcessList.INVALID_ADJ : getManagedUserId(mainUser.getIdentifier());
    }

    public void setBluetoothContactSharingDisabled(android.content.ComponentName componentName, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                if (profileOwnerOrDeviceOwnerLocked.disableBluetoothContactSharing != z) {
                    profileOwnerOrDeviceOwnerLocked.disableBluetoothContactSharing = z;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(47).setAdmin(componentName).setBoolean(z).write();
    }

    public boolean getBluetoothContactSharingDisabled(android.content.ComponentName componentName) {
        boolean z;
        if (!this.mHasFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            z = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).disableBluetoothContactSharing;
        }
        return z;
    }

    public boolean getBluetoothContactSharingDisabledForUser(int i) {
        boolean z;
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                z = profileOwnerAdminLocked != null ? profileOwnerAdminLocked.disableBluetoothContactSharing : false;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return z;
    }

    public void setSecondaryLockscreenEnabled(android.content.ComponentName componentName, boolean z) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        boolean z2 = false;
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        com.android.internal.util.Preconditions.checkCallAuthorization(!isManagedProfile(callerIdentity.getUserId()), "User %d is not allowed to call setSecondaryLockscreenEnabled", new java.lang.Object[]{java.lang.Integer.valueOf(callerIdentity.getUserId())});
        synchronized (getLockObject()) {
            try {
                if (!isAdminTestOnlyLocked(componentName, callerIdentity.getUserId())) {
                    if (isSupervisionComponentLocked(callerIdentity.getComponentName())) {
                    }
                    com.android.internal.util.Preconditions.checkCallAuthorization(z2, "Admin %s is not the default supervision component", new java.lang.Object[]{callerIdentity.getComponentName()});
                    lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mSecondaryLockscreenEnabled = z;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
                z2 = true;
                com.android.internal.util.Preconditions.checkCallAuthorization(z2, "Admin %s is not the default supervision component", new java.lang.Object[]{callerIdentity.getComponentName()});
                lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mSecondaryLockscreenEnabled = z;
                saveSettingsLocked(callerIdentity.getUserId());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean isSecondaryLockscreenEnabled(@android.annotation.NonNull android.os.UserHandle userHandle) {
        boolean z;
        synchronized (getLockObject()) {
            z = lambda$getUserDataUnchecked$5(userHandle.getIdentifier()).mSecondaryLockscreenEnabled;
        }
        return z;
    }

    private boolean isManagedProfileOwner(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId());
    }

    public void setPreferentialNetworkServiceConfigs(java.util.List<android.app.admin.PreferentialNetworkServiceConfig> list) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization((isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId())) || isDefaultDeviceOwner(callerIdentity), "Caller is not managed profile owner or device owner; only managed profile owner or device owner may control the preferential network service");
        try {
            updateNetworkPreferenceForUser(callerIdentity.getUserId(), list);
            synchronized (getLockObject()) {
                try {
                    com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(callerIdentity.getUserId());
                    if (!deviceOrProfileOwnerAdminLocked.mPreferentialNetworkServiceConfigs.equals(list)) {
                        deviceOrProfileOwnerAdminLocked.mPreferentialNetworkServiceConfigs = new java.util.ArrayList(list);
                        saveSettingsLocked(callerIdentity.getUserId());
                    }
                } finally {
                }
            }
            android.app.admin.DevicePolicyEventLogger.createEvent(com.android.internal.util.FrameworkStatsLog.DEVICE_POLICY_EVENT__EVENT_ID__SET_PREFERENTIAL_NETWORK_SERVICE_ENABLED).setBoolean(list.stream().anyMatch(new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda70
                @Override // java.util.function.Predicate
                public final boolean test(java.lang.Object obj) {
                    boolean isEnabled;
                    isEnabled = ((android.app.admin.PreferentialNetworkServiceConfig) obj).isEnabled();
                    return isEnabled;
                }
            })).write();
        } catch (java.lang.Exception e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Failed to set preferential network service configs");
            throw e;
        }
    }

    public java.util.List<android.app.admin.PreferentialNetworkServiceConfig> getPreferentialNetworkServiceConfigs() {
        java.util.List<android.app.admin.PreferentialNetworkServiceConfig> list;
        if (!this.mHasFeature) {
            return java.util.List.of(android.app.admin.PreferentialNetworkServiceConfig.DEFAULT);
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization((isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId())) || isDefaultDeviceOwner(callerIdentity), "Caller is not managed profile owner or device owner; only managed profile owner or device owner may retrieve the preferential network service configurations");
        synchronized (getLockObject()) {
            list = getDeviceOrProfileOwnerAdminLocked(callerIdentity.getUserId()).mPreferentialNetworkServiceConfigs;
        }
        return list;
    }

    public void setLockTaskPackages(android.content.ComponentName componentName, java.lang.String str, java.lang.String[] strArr) throws java.lang.SecurityException {
        com.android.server.devicepolicy.EnforcingAdmin enforceCanCallLockTaskLocked;
        android.app.admin.LockTaskPolicy lockTaskPolicy;
        java.util.Objects.requireNonNull(strArr, "packages is null");
        if (!android.app.admin.flags.Flags.devicePolicySizeTrackingEnabled()) {
            for (java.lang.String str2 : strArr) {
                android.app.admin.PolicySizeVerifier.enforceMaxPackageNameLength(str2);
            }
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        checkCanExecuteOrThrowUnsafe(19);
        synchronized (getLockObject()) {
            enforceCanCallLockTaskLocked = enforceCanCallLockTaskLocked(componentName, callerIdentity.getPackageName());
        }
        android.app.admin.LockTaskPolicy lockTaskPolicy2 = (android.app.admin.LockTaskPolicy) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, enforceCanCallLockTaskLocked, callerIdentity.getUserId());
        if (lockTaskPolicy2 == null) {
            lockTaskPolicy = new android.app.admin.LockTaskPolicy(java.util.Set.of((java.lang.Object[]) strArr));
        } else {
            android.app.admin.LockTaskPolicy lockTaskPolicy3 = new android.app.admin.LockTaskPolicy(lockTaskPolicy2);
            lockTaskPolicy3.setPackages(java.util.Set.of((java.lang.Object[]) strArr));
            lockTaskPolicy = lockTaskPolicy3;
        }
        if (lockTaskPolicy.getPackages().isEmpty()) {
            this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, enforceCanCallLockTaskLocked, callerIdentity.getUserId());
        } else {
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, enforceCanCallLockTaskLocked, lockTaskPolicy, callerIdentity.getUserId());
        }
    }

    private void setLockTaskPackagesLocked(int i, java.util.List<java.lang.String> list) {
        lambda$getUserDataUnchecked$5(i).mLockTaskPackages = list;
        saveSettingsLocked(i);
        updateLockTaskPackagesLocked(this.mContext, list, i);
    }

    public java.lang.String[] getLockTaskPackages(android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            enforceCanQueryLockTaskLocked(componentName, callerIdentity.getPackageName());
        }
        android.app.admin.LockTaskPolicy lockTaskPolicy = (android.app.admin.LockTaskPolicy) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, userId);
        if (lockTaskPolicy == null) {
            return new java.lang.String[0];
        }
        return (java.lang.String[]) lockTaskPolicy.getPackages().toArray(new java.lang.String[lockTaskPolicy.getPackages().size()]);
    }

    public boolean isLockTaskPermitted(java.lang.String str) {
        if (listPolicyExemptAppsUnchecked(this.mContext).contains(str)) {
            return true;
        }
        android.app.admin.LockTaskPolicy lockTaskPolicy = (android.app.admin.LockTaskPolicy) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, this.mInjector.userHandleGetCallingUserId());
        if (lockTaskPolicy == null) {
            return false;
        }
        return lockTaskPolicy.getPackages().contains(str);
    }

    public void setLockTaskFeatures(android.content.ComponentName componentName, java.lang.String str, int i) {
        com.android.server.devicepolicy.EnforcingAdmin enforceCanCallLockTaskLocked;
        android.app.admin.LockTaskPolicy lockTaskPolicy;
        boolean z = (i & 4) != 0;
        com.android.internal.util.Preconditions.checkArgument(z || !((i & 8) != 0), "Cannot use LOCK_TASK_FEATURE_OVERVIEW without LOCK_TASK_FEATURE_HOME");
        com.android.internal.util.Preconditions.checkArgument(z || !((i & 2) != 0), "Cannot use LOCK_TASK_FEATURE_NOTIFICATIONS without LOCK_TASK_FEATURE_HOME");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        callerIdentity.getUserId();
        synchronized (getLockObject()) {
            checkCanExecuteOrThrowUnsafe(18);
        }
        synchronized (getLockObject()) {
            enforceCanCallLockTaskLocked = enforceCanCallLockTaskLocked(componentName, callerIdentity.getPackageName());
            enforceCanSetLockTaskFeaturesOnFinancedDevice(callerIdentity, i);
        }
        android.app.admin.LockTaskPolicy lockTaskPolicy2 = (android.app.admin.LockTaskPolicy) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, enforceCanCallLockTaskLocked, callerIdentity.getUserId());
        if (lockTaskPolicy2 == null) {
            lockTaskPolicy = new android.app.admin.LockTaskPolicy(i);
        } else {
            android.app.admin.LockTaskPolicy lockTaskPolicy3 = new android.app.admin.LockTaskPolicy(lockTaskPolicy2);
            lockTaskPolicy3.setFlags(i);
            lockTaskPolicy = lockTaskPolicy3;
        }
        if (lockTaskPolicy.getPackages().isEmpty() && lockTaskPolicy.getFlags() == 0) {
            this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, enforceCanCallLockTaskLocked, callerIdentity.getUserId());
        } else {
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, enforceCanCallLockTaskLocked, lockTaskPolicy, callerIdentity.getUserId());
        }
    }

    private void setLockTaskFeaturesLocked(int i, int i2) {
        lambda$getUserDataUnchecked$5(i).mLockTaskFeatures = i2;
        saveSettingsLocked(i);
        updateLockTaskFeaturesLocked(i2, i);
    }

    public int getLockTaskFeatures(android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            enforceCanQueryLockTaskLocked(componentName, callerIdentity.getPackageName());
        }
        android.app.admin.LockTaskPolicy lockTaskPolicy = (android.app.admin.LockTaskPolicy) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, userId);
        if (lockTaskPolicy == null) {
            return 16;
        }
        return lockTaskPolicy.getFlags();
    }

    private void maybeClearLockTaskPolicyLocked() {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda72
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$maybeClearLockTaskPolicyLocked$113();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$maybeClearLockTaskPolicyLocked$113() throws java.lang.Exception {
        java.util.List aliveUsers = this.mUserManager.getAliveUsers();
        for (int size = aliveUsers.size() - 1; size >= 0; size--) {
            int i = ((android.content.pm.UserInfo) aliveUsers.get(size)).id;
            if (!canDPCManagedUserUseLockTaskLocked(i)) {
                for (com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin : new java.util.HashSet(this.mDevicePolicyEngine.getLocalPoliciesSetByAdmins(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, i).keySet())) {
                    if (enforcingAdmin.hasAuthority("enterprise")) {
                        this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, enforcingAdmin, i);
                    }
                }
            }
        }
    }

    private void enforceCanSetLockTaskFeaturesOnFinancedDevice(com.android.server.devicepolicy.CallerIdentity callerIdentity, int i) {
        if (isFinancedDeviceOwner(callerIdentity) && (i & (-120)) != 0) {
            throw new java.lang.SecurityException("Permitted lock task features when managing a financed device: LOCK_TASK_FEATURE_SYSTEM_INFO, LOCK_TASK_FEATURE_KEYGUARD, LOCK_TASK_FEATURE_HOME, LOCK_TASK_FEATURE_GLOBAL_ACTIONS, LOCK_TASK_FEATURE_NOTIFICATIONS or LOCK_TASK_FEATURE_BLOCK_ACTIVITY_START_IN_TASK");
        }
    }

    public void notifyLockTaskModeChanged(boolean z, java.lang.String str, int i) {
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "call notifyLockTaskModeChanged"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                if (lambda$getUserDataUnchecked$5.mStatusBarDisabled) {
                    setStatusBarDisabledInternal(!z, i);
                }
                android.os.Bundle bundle = new android.os.Bundle();
                bundle.putString("android.app.extra.LOCK_TASK_PACKAGE", str);
                java.util.Iterator<com.android.server.devicepolicy.ActiveAdmin> it = lambda$getUserDataUnchecked$5.mAdminList.iterator();
                while (it.hasNext()) {
                    com.android.server.devicepolicy.ActiveAdmin next = it.next();
                    boolean isDeviceOwner = isDeviceOwner(next.info.getComponent(), i);
                    boolean isProfileOwner = isProfileOwner(next.info.getComponent(), i);
                    if (isDeviceOwner || isProfileOwner) {
                        if (z) {
                            sendAdminCommandLocked(next, "android.app.action.LOCK_TASK_ENTERING", bundle, (android.content.BroadcastReceiver) null);
                        } else {
                            sendAdminCommandLocked(next, "android.app.action.LOCK_TASK_EXITING");
                        }
                        android.app.admin.DevicePolicyEventLogger.createEvent(51).setAdmin(next.info != null ? next.info.getPackageName() : null).setBoolean(z).setStrings(new java.lang.String[]{str}).write();
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        for (com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin : this.mDevicePolicyEngine.getLocalPoliciesSetByAdmins(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, i).keySet()) {
            if (!enforcingAdmin.hasAuthority("enterprise")) {
                android.app.admin.DevicePolicyEventLogger.createEvent(51).setAdmin(enforcingAdmin.getPackageName()).setBoolean(z).setStrings(new java.lang.String[]{str}).write();
            }
        }
    }

    public void setGlobalSetting(android.content.ComponentName componentName, final java.lang.String str, final java.lang.String str2) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        if ("allow_work_profile_telephony_for_non_dpm_role_holders".equals(str)) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isCallerDevicePolicyManagementRoleHolder(callerIdentity));
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda13
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setGlobalSetting$114(str, str2);
                }
            });
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        android.app.admin.DevicePolicyEventLogger.createEvent(111).setAdmin(componentName).setStrings(new java.lang.String[]{str, str2}).write();
        synchronized (getLockObject()) {
            try {
                if (GLOBAL_SETTINGS_DEPRECATED.contains(str)) {
                    com.android.server.utils.Slogf.i(LOG_TAG, "Global setting no longer supported: %s", str);
                    return;
                }
                if (!GLOBAL_SETTINGS_ALLOWLIST.contains(str) && !android.os.UserManager.isDeviceInDemoMode(this.mContext)) {
                    throw new java.lang.SecurityException(java.lang.String.format("Permission denial: device owners cannot update %1$s", str));
                }
                if ("stay_on_while_plugged_in".equals(str)) {
                    long maximumTimeToLock = getMaximumTimeToLock(componentName, this.mInjector.userHandleGetCallingUserId(), false);
                    if (maximumTimeToLock > 0 && maximumTimeToLock < com.android.server.job.controllers.JobStatus.NO_LATEST_RUNTIME) {
                        return;
                    }
                }
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda14
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setGlobalSetting$115(str, str2);
                    }
                });
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setGlobalSetting$114(java.lang.String str, java.lang.String str2) throws java.lang.Exception {
        this.mInjector.settingsGlobalPutString(str, str2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setGlobalSetting$115(java.lang.String str, java.lang.String str2) throws java.lang.Exception {
        this.mInjector.settingsGlobalPutString(str, str2);
    }

    public void setSystemSetting(android.content.ComponentName componentName, final java.lang.String str, final java.lang.String str2) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkStringNotEmpty(str, "String setting is null or empty");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(11);
        synchronized (getLockObject()) {
            try {
                if (!SYSTEM_SETTINGS_ALLOWLIST.contains(str)) {
                    throw new java.lang.SecurityException(java.lang.String.format("Permission denial: device owners cannot update %1$s", str));
                }
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda144
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setSystemSetting$116(str, str2, callerIdentity);
                    }
                });
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setSystemSetting$116(java.lang.String str, java.lang.String str2, com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        this.mInjector.settingsSystemPutStringForUser(str, str2, callerIdentity.getUserId());
    }

    public void setConfiguredNetworksLockdownState(android.content.ComponentName componentName, java.lang.String str, final boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (!this.mHasFeature) {
            return;
        }
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_WIFI", callerIdentity.getPackageName(), -1);
        } else {
            com.android.server.devicepolicy.CallerIdentity callerIdentity2 = getCallerIdentity(componentName);
            com.android.internal.util.Preconditions.checkNotNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity2) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity2));
            callerIdentity = callerIdentity2;
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda142
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setConfiguredNetworksLockdownState$117(z);
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(132).setAdmin(callerIdentity.getPackageName()).setBoolean(z).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setConfiguredNetworksLockdownState$117(boolean z) throws java.lang.Exception {
        this.mInjector.settingsGlobalPutInt("wifi_device_owner_configs_lockdown", z ? 1 : 0);
    }

    public boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        if (isPermissionCheckFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_WIFI", componentName.getPackageName(), -1);
        } else {
            com.android.internal.util.Preconditions.checkNotNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        }
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda202
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$hasLockdownAdminConfiguredNetworks$118;
                lambda$hasLockdownAdminConfiguredNetworks$118 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$hasLockdownAdminConfiguredNetworks$118();
                return lambda$hasLockdownAdminConfiguredNetworks$118;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$hasLockdownAdminConfiguredNetworks$118() throws java.lang.Exception {
        return java.lang.Boolean.valueOf(this.mInjector.settingsGlobalGetInt("wifi_device_owner_configs_lockdown", 0) > 0);
    }

    public void setLocationEnabled(android.content.ComponentName componentName, final boolean z) {
        com.android.internal.util.Preconditions.checkNotNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        final android.os.UserHandle userHandle = callerIdentity.getUserHandle();
        if (this.mIsAutomotive && !z) {
            com.android.server.utils.Slogf.i(LOG_TAG, "setLocationEnabled(%s, %b): ignoring for user %s on automotive build", componentName.flattenToShortString(), java.lang.Boolean.valueOf(z), userHandle);
        } else {
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda47
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setLocationEnabled$119(userHandle, z);
                }
            });
            android.app.admin.DevicePolicyEventLogger.createEvent(14).setAdmin(componentName).setStrings(new java.lang.String[]{"location_mode", java.lang.Integer.toString(z ? 3 : 0)}).write();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setLocationEnabled$119(android.os.UserHandle userHandle, boolean z) throws java.lang.Exception {
        boolean isLocationEnabledForUser = this.mInjector.getLocationManager().isLocationEnabledForUser(userHandle);
        com.android.server.utils.Slogf.v(LOG_TAG, "calling locationMgr.setLocationEnabledForUser(%b, %s) when it was %b", java.lang.Boolean.valueOf(z), userHandle, java.lang.Boolean.valueOf(isLocationEnabledForUser));
        this.mInjector.getLocationManager().setLocationEnabledForUser(z, userHandle);
        if (z && !isLocationEnabledForUser) {
            showLocationSettingsEnabledNotification(userHandle);
        }
    }

    private void showLocationSettingsEnabledNotification(android.os.UserHandle userHandle) {
        android.content.Intent addFlags = new android.content.Intent("android.settings.LOCATION_SOURCE_SETTINGS").addFlags(268435456);
        android.content.pm.ActivityInfo resolveActivityInfo = addFlags.resolveActivityInfo(this.mInjector.getPackageManager(userHandle.getIdentifier()), 1048576);
        if (resolveActivityInfo != null) {
            addFlags.setComponent(resolveActivityInfo.getComponentName());
        } else {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Failed to resolve intent for location settings");
        }
        final android.app.Notification build = new android.app.Notification.Builder(this.mContext, com.android.internal.notification.SystemNotificationChannels.DEVICE_ADMIN).setSmallIcon(android.R.drawable.ic_ime_nav_back).setContentTitle(getLocationChangedTitle()).setContentText(getLocationChangedText()).setColor(this.mContext.getColor(android.R.color.system_notification_accent_color)).setShowWhen(true).setContentIntent(this.mInjector.pendingIntentGetActivityAsUser(this.mContext, 0, addFlags, android.hardware.audio.common.V2_0.AudioFormat.DTS_HD, null, userHandle)).setAutoCancel(true).build();
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda87
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$showLocationSettingsEnabledNotification$120(build);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$showLocationSettingsEnabledNotification$120(android.app.Notification notification) {
        this.mInjector.getNotificationManager().notify(59, notification);
    }

    private java.lang.String getLocationChangedTitle() {
        return getUpdatableString("Core.LOCATION_CHANGED_TITLE", android.R.string.kg_sim_pin_instructions, new java.lang.Object[0]);
    }

    private java.lang.String getLocationChangedText() {
        return getUpdatableString("Core.LOCATION_CHANGED_MESSAGE", android.R.string.kg_reordering_delete_drop_target_text, new java.lang.Object[0]);
    }

    public boolean setTime(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, final long j) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
            enforcePermission("android.permission.SET_TIME", callerIdentity.getPackageName(), -1);
        } else {
            com.android.server.devicepolicy.CallerIdentity callerIdentity2 = getCallerIdentity(componentName);
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity2) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity2));
            callerIdentity = callerIdentity2;
        }
        if (this.mInjector.settingsGlobalGetInt("auto_time", 0) == 1) {
            return false;
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(133).setAdmin(callerIdentity.getPackageName()).write();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda125
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setTime$121(j);
            }
        });
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setTime$121(long j) throws java.lang.Exception {
        this.mInjector.getAlarmManager().setTime(j);
    }

    public boolean setTimeZone(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, final java.lang.String str2) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
            enforcePermission("android.permission.SET_TIME_ZONE", callerIdentity.getPackageName(), -1);
        } else {
            com.android.server.devicepolicy.CallerIdentity callerIdentity2 = getCallerIdentity(componentName);
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity2) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity2));
            callerIdentity = callerIdentity2;
        }
        if (this.mInjector.settingsGlobalGetInt("auto_time_zone", 0) == 1) {
            return false;
        }
        final java.lang.String str3 = "DevicePolicyManager.setTimeZone()";
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda182
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setTimeZone$122(str2, str3);
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(134).setAdmin(callerIdentity.getPackageName()).write();
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setTimeZone$122(java.lang.String str, java.lang.String str2) throws java.lang.Exception {
        this.mInjector.getAlarmManagerInternal().setTimeZone(str, 100, str2);
    }

    public void setSecureSetting(android.content.ComponentName componentName, final java.lang.String str, final java.lang.String str2) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        final int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                if (isDeviceOwner(componentName, userId)) {
                    if (!SECURE_SETTINGS_DEVICEOWNER_ALLOWLIST.contains(str) && !isCurrentUserDemo()) {
                        throw new java.lang.SecurityException(java.lang.String.format("Permission denial: Device owners cannot update %1$s", str));
                    }
                } else if (!SECURE_SETTINGS_ALLOWLIST.contains(str) && !isCurrentUserDemo()) {
                    throw new java.lang.SecurityException(java.lang.String.format("Permission denial: Profile owners cannot update %1$s", str));
                }
                if (str.equals("location_mode") && isSetSecureSettingLocationModeCheckEnabled(componentName.getPackageName(), userId)) {
                    throw new java.lang.UnsupportedOperationException("location_mode is deprecated. Please use setLocationEnabled() instead.");
                }
                if (str.equals("install_non_market_apps")) {
                    if (getTargetSdk(componentName.getPackageName(), userId) >= 26) {
                        throw new java.lang.UnsupportedOperationException("install_non_market_apps is deprecated. Please use one of the user restrictions no_install_unknown_sources or no_install_unknown_sources_globally instead.");
                    }
                    if (!this.mUserManager.isManagedProfile(userId)) {
                        com.android.server.utils.Slogf.e(LOG_TAG, "Ignoring setSecureSetting request for " + str + ". User restriction no_install_unknown_sources or no_install_unknown_sources_globally should be used instead.");
                    } else {
                        try {
                            setUserRestriction(componentName, componentName.getPackageName(), "no_install_unknown_sources", java.lang.Integer.parseInt(str2) == 0, false);
                            android.app.admin.DevicePolicyEventLogger.createEvent(14).setAdmin(componentName).setStrings(new java.lang.String[]{str, str2}).write();
                        } catch (java.lang.NumberFormatException e) {
                            com.android.server.utils.Slogf.e(LOG_TAG, "Invalid value: " + str2 + " for setting " + str);
                        }
                    }
                    return;
                }
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda194
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setSecureSetting$123(str, userId, str2);
                    }
                });
                android.app.admin.DevicePolicyEventLogger.createEvent(14).setAdmin(componentName).setStrings(new java.lang.String[]{str, str2}).write();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setSecureSetting$123(java.lang.String str, int i, java.lang.String str2) throws java.lang.Exception {
        if ("default_input_method".equals(str)) {
            if (!android.text.TextUtils.equals(this.mInjector.settingsSecureGetStringForUser("default_input_method", i), str2)) {
                this.mSetupContentObserver.addPendingChangeByOwnerLocked(i);
            }
            lambda$getUserDataUnchecked$5(i).mCurrentInputMethodSet = true;
            saveSettingsLocked(i);
        }
        this.mInjector.settingsSecurePutStringForUser(str, str2, i);
        if (str.equals("location_mode") && java.lang.Integer.parseInt(str2) != 0) {
            showLocationSettingsEnabledNotification(android.os.UserHandle.of(i));
        }
    }

    private boolean isSetSecureSettingLocationModeCheckEnabled(java.lang.String str, int i) {
        return this.mInjector.isChangeEnabled(USE_SET_LOCATION_ENABLED, str, i);
    }

    public void setMasterVolumeMuted(android.content.ComponentName componentName, boolean z) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(35);
        synchronized (getLockObject()) {
            setUserRestriction(componentName, componentName.getPackageName(), "disallow_unmute_device", z, false);
            android.app.admin.DevicePolicyEventLogger.createEvent(35).setAdmin(componentName).setBoolean(z).write();
        }
    }

    public boolean isMasterVolumeMuted(android.content.ComponentName componentName) {
        boolean isMasterMute;
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            isMasterMute = ((android.media.AudioManager) this.mContext.getSystemService("audio")).isMasterMute();
        }
        return isMasterMute;
    }

    public void setUserIcon(android.content.ComponentName componentName, final android.graphics.Bitmap bitmap) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda199
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setUserIcon$124(callerIdentity, bitmap);
                }
            });
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(41).setAdmin(componentName).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserIcon$124(com.android.server.devicepolicy.CallerIdentity callerIdentity, android.graphics.Bitmap bitmap) throws java.lang.Exception {
        this.mUserManagerInternal.setUserIcon(callerIdentity.getUserId(), bitmap);
    }

    public boolean setKeyguardDisabled(android.content.ComponentName componentName, boolean z) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isUserAffiliatedWithDeviceLocked(userId), java.lang.String.format("Admin %s is neither the device owner or affiliated user's profile owner.", componentName));
        }
        if (isManagedProfile(userId)) {
            throw new java.lang.SecurityException("Managed profile cannot disable keyguard");
        }
        checkCanExecuteOrThrowUnsafe(12);
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        if (z) {
            try {
                if (this.mLockPatternUtils.isSecure(userId)) {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    return false;
                }
            } catch (android.os.RemoteException e) {
            } catch (java.lang.Throwable th) {
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                throw th;
            }
        }
        this.mLockPatternUtils.setLockScreenDisabled(z, userId);
        if (z) {
            this.mInjector.getIWindowManager().dismissKeyguard((com.android.internal.policy.IKeyguardDismissCallback) null, (java.lang.CharSequence) null);
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(37).setAdmin(componentName).setBoolean(z).write();
        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        return true;
    }

    public boolean setStatusBarDisabled(android.content.ComponentName componentName, java.lang.String str, boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        boolean z2;
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isUnicornFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_STATUS_BAR", callerIdentity.getPackageName(), -1);
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        }
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                if (!isUnicornFlagEnabled()) {
                    com.android.internal.util.Preconditions.checkCallAuthorization(isUserAffiliatedWithDeviceLocked(userId), "Admin " + componentName + " is neither the device owner or affiliated user's profile owner.");
                    if (isManagedProfile(userId)) {
                        throw new java.lang.SecurityException("Managed profile cannot disable status bar");
                    }
                }
                checkCanExecuteOrThrowUnsafe(13);
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
                if (lambda$getUserDataUnchecked$5.mStatusBarDisabled != z) {
                    try {
                        z2 = this.mInjector.getIActivityTaskManager().getLockTaskModeState() != 0;
                    } catch (android.os.RemoteException e) {
                        com.android.server.utils.Slogf.e(LOG_TAG, "Failed to get LockTask mode");
                        z2 = false;
                    }
                    if (!z2 && !setStatusBarDisabledInternal(z, userId)) {
                        return false;
                    }
                    lambda$getUserDataUnchecked$5.mStatusBarDisabled = z;
                    saveSettingsLocked(userId);
                }
                android.app.admin.DevicePolicyEventLogger.createEvent(38).setAdmin(callerIdentity.getPackageName()).setBoolean(z).write();
                return true;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean setStatusBarDisabledInternal(boolean z, int i) {
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                com.android.internal.statusbar.IStatusBarService asInterface = com.android.internal.statusbar.IStatusBarService.Stub.asInterface(android.os.ServiceManager.checkService("statusbar"));
                if (asInterface != null) {
                    int i2 = z ? STATUS_BAR_DISABLE_MASK : 0;
                    int i3 = z ? 1 : 0;
                    asInterface.disableForUser(i2, this.mToken, this.mContext.getPackageName(), i);
                    asInterface.disable2ForUser(i3, this.mToken, this.mContext.getPackageName(), i);
                    return true;
                }
            } catch (android.os.RemoteException e) {
                com.android.server.utils.Slogf.e(LOG_TAG, "Failed to disable the status bar", e);
            }
            return false;
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    public boolean isStatusBarDisabled(java.lang.String str) {
        boolean z;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (isUnicornFlagEnabled()) {
            enforceCanQuery("android.permission.MANAGE_DEVICE_POLICY_STATUS_BAR", callerIdentity.getPackageName(), callerIdentity.getUserId());
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        }
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                if (!isUnicornFlagEnabled()) {
                    com.android.internal.util.Preconditions.checkCallAuthorization(isUserAffiliatedWithDeviceLocked(userId), "Admin " + str + " is neither the device owner or affiliated user's profile owner.");
                    if (isManagedProfile(userId)) {
                        throw new java.lang.SecurityException("Managed profile cannot disable status bar");
                    }
                }
                z = lambda$getUserDataUnchecked$5(userId).mStatusBarDisabled;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return z;
    }

    private java.util.Set<java.lang.String> getPackagesSuspendedByAdmin(int i) {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                if (deviceOrProfileOwnerAdminLocked == null || deviceOrProfileOwnerAdminLocked.suspendedPackages == null) {
                    return java.util.Collections.emptySet();
                }
                return new android.util.ArraySet(deviceOrProfileOwnerAdminLocked.suspendedPackages);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    void updateUserSetupCompleteAndPaired() {
        java.util.List aliveUsers = this.mUserManager.getAliveUsers();
        int size = aliveUsers.size();
        for (int i = 0; i < size; i++) {
            int i2 = ((android.content.pm.UserInfo) aliveUsers.get(i)).id;
            if (this.mInjector.settingsSecureGetIntForUser("user_setup_complete", 0, i2) != 0) {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i2);
                if (!lambda$getUserDataUnchecked$5.mUserSetupComplete) {
                    lambda$getUserDataUnchecked$5.mUserSetupComplete = true;
                    if (i2 == 0) {
                        this.mStateCache.setDeviceProvisioned(true);
                    }
                    synchronized (getLockObject()) {
                        saveSettingsLocked(i2);
                    }
                }
            }
            if (this.mIsWatch && this.mInjector.settingsSecureGetIntForUser("device_paired", 0, i2) != 0) {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$52 = lambda$getUserDataUnchecked$5(i2);
                if (lambda$getUserDataUnchecked$52.mPaired) {
                    continue;
                } else {
                    lambda$getUserDataUnchecked$52.mPaired = true;
                    synchronized (getLockObject()) {
                        saveSettingsLocked(i2);
                    }
                }
            }
        }
    }

    private class SetupContentObserver extends android.database.ContentObserver {
        private final android.net.Uri mDefaultImeChanged;
        private final android.net.Uri mDeviceProvisioned;
        private final android.net.Uri mPaired;

        @com.android.internal.annotations.GuardedBy({"getLockObject()"})
        private java.util.Set<java.lang.Integer> mUserIdsWithPendingChangesByOwner;
        private final android.net.Uri mUserSetupComplete;

        public SetupContentObserver(android.os.Handler handler) {
            super(handler);
            this.mUserSetupComplete = android.provider.Settings.Secure.getUriFor("user_setup_complete");
            this.mDeviceProvisioned = android.provider.Settings.Global.getUriFor("device_provisioned");
            this.mPaired = android.provider.Settings.Secure.getUriFor("device_paired");
            this.mDefaultImeChanged = android.provider.Settings.Secure.getUriFor("default_input_method");
            this.mUserIdsWithPendingChangesByOwner = new android.util.ArraySet();
        }

        void register() {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.registerContentObserver(this.mUserSetupComplete, false, this, -1);
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.registerContentObserver(this.mDeviceProvisioned, false, this, -1);
            if (com.android.server.devicepolicy.DevicePolicyManagerService.this.mIsWatch) {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.registerContentObserver(this.mPaired, false, this, -1);
            }
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.registerContentObserver(this.mDefaultImeChanged, false, this, -1);
        }

        /* JADX INFO: Access modifiers changed from: private */
        @com.android.internal.annotations.GuardedBy({"getLockObject()"})
        public void addPendingChangeByOwnerLocked(int i) {
            this.mUserIdsWithPendingChangesByOwner.add(java.lang.Integer.valueOf(i));
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean z, android.net.Uri uri, int i) {
            if (this.mUserSetupComplete.equals(uri) || (com.android.server.devicepolicy.DevicePolicyManagerService.this.mIsWatch && this.mPaired.equals(uri))) {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.updateUserSetupCompleteAndPaired();
                return;
            }
            if (this.mDeviceProvisioned.equals(uri)) {
                synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.setDeviceOwnershipSystemPropertyLocked();
                }
            } else if (this.mDefaultImeChanged.equals(uri)) {
                synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                    try {
                        if (this.mUserIdsWithPendingChangesByOwner.contains(java.lang.Integer.valueOf(i))) {
                            this.mUserIdsWithPendingChangesByOwner.remove(java.lang.Integer.valueOf(i));
                        } else {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getUserDataUnchecked$5(i).mCurrentInputMethodSet = false;
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.saveSettingsLocked(i);
                        }
                    } finally {
                    }
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    class DevicePolicyConstantsObserver extends android.database.ContentObserver {
        final android.net.Uri mConstantsUri;

        DevicePolicyConstantsObserver(android.os.Handler handler) {
            super(handler);
            this.mConstantsUri = android.provider.Settings.Global.getUriFor("device_policy_constants");
        }

        void register() {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.registerContentObserver(this.mConstantsUri, false, this, -1);
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean z, android.net.Uri uri, int i) {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mConstants = com.android.server.devicepolicy.DevicePolicyManagerService.this.loadConstants();
            com.android.server.devicepolicy.DevicePolicyManagerService.invalidateBinderCaches();
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyConstantsObserver$$ExternalSyntheticLambda0
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.DevicePolicyConstantsObserver.this.lambda$onChange$0();
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$onChange$0() throws java.lang.Exception {
            android.content.Intent intent = new android.content.Intent("android.app.action.DEVICE_POLICY_CONSTANTS_CHANGED");
            intent.setFlags(1073741824);
            java.util.List aliveUsers = com.android.server.devicepolicy.DevicePolicyManagerService.this.mUserManager.getAliveUsers();
            for (int i = 0; i < aliveUsers.size(); i++) {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.mContext.sendBroadcastAsUser(intent, android.os.UserHandle.of(((android.content.pm.UserInfo) aliveUsers.get(i)).id));
            }
        }
    }

    @com.android.internal.annotations.VisibleForTesting
    final class LocalService extends android.app.admin.DevicePolicyManagerInternal implements android.app.admin.DevicePolicyManagerLiteInternal {
        private java.util.List<android.app.admin.DevicePolicyManagerInternal.OnCrossProfileWidgetProvidersChangeListener> mWidgetProviderListeners;

        LocalService() {
        }

        public java.util.List<java.lang.String> getCrossProfileWidgetProviders(int i) {
            synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                try {
                    if (com.android.server.devicepolicy.DevicePolicyManagerService.this.mOwners == null) {
                        return java.util.Collections.emptyList();
                    }
                    android.content.ComponentName profileOwnerComponent = com.android.server.devicepolicy.DevicePolicyManagerService.this.mOwners.getProfileOwnerComponent(i);
                    if (profileOwnerComponent == null) {
                        return java.util.Collections.emptyList();
                    }
                    com.android.server.devicepolicy.ActiveAdmin activeAdmin = com.android.server.devicepolicy.DevicePolicyManagerService.this.getUserDataUnchecked(i).mAdminMap.get(profileOwnerComponent);
                    if (activeAdmin != null && activeAdmin.crossProfileWidgetProviders != null && !activeAdmin.crossProfileWidgetProviders.isEmpty()) {
                        return activeAdmin.crossProfileWidgetProviders;
                    }
                    return java.util.Collections.emptyList();
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }

        public void addOnCrossProfileWidgetProvidersChangeListener(android.app.admin.DevicePolicyManagerInternal.OnCrossProfileWidgetProvidersChangeListener onCrossProfileWidgetProvidersChangeListener) {
            synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                try {
                    if (this.mWidgetProviderListeners == null) {
                        this.mWidgetProviderListeners = new java.util.ArrayList();
                    }
                    if (!this.mWidgetProviderListeners.contains(onCrossProfileWidgetProvidersChangeListener)) {
                        this.mWidgetProviderListeners.add(onCrossProfileWidgetProvidersChangeListener);
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }

        @android.annotation.Nullable
        public android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(@android.annotation.NonNull android.os.UserHandle userHandle) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.getProfileOwnerOrDeviceOwnerSupervisionComponent(userHandle);
        }

        public boolean isActiveDeviceOwner(int i) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.isDefaultDeviceOwner(new com.android.server.devicepolicy.CallerIdentity(i, null, null));
        }

        public boolean isActiveProfileOwner(int i) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.isProfileOwner(new com.android.server.devicepolicy.CallerIdentity(i, null, null));
        }

        public boolean isActiveSupervisionApp(int i) {
            if (!com.android.server.devicepolicy.DevicePolicyManagerService.this.isProfileOwner(new com.android.server.devicepolicy.CallerIdentity(i, null, null))) {
                return false;
            }
            synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                try {
                    com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = com.android.server.devicepolicy.DevicePolicyManagerService.this.getProfileOwnerAdminLocked(android.os.UserHandle.getUserId(i));
                    if (profileOwnerAdminLocked == null) {
                        return false;
                    }
                    return com.android.server.devicepolicy.DevicePolicyManagerService.this.isSupervisionComponentLocked(profileOwnerAdminLocked.info.getComponent());
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public void notifyCrossProfileProvidersChanged(int i, java.util.List<java.lang.String> list) {
            java.util.ArrayList arrayList;
            synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                arrayList = new java.util.ArrayList(this.mWidgetProviderListeners);
            }
            int size = arrayList.size();
            for (int i2 = 0; i2 < size; i2++) {
                ((android.app.admin.DevicePolicyManagerInternal.OnCrossProfileWidgetProvidersChangeListener) arrayList.get(i2)).onCrossProfileWidgetProvidersChanged(i, list);
            }
        }

        public android.content.Intent createShowAdminSupportIntent(int i, boolean z) {
            if (com.android.server.devicepolicy.DevicePolicyManagerService.this.getEnforcingAdminAndUserDetailsInternal(i, null) != null || z) {
                return com.android.server.devicepolicy.DevicePolicyManagerService.this.createShowAdminSupportIntent(i);
            }
            return null;
        }

        public android.content.Intent createUserRestrictionSupportIntent(int i, java.lang.String str) {
            if (com.android.server.devicepolicy.DevicePolicyManagerService.this.getEnforcingAdminAndUserDetailsInternal(i, str) == null) {
                return null;
            }
            android.content.Intent createShowAdminSupportIntent = com.android.server.devicepolicy.DevicePolicyManagerService.this.createShowAdminSupportIntent(i);
            createShowAdminSupportIntent.putExtra("android.app.extra.RESTRICTION", str);
            return createShowAdminSupportIntent;
        }

        public boolean isUserAffiliatedWithDevice(int i) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.isUserAffiliatedWithDeviceLocked(i);
        }

        public boolean canSilentlyInstallPackage(java.lang.String str, int i) {
            if (str == null) {
                return false;
            }
            com.android.server.devicepolicy.CallerIdentity callerIdentity = new com.android.server.devicepolicy.CallerIdentity(i, null, null);
            if (!isUserAffiliatedWithDevice(android.os.UserHandle.getUserId(i)) || (!isActiveProfileOwner(i) && !com.android.server.devicepolicy.DevicePolicyManagerService.this.isDefaultDeviceOwner(callerIdentity) && !com.android.server.devicepolicy.DevicePolicyManagerService.this.isFinancedDeviceOwner(callerIdentity))) {
                return false;
            }
            return true;
        }

        public void reportSeparateProfileChallengeChanged(final int i) {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService$$ExternalSyntheticLambda0
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.LocalService.this.lambda$reportSeparateProfileChallengeChanged$0(i);
                }
            });
            android.app.admin.DevicePolicyEventLogger.createEvent(110).setBoolean(com.android.server.devicepolicy.DevicePolicyManagerService.this.isSeparateProfileChallengeEnabled(i)).write();
            com.android.server.devicepolicy.DevicePolicyManagerService.invalidateBinderCaches();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$reportSeparateProfileChallengeChanged$0(int i) throws java.lang.Exception {
            synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.updateMaximumTimeToLockLocked(i);
                com.android.server.devicepolicy.DevicePolicyManagerService.this.updatePasswordQualityCacheForUserGroup(i);
            }
        }

        public java.lang.CharSequence getPrintingDisabledReasonForUser(int i) {
            synchronized (com.android.server.devicepolicy.DevicePolicyManagerService.this.getLockObject()) {
                try {
                    if (!com.android.server.devicepolicy.DevicePolicyManagerService.this.mUserManager.hasUserRestriction("no_printing", android.os.UserHandle.of(i))) {
                        com.android.server.utils.Slogf.e(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "printing is enabled for user %d", java.lang.Integer.valueOf(i));
                        return null;
                    }
                    final java.lang.String profileOwnerPackage = com.android.server.devicepolicy.DevicePolicyManagerService.this.mOwners.getProfileOwnerPackage(i);
                    if (profileOwnerPackage == null) {
                        profileOwnerPackage = com.android.server.devicepolicy.DevicePolicyManagerService.this.mOwners.getDeviceOwnerPackageName();
                    }
                    final android.content.pm.PackageManager packageManager = com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.getPackageManager();
                    android.content.pm.PackageInfo packageInfo = (android.content.pm.PackageInfo) com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService$$ExternalSyntheticLambda2
                        public final java.lang.Object getOrThrow() {
                            android.content.pm.PackageInfo lambda$getPrintingDisabledReasonForUser$1;
                            lambda$getPrintingDisabledReasonForUser$1 = com.android.server.devicepolicy.DevicePolicyManagerService.LocalService.lambda$getPrintingDisabledReasonForUser$1(packageManager, profileOwnerPackage);
                            return lambda$getPrintingDisabledReasonForUser$1;
                        }
                    });
                    if (packageInfo == null) {
                        com.android.server.utils.Slogf.e(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "packageInfo is inexplicably null");
                        return null;
                    }
                    android.content.pm.ApplicationInfo applicationInfo = packageInfo.applicationInfo;
                    if (applicationInfo == null) {
                        com.android.server.utils.Slogf.e(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "appInfo is inexplicably null");
                        return null;
                    }
                    java.lang.CharSequence applicationLabel = packageManager.getApplicationLabel(applicationInfo);
                    if (applicationLabel == null) {
                        com.android.server.utils.Slogf.e(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "appLabel is inexplicably null");
                        return null;
                    }
                    return com.android.server.devicepolicy.DevicePolicyManagerService.this.getUpdatableString("Core.PRINTING_DISABLED_NAMED_ADMIN", android.R.string.policydesc_watchLogin, applicationLabel);
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ android.content.pm.PackageInfo lambda$getPrintingDisabledReasonForUser$1(android.content.pm.PackageManager packageManager, java.lang.String str) throws java.lang.Exception {
            try {
                return packageManager.getPackageInfo(str, 0);
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                com.android.server.utils.Slogf.e(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "getPackageInfo error", e);
                return null;
            }
        }

        protected android.app.admin.DevicePolicyCache getDevicePolicyCache() {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.mPolicyCache;
        }

        protected android.app.admin.DeviceStateCache getDeviceStateCache() {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.mStateCache;
        }

        public java.util.List<java.lang.String> getAllCrossProfilePackages(int i) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.getAllCrossProfilePackages(i);
        }

        public java.util.List<java.lang.String> getDefaultCrossProfilePackages() {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.getDefaultCrossProfilePackages();
        }

        public void broadcastIntentToManifestReceivers(android.content.Intent intent, android.os.UserHandle userHandle, boolean z) {
            java.util.Objects.requireNonNull(intent);
            java.util.Objects.requireNonNull(userHandle);
            com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Sending %s broadcast to manifest receivers.", intent.getAction());
            broadcastIntentToCrossProfileManifestReceivers(intent, userHandle, z);
            com.android.server.devicepolicy.DevicePolicyManagerService.this.broadcastExplicitIntentToRoleHolder(intent, "android.app.role.DEVICE_POLICY_MANAGEMENT", userHandle);
        }

        public void enforcePermission(java.lang.String str, java.lang.String str2, int i) {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.enforcePermission(str2, str, i);
        }

        public boolean hasPermission(java.lang.String str, java.lang.String str2, int i) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.hasPermission(str2, str, i);
        }

        private void broadcastIntentToCrossProfileManifestReceivers(android.content.Intent intent, android.os.UserHandle userHandle, boolean z) {
            int identifier = userHandle.getIdentifier();
            try {
                for (android.content.pm.ResolveInfo resolveInfo : com.android.server.devicepolicy.DevicePolicyManagerService.this.mIPackageManager.queryIntentReceivers(intent, (java.lang.String) null, 1024L, identifier).getList()) {
                    java.lang.String str = resolveInfo.getComponentInfo().packageName;
                    if (!checkCrossProfilePackagePermissions(str, identifier, z) && !checkModifyQuietModePermission(str, identifier)) {
                    }
                    com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Sending %s broadcast to %s.", intent.getAction(), str);
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.mContext.sendBroadcastAsUser(new android.content.Intent(intent).setComponent(resolveInfo.getComponentInfo().getComponentName()).addFlags(16777216), userHandle);
                }
            } catch (android.os.RemoteException e) {
                com.android.server.utils.Slogf.w(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Cannot get list of broadcast receivers for %s because: %s.", intent.getAction(), e);
            }
        }

        private boolean checkModifyQuietModePermission(java.lang.String str, int i) {
            try {
                android.content.pm.PackageManager packageManager = com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.getPackageManager();
                java.util.Objects.requireNonNull(str);
                java.lang.String str2 = str;
                android.content.pm.ApplicationInfo applicationInfoAsUser = packageManager.getApplicationInfoAsUser(str, 0, i);
                java.util.Objects.requireNonNull(applicationInfoAsUser);
                android.content.pm.ApplicationInfo applicationInfo = applicationInfoAsUser;
                if (android.app.ActivityManager.checkComponentPermission("android.permission.MODIFY_QUIET_MODE", applicationInfoAsUser.uid, -1, true) != 0) {
                    return false;
                }
                return true;
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                com.android.server.utils.Slogf.w(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Cannot find the package %s to check for permissions.", str);
                return false;
            }
        }

        private boolean checkCrossProfilePackagePermissions(java.lang.String str, int i, boolean z) {
            com.android.server.pm.pkg.AndroidPackage androidPackage = ((android.content.pm.PackageManagerInternal) com.android.server.LocalServices.getService(android.content.pm.PackageManagerInternal.class)).getPackage(str);
            if (androidPackage == null || !androidPackage.isCrossProfile()) {
                return false;
            }
            if (!z) {
                return true;
            }
            if (!isPackageEnabled(str, i)) {
                return false;
            }
            try {
                return ((android.content.pm.CrossProfileAppsInternal) com.android.server.LocalServices.getService(android.content.pm.CrossProfileAppsInternal.class)).verifyPackageHasInteractAcrossProfilePermission(str, i);
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                com.android.server.utils.Slogf.w(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Cannot find the package %s to check for permissions.", str);
                return false;
            }
        }

        private boolean isPackageEnabled(java.lang.String str, int i) {
            boolean z;
            int callingUid = android.os.Binder.getCallingUid();
            long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
            try {
                android.content.pm.PackageInfo packageInfo = com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.getPackageManagerInternal().getPackageInfo(str, 786432L, callingUid, i);
                if (packageInfo != null) {
                    if (packageInfo.applicationInfo.enabled) {
                        z = true;
                        return z;
                    }
                }
                z = false;
                return z;
            } finally {
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        }

        public android.content.ComponentName getProfileOwnerAsUser(int i) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isProfileOwner$72(i);
        }

        public android.content.ComponentName getDeviceOwnerComponent(boolean z) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.getDeviceOwnerComponent(z);
        }

        public int getDeviceOwnerUserId() {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.getDeviceOwnerUserId();
        }

        public boolean isDeviceOrProfileOwnerInCallingUser(java.lang.String str) {
            return isDeviceOwnerInCallingUser(str) || isProfileOwnerInCallingUser(str);
        }

        private boolean isDeviceOwnerInCallingUser(java.lang.String str) {
            android.content.ComponentName deviceOwnerComponent = com.android.server.devicepolicy.DevicePolicyManagerService.this.getDeviceOwnerComponent(true);
            return deviceOwnerComponent != null && str.equals(deviceOwnerComponent.getPackageName());
        }

        private boolean isProfileOwnerInCallingUser(java.lang.String str) {
            android.content.ComponentName profileOwnerAsUser = getProfileOwnerAsUser(android.os.UserHandle.getCallingUserId());
            return profileOwnerAsUser != null && str.equals(profileOwnerAsUser.getPackageName());
        }

        public boolean supportsResetOp(int i) {
            return i == 93 && com.android.server.LocalServices.getService(android.content.pm.CrossProfileAppsInternal.class) != null;
        }

        public void resetOp(int i, java.lang.String str, int i2) {
            if (i != 93) {
                throw new java.lang.IllegalArgumentException("Unsupported op for DPM reset: " + i);
            }
            ((android.content.pm.CrossProfileAppsInternal) com.android.server.LocalServices.getService(android.content.pm.CrossProfileAppsInternal.class)).setInteractAcrossProfilesAppOp(str, findInteractAcrossProfilesResetMode(str), i2);
        }

        public void notifyUnsafeOperationStateChanged(android.app.admin.DevicePolicySafetyChecker devicePolicySafetyChecker, int i, boolean z) {
            com.android.internal.util.Preconditions.checkArgument(com.android.server.devicepolicy.DevicePolicyManagerService.this.mSafetyChecker == devicePolicySafetyChecker, "invalid checker: should be %s, was %s", new java.lang.Object[]{com.android.server.devicepolicy.DevicePolicyManagerService.this.mSafetyChecker, devicePolicySafetyChecker});
            android.os.Bundle bundle = new android.os.Bundle();
            bundle.putInt("android.app.extra.OPERATION_SAFETY_REASON", i);
            bundle.putBoolean("android.app.extra.OPERATION_SAFETY_STATE", z);
            if (com.android.server.devicepolicy.DevicePolicyManagerService.this.mOwners.hasDeviceOwner()) {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.sendDeviceOwnerCommand("android.app.action.OPERATION_SAFETY_STATE_CHANGED", bundle);
            }
            java.util.Iterator<java.lang.Integer> it = com.android.server.devicepolicy.DevicePolicyManagerService.this.mOwners.getProfileOwnerKeys().iterator();
            while (it.hasNext()) {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.sendProfileOwnerCommand("android.app.action.OPERATION_SAFETY_STATE_CHANGED", bundle, it.next().intValue());
            }
        }

        private int findInteractAcrossProfilesResetMode(java.lang.String str) {
            if (getDefaultCrossProfilePackages().contains(str)) {
                return 0;
            }
            return android.app.AppOpsManager.opToDefaultMode(93);
        }

        public boolean isUserOrganizationManaged(int i) {
            return getDeviceStateCache().isUserOrganizationManaged(i);
        }

        public boolean isApplicationExemptionsFlagEnabled() {
            return android.provider.DeviceConfig.getBoolean("device_policy_manager", com.android.server.devicepolicy.DevicePolicyManagerService.APPLICATION_EXEMPTIONS_FLAG, true);
        }

        public java.util.List<android.os.Bundle> getApplicationRestrictionsPerAdminForUser(final java.lang.String str, final int i) {
            if (android.os.UserHandle.getCallingUserId() != i || !android.os.UserHandle.isSameApp(android.os.Binder.getCallingUid(), com.android.server.devicepolicy.DevicePolicyManagerService.this.getUidForPackage(str, i))) {
                int callingUid = android.os.Binder.getCallingUid();
                if (!android.os.UserHandle.isSameApp(callingUid, 1000) && callingUid != 0) {
                    throw new java.lang.SecurityException("Only system may: get application restrictions for other user/app " + str);
                }
            }
            java.util.LinkedHashMap localPoliciesSetByAdmins = com.android.server.devicepolicy.DevicePolicyManagerService.this.mDevicePolicyEngine.getLocalPoliciesSetByAdmins(com.android.server.devicepolicy.PolicyDefinition.APPLICATION_RESTRICTIONS(str), i);
            java.util.ArrayList arrayList = new java.util.ArrayList();
            java.util.Iterator it = localPoliciesSetByAdmins.keySet().iterator();
            while (it.hasNext()) {
                arrayList.add((android.os.Bundle) ((android.app.admin.PolicyValue) localPoliciesSetByAdmins.get((com.android.server.devicepolicy.EnforcingAdmin) it.next())).getValue());
            }
            if (!arrayList.isEmpty()) {
                return arrayList;
            }
            return (java.util.List) com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService$$ExternalSyntheticLambda1
                public final java.lang.Object getOrThrow() {
                    java.util.List lambda$getApplicationRestrictionsPerAdminForUser$2;
                    lambda$getApplicationRestrictionsPerAdminForUser$2 = com.android.server.devicepolicy.DevicePolicyManagerService.LocalService.this.lambda$getApplicationRestrictionsPerAdminForUser$2(str, i);
                    return lambda$getApplicationRestrictionsPerAdminForUser$2;
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ java.util.List lambda$getApplicationRestrictionsPerAdminForUser$2(java.lang.String str, int i) throws java.lang.Exception {
            android.os.Bundle applicationRestrictions = com.android.server.devicepolicy.DevicePolicyManagerService.this.mUserManager.getApplicationRestrictions(str, android.os.UserHandle.of(i));
            if (applicationRestrictions == null || applicationRestrictions.isEmpty()) {
                return new java.util.ArrayList();
            }
            return java.util.List.of(applicationRestrictions);
        }

        public java.util.List<android.os.UserManager.EnforcingUser> getUserRestrictionSources(java.lang.String str, int i) {
            com.android.server.devicepolicy.PolicyDefinition<java.lang.Boolean> policyDefinitionForUserRestriction = com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction(str);
            java.util.Set<com.android.server.devicepolicy.EnforcingAdmin> keySet = com.android.server.devicepolicy.DevicePolicyManagerService.this.mDevicePolicyEngine.getLocalPoliciesSetByAdmins(policyDefinitionForUserRestriction, i).keySet();
            java.util.Set<com.android.server.devicepolicy.EnforcingAdmin> keySet2 = com.android.server.devicepolicy.DevicePolicyManagerService.this.mDevicePolicyEngine.getGlobalPoliciesSetByAdmins(policyDefinitionForUserRestriction).keySet();
            java.util.ArrayList arrayList = new java.util.ArrayList();
            arrayList.addAll(getEnforcingUsers(keySet));
            arrayList.addAll(getEnforcingUsers(keySet2));
            return arrayList;
        }

        public void enforceSecurityLoggingPolicy(boolean z) {
            if (!android.app.admin.flags.Flags.securityLogV2Enabled()) {
                return;
            }
            com.android.server.devicepolicy.DevicePolicyManagerService.this.enforceLoggingPolicy(z, java.lang.Boolean.TRUE.equals((java.lang.Boolean) com.android.server.devicepolicy.DevicePolicyManagerService.this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.AUDIT_LOGGING, -1)));
        }

        public void enforceAuditLoggingPolicy(boolean z) {
            if (!android.app.admin.flags.Flags.securityLogV2Enabled()) {
                return;
            }
            com.android.server.devicepolicy.DevicePolicyManagerService.this.enforceLoggingPolicy(java.lang.Boolean.TRUE.equals((java.lang.Boolean) com.android.server.devicepolicy.DevicePolicyManagerService.this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.SECURITY_LOGGING, -1)), z);
        }

        private java.util.List<android.os.UserManager.EnforcingUser> getEnforcingUsers(java.util.Set<com.android.server.devicepolicy.EnforcingAdmin> set) {
            java.util.ArrayList arrayList = new java.util.ArrayList();
            android.content.ComponentName deviceOwnerComponent = com.android.server.devicepolicy.DevicePolicyManagerService.this.mOwners.getDeviceOwnerComponent();
            for (com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin : set) {
                if (deviceOwnerComponent != null && deviceOwnerComponent.getPackageName().equals(enforcingAdmin.getPackageName())) {
                    arrayList.add(new android.os.UserManager.EnforcingUser(enforcingAdmin.getUserId(), 2));
                } else {
                    arrayList.add(new android.os.UserManager.EnforcingUser(enforcingAdmin.getUserId(), 4));
                }
            }
            return arrayList;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void enforceLoggingPolicy(boolean z, boolean z2) {
        com.android.server.utils.Slogf.i(LOG_TAG, "Enforcing logging policy, security: %b audit: %b", java.lang.Boolean.valueOf(z), java.lang.Boolean.valueOf(z2));
        this.mInjector.securityLogSetLoggingEnabledProperty(z || z2);
        setLoggingConfiguration(z, z2);
    }

    private void setLoggingConfiguration(boolean z, boolean z2) {
        this.mSecurityLogMonitor.setLoggingParams(getSecurityLoggingEnabledUser(), z, z2);
        if (z || z2) {
            synchronized (getLockObject()) {
                maybePauseDeviceWideLoggingLocked();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public android.content.Intent createShowAdminSupportIntent(int i) {
        android.content.Intent intent = new android.content.Intent("android.settings.SHOW_ADMIN_SUPPORT_DETAILS");
        intent.putExtra("android.intent.extra.USER_ID", i);
        intent.setFlags(268435456);
        return intent;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public android.os.Bundle getEnforcingAdminAndUserDetailsInternal(int i, java.lang.String str) {
        if (str == null || "policy_suspend_packages".equals(str)) {
            android.content.ComponentName profileOwnerComponent = this.mOwners.getProfileOwnerComponent(i);
            if (profileOwnerComponent != null) {
                android.os.Bundle bundle = new android.os.Bundle();
                bundle.putInt("android.intent.extra.USER_ID", i);
                bundle.putParcelable("android.app.extra.DEVICE_ADMIN", profileOwnerComponent);
                return bundle;
            }
            android.util.Pair<java.lang.Integer, android.content.ComponentName> deviceOwnerUserIdAndComponent = this.mOwners.getDeviceOwnerUserIdAndComponent();
            if (deviceOwnerUserIdAndComponent != null && ((java.lang.Integer) deviceOwnerUserIdAndComponent.first).intValue() == i) {
                android.os.Bundle bundle2 = new android.os.Bundle();
                bundle2.putInt("android.intent.extra.USER_ID", i);
                bundle2.putParcelable("android.app.extra.DEVICE_ADMIN", (android.os.Parcelable) deviceOwnerUserIdAndComponent.second);
                return bundle2;
            }
        } else if ("policy_disable_screen_capture".equals(str)) {
            java.lang.Boolean bool = (java.lang.Boolean) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED, i);
            if (bool != null && bool.booleanValue()) {
                android.os.Bundle bundle3 = new android.os.Bundle();
                bundle3.putInt("android.intent.extra.USER_ID", i);
                return bundle3;
            }
        } else {
            if (!"policy_disable_camera".equals(str)) {
                long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                try {
                    if (getEnforcingAdminsForRestrictionInternal(i, str).size() == 0) {
                        return null;
                    }
                    com.android.server.devicepolicy.ActiveAdmin mostProbableDPCAdminForLocalPolicy = getMostProbableDPCAdminForLocalPolicy(i);
                    if (mostProbableDPCAdminForLocalPolicy == null) {
                        return null;
                    }
                    android.os.Bundle bundle4 = new android.os.Bundle();
                    bundle4.putInt("android.intent.extra.USER_ID", mostProbableDPCAdminForLocalPolicy.getUserHandle().getIdentifier());
                    bundle4.putParcelable("android.app.extra.DEVICE_ADMIN", mostProbableDPCAdminForLocalPolicy.info.getComponent());
                    return bundle4;
                } finally {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                }
            }
            java.lang.Boolean bool2 = (java.lang.Boolean) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction("no_camera"), i);
            if (bool2 != null && bool2.booleanValue()) {
                android.os.Bundle bundle5 = new android.os.Bundle();
                bundle5.putInt("android.intent.extra.USER_ID", i);
                return bundle5;
            }
        }
        return null;
    }

    private java.util.Set<android.app.admin.EnforcingAdmin> getEnforcingAdminsForRestrictionInternal(int i, @android.annotation.NonNull java.lang.String str) {
        java.util.Objects.requireNonNull(str);
        java.util.HashSet hashSet = new java.util.HashSet();
        if ("policy_suspend_packages".equals(str)) {
            android.content.ComponentName profileOwnerComponent = this.mOwners.getProfileOwnerComponent(i);
            if (profileOwnerComponent != null) {
                hashSet.add(com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(profileOwnerComponent, i).getParcelableAdmin());
                return hashSet;
            }
            android.util.Pair<java.lang.Integer, android.content.ComponentName> deviceOwnerUserIdAndComponent = this.mOwners.getDeviceOwnerUserIdAndComponent();
            if (deviceOwnerUserIdAndComponent != null && ((java.lang.Integer) deviceOwnerUserIdAndComponent.first).intValue() == i) {
                hashSet.add(com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin((android.content.ComponentName) deviceOwnerUserIdAndComponent.second, ((java.lang.Integer) deviceOwnerUserIdAndComponent.first).intValue()).getParcelableAdmin());
                return hashSet;
            }
        } else {
            long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
            try {
                com.android.server.devicepolicy.PolicyDefinition<java.lang.Boolean> policyDefinitionForRestriction = getPolicyDefinitionForRestriction(str);
                java.lang.Boolean bool = (java.lang.Boolean) this.mDevicePolicyEngine.getResolvedPolicy(policyDefinitionForRestriction, i);
                if (bool != null && bool.booleanValue()) {
                    java.util.LinkedHashMap globalPoliciesSetByAdmins = this.mDevicePolicyEngine.getGlobalPoliciesSetByAdmins(policyDefinitionForRestriction);
                    for (com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin : globalPoliciesSetByAdmins.keySet()) {
                        if (globalPoliciesSetByAdmins.get(enforcingAdmin) != null && java.lang.Boolean.TRUE.equals(((android.app.admin.PolicyValue) globalPoliciesSetByAdmins.get(enforcingAdmin)).getValue())) {
                            hashSet.add(enforcingAdmin.getParcelableAdmin());
                        }
                    }
                    java.util.LinkedHashMap localPoliciesSetByAdmins = this.mDevicePolicyEngine.getLocalPoliciesSetByAdmins(policyDefinitionForRestriction, i);
                    for (com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin2 : localPoliciesSetByAdmins.keySet()) {
                        if (localPoliciesSetByAdmins.get(enforcingAdmin2) != null && java.lang.Boolean.TRUE.equals(((android.app.admin.PolicyValue) localPoliciesSetByAdmins.get(enforcingAdmin2)).getValue())) {
                            hashSet.add(enforcingAdmin2.getParcelableAdmin());
                        }
                    }
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    return hashSet;
                }
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            } catch (java.lang.Throwable th) {
                this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                throw th;
            }
        }
        return hashSet;
    }

    private static com.android.server.devicepolicy.PolicyDefinition<java.lang.Boolean> getPolicyDefinitionForRestriction(@android.annotation.NonNull java.lang.String str) {
        java.util.Objects.requireNonNull(str);
        if ("policy_disable_camera".equals(str)) {
            return com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction("no_camera");
        }
        if ("policy_disable_screen_capture".equals(str)) {
            return com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED;
        }
        return com.android.server.devicepolicy.PolicyDefinition.getPolicyDefinitionForUserRestriction(str);
    }

    private java.util.List<android.os.UserManager.EnforcingUser> getDevicePolicySources(java.util.List<android.os.UserManager.EnforcingUser> list) {
        int size = list.size();
        java.util.ArrayList arrayList = new java.util.ArrayList(size);
        for (int i = 0; i < size; i++) {
            android.os.UserManager.EnforcingUser enforcingUser = list.get(i);
            int userRestrictionSource = enforcingUser.getUserRestrictionSource();
            if (userRestrictionSource != 4 && userRestrictionSource != 2) {
                com.android.server.utils.Slogf.d(LOG_TAG, "excluding source of type %s at index %d", userRestrictionSourceToString(userRestrictionSource), java.lang.Integer.valueOf(i));
            } else {
                arrayList.add(enforcingUser);
            }
        }
        return arrayList;
    }

    private static java.lang.String userRestrictionSourceToString(int i) {
        return android.util.DebugUtils.flagsToString(android.os.UserManager.class, "RESTRICTION_", i);
    }

    public android.os.Bundle getEnforcingAdminAndUserDetails(int i, java.lang.String str) {
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()));
        return getEnforcingAdminAndUserDetailsInternal(i, str);
    }

    public java.util.List<android.app.admin.EnforcingAdmin> getEnforcingAdminsForRestriction(int i, java.lang.String str) {
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()));
        return new java.util.ArrayList(getEnforcingAdminsForRestrictionInternal(i, str));
    }

    public android.content.Intent createAdminSupportIntent(java.lang.String str) {
        java.util.Objects.requireNonNull(str);
        int userId = getCallerIdentity().getUserId();
        if (getEnforcingAdminAndUserDetailsInternal(userId, str) == null) {
            return null;
        }
        android.content.Intent createShowAdminSupportIntent = createShowAdminSupportIntent(userId);
        createShowAdminSupportIntent.putExtra("android.app.extra.RESTRICTION", str);
        return createShowAdminSupportIntent;
    }

    private static boolean isLimitPasswordAllowed(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i) {
        if (activeAdmin.mPasswordPolicy.quality < i) {
            return false;
        }
        return activeAdmin.isPermissionBased || activeAdmin.info.usesPolicy(0);
    }

    public void setCredentialManagerPolicy(android.app.admin.PackagePolicy packagePolicy) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(canWriteCredentialManagerPolicy(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                if (java.util.Objects.equals(profileOwnerOrDeviceOwnerLocked.mCredentialManagerPolicy, packagePolicy)) {
                    return;
                }
                profileOwnerOrDeviceOwnerLocked.mCredentialManagerPolicy = packagePolicy;
                saveSettingsLocked(callerIdentity.getUserId());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean canWriteCredentialManagerPolicy(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return (isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId())) || isDefaultDeviceOwner(callerIdentity) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS");
    }

    public android.app.admin.PackagePolicy getCredentialManagerPolicy(int i) {
        android.app.admin.PackagePolicy packagePolicy;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(canWriteCredentialManagerPolicy(callerIdentity) || canQueryAdminPolicy(callerIdentity));
        if (i != callerIdentity.getUserId()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS"));
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(i);
                packagePolicy = profileOwnerOrDeviceOwnerLocked != null ? profileOwnerOrDeviceOwnerLocked.mCredentialManagerPolicy : null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return packagePolicy;
    }

    public void setSystemUpdatePolicy(android.content.ComponentName componentName, java.lang.String str, android.app.admin.SystemUpdatePolicy systemUpdatePolicy) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        boolean z;
        if (systemUpdatePolicy != null) {
            systemUpdatePolicy.validateType();
            systemUpdatePolicy.validateFreezePeriods();
            android.util.Pair<java.time.LocalDate, java.time.LocalDate> systemUpdateFreezePeriodRecord = this.mOwners.getSystemUpdateFreezePeriodRecord();
            systemUpdatePolicy.validateAgainstPreviousFreezePeriod((java.time.LocalDate) systemUpdateFreezePeriodRecord.first, (java.time.LocalDate) systemUpdateFreezePeriodRecord.second, java.time.LocalDate.now());
        }
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    callerIdentity = getCallerIdentity(componentName, str);
                    enforcePermission("android.permission.MANAGE_DEVICE_POLICY_SYSTEM_UPDATES", callerIdentity.getPackageName(), -1);
                } else {
                    callerIdentity = getCallerIdentity(componentName);
                    if (!isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) && !isDefaultDeviceOwner(callerIdentity)) {
                        z = false;
                        com.android.internal.util.Preconditions.checkCallAuthorization(z);
                    }
                    z = true;
                    com.android.internal.util.Preconditions.checkCallAuthorization(z);
                }
                checkCanExecuteOrThrowUnsafe(14);
                if (systemUpdatePolicy == null) {
                    this.mOwners.clearSystemUpdatePolicy();
                } else {
                    this.mOwners.setSystemUpdatePolicy(systemUpdatePolicy);
                    updateSystemUpdateFreezePeriodsRecord(false);
                }
                this.mOwners.writeDeviceOwner();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda167
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setSystemUpdatePolicy$125();
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(50).setAdmin(callerIdentity.getPackageName()).setInt(systemUpdatePolicy != null ? systemUpdatePolicy.getPolicyType() : 0).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setSystemUpdatePolicy$125() throws java.lang.Exception {
        this.mContext.sendBroadcastAsUser(new android.content.Intent("android.app.action.SYSTEM_UPDATE_POLICY_CHANGED"), android.os.UserHandle.SYSTEM);
    }

    public android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy() {
        synchronized (getLockObject()) {
            try {
                android.app.admin.SystemUpdatePolicy systemUpdatePolicy = this.mOwners.getSystemUpdatePolicy();
                if (systemUpdatePolicy == null || systemUpdatePolicy.isValid()) {
                    return systemUpdatePolicy;
                }
                com.android.server.utils.Slogf.w(LOG_TAG, "Stored system update policy is invalid, return null instead.");
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private static boolean withinRange(android.util.Pair<java.time.LocalDate, java.time.LocalDate> pair, java.time.LocalDate localDate) {
        return (localDate.isBefore((java.time.chrono.ChronoLocalDate) pair.first) || localDate.isAfter((java.time.chrono.ChronoLocalDate) pair.second)) ? false : true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void updateSystemUpdateFreezePeriodsRecord(boolean z) {
        boolean systemUpdateFreezePeriodRecord;
        com.android.server.utils.Slogf.d(LOG_TAG, "updateSystemUpdateFreezePeriodsRecord");
        synchronized (getLockObject()) {
            try {
                android.app.admin.SystemUpdatePolicy systemUpdatePolicy = this.mOwners.getSystemUpdatePolicy();
                if (systemUpdatePolicy == null) {
                    return;
                }
                java.time.LocalDate now = java.time.LocalDate.now();
                android.util.Pair currentFreezePeriod = systemUpdatePolicy.getCurrentFreezePeriod(now);
                if (currentFreezePeriod == null) {
                    return;
                }
                android.util.Pair<java.time.LocalDate, java.time.LocalDate> systemUpdateFreezePeriodRecord2 = this.mOwners.getSystemUpdateFreezePeriodRecord();
                java.time.LocalDate localDate = (java.time.LocalDate) systemUpdateFreezePeriodRecord2.first;
                java.time.LocalDate localDate2 = (java.time.LocalDate) systemUpdateFreezePeriodRecord2.second;
                if (localDate2 == null || localDate == null) {
                    systemUpdateFreezePeriodRecord = this.mOwners.setSystemUpdateFreezePeriodRecord(now, now);
                } else if (now.equals(localDate2.plusDays(1L))) {
                    systemUpdateFreezePeriodRecord = this.mOwners.setSystemUpdateFreezePeriodRecord(localDate, now);
                } else if (now.isAfter(localDate2.plusDays(1L))) {
                    if (withinRange(currentFreezePeriod, localDate) && withinRange(currentFreezePeriod, localDate2)) {
                        systemUpdateFreezePeriodRecord = this.mOwners.setSystemUpdateFreezePeriodRecord(localDate, now);
                    } else {
                        systemUpdateFreezePeriodRecord = this.mOwners.setSystemUpdateFreezePeriodRecord(now, now);
                    }
                } else if (now.isBefore(localDate)) {
                    systemUpdateFreezePeriodRecord = this.mOwners.setSystemUpdateFreezePeriodRecord(now, now);
                } else {
                    systemUpdateFreezePeriodRecord = false;
                }
                if (systemUpdateFreezePeriodRecord && z) {
                    this.mOwners.writeDeviceOwner();
                }
            } finally {
            }
        }
    }

    public void clearSystemUpdatePolicyFreezePeriodRecord() {
        com.android.internal.util.Preconditions.checkCallAuthorization(isAdb(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.CLEAR_FREEZE_PERIOD"), "Caller must be shell, or hold CLEAR_FREEZE_PERIOD permission to call clearSystemUpdatePolicyFreezePeriodRecord");
        synchronized (getLockObject()) {
            try {
                com.android.server.utils.Slogf.i(LOG_TAG, "Clear freeze period record: " + this.mOwners.getSystemUpdateFreezePeriodRecordAsString());
                if (this.mOwners.setSystemUpdateFreezePeriodRecord(null, null)) {
                    this.mOwners.writeDeviceOwner();
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean isUidDeviceOwnerLocked(int i) {
        ensureLocked();
        java.lang.String packageName = this.mOwners.getDeviceOwnerComponent().getPackageName();
        try {
            java.lang.String[] packagesForUid = this.mInjector.getIPackageManager().getPackagesForUid(i);
            if (packagesForUid == null) {
                return false;
            }
            for (java.lang.String str : packagesForUid) {
                if (packageName.equals(str)) {
                    return true;
                }
            }
            return false;
        } catch (android.os.RemoteException e) {
            return false;
        }
    }

    public void notifyPendingSystemUpdate(@android.annotation.Nullable android.app.admin.SystemUpdateInfo systemUpdateInfo) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.NOTIFY_PENDING_SYSTEM_UPDATE"), "Only the system update service can broadcast update information");
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda170
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$notifyPendingSystemUpdate$126();
            }
        });
        if (!this.mOwners.saveSystemUpdateInfo(systemUpdateInfo)) {
            return;
        }
        final android.content.Intent putExtra = new android.content.Intent("android.app.action.NOTIFY_PENDING_SYSTEM_UPDATE").putExtra("android.app.extra.SYSTEM_UPDATE_RECEIVED_TIME", systemUpdateInfo == null ? -1L : systemUpdateInfo.getReceivedTime());
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda171
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$notifyPendingSystemUpdate$127(putExtra);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$notifyPendingSystemUpdate$126() throws java.lang.Exception {
        if (!this.mUserManager.getUserInfo(android.os.UserHandle.getCallingUserId()).isMain()) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Only the system update service in the main user can broadcast update information.");
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$notifyPendingSystemUpdate$127(android.content.Intent intent) throws java.lang.Exception {
        android.content.ComponentName profileOwnerComponent;
        synchronized (getLockObject()) {
            try {
                if (this.mOwners.hasDeviceOwner()) {
                    android.os.UserHandle of = android.os.UserHandle.of(this.mOwners.getDeviceOwnerUserId());
                    intent.setComponent(this.mOwners.getDeviceOwnerComponent());
                    this.mContext.sendBroadcastAsUser(intent, of);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        try {
            for (int i : this.mInjector.getIActivityManager().getRunningUserIds()) {
                synchronized (getLockObject()) {
                    profileOwnerComponent = this.mOwners.getProfileOwnerComponent(i);
                }
                if (profileOwnerComponent != null) {
                    intent.setComponent(profileOwnerComponent);
                    this.mContext.sendBroadcastAsUser(intent, android.os.UserHandle.of(i));
                }
                if (android.app.admin.flags.Flags.permissionMigrationForZeroTrustImplEnabled()) {
                    android.os.UserHandle of2 = android.os.UserHandle.of(i);
                    java.lang.String roleHolderPackageNameOnUser = getRoleHolderPackageNameOnUser("android.app.role.DEVICE_POLICY_MANAGEMENT", i);
                    if (roleHolderPackageNameOnUser != null) {
                        broadcastExplicitIntentToPackage(intent, roleHolderPackageNameOnUser, of2);
                    }
                }
            }
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Could not retrieve the list of running users", e);
        }
    }

    public android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName componentName, java.lang.String str) {
        if (android.app.admin.flags.Flags.permissionMigrationForZeroTrustImplEnabled()) {
            com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
            enforcePermissions(new java.lang.String[]{"android.permission.NOTIFY_PENDING_SYSTEM_UPDATE", "android.permission.MANAGE_DEVICE_POLICY_QUERY_SYSTEM_UPDATES"}, callerIdentity.getPackageName(), callerIdentity.getUserId());
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.server.devicepolicy.CallerIdentity callerIdentity2 = getCallerIdentity(componentName);
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity2) || isProfileOwner(callerIdentity2));
        }
        return this.mOwners.getSystemUpdateInfo();
    }

    public void setPermissionPolicy(android.content.ComponentName componentName, java.lang.String str, int i) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-permission-grant")));
        checkCanExecuteOrThrowUnsafe(38);
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
                if (lambda$getUserDataUnchecked$5.mPermissionPolicy != i) {
                    lambda$getUserDataUnchecked$5.mPermissionPolicy = i;
                    this.mPolicyCache.setPermissionPolicy(userId, i);
                    saveSettingsLocked(userId);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(18).setAdmin(callerIdentity.getPackageName()).setInt(i).setBoolean(componentName == null).write();
    }

    private void updatePermissionPolicyCache(int i) {
        synchronized (getLockObject()) {
            this.mPolicyCache.setPermissionPolicy(i, lambda$getUserDataUnchecked$5(i).mPermissionPolicy);
        }
    }

    public int getPermissionPolicy(android.content.ComponentName componentName) throws android.os.RemoteException {
        return this.mPolicyCache.getPermissionPolicy(android.os.UserHandle.getCallingUserId());
    }

    public void setPermissionGrantState(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, java.lang.String str3, int i, final android.os.RemoteCallback remoteCallback) throws android.os.RemoteException {
        long binderClearCallingIdentity;
        com.android.server.devicepolicy.DevicePolicyManagerService.Injector injector;
        com.android.server.devicepolicy.DevicePolicyManagerService.Injector injector2;
        java.util.Objects.requireNonNull(remoteCallback);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        checkCanExecuteOrThrowUnsafe(37);
        synchronized (getLockObject()) {
            try {
                if (isFinancedDeviceOwner(callerIdentity)) {
                    enforcePermissionGrantStateOnFinancedDevice(str2, str3);
                }
            } finally {
            }
        }
        if (isUnicornFlagEnabled()) {
            enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS", str, callerIdentity.getUserId());
            if (SENSOR_PERMISSIONS.contains(str3) && i == 1 && (!canAdminGrantSensorsPermissions() || isCallerDelegate(callerIdentity))) {
                if (this.mInjector.isChangeEnabled(THROW_SECURITY_EXCEPTION_FOR_SENSOR_PERMISSIONS, callerIdentity.getPackageName(), callerIdentity.getUserId())) {
                    throw new java.lang.SecurityException("Caller not permitted to grant sensor permissions.");
                }
                remoteCallback.sendResult(android.os.Bundle.EMPTY);
                return;
            } else if (!canGrantPermission(callerIdentity, str3, str2)) {
                remoteCallback.sendResult((android.os.Bundle) null);
                return;
            }
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || isFinancedDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-permission-grant")));
            synchronized (getLockObject()) {
                binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                try {
                    try {
                    } catch (java.lang.SecurityException e) {
                        com.android.server.utils.Slogf.e(LOG_TAG, "Could not set permission grant state", e);
                        remoteCallback.sendResult((android.os.Bundle) null);
                        injector = this.mInjector;
                    }
                    if (!(getTargetSdk(callerIdentity.getPackageName(), callerIdentity.getUserId()) >= 29) && getTargetSdk(str2, callerIdentity.getUserId()) < 23) {
                        remoteCallback.sendResult((android.os.Bundle) null);
                        return;
                    } else if (!isRuntimePermission(str3)) {
                        remoteCallback.sendResult((android.os.Bundle) null);
                        return;
                    } else {
                        injector = this.mInjector;
                        injector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    }
                } finally {
                }
            }
        }
        synchronized (getLockObject()) {
            binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
            try {
                try {
                    final boolean z = getTargetSdk(callerIdentity.getPackageName(), callerIdentity.getUserId()) >= 29;
                    if (i == 1 || i == 2 || i == 0) {
                        this.mInjector.getPermissionControllerManager(callerIdentity.getUserHandle()).setRuntimePermissionGrantStateByDeviceAdmin(callerIdentity.getPackageName(), new android.permission.AdminPermissionControlParams(str2, str3, i, canAdminGrantSensorsPermissions()), this.mContext.getMainExecutor(), new java.util.function.Consumer() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda147
                            @Override // java.util.function.Consumer
                            public final void accept(java.lang.Object obj) {
                                com.android.server.devicepolicy.DevicePolicyManagerService.lambda$setPermissionGrantState$129(z, remoteCallback, (java.lang.Boolean) obj);
                            }
                        });
                    }
                    injector2 = this.mInjector;
                } finally {
                }
            } catch (java.lang.SecurityException e2) {
                com.android.server.utils.Slogf.e(LOG_TAG, "Could not set permission grant state", e2);
                remoteCallback.sendResult((android.os.Bundle) null);
                injector2 = this.mInjector;
            }
            injector2.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(19).setAdmin(callerIdentity.getPackageName()).setStrings(new java.lang.String[]{str3}).setInt(i).setBoolean(isCallerDelegate(callerIdentity)).write();
    }

    private /* synthetic */ java.lang.Integer lambda$setPermissionGrantState$128(java.lang.String str, java.lang.String str2, com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        return java.lang.Integer.valueOf(getPermissionGrantStateForUser(str, str2, callerIdentity, callerIdentity.getUserId()));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$setPermissionGrantState$129(boolean z, android.os.RemoteCallback remoteCallback, java.lang.Boolean bool) {
        if (z && !bool.booleanValue()) {
            remoteCallback.sendResult((android.os.Bundle) null);
        } else {
            remoteCallback.sendResult(android.os.Bundle.EMPTY);
        }
    }

    private boolean canGrantPermission(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str, java.lang.String str2) {
        return ((getTargetSdk(callerIdentity.getPackageName(), callerIdentity.getUserId()) >= 29) || getTargetSdk(str2, callerIdentity.getUserId()) >= 23) && isRuntimePermission(str);
    }

    private void enforcePermissionGrantStateOnFinancedDevice(java.lang.String str, java.lang.String str2) {
        if (!"android.permission.READ_PHONE_STATE".equals(str2)) {
            throw new java.lang.SecurityException(str2 + " cannot be used when managing a financed device for permission grant state");
        }
        if (!this.mOwners.getDeviceOwnerPackageName().equals(str)) {
            throw new java.lang.SecurityException("Device owner package is the only package that can be used for permission grant state when managing a financed device");
        }
    }

    public int getPermissionGrantState(android.content.ComponentName componentName, java.lang.String str, final java.lang.String str2, final java.lang.String str3) throws android.os.RemoteException {
        int intValue;
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        if (isUnicornFlagEnabled()) {
            enforceCanQuery("android.permission.MANAGE_DEVICE_POLICY_RUNTIME_PERMISSIONS", callerIdentity.getPackageName(), callerIdentity.getUserId());
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(callerIdentity) || (callerIdentity.hasAdminComponent() && (isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || isFinancedDeviceOwner(callerIdentity))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-permission-grant")));
        }
        synchronized (getLockObject()) {
            try {
                if (isFinancedDeviceOwner(callerIdentity)) {
                    enforcePermissionGrantStateOnFinancedDevice(str2, str3);
                }
                intValue = ((java.lang.Integer) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda103
                    public final java.lang.Object getOrThrow() {
                        java.lang.Integer lambda$getPermissionGrantState$130;
                        lambda$getPermissionGrantState$130 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getPermissionGrantState$130(str2, str3, callerIdentity);
                        return lambda$getPermissionGrantState$130;
                    }
                })).intValue();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return intValue;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$getPermissionGrantState$130(java.lang.String str, java.lang.String str2, com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        return java.lang.Integer.valueOf(getPermissionGrantStateForUser(str, str2, callerIdentity, callerIdentity.getUserId()));
    }

    private int getPermissionGrantStateForUser(java.lang.String str, java.lang.String str2, com.android.server.devicepolicy.CallerIdentity callerIdentity, int i) throws android.os.RemoteException {
        int i2;
        if (getTargetSdk(callerIdentity.getPackageName(), callerIdentity.getUserId()) < 29) {
            i2 = this.mIPackageManager.checkPermission(str2, str, i);
        } else {
            com.android.server.pm.PackageManagerLocal.UnfilteredSnapshot withUnfilteredSnapshot = this.mInjector.getPackageManagerLocal().withUnfilteredSnapshot();
            try {
                com.android.server.pm.pkg.PackageState packageState = withUnfilteredSnapshot.getPackageStates().get(str);
                if (packageState == null) {
                    android.util.Slog.w(LOG_TAG, "Can't get permission state for missing package " + str);
                    withUnfilteredSnapshot.close();
                    return 0;
                }
                if (!packageState.getUserStateOrDefault(i).isInstalled()) {
                    android.util.Slog.w(LOG_TAG, "Can't get permission state for uninstalled package " + str);
                    withUnfilteredSnapshot.close();
                    return 0;
                }
                int i3 = -1;
                if (android.content.PermissionChecker.checkPermissionForPreflight(this.mContext, str2, -1, android.os.UserHandle.getUid(i, packageState.getAppId()), str) == 0) {
                    i3 = 0;
                }
                withUnfilteredSnapshot.close();
                i2 = i3;
            } catch (java.lang.Throwable th) {
                if (withUnfilteredSnapshot != null) {
                    try {
                        withUnfilteredSnapshot.close();
                    } catch (java.lang.Throwable th2) {
                        th.addSuppressed(th2);
                    }
                }
                throw th;
            }
        }
        if ((this.mInjector.getPackageManager().getPermissionFlags(str2, str, android.os.UserHandle.of(i)) & 4) != 4) {
            return 0;
        }
        if (i2 == 0) {
            return 1;
        }
        return 2;
    }

    boolean isPackageInstalledForUser(final java.lang.String str, final int i) {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda186
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isPackageInstalledForUser$131;
                lambda$isPackageInstalledForUser$131 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isPackageInstalledForUser$131(str, i);
                return lambda$isPackageInstalledForUser$131;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isPackageInstalledForUser$131(java.lang.String str, int i) throws java.lang.Exception {
        try {
            android.content.pm.PackageInfo packageInfo = this.mInjector.getIPackageManager().getPackageInfo(str, 0L, i);
            return java.lang.Boolean.valueOf((packageInfo == null || packageInfo.applicationInfo.flags == 0) ? false : true);
        } catch (android.os.RemoteException e) {
            throw new java.lang.RuntimeException("Package manager has died", e);
        }
    }

    private boolean isRuntimePermission(java.lang.String str) {
        try {
            return (this.mInjector.getPackageManager().getPermissionInfo(str, 0).protectionLevel & 15) == 1;
        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    public boolean isProvisioningAllowed(java.lang.String str, java.lang.String str2) {
        java.util.Objects.requireNonNull(str2);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            com.android.internal.util.Preconditions.checkArgument(java.util.Arrays.asList(this.mInjector.getPackageManager().getPackagesForUid(callerIdentity.getUid())).contains(str2), "Caller uid doesn't match the one for the provided package.");
            return checkProvisioningPreconditionSkipPermission(str, str2, callerIdentity.getUserId()) == 0;
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    public int checkProvisioningPrecondition(java.lang.String str, java.lang.String str2) {
        java.util.Objects.requireNonNull(str2, "packageName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            return checkProvisioningPreconditionSkipPermission(str, str2, callerIdentity.getUserId());
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    private int checkProvisioningPreconditionSkipPermission(java.lang.String str, java.lang.String str2, int i) {
        if (!this.mHasFeature) {
            logMissingFeatureAction("Cannot check provisioning for action " + str);
            return 13;
        }
        if (!isProvisioningAllowed()) {
            return 15;
        }
        int checkProvisioningPreConditionSkipPermissionNoLog = checkProvisioningPreConditionSkipPermissionNoLog(str, str2, i);
        if (checkProvisioningPreConditionSkipPermissionNoLog != 0) {
            com.android.server.utils.Slogf.d(LOG_TAG, "checkProvisioningPreCondition(" + str + ", " + str2 + ") failed: " + computeProvisioningErrorString(checkProvisioningPreConditionSkipPermissionNoLog, this.mInjector.userHandleGetCallingUserId()));
        }
        return checkProvisioningPreConditionSkipPermissionNoLog;
    }

    private boolean isProvisioningAllowed() {
        return isDeveloperMode(this.mContext) || android.os.SystemProperties.getBoolean(ALLOW_USER_PROVISIONING_KEY, true);
    }

    private static boolean isDeveloperMode(android.content.Context context) {
        return android.provider.Settings.Global.getInt(context.getContentResolver(), "adb_enabled", 0) > 0;
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    private int checkProvisioningPreConditionSkipPermissionNoLog(java.lang.String str, java.lang.String str2, int i) {
        char c;
        if (str != null) {
            switch (str.hashCode()) {
                case -920528692:
                    if (str.equals("android.app.action.PROVISION_MANAGED_DEVICE")) {
                        c = 1;
                        break;
                    }
                    c = 65535;
                    break;
                case -340845101:
                    if (str.equals("android.app.action.PROVISION_MANAGED_PROFILE")) {
                        c = 0;
                        break;
                    }
                    c = 65535;
                    break;
                case 1340354933:
                    if (str.equals("android.app.action.PROVISION_FINANCED_DEVICE")) {
                        c = 2;
                        break;
                    }
                    c = 65535;
                    break;
                default:
                    c = 65535;
                    break;
            }
            switch (c) {
                case 0:
                    return checkManagedProfileProvisioningPreCondition(str2, i);
                case 1:
                case 2:
                    return checkDeviceOwnerProvisioningPreCondition(i);
            }
        }
        throw new java.lang.IllegalArgumentException("Unknown provisioning action " + str);
    }

    private int checkDeviceOwnerProvisioningPreConditionLocked(@android.annotation.Nullable android.content.ComponentName componentName, int i, int i2, boolean z, boolean z2) {
        int i3;
        boolean z3;
        if (this.mOwners.hasDeviceOwner()) {
            return 1;
        }
        if (this.mOwners.hasProfileOwner(i)) {
            return 2;
        }
        if (!this.mUserManager.isUserRunning(new android.os.UserHandle(i))) {
            return 3;
        }
        boolean userManagerIsHeadlessSystemUserMode = this.mInjector.userManagerIsHeadlessSystemUserMode();
        if (!userManagerIsHeadlessSystemUserMode) {
            i3 = 0;
            z3 = false;
        } else {
            if (componentName == null) {
                i3 = 0;
                z3 = false;
            } else {
                android.app.admin.DeviceAdminInfo findAdmin = findAdmin(componentName, i, false);
                z3 = findAdmin.getHeadlessDeviceOwnerMode() == 1;
                boolean z4 = findAdmin.getHeadlessDeviceOwnerMode() == 2;
                if (!z3 && !z4) {
                    return 16;
                }
                if (android.app.admin.flags.Flags.headlessDeviceOwnerSingleUserEnabled() && z4) {
                    i3 = this.mUserManagerInternal.getMainUserId();
                    if (i3 == -10000) {
                        return 17;
                    }
                } else {
                    i3 = 0;
                }
            }
            if (z3 && i != 0) {
                com.android.server.utils.Slogf.e(LOG_TAG, "In headless system user mode, device owner can only be set on headless system user.");
                return 7;
            }
        }
        if (z) {
            if (hasUserSetupCompleted(i3)) {
                if (nonTestNonPrecreatedUsersExist()) {
                    return 5;
                }
                int currentForegroundUserId = getCurrentForegroundUserId();
                if (i2 != currentForegroundUserId && this.mInjector.userManagerIsHeadlessSystemUserMode() && currentForegroundUserId == 0) {
                    com.android.server.utils.Slogf.wtf(LOG_TAG, "In headless system user mode, current user cannot be system user when setting device owner");
                    return 10;
                }
                if (z2) {
                    return 6;
                }
            }
            return 0;
        }
        if ((!userManagerIsHeadlessSystemUserMode || z3) && i != 0) {
            return 7;
        }
        return hasUserSetupCompleted(i3) ? 4 : 0;
    }

    private boolean nonTestNonPrecreatedUsersExist() {
        return this.mUserManagerInternal.getUsers(true).stream().filter(new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda165
            @Override // java.util.function.Predicate
            public final boolean test(java.lang.Object obj) {
                boolean lambda$nonTestNonPrecreatedUsersExist$132;
                lambda$nonTestNonPrecreatedUsersExist$132 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$nonTestNonPrecreatedUsersExist$132((android.content.pm.UserInfo) obj);
                return lambda$nonTestNonPrecreatedUsersExist$132;
            }
        }).count() > ((long) (android.os.UserManager.isHeadlessSystemUserMode() ? 2 : 1));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ boolean lambda$nonTestNonPrecreatedUsersExist$132(android.content.pm.UserInfo userInfo) {
        return !userInfo.isForTesting();
    }

    private int checkDeviceOwnerProvisioningPreCondition(int i) {
        int i2;
        int checkDeviceOwnerProvisioningPreConditionLocked;
        synchronized (getLockObject()) {
            if (this.mInjector.userManagerIsHeadlessSystemUserMode()) {
                i2 = 0;
            } else {
                i2 = i;
            }
            com.android.server.utils.Slogf.i(LOG_TAG, "Calling user %d, device owner will be set on user %d", java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(i2));
            checkDeviceOwnerProvisioningPreConditionLocked = checkDeviceOwnerProvisioningPreConditionLocked(null, i2, i, false, true);
        }
        return checkDeviceOwnerProvisioningPreConditionLocked;
    }

    private int checkManagedProfileProvisioningPreCondition(java.lang.String str, int i) {
        boolean z;
        if (!hasFeatureManagedUsers()) {
            return 9;
        }
        if (lambda$isProfileOwner$72(i) != null) {
            return 2;
        }
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            android.os.UserHandle of = android.os.UserHandle.of(i);
            synchronized (getLockObject()) {
                z = getDeviceOwnerAdminLocked() != null;
            }
            boolean hasUserRestriction = this.mUserManager.hasUserRestriction("no_add_managed_profile", of);
            if (this.mUserManager.getUserInfo(i).isProfile()) {
                com.android.server.utils.Slogf.i(LOG_TAG, "Calling user %d is a profile, cannot add another.", java.lang.Integer.valueOf(i));
                return 11;
            }
            if (z && !hasUserRestriction) {
                com.android.server.utils.Slogf.wtf(LOG_TAG, "Has a device owner but no restriction on adding a profile.");
            }
            if (hasUserRestriction) {
                com.android.server.utils.Slogf.i(LOG_TAG, "Adding a profile is restricted: User %s Has device owner? %b", of, java.lang.Boolean.valueOf(z));
                return 11;
            }
            if (this.mUserManager.canAddMoreManagedProfiles(i, false)) {
                return 0;
            }
            com.android.server.utils.Slogf.i(LOG_TAG, "Cannot add more managed profiles.");
            return 11;
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    private void checkIsDeviceOwner(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity), callerIdentity.getUid() + " is not device owner");
    }

    @android.annotation.Nullable
    private android.content.ComponentName getOwnerComponent(int i) {
        synchronized (getLockObject()) {
            try {
                if (this.mOwners.getDeviceOwnerUserId() == i) {
                    return this.mOwners.getDeviceOwnerComponent();
                }
                if (this.mOwners.hasProfileOwner(i)) {
                    return this.mOwners.getProfileOwnerComponent(i);
                }
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean hasFeatureManagedUsers() {
        try {
            return this.mIPackageManager.hasSystemFeature("android.software.managed_users", 0);
        } catch (android.os.RemoteException e) {
            return false;
        }
    }

    public java.lang.String getWifiMacAddress(android.content.ComponentName componentName, java.lang.String str) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        return (java.lang.String) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda180
            public final java.lang.Object getOrThrow() {
                java.lang.String lambda$getWifiMacAddress$133;
                lambda$getWifiMacAddress$133 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getWifiMacAddress$133(callerIdentity);
                return lambda$getWifiMacAddress$133;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.String lambda$getWifiMacAddress$133(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        java.lang.String[] factoryMacAddresses = this.mInjector.getWifiManager().getFactoryMacAddresses();
        if (factoryMacAddresses == null) {
            return null;
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(54).setAdmin(callerIdentity.getPackageName()).write();
        if (factoryMacAddresses.length > 0) {
            return factoryMacAddresses[0];
        }
        return null;
    }

    private int getTargetSdk(java.lang.String str, int i) {
        try {
            android.content.pm.ApplicationInfo applicationInfo = this.mIPackageManager.getApplicationInfo(str, 0L, i);
            return applicationInfo != null ? applicationInfo.targetSdkVersion : 0;
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Error getting application info", e);
            return 0;
        }
    }

    public boolean isManagedProfile(android.content.ComponentName componentName) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        return isManagedProfile(callerIdentity.getUserId());
    }

    public void reboot(final android.content.ComponentName componentName) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        checkCanExecuteOrThrowUnsafe(7);
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda60
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$reboot$134(componentName);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$reboot$134(android.content.ComponentName componentName) throws java.lang.Exception {
        if (this.mTelephonyManager.getCallState() != 0) {
            throw new java.lang.IllegalStateException("Cannot be called with ongoing call on the device");
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(34).setAdmin(componentName).write();
        this.mInjector.powerManagerReboot("deviceowner");
    }

    public void setShortSupportMessage(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, java.lang.CharSequence charSequence) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        com.android.server.devicepolicy.ActiveAdmin activeAdminForUidLocked;
        if (!this.mHasFeature) {
            return;
        }
        java.lang.CharSequence truncateIfLonger = android.app.admin.PolicySizeVerifier.truncateIfLonger(charSequence, 200);
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
            activeAdminForUidLocked = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            callerIdentity = getCallerIdentity(componentName);
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            synchronized (getLockObject()) {
                activeAdminForUidLocked = getActiveAdminForUidLocked(componentName, callerIdentity.getUid());
            }
        }
        synchronized (getLockObject()) {
            try {
                if (!android.text.TextUtils.equals(activeAdminForUidLocked.shortSupportMessage, truncateIfLonger)) {
                    activeAdminForUidLocked.shortSupportMessage = truncateIfLonger;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(43).setAdmin(callerIdentity.getPackageName()).write();
    }

    public java.lang.CharSequence getShortSupportMessage(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.ActiveAdmin activeAdminForUidLocked;
        if (!this.mHasFeature) {
            return null;
        }
        if (isPermissionCheckFlagEnabled()) {
            com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
            activeAdminForUidLocked = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_SUPPORT_MESSAGE", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            com.android.server.devicepolicy.CallerIdentity callerIdentity2 = getCallerIdentity(componentName);
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            synchronized (getLockObject()) {
                activeAdminForUidLocked = getActiveAdminForUidLocked(componentName, callerIdentity2.getUid());
            }
        }
        return activeAdminForUidLocked.shortSupportMessage;
    }

    public void setLongSupportMessage(@android.annotation.NonNull android.content.ComponentName componentName, java.lang.CharSequence charSequence) {
        if (!this.mHasFeature) {
            return;
        }
        java.lang.CharSequence truncateIfLonger = android.app.admin.PolicySizeVerifier.truncateIfLonger(charSequence, 20000);
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminForUidLocked = getActiveAdminForUidLocked(componentName, callerIdentity.getUid());
                if (!android.text.TextUtils.equals(activeAdminForUidLocked.longSupportMessage, truncateIfLonger)) {
                    activeAdminForUidLocked.longSupportMessage = truncateIfLonger;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(44).setAdmin(componentName).write();
    }

    public java.lang.CharSequence getLongSupportMessage(@android.annotation.NonNull android.content.ComponentName componentName) {
        java.lang.CharSequence charSequence;
        if (!this.mHasFeature) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        synchronized (getLockObject()) {
            charSequence = getActiveAdminForUidLocked(componentName, callerIdentity.getUid()).longSupportMessage;
        }
        return charSequence;
    }

    public java.lang.CharSequence getShortSupportMessageForUser(@android.annotation.NonNull android.content.ComponentName componentName, int i) {
        if (!this.mHasFeature) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "query support message for user"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked == null) {
                    return null;
                }
                return activeAdminUncheckedLocked.shortSupportMessage;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public java.lang.CharSequence getLongSupportMessageForUser(@android.annotation.NonNull android.content.ComponentName componentName, int i) {
        if (!this.mHasFeature) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "query support message for user"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked == null) {
                    return null;
                }
                return activeAdminUncheckedLocked.longSupportMessage;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setOrganizationColor(@android.annotation.NonNull android.content.ComponentName componentName, int i) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallingUser(isManagedProfile(callerIdentity.getUserId()));
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            getProfileOwnerLocked(callerIdentity.getUserId()).organizationColor = i;
            saveSettingsLocked(callerIdentity.getUserId());
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(39).setAdmin(callerIdentity.getComponentName()).write();
    }

    public void setOrganizationColorForUser(int i, int i2) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i2, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i2));
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(callerIdentity));
        com.android.internal.util.Preconditions.checkCallAuthorization(isManagedProfile(i2), "You can not set organization color outside a managed profile, userId = %d", new java.lang.Object[]{java.lang.Integer.valueOf(i2)});
        synchronized (getLockObject()) {
            getProfileOwnerAdminLocked(i2).organizationColor = i;
            saveSettingsLocked(i2);
        }
    }

    public int getOrganizationColor(@android.annotation.NonNull android.content.ComponentName componentName) {
        int i;
        if (!this.mHasFeature) {
            return com.android.server.devicepolicy.ActiveAdmin.DEF_ORGANIZATION_COLOR;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallingUser(isManagedProfile(callerIdentity.getUserId()));
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            i = getProfileOwnerLocked(callerIdentity.getUserId()).organizationColor;
        }
        return i;
    }

    public int getOrganizationColorForUser(int i) {
        int i2;
        if (!this.mHasFeature) {
            return com.android.server.devicepolicy.ActiveAdmin.DEF_ORGANIZATION_COLOR;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(getCallerIdentity(), i));
        com.android.internal.util.Preconditions.checkCallAuthorization(isManagedProfile(i), "You can not get organization color outside a managed profile, userId = %d", new java.lang.Object[]{java.lang.Integer.valueOf(i)});
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                if (profileOwnerAdminLocked != null) {
                    i2 = profileOwnerAdminLocked.organizationColor;
                } else {
                    i2 = com.android.server.devicepolicy.ActiveAdmin.DEF_ORGANIZATION_COLOR;
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return i2;
    }

    public void setOrganizationName(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, java.lang.CharSequence charSequence) {
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        java.lang.String str2 = null;
        if (isPermissionCheckFlagEnabled()) {
            activeAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
            activeAdmin = null;
        }
        java.lang.CharSequence truncateIfLonger = android.app.admin.PolicySizeVerifier.truncateIfLonger(charSequence, 200);
        synchronized (getLockObject()) {
            try {
                if (!isPermissionCheckFlagEnabled()) {
                    activeAdmin = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                }
                if (!android.text.TextUtils.equals(activeAdmin.organizationName, truncateIfLonger)) {
                    if (truncateIfLonger != null && truncateIfLonger.length() != 0) {
                        str2 = truncateIfLonger.toString();
                    }
                    activeAdmin.organizationName = str2;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public java.lang.CharSequence getOrganizationName(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked;
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        if (isPermissionCheckFlagEnabled()) {
            activeAdmin = enforceCanQueryAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_ORGANIZATION_IDENTITY", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallingUser(isManagedProfile(callerIdentity.getUserId()));
            com.android.internal.util.Preconditions.checkCallAuthorization(isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
            synchronized (getLockObject()) {
                profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
            }
            activeAdmin = profileOwnerOrDeviceOwnerLocked;
        }
        return activeAdmin.organizationName;
    }

    public java.lang.CharSequence getDeviceOwnerOrganizationName() {
        java.lang.String str;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || canManageUsers(callerIdentity) || isFinancedDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
            str = deviceOwnerAdminLocked != null ? deviceOwnerAdminLocked.organizationName : null;
        }
        return str;
    }

    public java.lang.CharSequence getOrganizationNameForUser(int i) {
        java.lang.String str;
        if (!this.mHasFeature) {
            return null;
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasFullCrossUsersPermission(callerIdentity, i));
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(callerIdentity));
        com.android.internal.util.Preconditions.checkCallAuthorization(isManagedProfile(i), "You can not get organization name outside a managed profile, userId = %d", new java.lang.Object[]{java.lang.Integer.valueOf(i)});
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                str = profileOwnerAdminLocked != null ? profileOwnerAdminLocked.organizationName : null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return str;
    }

    public java.util.List<java.lang.String> setMeteredDataDisabledPackages(android.content.ComponentName componentName, final java.util.List<java.lang.String> list) {
        java.util.Objects.requireNonNull(componentName);
        java.util.Objects.requireNonNull(list);
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity), "Admin %s does not own the profile", new java.lang.Object[]{callerIdentity.getComponentName()});
        if (!this.mHasFeature) {
            return list;
        }
        return (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda172
            public final java.lang.Object getOrThrow() {
                java.util.List lambda$setMeteredDataDisabledPackages$135;
                lambda$setMeteredDataDisabledPackages$135 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setMeteredDataDisabledPackages$135(callerIdentity, list);
                return lambda$setMeteredDataDisabledPackages$135;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.List lambda$setMeteredDataDisabledPackages$135(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.util.List list) throws java.lang.Exception {
        java.util.List<java.lang.String> removeInvalidPkgsForMeteredDataRestriction = removeInvalidPkgsForMeteredDataRestriction(callerIdentity.getUserId(), list);
        synchronized (getLockObject()) {
            getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).meteredDisabledPackages = list;
            saveSettingsLocked(callerIdentity.getUserId());
        }
        pushMeteredDisabledPackages(callerIdentity.getUserId());
        return removeInvalidPkgsForMeteredDataRestriction;
    }

    private java.util.List<java.lang.String> removeInvalidPkgsForMeteredDataRestriction(int i, java.util.List<java.lang.String> list) {
        java.util.ArrayList arrayList;
        synchronized (getLockObject()) {
            java.util.Set<java.lang.String> activeAdminPackagesLocked = getActiveAdminPackagesLocked(i);
            arrayList = new java.util.ArrayList();
            for (int size = list.size() - 1; size >= 0; size--) {
                java.lang.String str = list.get(size);
                if (activeAdminPackagesLocked.contains(str)) {
                    arrayList.add(str);
                } else {
                    try {
                        if (!this.mInjector.getIPackageManager().isPackageAvailable(str, i)) {
                            arrayList.add(str);
                        }
                    } catch (android.os.RemoteException e) {
                    }
                }
            }
            list.removeAll(arrayList);
        }
        return arrayList;
    }

    public java.util.List<java.lang.String> getMeteredDataDisabledPackages(android.content.ComponentName componentName) {
        java.util.List<java.lang.String> arrayList;
        java.util.Objects.requireNonNull(componentName);
        if (!this.mHasFeature) {
            return new java.util.ArrayList();
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity), "Admin %s does not own the profile", new java.lang.Object[]{callerIdentity.getComponentName()});
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                arrayList = profileOwnerOrDeviceOwnerLocked.meteredDisabledPackages == null ? new java.util.ArrayList<>() : profileOwnerOrDeviceOwnerLocked.meteredDisabledPackages;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return arrayList;
    }

    public boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName componentName, java.lang.String str, int i) {
        java.util.Objects.requireNonNull(componentName);
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "query restricted pkgs for a specific user"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked == null || activeAdminUncheckedLocked.meteredDisabledPackages == null) {
                    return false;
                }
                return activeAdminUncheckedLocked.meteredDisabledPackages.contains(str);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName componentName, int i, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        if (!isAdb(callerIdentity) && !hasCallingPermission("android.permission.MARK_DEVICE_ORGANIZATION_OWNED") && !hasCallingPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS")) {
            throw new java.lang.SecurityException("Only the system can mark a profile owner of organization-owned device.");
        }
        synchronized (getLockObject()) {
            if (!z) {
                try {
                    if (!isAdminTestOnlyLocked(componentName, i)) {
                        throw new java.lang.SecurityException("Only a test admin can be unmarked as a profile owner of organization-owned device.");
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }
        if (isAdb(callerIdentity)) {
            if (hasIncompatibleAccountsOrNonAdbNoLock(callerIdentity, i, componentName)) {
                throw new java.lang.SecurityException("Can only be called from ADB if the device has no accounts.");
            }
        } else if (hasUserSetupCompleted(0)) {
            throw new java.lang.IllegalStateException("Cannot mark profile owner as managing an organization-owned device after set-up");
        }
        synchronized (getLockObject()) {
            setProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked(componentName, i, z);
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void setProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked(android.content.ComponentName componentName, final int i, final boolean z) {
        if (!isProfileOwner(componentName, i)) {
            throw new java.lang.IllegalArgumentException(java.lang.String.format("Component %s is not a Profile Owner of user %d", componentName.flattenToString(), java.lang.Integer.valueOf(i)));
        }
        com.android.server.utils.Slogf.i(LOG_TAG, "%s %s as profile owner on organization-owned device for user %d", z ? "Marking" : "Unmarking", componentName.flattenToString(), java.lang.Integer.valueOf(i));
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda94
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked$136(i, z);
            }
        });
        this.mOwners.setProfileOwnerOfOrganizationOwnedDevice(i, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked$136(int i, boolean z) throws java.lang.Exception {
        android.os.UserHandle profileParent = this.mUserManager.getProfileParent(android.os.UserHandle.of(i));
        if (profileParent == null) {
            throw new java.lang.IllegalStateException(java.lang.String.format("User %d is not a profile", java.lang.Integer.valueOf(i)));
        }
        this.mUserManager.setUserRestriction("no_remove_managed_profile", z, profileParent);
        this.mUserManager.setUserRestriction("no_add_user", z, profileParent);
    }

    private void pushMeteredDisabledPackages(int i) {
        wtfIfInLock();
        this.mInjector.getNetworkPolicyManagerInternal().setMeteredRestrictedPackages(getMeteredDisabledPackages(i), i);
    }

    private java.util.Set<java.lang.String> getMeteredDisabledPackages(int i) {
        android.util.ArraySet arraySet;
        synchronized (getLockObject()) {
            try {
                arraySet = new android.util.ArraySet();
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                if (deviceOrProfileOwnerAdminLocked != null && deviceOrProfileOwnerAdminLocked.meteredDisabledPackages != null) {
                    arraySet.addAll(deviceOrProfileOwnerAdminLocked.meteredDisabledPackages);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return arraySet;
    }

    public void setAffiliationIds(android.content.ComponentName componentName, java.util.List<java.lang.String> list) {
        if (!this.mHasFeature) {
            return;
        }
        if (list == null) {
            throw new java.lang.IllegalArgumentException("ids must not be null");
        }
        for (java.lang.String str : list) {
            com.android.internal.util.Preconditions.checkArgument(true ^ android.text.TextUtils.isEmpty(str), "ids must not have empty string");
            android.app.admin.PolicySizeVerifier.enforceMaxStringLength(str, "affiliation id");
        }
        android.util.ArraySet arraySet = new android.util.ArraySet(list);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                lambda$getUserDataUnchecked$5(userId).mAffiliationIds = arraySet;
                saveSettingsLocked(userId);
                this.mStateCache.setHasAffiliationWithDevice(userId, java.lang.Boolean.valueOf(isUserAffiliatedWithDeviceLocked(userId)));
                if (userId == 0) {
                    resetAffiliationCacheLocked();
                } else if (userId != 0 && isDeviceOwner(componentName, userId)) {
                    lambda$getUserDataUnchecked$5(0).mAffiliationIds = arraySet;
                    this.mStateCache.setHasAffiliationWithDevice(0, true);
                    saveSettingsLocked(0);
                }
                maybePauseDeviceWideLoggingLocked();
                maybeResumeDeviceWideLoggingLocked();
                maybeClearLockTaskPolicyLocked();
                updateAdminCanGrantSensorsPermissionCache(userId);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void resetAffiliationCacheLocked() {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda204
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$resetAffiliationCacheLocked$137();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetAffiliationCacheLocked$137() throws java.lang.Exception {
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getUsers()) {
            this.mStateCache.setHasAffiliationWithDevice(userInfo.id, java.lang.Boolean.valueOf(isUserAffiliatedWithDeviceLocked(userInfo.id)));
        }
    }

    public java.util.List<java.lang.String> getAffiliationIds(android.content.ComponentName componentName) {
        java.util.ArrayList arrayList;
        if (!this.mHasFeature) {
            return java.util.Collections.emptyList();
        }
        java.util.Objects.requireNonNull(componentName);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            arrayList = new java.util.ArrayList(lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mAffiliationIds);
        }
        return arrayList;
    }

    public boolean isCallingUserAffiliated() {
        boolean isUserAffiliatedWithDeviceLocked;
        if (!this.mHasFeature) {
            return false;
        }
        synchronized (getLockObject()) {
            isUserAffiliatedWithDeviceLocked = isUserAffiliatedWithDeviceLocked(this.mInjector.userHandleGetCallingUserId());
        }
        return isUserAffiliatedWithDeviceLocked;
    }

    public boolean isAffiliatedUser(int i) {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCrossUsersPermission(getCallerIdentity(), i));
        return isUserAffiliatedWithDevice(i);
    }

    private boolean isUserAffiliatedWithDevice(int i) {
        boolean isUserAffiliatedWithDeviceLocked;
        synchronized (getLockObject()) {
            isUserAffiliatedWithDeviceLocked = isUserAffiliatedWithDeviceLocked(i);
        }
        return isUserAffiliatedWithDeviceLocked;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isUserAffiliatedWithDeviceLocked(int i) {
        if (!this.mOwners.hasDeviceOwner()) {
            return false;
        }
        if (i == 0 || i == this.mOwners.getDeviceOwnerUserId()) {
            return true;
        }
        if (lambda$isProfileOwner$72(i) == null) {
            return false;
        }
        java.util.Set<java.lang.String> set = lambda$getUserDataUnchecked$5(i).mAffiliationIds;
        java.util.Set<java.lang.String> set2 = lambda$getUserDataUnchecked$5(0).mAffiliationIds;
        java.util.Iterator<java.lang.String> it = set.iterator();
        while (it.hasNext()) {
            if (set2.contains(it.next())) {
                return true;
            }
        }
        return false;
    }

    private boolean areAllUsersAffiliatedWithDeviceLocked() {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda128
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$areAllUsersAffiliatedWithDeviceLocked$138;
                lambda$areAllUsersAffiliatedWithDeviceLocked$138 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$areAllUsersAffiliatedWithDeviceLocked$138();
                return lambda$areAllUsersAffiliatedWithDeviceLocked$138;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$areAllUsersAffiliatedWithDeviceLocked$138() throws java.lang.Exception {
        java.util.List aliveUsers = this.mUserManager.getAliveUsers();
        for (int i = 0; i < aliveUsers.size(); i++) {
            int i2 = ((android.content.pm.UserInfo) aliveUsers.get(i)).id;
            if (!isUserAffiliatedWithDeviceLocked(i2)) {
                com.android.server.utils.Slogf.d(LOG_TAG, "User id " + i2 + " not affiliated.");
                return false;
            }
        }
        return true;
    }

    private int getSecurityLoggingEnabledUser() {
        synchronized (getLockObject()) {
            try {
                if (this.mOwners.hasDeviceOwner()) {
                    return -1;
                }
                return getOrganizationOwnedProfileUserId();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setSecurityLoggingEnabled(android.content.ComponentName componentName, java.lang.String str, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean z2 = true;
        if (android.app.admin.flags.Flags.securityLogV2Enabled()) {
            com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_SECURITY_LOGGING", callerIdentity.getPackageName(), callerIdentity.getUserId());
            if (z) {
                this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.SECURITY_LOGGING, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.BooleanPolicyValue(true));
            } else {
                this.mDevicePolicyEngine.removeGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.SECURITY_LOGGING, enforcePermissionAndGetEnforcingAdmin);
            }
        } else {
            synchronized (getLockObject()) {
                try {
                    if (componentName != null) {
                        if (!isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) && !isDefaultDeviceOwner(callerIdentity)) {
                            z2 = false;
                        }
                        com.android.internal.util.Preconditions.checkCallAuthorization(z2);
                    } else {
                        com.android.internal.util.Preconditions.checkCallAuthorization(isCallerDelegate(callerIdentity, "delegation-security-logging"));
                    }
                    if (z == this.mInjector.securityLogGetLoggingEnabledProperty()) {
                        return;
                    }
                    this.mInjector.securityLogSetLoggingEnabledProperty(z);
                    if (z) {
                        this.mSecurityLogMonitor.start(getSecurityLoggingEnabledUser());
                        maybePauseDeviceWideLoggingLocked();
                    } else {
                        this.mSecurityLogMonitor.stop();
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(15).setAdmin(callerIdentity.getPackageName()).setBoolean(z).write();
    }

    public boolean isSecurityLoggingEnabled(android.content.ComponentName componentName, java.lang.String str) {
        boolean securityLogGetLoggingEnabledProperty;
        boolean z = false;
        if (!this.mHasFeature) {
            return false;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        if (isSystemUid(callerIdentity)) {
            return this.mInjector.securityLogGetLoggingEnabledProperty();
        }
        if (android.app.admin.flags.Flags.securityLogV2Enabled()) {
            return java.lang.Boolean.TRUE.equals((java.lang.Boolean) this.mDevicePolicyEngine.getGlobalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.SECURITY_LOGGING, enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_SECURITY_LOGGING", callerIdentity.getPackageName(), callerIdentity.getUserId())));
        }
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    if (!isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) {
                        if (isDefaultDeviceOwner(callerIdentity)) {
                        }
                        com.android.internal.util.Preconditions.checkCallAuthorization(z);
                    }
                    z = true;
                    com.android.internal.util.Preconditions.checkCallAuthorization(z);
                } else {
                    com.android.internal.util.Preconditions.checkCallAuthorization(isCallerDelegate(callerIdentity, "delegation-security-logging"));
                }
                securityLogGetLoggingEnabledProperty = this.mInjector.securityLogGetLoggingEnabledProperty();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return securityLogGetLoggingEnabledProperty;
    }

    private void recordSecurityLogRetrievalTime() {
        synchronized (getLockObject()) {
            try {
                long currentTimeMillis = java.lang.System.currentTimeMillis();
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(0);
                if (currentTimeMillis > lambda$getUserDataUnchecked$5.mLastSecurityLogRetrievalTime) {
                    lambda$getUserDataUnchecked$5.mLastSecurityLogRetrievalTime = currentTimeMillis;
                    saveSettingsLocked(0);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public android.content.pm.ParceledListSlice<android.app.admin.SecurityLog.SecurityEvent> retrievePreRebootSecurityLogs(android.content.ComponentName componentName, java.lang.String str) {
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean z = true;
        if (isPermissionCheckFlagEnabled()) {
            if (!isOrganizationOwnedDeviceWithManagedProfile() && !areAllUsersAffiliatedWithDeviceLocked()) {
                z = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z);
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_SECURITY_LOGGING", callerIdentity.getPackageName(), -1);
        } else {
            if (componentName != null) {
                com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
            } else {
                com.android.internal.util.Preconditions.checkCallAuthorization(isCallerDelegate(callerIdentity, "delegation-security-logging"));
            }
            if (!isOrganizationOwnedDeviceWithManagedProfile() && !areAllUsersAffiliatedWithDeviceLocked()) {
                z = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z);
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(17).setAdmin(callerIdentity.getPackageName()).write();
        if (!this.mContext.getResources().getBoolean(android.R.bool.config_supportDoubleTapWake) || !this.mInjector.securityLogGetLoggingEnabledProperty()) {
            return null;
        }
        recordSecurityLogRetrievalTime();
        java.util.ArrayList arrayList = new java.util.ArrayList();
        try {
            android.app.admin.SecurityLog.readPreviousEvents(arrayList);
            int securityLoggingEnabledUser = getSecurityLoggingEnabledUser();
            if (securityLoggingEnabledUser != -1) {
                android.app.admin.SecurityLog.redactEvents(arrayList, securityLoggingEnabledUser);
            }
            return new android.content.pm.ParceledListSlice<>(arrayList);
        } catch (java.io.IOException e) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Fail to read previous events", e);
            return new android.content.pm.ParceledListSlice<>(java.util.Collections.emptyList());
        }
    }

    public android.content.pm.ParceledListSlice<android.app.admin.SecurityLog.SecurityEvent> retrieveSecurityLogs(android.content.ComponentName componentName, java.lang.String str) {
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean z = true;
        if (android.app.admin.flags.Flags.securityLogV2Enabled()) {
            com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_SECURITY_LOGGING", callerIdentity.getPackageName(), callerIdentity.getUserId());
            synchronized (getLockObject()) {
                try {
                    if (!isOrganizationOwnedDeviceWithManagedProfile() && !areAllUsersAffiliatedWithDeviceLocked()) {
                        z = false;
                    }
                    com.android.internal.util.Preconditions.checkCallAuthorization(z);
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            if (!java.lang.Boolean.TRUE.equals((java.lang.Boolean) this.mDevicePolicyEngine.getGlobalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.SECURITY_LOGGING, enforcePermissionAndGetEnforcingAdmin))) {
                com.android.server.utils.Slogf.e(LOG_TAG, "%s hasn't enabled security logging but tries to retrieve logs", callerIdentity.getPackageName());
                return null;
            }
        } else {
            if (componentName != null) {
                com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
            } else {
                com.android.internal.util.Preconditions.checkCallAuthorization(isCallerDelegate(callerIdentity, "delegation-security-logging"));
            }
            if (!isOrganizationOwnedDeviceWithManagedProfile() && !areAllUsersAffiliatedWithDeviceLocked()) {
                z = false;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z);
            if (!this.mInjector.securityLogGetLoggingEnabledProperty()) {
                return null;
            }
        }
        recordSecurityLogRetrievalTime();
        java.util.List<android.app.admin.SecurityLog.SecurityEvent> retrieveLogs = this.mSecurityLogMonitor.retrieveLogs();
        android.app.admin.DevicePolicyEventLogger.createEvent(16).setAdmin(callerIdentity.getPackageName()).write();
        if (retrieveLogs != null) {
            return new android.content.pm.ParceledListSlice<>(retrieveLogs);
        }
        return null;
    }

    public void setAuditLogEnabled(java.lang.String str, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (!android.app.admin.flags.Flags.securityLogV2Enabled()) {
            throw new java.lang.UnsupportedOperationException("Audit log not enabled");
        }
        com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(null, "android.permission.MANAGE_DEVICE_POLICY_AUDIT_LOGGING", callerIdentity.getPackageName(), callerIdentity.getUserId());
        if (z) {
            this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.AUDIT_LOGGING, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.BooleanPolicyValue(true));
        } else {
            this.mDevicePolicyEngine.removeGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.AUDIT_LOGGING, enforcePermissionAndGetEnforcingAdmin);
            this.mSecurityLogMonitor.setAuditLogEventsCallback(callerIdentity.getUid(), null);
        }
    }

    public boolean isAuditLogEnabled(java.lang.String str) {
        if (!this.mHasFeature) {
            return false;
        }
        if (!android.app.admin.flags.Flags.securityLogV2Enabled()) {
            throw new java.lang.UnsupportedOperationException("Audit log not enabled");
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        return java.lang.Boolean.TRUE.equals((java.lang.Boolean) this.mDevicePolicyEngine.getGlobalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.AUDIT_LOGGING, enforcePermissionAndGetEnforcingAdmin(null, "android.permission.MANAGE_DEVICE_POLICY_AUDIT_LOGGING", callerIdentity.getPackageName(), callerIdentity.getUserId())));
    }

    public void setAuditLogEventsCallback(java.lang.String str, android.app.admin.IAuditLogEventsCallback iAuditLogEventsCallback) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (!java.lang.Boolean.TRUE.equals((java.lang.Boolean) this.mDevicePolicyEngine.getGlobalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.AUDIT_LOGGING, enforcePermissionAndGetEnforcingAdmin(null, "android.permission.MANAGE_DEVICE_POLICY_AUDIT_LOGGING", callerIdentity.getPackageName(), callerIdentity.getUserId())))) {
            throw new java.lang.IllegalStateException("Managing app has to enable audit log before setting events callback");
        }
        this.mSecurityLogMonitor.setAuditLogEventsCallback(callerIdentity.getUid(), iAuditLogEventsCallback);
    }

    public long forceSecurityLogs() {
        com.android.internal.util.Preconditions.checkCallAuthorization(isAdb(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS"), "Caller must be shell or hold FORCE_DEVICE_POLICY_MANAGER_LOGS to call forceSecurityLogs");
        if (!this.mInjector.securityLogGetLoggingEnabledProperty()) {
            throw new java.lang.IllegalStateException("logging is not available");
        }
        return this.mSecurityLogMonitor.forceLogs();
    }

    public boolean isUninstallInQueue(java.lang.String str) {
        boolean contains;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_ADMINS"));
        android.content.pm.UserPackage of = android.content.pm.UserPackage.of(callerIdentity.getUserId(), str);
        synchronized (getLockObject()) {
            contains = this.mPackagesToRemove.contains(of);
        }
        return contains;
    }

    public void uninstallPackageWithActiveAdmins(final java.lang.String str) {
        com.android.internal.util.Preconditions.checkArgument(!android.text.TextUtils.isEmpty(str));
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_ADMINS"));
        final int userId = callerIdentity.getUserId();
        enforceUserUnlocked(userId);
        android.content.ComponentName lambda$isProfileOwner$72 = lambda$isProfileOwner$72(userId);
        if (lambda$isProfileOwner$72 != null && str.equals(lambda$isProfileOwner$72.getPackageName())) {
            throw new java.lang.IllegalArgumentException("Cannot uninstall a package with a profile owner");
        }
        android.content.ComponentName deviceOwnerComponent = getDeviceOwnerComponent(false);
        if (getDeviceOwnerUserId() == userId && deviceOwnerComponent != null && str.equals(deviceOwnerComponent.getPackageName())) {
            throw new java.lang.IllegalArgumentException("Cannot uninstall a package with a device owner");
        }
        android.content.pm.UserPackage of = android.content.pm.UserPackage.of(userId, str);
        synchronized (getLockObject()) {
            this.mPackagesToRemove.add(of);
        }
        java.util.List<android.content.ComponentName> activeAdmins = getActiveAdmins(userId);
        final java.util.ArrayList arrayList = new java.util.ArrayList();
        if (activeAdmins != null) {
            for (android.content.ComponentName componentName : activeAdmins) {
                if (str.equals(componentName.getPackageName())) {
                    arrayList.add(componentName);
                    removeActiveAdmin(componentName, userId);
                }
            }
        }
        if (arrayList.size() == 0) {
            startUninstallIntent(str, userId);
        } else {
            this.mHandler.postDelayed(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.7
                @Override // java.lang.Runnable
                public void run() {
                    java.util.Iterator it = arrayList.iterator();
                    while (it.hasNext()) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.removeAdminArtifacts((android.content.ComponentName) it.next(), userId);
                    }
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.startUninstallIntent(str, userId);
                }
            }, com.android.server.job.controllers.JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
        }
    }

    public boolean isDeviceProvisioned() {
        boolean z;
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()));
        synchronized (getLockObject()) {
            z = getUserDataUnchecked(0).mUserSetupComplete;
        }
        return z;
    }

    private boolean isCurrentUserDemo() {
        if (android.os.UserManager.isDeviceInDemoMode(this.mContext)) {
            final int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
            return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda119
                public final java.lang.Object getOrThrow() {
                    java.lang.Boolean lambda$isCurrentUserDemo$139;
                    lambda$isCurrentUserDemo$139 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isCurrentUserDemo$139(userHandleGetCallingUserId);
                    return lambda$isCurrentUserDemo$139;
                }
            })).booleanValue();
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isCurrentUserDemo$139(int i) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(this.mUserManager.getUserInfo(i).isDemo());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removePackageIfRequired(java.lang.String str, int i) {
        if (!packageHasActiveAdmins(str, i)) {
            startUninstallIntent(str, i);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startUninstallIntent(java.lang.String str, int i) {
        android.content.pm.UserPackage of = android.content.pm.UserPackage.of(i, str);
        synchronized (getLockObject()) {
            try {
                if (this.mPackagesToRemove.contains(of)) {
                    this.mPackagesToRemove.remove(of);
                    if (!isPackageInstalledForUser(str, i)) {
                        return;
                    }
                    try {
                        this.mInjector.getIActivityManager().forceStopPackage(str, i);
                    } catch (android.os.RemoteException e) {
                        com.android.server.utils.Slogf.e(LOG_TAG, "Failure talking to ActivityManager while force stopping package");
                    }
                    android.content.Intent intent = new android.content.Intent("android.intent.action.UNINSTALL_PACKAGE", android.net.Uri.parse("package:" + str));
                    intent.setFlags(268435456);
                    this.mContext.startActivityAsUser(intent, android.os.UserHandle.of(i));
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void removeAdminArtifacts(android.content.ComponentName componentName, int i) {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked == null) {
                    return;
                }
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                boolean usesPolicy = activeAdminUncheckedLocked.info.usesPolicy(5);
                lambda$getUserDataUnchecked$5.mAdminList.remove(activeAdminUncheckedLocked);
                lambda$getUserDataUnchecked$5.mAdminMap.remove(componentName);
                lambda$getUserDataUnchecked$5.validatePasswordOwner();
                if (usesPolicy) {
                    lambda$setGlobalProxy$64(lambda$getUserDataUnchecked$5);
                }
                pushActiveAdminPackagesLocked(i);
                saveSettingsLocked(i);
                updateMaximumTimeToLockLocked(i);
                com.android.server.utils.Slogf.d(LOG_TAG, "Removing device admin " + componentName + " from user " + i);
                logStackTrace("removeAdminArtifacts");
                lambda$getUserDataUnchecked$5.mRemovingAdmins.remove(componentName);
                com.android.server.utils.Slogf.d(LOG_TAG, "Current state of DevicePolicyData#mRemovingAdmins for user " + i + ": " + lambda$getUserDataUnchecked$5.mRemovingAdmins);
                com.android.server.utils.Slogf.i(LOG_TAG, "Device admin " + componentName + " removed from user " + i);
                pushMeteredDisabledPackages(i);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setDeviceProvisioningConfigApplied() {
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()));
        synchronized (getLockObject()) {
            lambda$getUserDataUnchecked$5(0).mDeviceProvisioningConfigApplied = true;
            saveSettingsLocked(0);
        }
    }

    public boolean isDeviceProvisioningConfigApplied() {
        boolean z;
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()));
        synchronized (getLockObject()) {
            z = lambda$getUserDataUnchecked$5(0).mDeviceProvisioningConfigApplied;
        }
        return z;
    }

    public void forceUpdateUserSetupComplete(int i) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        boolean z = this.mInjector.settingsSecureGetIntForUser("user_setup_complete", 0, i) != 0;
        lambda$getUserDataUnchecked$5(i).mUserSetupComplete = z;
        this.mStateCache.setDeviceProvisioned(z);
        synchronized (getLockObject()) {
            saveSettingsLocked(i);
        }
    }

    public void setBackupServiceEnabled(android.content.ComponentName componentName, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity) || isFinancedDeviceOwner(callerIdentity));
        toggleBackupServiceActive(callerIdentity.getUserId(), z);
        if (android.app.admin.flags.Flags.backupServiceSecurityLogEventEnabled() && android.app.admin.SecurityLog.isLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210044, new java.lang.Object[]{callerIdentity.getPackageName(), java.lang.Integer.valueOf(callerIdentity.getUserId()), java.lang.Integer.valueOf(z ? 1 : 0)});
        }
    }

    public boolean isBackupServiceEnabled(android.content.ComponentName componentName) {
        boolean z = true;
        if (!this.mHasFeature) {
            return true;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        if (!isDefaultDeviceOwner(callerIdentity) && !isProfileOwner(callerIdentity) && !isFinancedDeviceOwner(callerIdentity)) {
            z = false;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(z);
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda7
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isBackupServiceEnabled$140;
                lambda$isBackupServiceEnabled$140 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isBackupServiceEnabled$140(callerIdentity);
                return lambda$isBackupServiceEnabled$140;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isBackupServiceEnabled$140(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        java.lang.Boolean valueOf;
        synchronized (getLockObject()) {
            try {
                try {
                    android.app.backup.IBackupManager iBackupManager = this.mInjector.getIBackupManager();
                    valueOf = java.lang.Boolean.valueOf(iBackupManager != null && iBackupManager.isBackupServiceActive(callerIdentity.getUserId()));
                } catch (android.os.RemoteException e) {
                    throw new java.lang.IllegalStateException("Failed requesting backup service state.", e);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return valueOf;
    }

    public boolean bindDeviceAdminServiceAsUser(@android.annotation.NonNull android.content.ComponentName componentName, @android.annotation.NonNull android.app.IApplicationThread iApplicationThread, @android.annotation.Nullable android.os.IBinder iBinder, @android.annotation.NonNull android.content.Intent intent, @android.annotation.NonNull android.app.IServiceConnection iServiceConnection, long j, int i) {
        java.lang.String ownerPackageNameForUserLocked;
        if (!this.mHasFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName);
        java.util.Objects.requireNonNull(iApplicationThread);
        java.util.Objects.requireNonNull(intent);
        com.android.internal.util.Preconditions.checkArgument((intent.getComponent() == null && intent.getPackage() == null) ? false : true, "Service intent must be explicit (with a package name or component): " + intent);
        java.util.Objects.requireNonNull(iServiceConnection);
        com.android.internal.util.Preconditions.checkArgument(this.mInjector.userHandleGetCallingUserId() != i, "target user id must be different from the calling user id");
        if (!getBindDeviceAdminTargetUsers(componentName).contains(android.os.UserHandle.of(i))) {
            throw new java.lang.SecurityException("Not allowed to bind to target user id");
        }
        synchronized (getLockObject()) {
            ownerPackageNameForUserLocked = getOwnerPackageNameForUserLocked(i);
        }
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            if (createCrossUserServiceIntent(intent, ownerPackageNameForUserLocked, i) == null) {
                return false;
            }
            return this.mInjector.getIActivityManager().bindService(iApplicationThread, iBinder, intent, intent.resolveTypeIfNeeded(this.mContext.getContentResolver()), iServiceConnection, j, this.mContext.getOpPackageName(), i) != 0;
        } catch (android.os.RemoteException e) {
            return false;
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    @android.annotation.NonNull
    public java.util.List<android.os.UserHandle> getBindDeviceAdminTargetUsers(@android.annotation.NonNull final android.content.ComponentName componentName) {
        java.util.List<android.os.UserHandle> list;
        if (!this.mHasFeature) {
            return java.util.Collections.emptyList();
        }
        java.util.Objects.requireNonNull(componentName);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            final int userId = callerIdentity.getUserId();
            list = (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda192
                public final java.lang.Object getOrThrow() {
                    java.util.ArrayList lambda$getBindDeviceAdminTargetUsers$141;
                    lambda$getBindDeviceAdminTargetUsers$141 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getBindDeviceAdminTargetUsers$141(componentName, userId);
                    return lambda$getBindDeviceAdminTargetUsers$141;
                }
            });
        }
        return list;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.ArrayList lambda$getBindDeviceAdminTargetUsers$141(android.content.ComponentName componentName, int i) throws java.lang.Exception {
        java.util.ArrayList arrayList = new java.util.ArrayList();
        if (!isDeviceOwner(componentName, i)) {
            if (canUserBindToDeviceOwnerLocked(i)) {
                arrayList.add(android.os.UserHandle.of(this.mOwners.getDeviceOwnerUserId()));
            }
        } else {
            java.util.List aliveUsers = this.mUserManager.getAliveUsers();
            for (int i2 = 0; i2 < aliveUsers.size(); i2++) {
                int i3 = ((android.content.pm.UserInfo) aliveUsers.get(i2)).id;
                if (i3 != i && canUserBindToDeviceOwnerLocked(i3)) {
                    arrayList.add(android.os.UserHandle.of(i3));
                }
            }
        }
        return arrayList;
    }

    private boolean canUserBindToDeviceOwnerLocked(int i) {
        if (this.mOwners.hasDeviceOwner() && i != this.mOwners.getDeviceOwnerUserId() && this.mOwners.hasProfileOwner(i) && android.text.TextUtils.equals(this.mOwners.getDeviceOwnerPackageName(), this.mOwners.getProfileOwnerPackage(i))) {
            return isUserAffiliatedWithDeviceLocked(i);
        }
        return false;
    }

    private boolean hasIncompatibleAccountsOnAnyUser() {
        if (this.mHasIncompatibleAccounts == null) {
            return true;
        }
        java.util.Iterator<java.lang.Boolean> it = this.mHasIncompatibleAccounts.values().iterator();
        while (it.hasNext()) {
            if (it.next().booleanValue()) {
                return true;
            }
        }
        return false;
    }

    private boolean hasIncompatibleAccounts(int i) {
        if (this.mHasIncompatibleAccounts == null) {
            return true;
        }
        return this.mHasIncompatibleAccounts.getOrDefault(java.lang.Integer.valueOf(i), false).booleanValue();
    }

    private boolean hasIncompatibleAccountsOrNonAdbNoLock(com.android.server.devicepolicy.CallerIdentity callerIdentity, final int i, @android.annotation.Nullable final android.content.ComponentName componentName) {
        if (!isAdb(callerIdentity)) {
            return true;
        }
        wtfIfInLock();
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda112
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$hasIncompatibleAccountsOrNonAdbNoLock$142;
                lambda$hasIncompatibleAccountsOrNonAdbNoLock$142 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$hasIncompatibleAccountsOrNonAdbNoLock$142(i, componentName);
                return lambda$hasIncompatibleAccountsOrNonAdbNoLock$142;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$hasIncompatibleAccountsOrNonAdbNoLock$142(int i, android.content.ComponentName componentName) throws java.lang.Exception {
        if (((android.accounts.AccountManager) this.mContext.createContextAsUser(android.os.UserHandle.of(i), 0).getSystemService(android.accounts.AccountManager.class)).getAccounts().length == 0) {
            return false;
        }
        synchronized (getLockObject()) {
            if (componentName != null) {
                if (isAdminTestOnlyLocked(componentName, i)) {
                    boolean z = !hasIncompatibleAccounts(i);
                    if (z) {
                        com.android.server.utils.Slogf.w(LOG_TAG, "All accounts are compatible");
                    } else {
                        com.android.server.utils.Slogf.e(LOG_TAG, "Found incompatible accounts");
                    }
                    return java.lang.Boolean.valueOf(!z);
                }
            }
            com.android.server.utils.Slogf.w(LOG_TAG, "Non test-only owner can't be installed with existing accounts.");
            return true;
        }
    }

    public void calculateHasIncompatibleAccounts() {
        if (this.calculateHasIncompatibleAccountsExecutor.getQueue().size() > 1) {
            return;
        }
        new com.android.server.devicepolicy.DevicePolicyManagerService.CalculateHasIncompatibleAccountsTask().executeOnExecutor(this.calculateHasIncompatibleAccountsExecutor, null);
    }

    class CalculateHasIncompatibleAccountsTask extends android.os.AsyncTask<java.lang.Void, java.lang.Void, java.util.Map<java.lang.Integer, java.lang.Boolean>> {
        private static final java.lang.String[] FEATURE_ALLOW = {"android.account.DEVICE_OR_PROFILE_OWNER_ALLOWED"};
        private static final java.lang.String[] FEATURE_DISALLOW = {"android.account.DEVICE_OR_PROFILE_OWNER_DISALLOWED"};

        CalculateHasIncompatibleAccountsTask() {
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // android.os.AsyncTask
        public java.util.Map<java.lang.Integer, java.lang.Boolean> doInBackground(java.lang.Void... voidArr) {
            java.util.List<android.content.pm.UserInfo> users = com.android.server.devicepolicy.DevicePolicyManagerService.this.mUserManagerInternal.getUsers(true);
            java.util.HashMap hashMap = new java.util.HashMap();
            for (android.content.pm.UserInfo userInfo : users) {
                hashMap.put(java.lang.Integer.valueOf(userInfo.id), java.lang.Boolean.valueOf(userHasIncompatibleAccounts(userInfo.id)));
            }
            return hashMap;
        }

        private boolean userHasIncompatibleAccounts(int i) {
            android.accounts.AccountManager accountManager = (android.accounts.AccountManager) com.android.server.devicepolicy.DevicePolicyManagerService.this.mContext.createContextAsUser(android.os.UserHandle.of(i), 0).getSystemService(android.accounts.AccountManager.class);
            for (android.accounts.Account account : accountManager.getAccounts()) {
                if (hasAccountFeatures(accountManager, account, FEATURE_DISALLOW) || !hasAccountFeatures(accountManager, account, FEATURE_ALLOW)) {
                    return true;
                }
            }
            return false;
        }

        /* JADX INFO: Access modifiers changed from: protected */
        @Override // android.os.AsyncTask
        public void onPostExecute(java.util.Map<java.lang.Integer, java.lang.Boolean> map) {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mHasIncompatibleAccounts = java.util.Collections.unmodifiableMap(map);
            com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Finished calculating hasIncompatibleAccountsTask");
        }

        private static boolean hasAccountFeatures(android.accounts.AccountManager accountManager, android.accounts.Account account, java.lang.String[] strArr) {
            try {
                return accountManager.hasFeatures(account, strArr, null, null).getResult(30L, java.util.concurrent.TimeUnit.SECONDS).booleanValue();
            } catch (java.lang.Exception e) {
                com.android.server.utils.Slogf.w(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Failed to get account feature", e);
                return false;
            }
        }
    }

    private boolean isAdb(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return isShellUid(callerIdentity) || isRootUid(callerIdentity);
    }

    public void setNetworkLoggingEnabled(@android.annotation.Nullable android.content.ComponentName componentName, @android.annotation.NonNull java.lang.String str, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int i = 1;
        boolean z2 = isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId());
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isDefaultDeviceOwner(callerIdentity) || z2)) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-network-logging")));
        synchronized (getLockObject()) {
            try {
                if (z == isNetworkLoggingEnabledInternalLocked()) {
                    return;
                }
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(callerIdentity.getUserId());
                deviceOrProfileOwnerAdminLocked.isNetworkLoggingEnabled = z;
                if (!z) {
                    deviceOrProfileOwnerAdminLocked.numNetworkLoggingNotifications = 0;
                    deviceOrProfileOwnerAdminLocked.lastNetworkLoggingNotificationTimeMs = 0L;
                }
                saveSettingsLocked(callerIdentity.getUserId());
                setNetworkLoggingActiveInternal(z);
                android.app.admin.DevicePolicyEventLogger devicePolicyEventLogger = android.app.admin.DevicePolicyEventLogger.createEvent(119).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null);
                if (!z) {
                    i = 0;
                }
                devicePolicyEventLogger.setInt(i).setStrings(new java.lang.String[]{z2 ? LOG_TAG_PROFILE_OWNER : LOG_TAG_DEVICE_OWNER}).write();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setNetworkLoggingActiveInternal(final boolean z) {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda62
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setNetworkLoggingActiveInternal$145(z);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setNetworkLoggingActiveInternal$145(boolean z) throws java.lang.Exception {
        boolean z2;
        synchronized (getLockObject()) {
            try {
                if (z) {
                    if (this.mNetworkLogger == null) {
                        int networkLoggingAffectedUser = getNetworkLoggingAffectedUser();
                        android.content.pm.PackageManagerInternal packageManagerInternal = this.mInjector.getPackageManagerInternal();
                        if (networkLoggingAffectedUser == 0) {
                            networkLoggingAffectedUser = -1;
                        }
                        this.mNetworkLogger = new com.android.server.devicepolicy.NetworkLogger(this, packageManagerInternal, networkLoggingAffectedUser);
                    }
                    if (!this.mNetworkLogger.startNetworkLogging()) {
                        this.mNetworkLogger = null;
                        com.android.server.utils.Slogf.wtf(LOG_TAG, "Network logging could not be started due to the logging service not being available yet.");
                    }
                    maybePauseDeviceWideLoggingLocked();
                    z2 = shouldSendNetworkLoggingNotificationLocked();
                } else {
                    if (this.mNetworkLogger != null && !this.mNetworkLogger.stopNetworkLogging()) {
                        com.android.server.utils.Slogf.wtf(LOG_TAG, "Network logging could not be stopped due to the logging service not being available yet.");
                    }
                    this.mNetworkLogger = null;
                    z2 = false;
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (z) {
            if (z2) {
                this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda19
                    @Override // java.lang.Runnable
                    public final void run() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setNetworkLoggingActiveInternal$143();
                    }
                });
                return;
            }
            return;
        }
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda20
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setNetworkLoggingActiveInternal$144();
            }
        });
    }

    private int getNetworkLoggingAffectedUser() {
        synchronized (getLockObject()) {
            try {
                if (this.mOwners.hasDeviceOwner()) {
                    return this.mOwners.getDeviceOwnerUserId();
                }
                return ((java.lang.Integer) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda163
                    public final java.lang.Object getOrThrow() {
                        java.lang.Integer lambda$getNetworkLoggingAffectedUser$146;
                        lambda$getNetworkLoggingAffectedUser$146 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getNetworkLoggingAffectedUser$146();
                        return lambda$getNetworkLoggingAffectedUser$146;
                    }
                })).intValue();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$getNetworkLoggingAffectedUser$146() throws java.lang.Exception {
        return java.lang.Integer.valueOf(getManagedUserId());
    }

    private com.android.server.devicepolicy.ActiveAdmin getNetworkLoggingControllingAdminLocked() {
        int networkLoggingAffectedUser = getNetworkLoggingAffectedUser();
        if (networkLoggingAffectedUser < 0) {
            return null;
        }
        return getDeviceOrProfileOwnerAdminLocked(networkLoggingAffectedUser);
    }

    public long forceNetworkLogs() {
        com.android.internal.util.Preconditions.checkCallAuthorization(isAdb(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.FORCE_DEVICE_POLICY_MANAGER_LOGS"), "Caller must be shell or hold FORCE_DEVICE_POLICY_MANAGER_LOGS to call forceNetworkLogs");
        synchronized (getLockObject()) {
            try {
                if (!isNetworkLoggingEnabledInternalLocked()) {
                    throw new java.lang.IllegalStateException("logging is not available");
                }
                if (this.mNetworkLogger != null) {
                    return ((java.lang.Long) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda57
                        public final java.lang.Object getOrThrow() {
                            java.lang.Long lambda$forceNetworkLogs$147;
                            lambda$forceNetworkLogs$147 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$forceNetworkLogs$147();
                            return lambda$forceNetworkLogs$147;
                        }
                    })).longValue();
                }
                return 0L;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Long lambda$forceNetworkLogs$147() throws java.lang.Exception {
        return java.lang.Long.valueOf(this.mNetworkLogger.forceBatchFinalization());
    }

    /* JADX INFO: Access modifiers changed from: private */
    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    public void maybePauseDeviceWideLoggingLocked() {
        if (!areAllUsersAffiliatedWithDeviceLocked()) {
            if (this.mOwners.hasDeviceOwner()) {
                com.android.server.utils.Slogf.i(LOG_TAG, "There are unaffiliated users, network logging will be paused if enabled.");
                if (this.mNetworkLogger != null) {
                    this.mNetworkLogger.pause();
                }
            }
            if (!isOrganizationOwnedDeviceWithManagedProfile()) {
                com.android.server.utils.Slogf.i(LOG_TAG, "Not org-owned managed profile device, security logging will be paused if enabled.");
                this.mSecurityLogMonitor.pause();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    public void maybeResumeDeviceWideLoggingLocked() {
        final boolean areAllUsersAffiliatedWithDeviceLocked = areAllUsersAffiliatedWithDeviceLocked();
        final boolean isOrganizationOwnedDeviceWithManagedProfile = isOrganizationOwnedDeviceWithManagedProfile();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda179
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$maybeResumeDeviceWideLoggingLocked$148(areAllUsersAffiliatedWithDeviceLocked, isOrganizationOwnedDeviceWithManagedProfile);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$maybeResumeDeviceWideLoggingLocked$148(boolean z, boolean z2) throws java.lang.Exception {
        if (z || z2) {
            this.mSecurityLogMonitor.resume();
        }
        if ((z || !this.mOwners.hasDeviceOwner()) && this.mNetworkLogger != null) {
            this.mNetworkLogger.resume();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    public void discardDeviceWideLogsLocked() {
        this.mSecurityLogMonitor.discardLogs();
        if (this.mNetworkLogger != null) {
            this.mNetworkLogger.discardLogs();
        }
    }

    public boolean isNetworkLoggingEnabled(@android.annotation.Nullable android.content.ComponentName componentName, @android.annotation.NonNull java.lang.String str) {
        boolean isNetworkLoggingEnabledInternalLocked;
        if (!this.mHasFeature) {
            return false;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isDefaultDeviceOwner(callerIdentity) || (isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId())))) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-network-logging")) || hasCallingOrSelfPermission("android.permission.MANAGE_USERS"));
        synchronized (getLockObject()) {
            isNetworkLoggingEnabledInternalLocked = isNetworkLoggingEnabledInternalLocked();
        }
        return isNetworkLoggingEnabledInternalLocked;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isNetworkLoggingEnabledInternalLocked() {
        com.android.server.devicepolicy.ActiveAdmin networkLoggingControllingAdminLocked = getNetworkLoggingControllingAdminLocked();
        return networkLoggingControllingAdminLocked != null && networkLoggingControllingAdminLocked.isNetworkLoggingEnabled;
    }

    public java.util.List<android.app.admin.NetworkEvent> retrieveNetworkLogs(@android.annotation.Nullable android.content.ComponentName componentName, @android.annotation.NonNull java.lang.String str, long j) {
        if (!this.mHasFeature) {
            return null;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        boolean z = isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId());
        com.android.internal.util.Preconditions.checkCallAuthorization((callerIdentity.hasAdminComponent() && (isDefaultDeviceOwner(callerIdentity) || z)) || (callerIdentity.hasPackage() && isCallerDelegate(callerIdentity, "delegation-network-logging")));
        if (this.mOwners.hasDeviceOwner()) {
            checkAllUsersAreAffiliatedWithDevice();
        }
        synchronized (getLockObject()) {
            try {
                if (this.mNetworkLogger == null || !isNetworkLoggingEnabledInternalLocked()) {
                    return null;
                }
                android.app.admin.DevicePolicyEventLogger.createEvent(120).setAdmin(callerIdentity.getPackageName()).setBoolean(componentName == null).setStrings(new java.lang.String[]{z ? LOG_TAG_PROFILE_OWNER : LOG_TAG_DEVICE_OWNER}).write();
                long currentTimeMillis = java.lang.System.currentTimeMillis();
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(callerIdentity.getUserId());
                if (currentTimeMillis > lambda$getUserDataUnchecked$5.mLastNetworkLogsRetrievalTime) {
                    lambda$getUserDataUnchecked$5.mLastNetworkLogsRetrievalTime = currentTimeMillis;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
                return this.mNetworkLogger.retrieveLogs(j);
            } finally {
            }
        }
    }

    private boolean shouldSendNetworkLoggingNotificationLocked() {
        ensureLocked();
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
        if (deviceOwnerAdminLocked == null || !deviceOwnerAdminLocked.isNetworkLoggingEnabled || deviceOwnerAdminLocked.numNetworkLoggingNotifications >= 2) {
            return false;
        }
        long currentTimeMillis = java.lang.System.currentTimeMillis();
        if (currentTimeMillis - deviceOwnerAdminLocked.lastNetworkLoggingNotificationTimeMs < MS_PER_DAY) {
            return false;
        }
        deviceOwnerAdminLocked.numNetworkLoggingNotifications++;
        if (deviceOwnerAdminLocked.numNetworkLoggingNotifications >= 2) {
            deviceOwnerAdminLocked.lastNetworkLoggingNotificationTimeMs = 0L;
        } else {
            deviceOwnerAdminLocked.lastNetworkLoggingNotificationTimeMs = currentTimeMillis;
        }
        saveSettingsLocked(deviceOwnerAdminLocked.getUserHandle().getIdentifier());
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handleSendNetworkLoggingNotification, reason: merged with bridge method [inline-methods] */
    public void lambda$setNetworkLoggingActiveInternal$143() {
        android.content.pm.PackageManagerInternal packageManagerInternal = this.mInjector.getPackageManagerInternal();
        android.content.Intent intent = new android.content.Intent("android.app.action.SHOW_DEVICE_MONITORING_DIALOG");
        intent.setPackage(packageManagerInternal.getSystemUiServiceComponent().getPackageName());
        this.mNetworkLoggingNotificationUserId = getCurrentForegroundUserId();
        android.app.PendingIntent broadcastAsUser = android.app.PendingIntent.getBroadcastAsUser(this.mContext, 0, intent, 67108864, android.os.UserHandle.CURRENT);
        java.lang.String networkLoggingTitle = getNetworkLoggingTitle();
        java.lang.String networkLoggingText = getNetworkLoggingText();
        android.app.Notification build = new android.app.Notification.Builder(this.mContext, com.android.internal.notification.SystemNotificationChannels.DEVICE_ADMIN).setSmallIcon(android.R.drawable.ic_ime_nav_back).setContentTitle(networkLoggingTitle).setContentText(networkLoggingText).setTicker(networkLoggingTitle).setShowWhen(true).setContentIntent(broadcastAsUser).setStyle(new android.app.Notification.BigTextStyle().bigText(networkLoggingText)).build();
        com.android.server.utils.Slogf.i(LOG_TAG, "Sending network logging notification to user %d", java.lang.Integer.valueOf(this.mNetworkLoggingNotificationUserId));
        this.mInjector.getNotificationManager().notifyAsUser(null, 1002, build, android.os.UserHandle.of(this.mNetworkLoggingNotificationUserId));
    }

    private java.lang.String getNetworkLoggingTitle() {
        return getUpdatableString("Core.NETWORK_LOGGING_TITLE", android.R.string.mmcc_imsi_unknown_in_hlr_msim_template, new java.lang.Object[0]);
    }

    private java.lang.String getNetworkLoggingText() {
        return getUpdatableString("Core.NETWORK_LOGGING_MESSAGE", android.R.string.mmcc_imsi_unknown_in_hlr, new java.lang.Object[0]);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handleCancelNetworkLoggingNotification, reason: merged with bridge method [inline-methods] */
    public void lambda$setNetworkLoggingActiveInternal$144() {
        if (this.mNetworkLoggingNotificationUserId == -10000) {
            com.android.server.utils.Slogf.d(LOG_TAG, "Not cancelling network logging notification for USER_NULL");
            return;
        }
        com.android.server.utils.Slogf.i(LOG_TAG, "Cancelling network logging notification for user %d", java.lang.Integer.valueOf(this.mNetworkLoggingNotificationUserId));
        this.mInjector.getNotificationManager().cancelAsUser(null, 1002, android.os.UserHandle.of(this.mNetworkLoggingNotificationUserId));
        this.mNetworkLoggingNotificationUserId = com.android.server.am.ProcessList.INVALID_ADJ;
    }

    private java.lang.String getOwnerPackageNameForUserLocked(int i) {
        if (this.mOwners.getDeviceOwnerUserId() == i) {
            return this.mOwners.getDeviceOwnerPackageName();
        }
        return this.mOwners.getProfileOwnerPackage(i);
    }

    private android.content.Intent createCrossUserServiceIntent(@android.annotation.NonNull android.content.Intent intent, @android.annotation.NonNull java.lang.String str, int i) throws android.os.RemoteException, java.lang.SecurityException {
        android.content.pm.ResolveInfo resolveService = this.mIPackageManager.resolveService(intent, intent.resolveTypeIfNeeded(this.mContext.getContentResolver()), 0L, i);
        if (resolveService == null || resolveService.serviceInfo == null) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Fail to look up the service: %s or user %d is not running", intent, java.lang.Integer.valueOf(i));
            return null;
        }
        if (!str.equals(resolveService.serviceInfo.packageName)) {
            throw new java.lang.SecurityException("Only allow to bind service in " + str);
        }
        if (resolveService.serviceInfo.exported && !"android.permission.BIND_DEVICE_ADMIN".equals(resolveService.serviceInfo.permission)) {
            throw new java.lang.SecurityException("Service must be protected by BIND_DEVICE_ADMIN permission");
        }
        intent.setComponent(resolveService.serviceInfo.getComponentName());
        return intent;
    }

    public long getLastSecurityLogRetrievalTime() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || canManageUsers(callerIdentity));
        return lambda$getUserDataUnchecked$5(0).mLastSecurityLogRetrievalTime;
    }

    public long getLastBugReportRequestTime() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || canManageUsers(callerIdentity));
        return lambda$getUserDataUnchecked$5(0).mLastBugReportRequestTime;
    }

    public long getLastNetworkLogRetrievalTime() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || (isProfileOwner(callerIdentity) && isManagedProfile(callerIdentity.getUserId())) || canManageUsers(callerIdentity));
        int networkLoggingAffectedUser = getNetworkLoggingAffectedUser();
        if (networkLoggingAffectedUser >= 0) {
            return lambda$getUserDataUnchecked$5(networkLoggingAffectedUser).mLastNetworkLogsRetrievalTime;
        }
        return -1L;
    }

    public boolean setResetPasswordToken(android.content.ComponentName componentName, java.lang.String str, byte[] bArr) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        boolean z;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return false;
        }
        if (bArr == null || bArr.length < 32) {
            throw new java.lang.IllegalArgumentException("token must be at least 32-byte long");
        }
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        int userId = callerIdentity.getUserId();
        if (isUnicornFlagEnabled()) {
            com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_RESET_PASSWORD", callerIdentity.getPackageName(), userId);
            java.lang.Long l = (java.lang.Long) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.RESET_PASSWORD_TOKEN, enforcePermissionAndGetEnforcingAdmin, userId);
            long addEscrowToken = addEscrowToken(bArr, l == null ? 0L : l.longValue(), userId);
            if (addEscrowToken == 0) {
                return false;
            }
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.RESET_PASSWORD_TOKEN, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.LongPolicyValue(addEscrowToken), userId);
            return true;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
            lambda$getUserDataUnchecked$5.mPasswordTokenHandle = addEscrowToken(bArr, lambda$getUserDataUnchecked$5.mPasswordTokenHandle, userId);
            saveSettingsLocked(userId);
            z = lambda$getUserDataUnchecked$5.mPasswordTokenHandle != 0;
        }
        return z;
    }

    private long addEscrowToken(final byte[] bArr, long j, final int i) {
        resetEscrowToken(j, i);
        return ((java.lang.Long) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda91
            public final java.lang.Object getOrThrow() {
                java.lang.Long lambda$addEscrowToken$149;
                lambda$addEscrowToken$149 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$addEscrowToken$149(bArr, i);
                return lambda$addEscrowToken$149;
            }
        })).longValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Long lambda$addEscrowToken$149(byte[] bArr, int i) throws java.lang.Exception {
        return java.lang.Long.valueOf(this.mLockPatternUtils.addEscrowToken(bArr, i, (com.android.internal.widget.LockPatternUtils.EscrowTokenStateChangeCallback) null));
    }

    private boolean resetEscrowToken(final long j, final int i) {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda187
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$resetEscrowToken$150;
                lambda$resetEscrowToken$150 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$resetEscrowToken$150(j, i);
                return lambda$resetEscrowToken$150;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$resetEscrowToken$150(long j, int i) throws java.lang.Exception {
        if (j != 0) {
            return java.lang.Boolean.valueOf(this.mLockPatternUtils.removeEscrowToken(j, i));
        }
        return false;
    }

    public boolean clearResetPasswordToken(android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        boolean z = false;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return false;
        }
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        int userId = callerIdentity.getUserId();
        if (isUnicornFlagEnabled()) {
            com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_RESET_PASSWORD", callerIdentity.getPackageName(), userId);
            java.lang.Long l = (java.lang.Long) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.RESET_PASSWORD_TOKEN, enforcePermissionAndGetEnforcingAdmin, userId);
            if (l == null) {
                return false;
            }
            boolean resetEscrowToken = resetEscrowToken(l.longValue(), userId);
            this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.RESET_PASSWORD_TOKEN, enforcePermissionAndGetEnforcingAdmin, userId);
            return resetEscrowToken;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
                if (lambda$getUserDataUnchecked$5.mPasswordTokenHandle != 0) {
                    z = resetEscrowToken(lambda$getUserDataUnchecked$5.mPasswordTokenHandle, userId);
                    lambda$getUserDataUnchecked$5.mPasswordTokenHandle = 0L;
                    saveSettingsLocked(userId);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return z;
    }

    public boolean isResetPasswordTokenActive(android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        boolean isResetPasswordTokenActiveForUserLocked;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return false;
        }
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        int userId = callerIdentity.getUserId();
        if (isUnicornFlagEnabled()) {
            java.lang.Long l = (java.lang.Long) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.RESET_PASSWORD_TOKEN, enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_RESET_PASSWORD", callerIdentity.getPackageName(), userId), userId);
            return isResetPasswordTokenActiveForUserLocked(l == null ? 0L : l.longValue(), userId);
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            isResetPasswordTokenActiveForUserLocked = isResetPasswordTokenActiveForUserLocked(lambda$getUserDataUnchecked$5(userId).mPasswordTokenHandle, userId);
        }
        return isResetPasswordTokenActiveForUserLocked;
    }

    private boolean isResetPasswordTokenActiveForUserLocked(final long j, final int i) {
        if (j != 0) {
            return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda27
                public final java.lang.Object getOrThrow() {
                    java.lang.Boolean lambda$isResetPasswordTokenActiveForUserLocked$151;
                    lambda$isResetPasswordTokenActiveForUserLocked$151 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isResetPasswordTokenActiveForUserLocked$151(j, i);
                    return lambda$isResetPasswordTokenActiveForUserLocked$151;
                }
            })).booleanValue();
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isResetPasswordTokenActiveForUserLocked$151(long j, int i) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(this.mLockPatternUtils.isEscrowTokenActive(j, i));
    }

    public boolean resetPasswordWithToken(android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, byte[] bArr, int i) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        boolean z = false;
        if (!this.mHasFeature || !this.mLockPatternUtils.hasSecureLockScreen()) {
            return false;
        }
        java.util.Objects.requireNonNull(bArr);
        if (isUnicornFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        int userId = callerIdentity.getUserId();
        if (str2 == null) {
            str2 = "";
        }
        java.lang.String str3 = str2;
        if (isUnicornFlagEnabled()) {
            java.lang.Long l = (java.lang.Long) this.mDevicePolicyEngine.getLocalPolicySetByAdmin(com.android.server.devicepolicy.PolicyDefinition.RESET_PASSWORD_TOKEN, enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_RESET_PASSWORD", callerIdentity.getPackageName(), userId), userId);
            if (l != null && l.longValue() != 0) {
                z = resetPasswordInternal(str3, l.longValue(), bArr, i, callerIdentity);
            } else {
                com.android.server.utils.Slogf.w(LOG_TAG, "No saved token handle");
            }
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
            synchronized (getLockObject()) {
                try {
                    com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
                    if (lambda$getUserDataUnchecked$5.mPasswordTokenHandle != 0) {
                        z = resetPasswordInternal(str3, lambda$getUserDataUnchecked$5.mPasswordTokenHandle, bArr, i, callerIdentity);
                    } else {
                        com.android.server.utils.Slogf.w(LOG_TAG, "No saved token handle");
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }
        if (z) {
            if (isUnicornFlagEnabled()) {
                android.app.admin.DevicePolicyEventLogger.createEvent(206).setAdmin(str).write();
            } else {
                android.app.admin.DevicePolicyEventLogger.createEvent(206).setAdmin(callerIdentity.getComponentName()).write();
            }
        }
        return z;
    }

    public boolean isCurrentInputMethodSetByOwner() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity) || canQueryAdminPolicy(callerIdentity) || isSystemUid(callerIdentity), "Only profile owner, device owner, a caller with QUERY_ADMIN_POLICY permission or system may call this method.");
        return lambda$getUserDataUnchecked$5(callerIdentity.getUserId()).mCurrentInputMethodSet;
    }

    public android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(@android.annotation.NonNull android.os.UserHandle userHandle) {
        android.content.pm.StringParceledListSlice stringParceledListSlice;
        int identifier = userHandle.getIdentifier();
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization((isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity) || canQueryAdminPolicy(callerIdentity)) && hasFullCrossUsersPermission(callerIdentity, identifier));
        synchronized (getLockObject()) {
            stringParceledListSlice = new android.content.pm.StringParceledListSlice(new java.util.ArrayList(lambda$getUserDataUnchecked$5(identifier).mOwnerInstalledCaCerts));
        }
        return stringParceledListSlice;
    }

    public void clearApplicationUserData(android.content.ComponentName componentName, java.lang.String str, android.content.pm.IPackageDataObserver iPackageDataObserver) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(str, "packageName is null");
        java.util.Objects.requireNonNull(iPackageDataObserver, "callback is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(23);
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                android.app.ActivityManager.getService().clearApplicationUserData(str, false, iPackageDataObserver, callerIdentity.getUserId());
            } catch (android.os.RemoteException e) {
            } catch (java.lang.SecurityException e2) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Not allowed to clear application user data for package " + str, e2);
                try {
                    iPackageDataObserver.onRemoveCompleted(str, false);
                } catch (android.os.RemoteException e3) {
                }
            }
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    public void setLogoutEnabled(android.content.ComponentName componentName, boolean z) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        checkCanExecuteOrThrowUnsafe(34);
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                if (deviceOwnerAdminLocked.isLogoutEnabled == z) {
                    return;
                }
                deviceOwnerAdminLocked.isLogoutEnabled = z;
                saveSettingsLocked(callerIdentity.getUserId());
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean isLogoutEnabled() {
        boolean z = false;
        if (!this.mHasFeature) {
            return false;
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                if (deviceOwnerAdminLocked != null && deviceOwnerAdminLocked.isLogoutEnabled) {
                    z = true;
                }
            } finally {
            }
        }
        return z;
    }

    public java.util.List<java.lang.String> getDisallowedSystemApps(android.content.ComponentName componentName, int i, java.lang.String str) throws android.os.RemoteException {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        return new java.util.ArrayList(this.mOverlayPackagesProvider.getNonRequiredApps(componentName, i, str));
    }

    public void transferOwnership(@android.annotation.NonNull android.content.ComponentName componentName, @android.annotation.NonNull android.content.ComponentName componentName2, @android.annotation.Nullable android.os.PersistableBundle persistableBundle) {
        java.lang.String str;
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(componentName2, "Target cannot be null.");
        com.android.internal.util.Preconditions.checkArgument(!componentName.equals(componentName2), "Provided administrator and target are the same object.");
        com.android.internal.util.Preconditions.checkArgument(!componentName.getPackageName().equals(componentName2.getPackageName()), "Provided administrator and target have the same package name.");
        if (persistableBundle != null) {
            android.app.admin.PolicySizeVerifier.enforceMaxStringLength(persistableBundle, "bundle");
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity));
        int userId = callerIdentity.getUserId();
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(userId);
        android.app.admin.DeviceAdminInfo findAdmin = findAdmin(componentName2, userId, true);
        checkActiveAdminPrecondition(componentName2, findAdmin, lambda$getUserDataUnchecked$5);
        com.android.internal.util.Preconditions.checkArgument(findAdmin.supportsTransferOwnership(), "Provided target does not support ownership transfer.");
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            synchronized (getLockObject()) {
                if (persistableBundle == null) {
                    try {
                        persistableBundle = new android.os.PersistableBundle();
                    } catch (java.lang.Throwable th) {
                        throw th;
                    }
                }
                if (isProfileOwner(callerIdentity)) {
                    str = LOG_TAG_PROFILE_OWNER;
                    prepareTransfer(componentName, componentName2, persistableBundle, userId, LOG_TAG_PROFILE_OWNER);
                    transferProfileOwnershipLocked(componentName, componentName2, userId);
                    sendProfileOwnerCommand("android.app.action.TRANSFER_OWNERSHIP_COMPLETE", getTransferOwnershipAdminExtras(persistableBundle), userId);
                    postTransfer("android.app.action.PROFILE_OWNER_CHANGED", userId);
                    if (isUserAffiliatedWithDeviceLocked(userId)) {
                        notifyAffiliatedProfileTransferOwnershipComplete(userId);
                    }
                } else if (!isDefaultDeviceOwner(callerIdentity)) {
                    str = null;
                } else {
                    str = LOG_TAG_DEVICE_OWNER;
                    prepareTransfer(componentName, componentName2, persistableBundle, userId, LOG_TAG_DEVICE_OWNER);
                    transferDeviceOwnershipLocked(componentName, componentName2, userId);
                    sendDeviceOwnerCommand("android.app.action.TRANSFER_OWNERSHIP_COMPLETE", getTransferOwnershipAdminExtras(persistableBundle));
                    postTransfer("android.app.action.DEVICE_OWNER_CHANGED", userId);
                }
            }
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            android.app.admin.DevicePolicyEventLogger.createEvent(58).setAdmin(componentName).setStrings(new java.lang.String[]{componentName2.getPackageName(), str}).write();
        } catch (java.lang.Throwable th2) {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
            throw th2;
        }
    }

    private void prepareTransfer(android.content.ComponentName componentName, android.content.ComponentName componentName2, android.os.PersistableBundle persistableBundle, int i, java.lang.String str) {
        saveTransferOwnershipBundleLocked(persistableBundle, i);
        this.mTransferOwnershipMetadataManager.saveMetadataFile(new com.android.server.devicepolicy.TransferOwnershipMetadataManager.Metadata(componentName, componentName2, i, str));
    }

    private void postTransfer(java.lang.String str, int i) {
        deleteTransferOwnershipMetadataFileLocked();
        sendOwnerChangedBroadcast(str, i);
    }

    private void notifyAffiliatedProfileTransferOwnershipComplete(int i) {
        android.os.Bundle bundle = new android.os.Bundle();
        bundle.putParcelable("android.intent.extra.USER", android.os.UserHandle.of(i));
        sendDeviceOwnerCommand("android.app.action.AFFILIATED_PROFILE_TRANSFER_OWNERSHIP_COMPLETE", bundle);
    }

    private void transferProfileOwnershipLocked(android.content.ComponentName componentName, android.content.ComponentName componentName2, int i) {
        transferActiveAdminUncheckedLocked(componentName2, componentName, i);
        this.mOwners.transferProfileOwner(componentName2, i);
        com.android.server.utils.Slogf.i(LOG_TAG, "Profile owner set: " + componentName2 + " on user " + i);
        this.mOwners.writeProfileOwner(i);
        this.mDeviceAdminServiceController.startServiceForAdmin(componentName2.getPackageName(), i, "transfer-profile-owner");
    }

    private void transferDeviceOwnershipLocked(android.content.ComponentName componentName, android.content.ComponentName componentName2, int i) {
        transferActiveAdminUncheckedLocked(componentName2, componentName, i);
        this.mOwners.transferDeviceOwnership(componentName2);
        com.android.server.utils.Slogf.i(LOG_TAG, "Device owner set: " + componentName2 + " on user " + i);
        this.mOwners.writeDeviceOwner();
        this.mDeviceAdminServiceController.startServiceForAdmin(componentName2.getPackageName(), i, "transfer-device-owner");
    }

    private android.os.Bundle getTransferOwnershipAdminExtras(android.os.PersistableBundle persistableBundle) {
        android.os.Bundle bundle = new android.os.Bundle();
        if (persistableBundle != null) {
            bundle.putParcelable("android.app.extra.TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE", persistableBundle);
        }
        return bundle;
    }

    public void setStartUserSessionMessage(android.content.ComponentName componentName, java.lang.CharSequence charSequence) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        java.lang.String charSequence2 = charSequence != null ? charSequence.toString() : null;
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                if (android.text.TextUtils.equals(deviceOwnerAdminLocked.startUserSessionMessage, charSequence)) {
                    return;
                }
                deviceOwnerAdminLocked.startUserSessionMessage = charSequence2;
                saveSettingsLocked(callerIdentity.getUserId());
                this.mInjector.getActivityManagerInternal().setSwitchingFromSystemUserMessage(charSequence2);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setEndUserSessionMessage(android.content.ComponentName componentName, java.lang.CharSequence charSequence) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        java.lang.String charSequence2 = charSequence != null ? charSequence.toString() : null;
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                if (android.text.TextUtils.equals(deviceOwnerAdminLocked.endUserSessionMessage, charSequence)) {
                    return;
                }
                deviceOwnerAdminLocked.endUserSessionMessage = charSequence2;
                saveSettingsLocked(callerIdentity.getUserId());
                this.mInjector.getActivityManagerInternal().setSwitchingToSystemUserMessage(charSequence2);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public java.lang.String getStartUserSessionMessage(android.content.ComponentName componentName) {
        java.lang.String str;
        if (!this.mHasFeature) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        synchronized (getLockObject()) {
            str = getDeviceOwnerAdminLocked().startUserSessionMessage;
        }
        return str;
    }

    public java.lang.String getEndUserSessionMessage(android.content.ComponentName componentName) {
        java.lang.String str;
        if (!this.mHasFeature) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        synchronized (getLockObject()) {
            str = getDeviceOwnerAdminLocked().endUserSessionMessage;
        }
        return str;
    }

    private void deleteTransferOwnershipMetadataFileLocked() {
        this.mTransferOwnershipMetadataManager.deleteMetadataFile();
    }

    @android.annotation.Nullable
    public android.os.PersistableBundle getTransferOwnershipBundle() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity) || isDefaultDeviceOwner(callerIdentity));
        synchronized (getLockObject()) {
            java.io.File file = new java.io.File(this.mPathProvider.getUserSystemDirectory(callerIdentity.getUserId()), TRANSFER_OWNERSHIP_PARAMETERS_XML);
            if (!file.exists()) {
                return null;
            }
            try {
                java.io.FileInputStream fileInputStream = new java.io.FileInputStream(file);
                try {
                    com.android.modules.utils.TypedXmlPullParser resolvePullParser = android.util.Xml.resolvePullParser(fileInputStream);
                    resolvePullParser.next();
                    android.os.PersistableBundle restoreFromXml = android.os.PersistableBundle.restoreFromXml(resolvePullParser);
                    fileInputStream.close();
                    return restoreFromXml;
                } catch (java.lang.Throwable th) {
                    try {
                        fileInputStream.close();
                    } catch (java.lang.Throwable th2) {
                        th.addSuppressed(th2);
                    }
                    throw th;
                }
            } catch (java.io.IOException | java.lang.IllegalArgumentException | org.xmlpull.v1.XmlPullParserException e) {
                com.android.server.utils.Slogf.e(LOG_TAG, "Caught exception while trying to load the owner transfer parameters from file " + file, e);
                return null;
            }
        }
    }

    public int addOverrideApn(@android.annotation.NonNull android.content.ComponentName componentName, @android.annotation.NonNull final android.telephony.data.ApnSetting apnSetting) {
        if (!this.mHasFeature || !this.mHasTelephonyFeature) {
            return -1;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(apnSetting, "ApnSetting is null in addOverrideApn");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        if (apnSetting.getApnTypeBitmask() == 16384) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isManagedProfileOwner(callerIdentity));
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        }
        final android.telephony.TelephonyManager telephonyManager = (android.telephony.TelephonyManager) this.mContext.getSystemService(android.telephony.TelephonyManager.class);
        if (telephonyManager != null) {
            return ((java.lang.Integer) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda197
                public final java.lang.Object getOrThrow() {
                    java.lang.Integer lambda$addOverrideApn$152;
                    lambda$addOverrideApn$152 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$addOverrideApn$152(telephonyManager, apnSetting);
                    return lambda$addOverrideApn$152;
                }
            })).intValue();
        }
        com.android.server.utils.Slogf.w(LOG_TAG, "TelephonyManager is null when trying to add override apn");
        return -1;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$addOverrideApn$152(android.telephony.TelephonyManager telephonyManager, android.telephony.data.ApnSetting apnSetting) throws java.lang.Exception {
        return java.lang.Integer.valueOf(telephonyManager.addDevicePolicyOverrideApn(this.mContext, apnSetting));
    }

    public boolean updateOverrideApn(@android.annotation.NonNull android.content.ComponentName componentName, final int i, @android.annotation.NonNull final android.telephony.data.ApnSetting apnSetting) {
        if (!this.mHasFeature || !this.mHasTelephonyFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(apnSetting, "ApnSetting is null in updateOverrideApn");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        android.telephony.data.ApnSetting apnSetting2 = getApnSetting(i);
        if (apnSetting2 != null && apnSetting2.getApnTypeBitmask() == 16384 && apnSetting.getApnTypeBitmask() == 16384) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isManagedProfileOwner(callerIdentity));
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        }
        if (i < 0) {
            return false;
        }
        final android.telephony.TelephonyManager telephonyManager = (android.telephony.TelephonyManager) this.mContext.getSystemService(android.telephony.TelephonyManager.class);
        if (telephonyManager != null) {
            return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda145
                public final java.lang.Object getOrThrow() {
                    java.lang.Boolean lambda$updateOverrideApn$153;
                    lambda$updateOverrideApn$153 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$updateOverrideApn$153(telephonyManager, i, apnSetting);
                    return lambda$updateOverrideApn$153;
                }
            })).booleanValue();
        }
        com.android.server.utils.Slogf.w(LOG_TAG, "TelephonyManager is null when trying to modify override apn");
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$updateOverrideApn$153(android.telephony.TelephonyManager telephonyManager, int i, android.telephony.data.ApnSetting apnSetting) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(telephonyManager.modifyDevicePolicyOverrideApn(this.mContext, i, apnSetting));
    }

    public boolean removeOverrideApn(@android.annotation.NonNull android.content.ComponentName componentName, int i) {
        if (!this.mHasFeature || !this.mHasTelephonyFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        android.telephony.data.ApnSetting apnSetting = getApnSetting(i);
        if (apnSetting != null && apnSetting.getApnTypeBitmask() == 16384) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isManagedProfileOwner(callerIdentity));
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        }
        return removeOverrideApnUnchecked(i);
    }

    private boolean removeOverrideApnUnchecked(final int i) {
        return i >= 0 && ((java.lang.Integer) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda143
            public final java.lang.Object getOrThrow() {
                java.lang.Integer lambda$removeOverrideApnUnchecked$154;
                lambda$removeOverrideApnUnchecked$154 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$removeOverrideApnUnchecked$154(i);
                return lambda$removeOverrideApnUnchecked$154;
            }
        })).intValue() > 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$removeOverrideApnUnchecked$154(int i) throws java.lang.Exception {
        return java.lang.Integer.valueOf(this.mContext.getContentResolver().delete(android.net.Uri.withAppendedPath(android.provider.Telephony.Carriers.DPC_URI, java.lang.Integer.toString(i)), null, null));
    }

    private android.telephony.data.ApnSetting getApnSetting(final int i) {
        android.telephony.data.ApnSetting apnSetting = null;
        if (i < 0) {
            return null;
        }
        android.database.Cursor cursor = (android.database.Cursor) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda153
            public final java.lang.Object getOrThrow() {
                android.database.Cursor lambda$getApnSetting$155;
                lambda$getApnSetting$155 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getApnSetting$155(i);
                return lambda$getApnSetting$155;
            }
        });
        if (cursor != null) {
            while (cursor.moveToNext() && (apnSetting = android.telephony.data.ApnSetting.makeApnSetting(cursor)) == null) {
            }
            cursor.close();
        }
        return apnSetting;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.database.Cursor lambda$getApnSetting$155(int i) throws java.lang.Exception {
        return this.mContext.getContentResolver().query(android.net.Uri.withAppendedPath(android.provider.Telephony.Carriers.DPC_URI, java.lang.Integer.toString(i)), null, null, null, "name ASC");
    }

    public java.util.List<android.telephony.data.ApnSetting> getOverrideApns(@android.annotation.NonNull android.content.ComponentName componentName) {
        if (!this.mHasFeature || !this.mHasTelephonyFeature) {
            return java.util.Collections.emptyList();
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isManagedProfileOwner(callerIdentity));
        java.util.List<android.telephony.data.ApnSetting> overrideApnsUnchecked = getOverrideApnsUnchecked();
        if (isProfileOwner(callerIdentity)) {
            java.util.ArrayList arrayList = new java.util.ArrayList();
            for (android.telephony.data.ApnSetting apnSetting : overrideApnsUnchecked) {
                if (apnSetting.getApnTypeBitmask() == 16384) {
                    arrayList.add(apnSetting);
                }
            }
            return arrayList;
        }
        return overrideApnsUnchecked;
    }

    private java.util.List<android.telephony.data.ApnSetting> getOverrideApnsUnchecked() {
        final android.telephony.TelephonyManager telephonyManager = (android.telephony.TelephonyManager) this.mContext.getSystemService(android.telephony.TelephonyManager.class);
        if (telephonyManager != null) {
            return (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda86
                public final java.lang.Object getOrThrow() {
                    java.util.List lambda$getOverrideApnsUnchecked$156;
                    lambda$getOverrideApnsUnchecked$156 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getOverrideApnsUnchecked$156(telephonyManager);
                    return lambda$getOverrideApnsUnchecked$156;
                }
            });
        }
        com.android.server.utils.Slogf.w(LOG_TAG, "TelephonyManager is null when trying to get override apns");
        return java.util.Collections.emptyList();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.List lambda$getOverrideApnsUnchecked$156(android.telephony.TelephonyManager telephonyManager) throws java.lang.Exception {
        return telephonyManager.getDevicePolicyOverrideApns(this.mContext);
    }

    public void setOverrideApnsEnabled(@android.annotation.NonNull android.content.ComponentName componentName, boolean z) {
        if (!this.mHasFeature || !this.mHasTelephonyFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        checkCanExecuteOrThrowUnsafe(36);
        setOverrideApnsEnabledUnchecked(z);
    }

    private void setOverrideApnsEnabledUnchecked(boolean z) {
        final android.content.ContentValues contentValues = new android.content.ContentValues();
        contentValues.put("enforced", java.lang.Boolean.valueOf(z));
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda39
            public final java.lang.Object getOrThrow() {
                java.lang.Integer lambda$setOverrideApnsEnabledUnchecked$157;
                lambda$setOverrideApnsEnabledUnchecked$157 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setOverrideApnsEnabledUnchecked$157(contentValues);
                return lambda$setOverrideApnsEnabledUnchecked$157;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Integer lambda$setOverrideApnsEnabledUnchecked$157(android.content.ContentValues contentValues) throws java.lang.Exception {
        return java.lang.Integer.valueOf(this.mContext.getContentResolver().update(android.provider.Telephony.Carriers.ENFORCE_MANAGED_URI, contentValues, null, null));
    }

    public boolean isOverrideApnEnabled(@android.annotation.NonNull android.content.ComponentName componentName) {
        if (!this.mHasFeature || !this.mHasTelephonyFeature) {
            return false;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        android.database.Cursor cursor = (android.database.Cursor) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda206
            public final java.lang.Object getOrThrow() {
                android.database.Cursor lambda$isOverrideApnEnabled$158;
                lambda$isOverrideApnEnabled$158 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isOverrideApnEnabled$158();
                return lambda$isOverrideApnEnabled$158;
            }
        });
        if (cursor == null) {
            return false;
        }
        try {
            try {
                if (cursor.moveToFirst()) {
                    return cursor.getInt(cursor.getColumnIndex("enforced")) == 1;
                }
            } catch (java.lang.IllegalArgumentException e) {
                com.android.server.utils.Slogf.e(LOG_TAG, "Cursor returned from ENFORCE_MANAGED_URI doesn't contain correct info.", e);
            }
            return false;
        } finally {
            cursor.close();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.database.Cursor lambda$isOverrideApnEnabled$158() throws java.lang.Exception {
        return this.mContext.getContentResolver().query(android.provider.Telephony.Carriers.ENFORCE_MANAGED_URI, null, null, null, null);
    }

    @com.android.internal.annotations.VisibleForTesting
    void saveTransferOwnershipBundleLocked(android.os.PersistableBundle persistableBundle, int i) {
        java.io.File file = new java.io.File(this.mPathProvider.getUserSystemDirectory(i), TRANSFER_OWNERSHIP_PARAMETERS_XML);
        android.util.AtomicFile atomicFile = new android.util.AtomicFile(file);
        java.io.FileOutputStream fileOutputStream = null;
        try {
            java.io.FileOutputStream startWrite = atomicFile.startWrite();
            try {
                com.android.modules.utils.TypedXmlSerializer resolveSerializer = android.util.Xml.resolveSerializer(startWrite);
                resolveSerializer.startDocument((java.lang.String) null, true);
                resolveSerializer.startTag((java.lang.String) null, TAG_TRANSFER_OWNERSHIP_BUNDLE);
                persistableBundle.saveToXml(resolveSerializer);
                resolveSerializer.endTag((java.lang.String) null, TAG_TRANSFER_OWNERSHIP_BUNDLE);
                resolveSerializer.endDocument();
                atomicFile.finishWrite(startWrite);
            } catch (java.io.IOException | org.xmlpull.v1.XmlPullParserException e) {
                e = e;
                fileOutputStream = startWrite;
                com.android.server.utils.Slogf.e(LOG_TAG, "Caught exception while trying to save the owner transfer parameters to file " + file, e);
                file.delete();
                atomicFile.failWrite(fileOutputStream);
            }
        } catch (java.io.IOException | org.xmlpull.v1.XmlPullParserException e2) {
            e = e2;
        }
    }

    void deleteTransferOwnershipBundleLocked(int i) {
        new java.io.File(this.mPathProvider.getUserSystemDirectory(i), TRANSFER_OWNERSHIP_PARAMETERS_XML).delete();
    }

    private void logPasswordQualitySetIfSecurityLogEnabled(android.content.ComponentName componentName, int i, boolean z, android.app.admin.PasswordPolicy passwordPolicy) {
        if (android.app.admin.SecurityLog.isLoggingEnabled()) {
            android.app.admin.SecurityLog.writeEvent(210017, new java.lang.Object[]{componentName.getPackageName(), java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(z ? getProfileParentId(i) : i), java.lang.Integer.valueOf(passwordPolicy.length), java.lang.Integer.valueOf(passwordPolicy.quality), java.lang.Integer.valueOf(passwordPolicy.letters), java.lang.Integer.valueOf(passwordPolicy.nonLetter), java.lang.Integer.valueOf(passwordPolicy.numeric), java.lang.Integer.valueOf(passwordPolicy.upperCase), java.lang.Integer.valueOf(passwordPolicy.lowerCase), java.lang.Integer.valueOf(passwordPolicy.symbols)});
        }
    }

    private static java.lang.String getManagedProvisioningPackage(android.content.Context context) {
        return context.getResources().getString(android.R.string.config_healthConnectMigratorPackageName);
    }

    private void putPrivateDnsSettings(final int i, @android.annotation.Nullable final java.lang.String str) {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda196
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$putPrivateDnsSettings$159(i, str);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$putPrivateDnsSettings$159(int i, java.lang.String str) throws java.lang.Exception {
        android.net.ConnectivitySettingsManager.setPrivateDnsMode(this.mContext, i);
        android.net.ConnectivitySettingsManager.setPrivateDnsHostname(this.mContext, str);
    }

    public int setGlobalPrivateDns(@android.annotation.NonNull android.content.ComponentName componentName, int i, java.lang.String str) {
        if (!this.mHasFeature) {
            return 2;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        checkAllUsersAreAffiliatedWithDevice();
        checkCanExecuteOrThrowUnsafe(33);
        switch (i) {
            case 2:
                if (!android.text.TextUtils.isEmpty(str)) {
                    throw new java.lang.IllegalArgumentException("Host provided for opportunistic mode, but is not needed.");
                }
                putPrivateDnsSettings(2, null);
                return 0;
            case 3:
                if (android.text.TextUtils.isEmpty(str) || !com.android.internal.net.NetworkUtilsInternal.isWeaklyValidatedHostname(str)) {
                    throw new java.lang.IllegalArgumentException(java.lang.String.format("Provided hostname %s is not valid", str));
                }
                putPrivateDnsSettings(3, str);
                return 0;
            default:
                throw new java.lang.IllegalArgumentException(java.lang.String.format("Provided mode, %d, is not a valid mode.", java.lang.Integer.valueOf(i)));
        }
    }

    public int getGlobalPrivateDnsMode(@android.annotation.NonNull android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return 0;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        switch (android.net.ConnectivitySettingsManager.getPrivateDnsMode(this.mContext)) {
        }
        return 0;
    }

    public java.lang.String getGlobalPrivateDnsHost(@android.annotation.NonNull android.content.ComponentName componentName) {
        if (!this.mHasFeature) {
            return null;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(getCallerIdentity(componentName)));
        return this.mInjector.settingsGlobalGetString("private_dns_specifier");
    }

    public void installUpdateFromFile(android.content.ComponentName componentName, java.lang.String str, final android.os.ParcelFileDescriptor parcelFileDescriptor, final android.app.admin.StartInstallingUpdateCallback startInstallingUpdateCallback) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        if (!isPermissionCheckFlagEnabled()) {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        }
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_SYSTEM_UPDATES", callerIdentity.getPackageName(), -1);
        } else {
            callerIdentity = getCallerIdentity(componentName);
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        }
        checkCanExecuteOrThrowUnsafe(26);
        android.app.admin.DevicePolicyEventLogger.createEvent(73).setAdmin(callerIdentity.getPackageName()).setBoolean(isDeviceAB()).write();
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda136
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$installUpdateFromFile$160(parcelFileDescriptor, startInstallingUpdateCallback);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$installUpdateFromFile$160(android.os.ParcelFileDescriptor parcelFileDescriptor, android.app.admin.StartInstallingUpdateCallback startInstallingUpdateCallback) throws java.lang.Exception {
        com.android.server.devicepolicy.UpdateInstaller nonAbUpdateInstaller;
        if (isDeviceAB()) {
            nonAbUpdateInstaller = new com.android.server.devicepolicy.AbUpdateInstaller(this.mContext, parcelFileDescriptor, startInstallingUpdateCallback, this.mInjector, this.mConstants);
        } else {
            nonAbUpdateInstaller = new com.android.server.devicepolicy.NonAbUpdateInstaller(this.mContext, parcelFileDescriptor, startInstallingUpdateCallback, this.mInjector, this.mConstants);
        }
        nonAbUpdateInstaller.startInstallUpdate();
    }

    private boolean isDeviceAB() {
        return "true".equalsIgnoreCase(android.os.SystemProperties.get(AB_DEVICE_KEY, ""));
    }

    public void setCrossProfileCalendarPackages(android.content.ComponentName componentName, java.util.List<java.lang.String> list) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            getProfileOwnerLocked(callerIdentity.getUserId()).mCrossProfileCalendarPackages = list;
            saveSettingsLocked(callerIdentity.getUserId());
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(70).setAdmin(componentName).setStrings(list == null ? null : (java.lang.String[]) list.toArray(new java.lang.String[list.size()])).write();
    }

    public java.util.List<java.lang.String> getCrossProfileCalendarPackages(android.content.ComponentName componentName) {
        java.util.List<java.lang.String> list;
        if (!this.mHasFeature) {
            return java.util.Collections.emptyList();
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            list = getProfileOwnerLocked(callerIdentity.getUserId()).mCrossProfileCalendarPackages;
        }
        return list;
    }

    public boolean isPackageAllowedToAccessCalendarForUser(java.lang.String str, int i) {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkStringNotEmpty(str, "Package name is null or empty");
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.server.pm.PackageManagerLocal.UnfilteredSnapshot withUnfilteredSnapshot = this.mInjector.getPackageManagerLocal().withUnfilteredSnapshot();
        try {
            com.android.server.pm.pkg.PackageState packageState = withUnfilteredSnapshot.getPackageStates().get(str);
            if (packageState == null) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Couldn't find package %s in user %d", str, java.lang.Integer.valueOf(i));
                withUnfilteredSnapshot.close();
                return false;
            }
            if (!packageState.getUserStateOrDefault(i).isInstalled()) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Couldn't find installed package %s in user %d", str, java.lang.Integer.valueOf(i));
                withUnfilteredSnapshot.close();
                return false;
            }
            int uid = android.os.UserHandle.getUid(i, packageState.getAppId());
            withUnfilteredSnapshot.close();
            if (getCallerIdentity().getUid() != uid) {
                com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS") || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL"));
            }
            synchronized (getLockObject()) {
                try {
                    if (this.mInjector.settingsSecureGetIntForUser("cross_profile_calendar_enabled", 0, i) == 0) {
                        return false;
                    }
                    com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                    if (profileOwnerAdminLocked == null) {
                        return false;
                    }
                    if (profileOwnerAdminLocked.mCrossProfileCalendarPackages == null) {
                        return true;
                    }
                    return profileOwnerAdminLocked.mCrossProfileCalendarPackages.contains(str);
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        } catch (java.lang.Throwable th2) {
            if (withUnfilteredSnapshot != null) {
                try {
                    withUnfilteredSnapshot.close();
                } catch (java.lang.Throwable th3) {
                    th2.addSuppressed(th3);
                }
            }
            throw th2;
        }
    }

    public java.util.List<java.lang.String> getCrossProfileCalendarPackagesForUser(int i) {
        if (!this.mHasFeature) {
            return java.util.Collections.emptyList();
        }
        com.android.internal.util.Preconditions.checkArgumentNonnegative(i, "Invalid userId");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS") || hasCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                if (profileOwnerAdminLocked != null) {
                    return profileOwnerAdminLocked.mCrossProfileCalendarPackages;
                }
                return java.util.Collections.emptyList();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setCrossProfilePackages(android.content.ComponentName componentName, final java.util.List<java.lang.String> list) {
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        java.util.Objects.requireNonNull(list, "Package names is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                final java.util.List<java.lang.String> list2 = profileOwnerLocked.mCrossProfilePackages;
                if (list.equals(list2)) {
                    return;
                }
                profileOwnerLocked.mCrossProfilePackages = list;
                saveSettingsLocked(callerIdentity.getUserId());
                logSetCrossProfilePackages(componentName, list);
                final android.content.pm.CrossProfileApps crossProfileApps = (android.content.pm.CrossProfileApps) this.mContext.createContextAsUser(callerIdentity.getUserHandle(), 0).getSystemService(android.content.pm.CrossProfileApps.class);
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda45
                    public final void runOrThrow() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.lambda$setCrossProfilePackages$161(crossProfileApps, list2, list);
                    }
                });
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$setCrossProfilePackages$161(android.content.pm.CrossProfileApps crossProfileApps, java.util.List list, java.util.List list2) throws java.lang.Exception {
        crossProfileApps.resetInteractAcrossProfilesAppOps(list, new java.util.HashSet(list2));
    }

    private void logSetCrossProfilePackages(android.content.ComponentName componentName, java.util.List<java.lang.String> list) {
        android.app.admin.DevicePolicyEventLogger.createEvent(138).setAdmin(componentName).setStrings((java.lang.String[]) list.toArray(new java.lang.String[list.size()])).write();
    }

    public java.util.List<java.lang.String> getCrossProfilePackages(android.content.ComponentName componentName) {
        java.util.List<java.lang.String> list;
        if (!this.mHasFeature) {
            return java.util.Collections.emptyList();
        }
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwner(callerIdentity));
        synchronized (getLockObject()) {
            list = getProfileOwnerLocked(callerIdentity.getUserId()).mCrossProfilePackages;
        }
        return list;
    }

    public java.util.List<java.lang.String> getAllCrossProfilePackages(int i) {
        java.util.List<java.lang.String> crossProfilePackagesForAdmins;
        if (!this.mHasFeature) {
            return java.util.Collections.emptyList();
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(callerIdentity) || isRootUid(callerIdentity) || hasCallingPermission("android.permission.INTERACT_ACROSS_USERS") || hasCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL") || hasPermissionForPreflight(callerIdentity, "android.permission.INTERACT_ACROSS_PROFILES"));
        synchronized (getLockObject()) {
            crossProfilePackagesForAdmins = getCrossProfilePackagesForAdmins(getProfileOwnerAdminsForProfileGroup(i));
            crossProfilePackagesForAdmins.addAll(getDefaultCrossProfilePackages());
        }
        return crossProfilePackagesForAdmins;
    }

    private java.util.List<java.lang.String> getCrossProfilePackagesForAdmins(java.util.List<com.android.server.devicepolicy.ActiveAdmin> list) {
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (int i = 0; i < list.size(); i++) {
            arrayList.addAll(list.get(i).mCrossProfilePackages);
        }
        return arrayList;
    }

    public java.util.List<java.lang.String> getDefaultCrossProfilePackages() {
        java.util.HashSet hashSet = new java.util.HashSet();
        java.util.Collections.addAll(hashSet, this.mContext.getResources().getStringArray(android.R.array.config_waterfallCutoutArray));
        java.util.Collections.addAll(hashSet, this.mContext.getResources().getStringArray(android.R.array.special_locale_names));
        return new java.util.ArrayList(hashSet);
    }

    private java.util.List<com.android.server.devicepolicy.ActiveAdmin> getProfileOwnerAdminsForProfileGroup(int i) {
        java.util.ArrayList arrayList;
        com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked;
        synchronized (getLockObject()) {
            try {
                arrayList = new java.util.ArrayList();
                int[] profileIdsWithDisabled = this.mUserManager.getProfileIdsWithDisabled(i);
                for (int i2 = 0; i2 < profileIdsWithDisabled.length; i2++) {
                    android.content.ComponentName lambda$isProfileOwner$72 = lambda$isProfileOwner$72(profileIdsWithDisabled[i2]);
                    if (lambda$isProfileOwner$72 != null && (activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(lambda$isProfileOwner$72, profileIdsWithDisabled[i2])) != null) {
                        arrayList.add(activeAdminUncheckedLocked);
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return arrayList;
    }

    public boolean isManagedKiosk() {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
        try {
            try {
                return isManagedKioskInternal();
            } catch (android.os.RemoteException e) {
                throw new java.lang.IllegalStateException(e);
            }
        } finally {
            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
        }
    }

    private boolean isUnattendedManagedKioskUnchecked() {
        try {
            if (isManagedKioskInternal()) {
                if (getPowerManagerInternal().wasDeviceIdleFor(30000L)) {
                    return true;
                }
            }
            return false;
        } catch (android.os.RemoteException e) {
            throw new java.lang.IllegalStateException(e);
        }
    }

    public boolean isUnattendedManagedKiosk() {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(canManageUsers(getCallerIdentity()) || hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda38
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isUnattendedManagedKiosk$162;
                lambda$isUnattendedManagedKiosk$162 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isUnattendedManagedKiosk$162();
                return lambda$isUnattendedManagedKiosk$162;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isUnattendedManagedKiosk$162() throws java.lang.Exception {
        return java.lang.Boolean.valueOf(isUnattendedManagedKioskUnchecked());
    }

    private boolean isManagedKioskInternal() throws android.os.RemoteException {
        return (!this.mOwners.hasDeviceOwner() || this.mInjector.getIActivityManager().getLockTaskModeState() != 1 || isLockTaskFeatureEnabled(1) || deviceHasKeyguard() || inEphemeralUserSession()) ? false : true;
    }

    private boolean isLockTaskFeatureEnabled(int i) throws android.os.RemoteException {
        int flags;
        android.app.admin.LockTaskPolicy lockTaskPolicy = (android.app.admin.LockTaskPolicy) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, getCurrentForegroundUserId());
        if (lockTaskPolicy == null) {
            flags = 16;
        } else {
            flags = lockTaskPolicy.getFlags();
        }
        return (flags & i) == i;
    }

    private boolean deviceHasKeyguard() {
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            if (this.mLockPatternUtils.isSecure(((android.content.pm.UserInfo) it.next()).id)) {
                return true;
            }
        }
        return false;
    }

    private boolean inEphemeralUserSession() {
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            if (this.mInjector.getUserManager().isUserEphemeral(((android.content.pm.UserInfo) it.next()).id)) {
                return true;
            }
        }
        return false;
    }

    private android.os.PowerManagerInternal getPowerManagerInternal() {
        return this.mInjector.getPowerManagerInternal();
    }

    public boolean startViewCalendarEventInManagedProfile(final java.lang.String str, final long j, final long j2, final long j3, final boolean z, final int i) {
        if (!this.mHasFeature) {
            return false;
        }
        com.android.internal.util.Preconditions.checkStringNotEmpty(str, "Package name is empty");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        if (!isCallingFromPackage(str, callerIdentity.getUid())) {
            throw new java.lang.SecurityException("Input package name doesn't align with actual calling package.");
        }
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda54
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$startViewCalendarEventInManagedProfile$163;
                lambda$startViewCalendarEventInManagedProfile$163 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$startViewCalendarEventInManagedProfile$163(callerIdentity, str, j, j2, j3, z, i);
                return lambda$startViewCalendarEventInManagedProfile$163;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$startViewCalendarEventInManagedProfile$163(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str, long j, long j2, long j3, boolean z, int i) throws java.lang.Exception {
        int managedUserId = getManagedUserId(callerIdentity.getUserId());
        if (managedUserId < 0) {
            return false;
        }
        if (!isPackageAllowedToAccessCalendarForUser(str, managedUserId)) {
            com.android.server.utils.Slogf.d(LOG_TAG, "Package %s is not allowed to access cross-profile calendar APIs", str);
            return false;
        }
        android.content.Intent intent = new android.content.Intent("android.provider.calendar.action.VIEW_MANAGED_PROFILE_CALENDAR_EVENT");
        intent.setPackage(str);
        intent.putExtra("id", j);
        intent.putExtra("beginTime", j2);
        intent.putExtra("endTime", j3);
        intent.putExtra("allDay", z);
        intent.setFlags(i);
        try {
            this.mContext.startActivityAsUser(intent, android.os.UserHandle.of(managedUserId));
            return true;
        } catch (android.content.ActivityNotFoundException e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "View event activity not found", e);
            return false;
        }
    }

    public void setApplicationExemptions(java.lang.String str, final java.lang.String str2, int[] iArr) {
        int i;
        if (!this.mHasFeature) {
            return;
        }
        com.android.internal.util.Preconditions.checkStringNotEmpty(str2, "Package name cannot be empty.");
        java.util.Objects.requireNonNull(iArr, "Application exemptions must not be null.");
        com.android.internal.util.Preconditions.checkArgument(areApplicationExemptionsValid(iArr), "Invalid application exemption constant found in application exemptions set.");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_POLICY_APP_EXEMPTIONS"));
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        final android.content.pm.ApplicationInfo packageInfoWithNullCheck = getPackageInfoWithNullCheck(str2, callerIdentity);
        java.util.Iterator<java.util.Map.Entry<java.lang.Integer, java.lang.String>> it = APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.entrySet().iterator();
        while (true) {
            if (!it.hasNext()) {
                break;
            }
            final java.util.Map.Entry<java.lang.Integer, java.lang.String> next = it.next();
            final int unsafeCheckOpNoThrow = this.mInjector.getAppOpsManager().unsafeCheckOpNoThrow(next.getValue(), packageInfoWithNullCheck.uid, packageInfoWithNullCheck.packageName);
            final int i2 = com.android.internal.util.ArrayUtils.contains(iArr, next.getKey().intValue()) ? 0 : 3;
            this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda178
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setApplicationExemptions$164(unsafeCheckOpNoThrow, i2, next, packageInfoWithNullCheck, str2);
                }
            });
        }
        java.lang.String[] strArr = new java.lang.String[iArr.length];
        for (i = 0; i < iArr.length; i++) {
            strArr[i] = APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.get(java.lang.Integer.valueOf(iArr[i]));
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(com.android.internal.util.FrameworkStatsLog.DEVICE_POLICY_EVENT__EVENT_ID__SET_APPLICATION_EXEMPTIONS).setAdmin(callerIdentity.getPackageName()).setStrings(str2, strArr).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setApplicationExemptions$164(int i, int i2, java.util.Map.Entry entry, android.content.pm.ApplicationInfo applicationInfo, java.lang.String str) throws java.lang.Exception {
        if (i != i2) {
            this.mInjector.getAppOpsManager().setMode((java.lang.String) entry.getValue(), applicationInfo.uid, str, i2);
        }
    }

    public int[] getApplicationExemptions(java.lang.String str) {
        if (!this.mHasFeature) {
            return new int[0];
        }
        com.android.internal.util.Preconditions.checkStringNotEmpty(str, "Package name cannot be empty.");
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_DEVICE_POLICY_APP_EXEMPTIONS"));
        android.content.pm.ApplicationInfo packageInfoWithNullCheck = getPackageInfoWithNullCheck(str, getCallerIdentity());
        android.util.IntArray intArray = new android.util.IntArray(0);
        for (java.util.Map.Entry<java.lang.Integer, java.lang.String> entry : APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.entrySet()) {
            if (this.mInjector.getAppOpsManager().unsafeCheckOpNoThrow(entry.getValue(), packageInfoWithNullCheck.uid, packageInfoWithNullCheck.packageName) == 0) {
                intArray.add(entry.getKey().intValue());
            }
        }
        return intArray.toArray();
    }

    private android.content.pm.ApplicationInfo getPackageInfoWithNullCheck(java.lang.String str, com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        android.content.pm.ApplicationInfo applicationInfo = this.mInjector.getPackageManagerInternal().getApplicationInfo(str, 0L, callerIdentity.getUid(), callerIdentity.getUserId());
        if (applicationInfo == null) {
            throw new android.os.ServiceSpecificException(1, "Package name not found.");
        }
        return applicationInfo;
    }

    private boolean areApplicationExemptionsValid(int[] iArr) {
        for (int i : iArr) {
            if (!APPLICATION_EXEMPTION_CONSTANTS_TO_APP_OPS.containsKey(java.lang.Integer.valueOf(i))) {
                return false;
            }
        }
        return true;
    }

    private boolean isCallingFromPackage(java.lang.String str, int i) {
        com.android.server.pm.PackageManagerLocal.UnfilteredSnapshot withUnfilteredSnapshot = this.mInjector.getPackageManagerLocal().withUnfilteredSnapshot();
        try {
            com.android.server.pm.pkg.PackageState packageState = withUnfilteredSnapshot.getPackageStates().get(str);
            int userId = android.os.UserHandle.getUserId(i);
            if (packageState == null) {
                com.android.server.utils.Slogf.d(LOG_TAG, "Calling UID " + i + " not found");
                withUnfilteredSnapshot.close();
                return false;
            }
            if (!packageState.getUserStateOrDefault(userId).isInstalled()) {
                com.android.server.utils.Slogf.d(LOG_TAG, "Calling UID " + i + " not installed");
                withUnfilteredSnapshot.close();
                return false;
            }
            boolean z = i == android.os.UserHandle.getUid(userId, packageState.getAppId());
            withUnfilteredSnapshot.close();
            return z;
        } catch (java.lang.Throwable th) {
            if (withUnfilteredSnapshot != null) {
                try {
                    withUnfilteredSnapshot.close();
                } catch (java.lang.Throwable th2) {
                    th.addSuppressed(th2);
                }
            }
            throw th;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public com.android.server.devicepolicy.DevicePolicyConstants loadConstants() {
        return com.android.server.devicepolicy.DevicePolicyConstants.loadFromString(this.mInjector.settingsGlobalGetString("device_policy_constants"));
    }

    public void setUserControlDisabledPackages(android.content.ComponentName componentName, java.lang.String str, final java.util.List<java.lang.String> list) {
        java.util.Objects.requireNonNull(list, "packages is null");
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        checkCanExecuteOrThrowUnsafe(22);
        final com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL", callerIdentity.getPackageName(), callerIdentity.getUserId());
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda149
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setUserControlDisabledPackages$165(list, callerIdentity, enforcePermissionAndGetEnforcingAdmin);
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(129).setAdmin(callerIdentity.getPackageName()).setStrings((java.lang.String[]) list.toArray(new java.lang.String[list.size()])).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserControlDisabledPackages$165(java.util.List list, com.android.server.devicepolicy.CallerIdentity callerIdentity, com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin) throws java.lang.Exception {
        if (list.isEmpty()) {
            removeUserControlDisabledPackages(callerIdentity, enforcingAdmin);
        } else {
            addUserControlDisabledPackages(callerIdentity, enforcingAdmin, new java.util.HashSet(list));
        }
    }

    private void addUserControlDisabledPackages(com.android.server.devicepolicy.CallerIdentity callerIdentity, com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin, java.util.Set<java.lang.String> set) {
        if (isDeviceOwner(callerIdentity)) {
            this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.USER_CONTROLLED_DISABLED_PACKAGES, enforcingAdmin, new android.app.admin.StringSetPolicyValue(set));
        } else {
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.USER_CONTROLLED_DISABLED_PACKAGES, enforcingAdmin, new android.app.admin.StringSetPolicyValue(set), callerIdentity.getUserId());
        }
    }

    private void removeUserControlDisabledPackages(com.android.server.devicepolicy.CallerIdentity callerIdentity, com.android.server.devicepolicy.EnforcingAdmin enforcingAdmin) {
        if (isDeviceOwner(callerIdentity)) {
            this.mDevicePolicyEngine.removeGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.USER_CONTROLLED_DISABLED_PACKAGES, enforcingAdmin);
        } else {
            this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.USER_CONTROLLED_DISABLED_PACKAGES, enforcingAdmin, callerIdentity.getUserId());
        }
    }

    public java.util.List<java.lang.String> getUserControlDisabledPackages(android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        enforceCanQuery("android.permission.MANAGE_DEVICE_POLICY_APPS_CONTROL", callerIdentity.getPackageName(), callerIdentity.getUserId());
        java.util.Set set = (java.util.Set) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.USER_CONTROLLED_DISABLED_PACKAGES, callerIdentity.getUserId());
        return set == null ? java.util.Collections.emptyList() : set.stream().toList();
    }

    public void setCommonCriteriaModeEnabled(android.content.ComponentName componentName, java.lang.String str, boolean z) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked;
        com.android.server.devicepolicy.ActiveAdmin activeAdmin;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(componentName, str);
        } else {
            callerIdentity = getCallerIdentity(componentName);
        }
        if (isPermissionCheckFlagEnabled()) {
            activeAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_COMMON_CRITERIA_MODE", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
        } else {
            java.util.Objects.requireNonNull(componentName, "ComponentName is null");
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity), "Common Criteria mode can only be controlled by a device owner or a profile owner on an organization-owned device.");
            synchronized (getLockObject()) {
                profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
            }
            activeAdmin = profileOwnerOrDeviceOwnerLocked;
        }
        synchronized (getLockObject()) {
            activeAdmin.mCommonCriteriaMode = z;
            saveSettingsLocked(callerIdentity.getUserId());
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(131).setAdmin(callerIdentity.getPackageName()).setBoolean(z).write();
    }

    public boolean isCommonCriteriaModeEnabled(android.content.ComponentName componentName) {
        boolean z;
        boolean z2;
        if (componentName != null) {
            com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity), "Common Criteria mode can only be controlled by a device owner or a profile owner on an organization-owned device.");
            synchronized (getLockObject()) {
                z2 = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).mCommonCriteriaMode;
            }
            return z2;
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
                z = deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked != null ? deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.mCommonCriteriaMode : false;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return z;
    }

    public int getPersonalAppsSuspendedReasons(android.content.ComponentName componentName) {
        int makeSuspensionReasons;
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                long j = profileOwnerLocked.mProfileOffDeadline;
                makeSuspensionReasons = makeSuspensionReasons(profileOwnerLocked.mSuspendPersonalApps, j != 0 && this.mInjector.systemCurrentTimeMillis() > j);
                com.android.server.utils.Slogf.d(LOG_TAG, "getPersonalAppsSuspendedReasons user: %d; result: %d", java.lang.Integer.valueOf(this.mInjector.userHandleGetCallingUserId()), java.lang.Integer.valueOf(makeSuspensionReasons));
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return makeSuspensionReasons;
    }

    private int makeSuspensionReasons(boolean z, boolean z2) {
        int i;
        if (!z) {
            i = 0;
        } else {
            i = 1;
        }
        if (z2) {
            return i | 2;
        }
        return i;
    }

    public void setPersonalAppsSuspended(android.content.ComponentName componentName, boolean z) {
        boolean z2;
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        com.android.internal.util.Preconditions.checkState(canHandleCheckPolicyComplianceIntent(callerIdentity));
        final int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(userId);
                boolean z3 = true;
                if (profileOwnerLocked.mSuspendPersonalApps == z) {
                    z2 = false;
                } else {
                    profileOwnerLocked.mSuspendPersonalApps = z;
                    z2 = true;
                }
                if (profileOwnerLocked.mProfileOffDeadline == 0) {
                    z3 = z2;
                } else {
                    profileOwnerLocked.mProfileOffDeadline = 0L;
                }
                if (z3) {
                    saveSettingsLocked(userId);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda141
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$setPersonalAppsSuspended$166;
                lambda$setPersonalAppsSuspended$166 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setPersonalAppsSuspended$166(userId);
                return lambda$setPersonalAppsSuspended$166;
            }
        });
        android.app.admin.DevicePolicyEventLogger.createEvent(135).setAdmin(callerIdentity.getComponentName()).setBoolean(z).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$setPersonalAppsSuspended$166(int i) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(updatePersonalAppsSuspension(i));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void triggerPolicyComplianceCheckIfNeeded(int i, boolean z) {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                if (profileOwnerAdminLocked == null) {
                    com.android.server.utils.Slogf.wtf(LOG_TAG, "Profile owner not found for compliance check");
                    return;
                }
                if (z) {
                    android.content.Intent intent = new android.content.Intent("android.app.action.CHECK_POLICY_COMPLIANCE");
                    intent.setPackage(profileOwnerAdminLocked.info.getPackageName());
                    this.mContext.startActivityAsUser(intent, android.os.UserHandle.of(i));
                } else if (profileOwnerAdminLocked.mProfileOffDeadline > 0) {
                    sendAdminCommandLocked(profileOwnerAdminLocked, "android.app.action.COMPLIANCE_ACKNOWLEDGEMENT_REQUIRED", null, null, true);
                }
            } finally {
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:14:0x0035  */
    /* JADX WARN: Removed duplicated region for block: B:20:0x0037  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean updatePersonalAppsSuspension(int i) {
        boolean z;
        boolean z2;
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                if (profileOwnerAdminLocked != null) {
                    if (this.mUserManagerInternal.isUserUnlockingOrUnlocked(i) && !this.mUserManager.isQuietModeEnabled(android.os.UserHandle.of(i))) {
                        z2 = false;
                        int updateProfileOffDeadlineLocked = updateProfileOffDeadlineLocked(i, profileOwnerAdminLocked, z2);
                        boolean z3 = profileOwnerAdminLocked.mSuspendPersonalApps;
                        boolean z4 = profileOwnerAdminLocked.mProfileOffDeadline != -1;
                        com.android.server.utils.Slogf.d(LOG_TAG, "Personal apps suspended explicitly: %b, by timeout: %b, notification: %d", java.lang.Boolean.valueOf(z3), java.lang.Boolean.valueOf(z4), java.lang.Integer.valueOf(updateProfileOffDeadlineLocked));
                        updateProfileOffDeadlineNotificationLocked(i, profileOwnerAdminLocked, updateProfileOffDeadlineLocked);
                        z = !z3 || z4;
                    }
                    z2 = true;
                    int updateProfileOffDeadlineLocked2 = updateProfileOffDeadlineLocked(i, profileOwnerAdminLocked, z2);
                    boolean z32 = profileOwnerAdminLocked.mSuspendPersonalApps;
                    if (profileOwnerAdminLocked.mProfileOffDeadline != -1) {
                    }
                    com.android.server.utils.Slogf.d(LOG_TAG, "Personal apps suspended explicitly: %b, by timeout: %b, notification: %d", java.lang.Boolean.valueOf(z32), java.lang.Boolean.valueOf(z4), java.lang.Integer.valueOf(updateProfileOffDeadlineLocked2));
                    updateProfileOffDeadlineNotificationLocked(i, profileOwnerAdminLocked, updateProfileOffDeadlineLocked2);
                    if (z32) {
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        suspendPersonalAppsInternal(getProfileParentId(i), i, z);
        return z;
    }

    private int updateProfileOffDeadlineLocked(int i, com.android.server.devicepolicy.ActiveAdmin activeAdmin, boolean z) {
        boolean z2;
        long j;
        long systemCurrentTimeMillis = this.mInjector.systemCurrentTimeMillis();
        int i2 = 0;
        if (activeAdmin.mProfileOffDeadline != 0 && systemCurrentTimeMillis > activeAdmin.mProfileOffDeadline) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Profile off deadline has been reached, off: " + z);
            if (activeAdmin.mProfileOffDeadline != -1) {
                activeAdmin.mProfileOffDeadline = -1L;
                saveSettingsLocked(i);
            }
            return z ? 2 : 0;
        }
        if (activeAdmin.mSuspendPersonalApps) {
            if (activeAdmin.mProfileOffDeadline != 0) {
                activeAdmin.mProfileOffDeadline = 0L;
                z2 = true;
            }
            z2 = false;
        } else if (activeAdmin.mProfileOffDeadline != 0 && activeAdmin.mProfileMaximumTimeOffMillis == 0) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Profile off deadline is reset to zero");
            activeAdmin.mProfileOffDeadline = 0L;
            z2 = true;
        } else {
            if (activeAdmin.mProfileOffDeadline == 0 && activeAdmin.mProfileMaximumTimeOffMillis != 0 && z) {
                com.android.server.utils.Slogf.i(LOG_TAG, "Profile off deadline is set.");
                activeAdmin.mProfileOffDeadline = activeAdmin.mProfileMaximumTimeOffMillis + systemCurrentTimeMillis;
                z2 = true;
            }
            z2 = false;
        }
        if (z2) {
            saveSettingsLocked(i);
        }
        if (!z || activeAdmin.mProfileOffDeadline == 0) {
            j = 0;
        } else if (activeAdmin.mProfileOffDeadline - systemCurrentTimeMillis < MANAGED_PROFILE_OFF_WARNING_PERIOD) {
            j = activeAdmin.mProfileOffDeadline;
            i2 = 1;
        } else {
            j = activeAdmin.mProfileOffDeadline - MANAGED_PROFILE_OFF_WARNING_PERIOD;
        }
        android.app.AlarmManager alarmManager = this.mInjector.getAlarmManager();
        android.content.Intent intent = new android.content.Intent(ACTION_PROFILE_OFF_DEADLINE);
        intent.setPackage(this.mContext.getPackageName());
        android.app.PendingIntent pendingIntentGetBroadcast = this.mInjector.pendingIntentGetBroadcast(this.mContext, REQUEST_PROFILE_OFF_DEADLINE, intent, 1275068416);
        if (j == 0) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Profile off deadline alarm is removed.");
            alarmManager.cancel(pendingIntentGetBroadcast);
        } else {
            com.android.server.utils.Slogf.i(LOG_TAG, "Profile off deadline alarm is set.");
            alarmManager.set(1, j, pendingIntentGetBroadcast);
        }
        return i2;
    }

    private void suspendPersonalAppsInternal(int i, int i2, boolean z) {
        if (lambda$getUserDataUnchecked$5(i).mAppsSuspended == z) {
            return;
        }
        com.android.server.utils.Slogf.i(LOG_TAG, "%s personal apps for user %d", z ? "Suspending" : "Unsuspending", java.lang.Integer.valueOf(i));
        com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i2);
        if (profileOwnerAdminLocked != null) {
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PERSONAL_APPS_SUSPENDED, com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(profileOwnerAdminLocked.info.getComponent(), i2, profileOwnerAdminLocked), new android.app.admin.BooleanPolicyValue(z), i);
        }
        synchronized (getLockObject()) {
            lambda$getUserDataUnchecked$5(i).mAppsSuspended = z;
            saveSettingsLocked(i);
        }
    }

    private void suspendPersonalAppsInPackageManager(final int i) {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda81
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$suspendPersonalAppsInPackageManager$167(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$suspendPersonalAppsInPackageManager$167(int i) throws java.lang.Exception {
        java.lang.String[] packagesSuspendedByAdmin = this.mInjector.getPackageManagerInternal().setPackagesSuspendedByAdmin(i, this.mInjector.getPersonalAppsForSuspension(i), true);
        if (!com.android.internal.util.ArrayUtils.isEmpty(packagesSuspendedByAdmin)) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Failed to suspend apps: " + java.lang.String.join(",", packagesSuspendedByAdmin));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void notifyIfManagedSubscriptionsAreUnavailable(android.os.UserHandle userHandle, boolean z) {
        if (!isManagedProfile(userHandle.getIdentifier())) {
            android.util.Slog.wtf(LOG_TAG, "Expected managed profile when notified of profile availability change.");
        }
        if (getManagedSubscriptionsPolicy().getPolicyType() != 1) {
            return;
        }
        if (z) {
            this.mInjector.getNotificationManager().cancel(1006);
            return;
        }
        android.content.Intent intent = new android.content.Intent(ACTION_TURN_PROFILE_ON_NOTIFICATION);
        intent.putExtra("android.intent.extra.user_handle", userHandle.getIdentifier());
        android.app.Notification.Action build = new android.app.Notification.Action.Builder((android.graphics.drawable.Icon) null, getUnpauseWorkAppsButtonText(), this.mInjector.pendingIntentGetBroadcast(this.mContext, 0, intent, android.hardware.audio.common.V2_0.AudioFormat.DTS_HD)).build();
        android.os.Bundle bundle = new android.os.Bundle();
        bundle.putString("android.substName", getWorkProfileContentDescription());
        this.mInjector.getNotificationManager().notifyAsUser(null, 1006, new android.app.Notification.Builder(this.mContext, com.android.internal.notification.SystemNotificationChannels.DEVICE_ADMIN).setSmallIcon(android.R.drawable.ic_permission).setContentTitle(getUnpauseWorkAppsForTelephonyTitle()).setContentText(getUnpauseWorkAppsForTelephonyText()).setStyle(new android.app.Notification.BigTextStyle().bigText(getUnpauseWorkAppsForTelephonyText())).addAction(build).addExtras(bundle).setOngoing(false).setShowWhen(true).setAutoCancel(true).build(), android.os.UserHandle.of(getProfileParentId(userHandle.getIdentifier())));
    }

    private java.lang.String getUnpauseWorkAppsButtonText() {
        return getUpdatableString("Core.TURN_ON_WORK_PROFILE_BUTTON_TEXT", android.R.string.whichImageCaptureApplication, new java.lang.Object[0]);
    }

    private java.lang.String getUnpauseWorkAppsForTelephonyTitle() {
        return getUpdatableString("Core.WORK_PROFILE_TELEPHONY_UNAVAILABLE_TITLE", android.R.string.whichHomeApplicationNamed, new java.lang.Object[0]);
    }

    private java.lang.String getUnpauseWorkAppsForTelephonyText() {
        return getUpdatableString("Core.WORK_PROFILE_TELEPHONY_UNAVAILABLE_BODY", android.R.string.whichHomeApplicationLabel, new java.lang.Object[0]);
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void updateProfileOffDeadlineNotificationLocked(final int i, com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i2) {
        java.lang.String personalAppSuspensionText;
        if (i2 == 0) {
            this.mInjector.getNotificationManager().cancel(1003);
            return;
        }
        android.content.Intent intent = new android.content.Intent(ACTION_TURN_PROFILE_ON_NOTIFICATION);
        intent.setPackage(this.mContext.getPackageName());
        intent.putExtra("android.intent.extra.user_handle", i);
        android.app.Notification.Action build = new android.app.Notification.Action.Builder((android.graphics.drawable.Icon) null, getPersonalAppSuspensionButtonText(), this.mInjector.pendingIntentGetBroadcast(this.mContext, 0, intent, android.hardware.audio.common.V2_0.AudioFormat.DTS_HD)).build();
        boolean z = true;
        if (i2 == 1) {
            personalAppSuspensionText = getPersonalAppSuspensionSoonText(android.text.format.DateUtils.formatDateTime(this.mContext, activeAdmin.mProfileOffDeadline, 16), android.text.format.DateUtils.formatDateTime(this.mContext, activeAdmin.mProfileOffDeadline, 1), (int) ((activeAdmin.mProfileMaximumTimeOffMillis + (MS_PER_DAY / 2)) / MS_PER_DAY));
            z = false;
        } else {
            personalAppSuspensionText = getPersonalAppSuspensionText();
        }
        int color = this.mContext.getColor(android.R.color.notification_action_list);
        android.os.Bundle bundle = new android.os.Bundle();
        bundle.putString("android.substName", getWorkProfileContentDescription());
        final android.app.Notification build2 = new android.app.Notification.Builder(this.mContext, com.android.internal.notification.SystemNotificationChannels.DEVICE_ADMIN).setSmallIcon(android.R.drawable.ic_corp_badge_case).setOngoing(z).setAutoCancel(false).setContentTitle(getPersonalAppSuspensionTitle()).setContentText(personalAppSuspensionText).setStyle(new android.app.Notification.BigTextStyle().bigText(personalAppSuspensionText)).setColor(color).addAction(build).addExtras(bundle).build();
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda107
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$updateProfileOffDeadlineNotificationLocked$168(build2, i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateProfileOffDeadlineNotificationLocked$168(android.app.Notification notification, int i) {
        this.mInjector.getNotificationManager().notifyAsUser(null, 1003, notification, android.os.UserHandle.of(getProfileParentId(i)));
    }

    private java.lang.String getPersonalAppSuspensionButtonText() {
        return getUpdatableString("Core.PERSONAL_APP_SUSPENSION_TURN_ON_PROFILE", android.R.string.permlab_startViewAppFeatures, new java.lang.Object[0]);
    }

    private java.lang.String getPersonalAppSuspensionTitle() {
        return getUpdatableString("Core.PERSONAL_APP_SUSPENSION_TITLE", android.R.string.permlab_statusBarService, new java.lang.Object[0]);
    }

    private java.lang.String getPersonalAppSuspensionText() {
        return getUpdatableString("Core.PERSONAL_APP_SUSPENSION_MESSAGE", android.R.string.permlab_statusBar, new java.lang.Object[0]);
    }

    private java.lang.String getPersonalAppSuspensionSoonText(java.lang.String str, java.lang.String str2, int i) {
        return getUpdatableString("Core.PERSONAL_APP_SUSPENSION_SOON_MESSAGE", android.R.string.permlab_startViewPermissionUsage, str, str2, java.lang.Integer.valueOf(i));
    }

    private java.lang.String getWorkProfileContentDescription() {
        return getUpdatableString("Core.NOTIFICATION_WORK_PROFILE_CONTENT_DESCRIPTION", android.R.string.notification_channel_system_changes, new java.lang.Object[0]);
    }

    public void setManagedProfileMaximumTimeOff(android.content.ComponentName componentName, long j) {
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.internal.util.Preconditions.checkArgumentNonnegative(j, "Timeout must be non-negative.");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        com.android.internal.util.Preconditions.checkState(canHandleCheckPolicyComplianceIntent(callerIdentity));
        final int userId = callerIdentity.getUserId();
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(userId);
                if (j > 0 && j < MANAGED_PROFILE_MAXIMUM_TIME_OFF_THRESHOLD && !isAdminTestOnlyLocked(componentName, userId)) {
                    j = MANAGED_PROFILE_MAXIMUM_TIME_OFF_THRESHOLD;
                }
                if (profileOwnerLocked.mProfileMaximumTimeOffMillis == j) {
                    return;
                }
                profileOwnerLocked.mProfileMaximumTimeOffMillis = j;
                saveSettingsLocked(userId);
                this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda82
                    public final java.lang.Object getOrThrow() {
                        java.lang.Boolean lambda$setManagedProfileMaximumTimeOff$169;
                        lambda$setManagedProfileMaximumTimeOff$169 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setManagedProfileMaximumTimeOff$169(userId);
                        return lambda$setManagedProfileMaximumTimeOff$169;
                    }
                });
                android.app.admin.DevicePolicyEventLogger.createEvent(136).setAdmin(callerIdentity.getComponentName()).setTimePeriod(j).write();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$setManagedProfileMaximumTimeOff$169(int i) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(updatePersonalAppsSuspension(i));
    }

    private boolean canHandleCheckPolicyComplianceIntent(final com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda51
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$canHandleCheckPolicyComplianceIntent$170;
                lambda$canHandleCheckPolicyComplianceIntent$170 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$canHandleCheckPolicyComplianceIntent$170(callerIdentity);
                return lambda$canHandleCheckPolicyComplianceIntent$170;
            }
        });
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$canHandleCheckPolicyComplianceIntent$170(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        new android.content.Intent("android.app.action.CHECK_POLICY_COMPLIANCE").setPackage(callerIdentity.getPackageName());
        return java.lang.Boolean.valueOf(!this.mInjector.getPackageManager().queryIntentActivitiesAsUser(r0, 0, callerIdentity.getUserId()).isEmpty());
    }

    public long getManagedProfileMaximumTimeOff(android.content.ComponentName componentName) {
        long j;
        java.util.Objects.requireNonNull(componentName, "ComponentName is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName);
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        synchronized (getLockObject()) {
            j = getProfileOwnerLocked(callerIdentity.getUserId()).mProfileMaximumTimeOffMillis;
        }
        return j;
    }

    public void acknowledgeDeviceCompliant() {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        enforceUserUnlocked(callerIdentity.getUserId());
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                if (profileOwnerLocked.mProfileOffDeadline > 0) {
                    profileOwnerLocked.mProfileOffDeadline = 0L;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public boolean isComplianceAcknowledgementRequired() {
        boolean z;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity));
        enforceUserUnlocked(callerIdentity.getUserId());
        synchronized (getLockObject()) {
            z = getProfileOwnerLocked(callerIdentity.getUserId()).mProfileOffDeadline != 0;
        }
        return z;
    }

    public boolean canProfileOwnerResetPasswordWhenLocked(int i) {
        com.android.internal.util.Preconditions.checkCallAuthorization(isSystemUid(getCallerIdentity()), java.lang.String.format(NOT_SYSTEM_CALLER_MSG, "call canProfileOwnerResetPasswordWhenLocked"));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerAdminLocked = getProfileOwnerAdminLocked(i);
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(i);
                if (profileOwnerAdminLocked == null || getEncryptionStatus() != 5 || !isResetPasswordTokenActiveForUserLocked(lambda$getUserDataUnchecked$5.mPasswordTokenHandle, i)) {
                    return false;
                }
                try {
                    android.content.pm.ApplicationInfo applicationInfo = this.mIPackageManager.getApplicationInfo(profileOwnerAdminLocked.info.getPackageName(), 0L, i);
                    if (applicationInfo == null) {
                        com.android.server.utils.Slogf.wtf(LOG_TAG, "Cannot find AppInfo for profile owner");
                        return false;
                    }
                    if (!applicationInfo.isEncryptionAware()) {
                        return false;
                    }
                    com.android.server.utils.Slogf.d(LOG_TAG, "PO should be able to reset password from direct boot");
                    return true;
                } catch (android.os.RemoteException e) {
                    com.android.server.utils.Slogf.e(LOG_TAG, "Failed to query PO app info", e);
                    return false;
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public java.lang.String getEnrollmentSpecificId(java.lang.String str) {
        java.lang.String str2;
        if (!this.mHasFeature) {
            return "";
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (android.app.admin.flags.Flags.permissionMigrationForZeroTrustImplEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_CERTIFICATES", callerIdentity.getPackageName());
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity) || isCallerDelegate(callerIdentity, "delegation-cert-install"));
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(callerIdentity.getUserId());
                str2 = deviceOrProfileOwnerAdminLocked != null ? deviceOrProfileOwnerAdminLocked.mEnrollmentSpecificId : null;
                if (str2 == null) {
                    str2 = "";
                }
            } finally {
            }
        }
        return str2;
    }

    public void setOrganizationIdForUser(@android.annotation.NonNull java.lang.String str, @android.annotation.NonNull java.lang.String str2, int i) {
        java.lang.String packageName;
        if (!this.mHasFeature) {
            return;
        }
        java.util.Objects.requireNonNull(str);
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity), "Only a Device Owner or Profile Owner may set the Enterprise ID.");
        com.android.internal.util.Preconditions.checkArgument(!android.text.TextUtils.isEmpty(str2), "Enterprise ID may not be empty.");
        com.android.server.utils.Slogf.i(LOG_TAG, "Setting Enterprise ID to %s for user %d", str2, java.lang.Integer.valueOf(i));
        synchronized (this.mESIDInitilizationLock) {
            try {
                if (this.mEsidCalculator == null) {
                    this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda67
                        public final void runOrThrow() {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setOrganizationIdForUser$171();
                        }
                    });
                }
            } finally {
            }
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                com.android.internal.util.Preconditions.checkCallAuthorization(deviceOrProfileOwnerAdminLocked != null && deviceOrProfileOwnerAdminLocked.getUserHandle().getIdentifier() == i, java.lang.String.format("The Profile Owner or Device Owner may only set the Enterprise ID on its own user, called on user %d but owner user is %d", java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(deviceOrProfileOwnerAdminLocked.getUserHandle().getIdentifier())));
                packageName = deviceOrProfileOwnerAdminLocked.info.getPackageName();
                com.android.internal.util.Preconditions.checkState(android.text.TextUtils.isEmpty(deviceOrProfileOwnerAdminLocked.mOrganizationId) || deviceOrProfileOwnerAdminLocked.mOrganizationId.equals(str2), "The organization ID has been previously set to a different value and cannot be changed");
                java.lang.String calculateEnterpriseId = this.mEsidCalculator.calculateEnterpriseId(deviceOrProfileOwnerAdminLocked.info.getPackageName(), str2);
                deviceOrProfileOwnerAdminLocked.mOrganizationId = str2;
                deviceOrProfileOwnerAdminLocked.mEnrollmentSpecificId = calculateEnterpriseId;
                saveSettingsLocked(i);
            } finally {
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(com.android.internal.util.FrameworkStatsLog.DEVICE_POLICY_EVENT__EVENT_ID__SET_ORGANIZATION_ID).setAdmin(packageName).setBoolean(isManagedProfile(i)).write();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setOrganizationIdForUser$171() throws java.lang.Exception {
        this.mEsidCalculator = this.mInjector.newEnterpriseSpecificIdCalculator();
    }

    public void clearOrganizationIdForUser(int i) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        synchronized (getLockObject()) {
            com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
            deviceOrProfileOwnerAdminLocked.mOrganizationId = null;
            deviceOrProfileOwnerAdminLocked.mEnrollmentSpecificId = null;
            saveSettingsLocked(i);
        }
    }

    public android.os.UserHandle createAndProvisionManagedProfile(@android.annotation.NonNull android.app.admin.ManagedProfileProvisioningParams managedProfileProvisioningParams, @android.annotation.NonNull java.lang.String str) {
        android.content.pm.UserInfo userInfo;
        java.util.Set<java.lang.String> nonRequiredApps;
        java.util.Objects.requireNonNull(managedProfileProvisioningParams, "provisioningParams is null");
        java.util.Objects.requireNonNull(str, "callerPackage is null");
        android.content.ComponentName profileAdminComponentName = managedProfileProvisioningParams.getProfileAdminComponentName();
        java.util.Objects.requireNonNull(profileAdminComponentName, "admin is null");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        managedProfileProvisioningParams.logParams(str);
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            try {
                int checkProvisioningPreconditionSkipPermission = checkProvisioningPreconditionSkipPermission("android.app.action.PROVISION_MANAGED_PROFILE", profileAdminComponentName.getPackageName(), callerIdentity.getUserId());
                if (checkProvisioningPreconditionSkipPermission != 0) {
                    throw new android.os.ServiceSpecificException(1, "Provisioning preconditions failed with result: " + checkProvisioningPreconditionSkipPermission);
                }
                long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
                onCreateAndProvisionManagedProfileStarted(managedProfileProvisioningParams);
                if (managedProfileProvisioningParams.isLeaveAllSystemAppsEnabled()) {
                    nonRequiredApps = java.util.Collections.emptySet();
                } else {
                    nonRequiredApps = this.mOverlayPackagesProvider.getNonRequiredApps(profileAdminComponentName, callerIdentity.getUserId(), "android.app.action.PROVISION_MANAGED_PROFILE");
                }
                if (nonRequiredApps.isEmpty()) {
                    com.android.server.utils.Slogf.i(LOG_TAG, "No disallowed packages for the managed profile.");
                } else {
                    java.util.Iterator<java.lang.String> it = nonRequiredApps.iterator();
                    while (it.hasNext()) {
                        com.android.server.utils.Slogf.i(LOG_TAG, "Disallowed package [" + it.next() + "]");
                    }
                }
                android.content.pm.UserInfo createProfileForUserEvenWhenDisallowed = this.mUserManager.createProfileForUserEvenWhenDisallowed(managedProfileProvisioningParams.getProfileName(), "android.os.usertype.profile.MANAGED", 64, callerIdentity.getUserId(), (java.lang.String[]) nonRequiredApps.toArray(new java.lang.String[nonRequiredApps.size()]));
                try {
                    if (createProfileForUserEvenWhenDisallowed != null) {
                        resetInteractAcrossProfilesAppOps(callerIdentity.getUserId());
                        logEventDuration(com.android.internal.util.FrameworkStatsLog.DEVICE_POLICY_EVENT__EVENT_ID__PLATFORM_PROVISIONING_CREATE_PROFILE_MS, elapsedRealtime, str);
                        maybeInstallDevicePolicyManagementRoleHolderInUser(createProfileForUserEvenWhenDisallowed.id);
                        installExistingAdminPackage(createProfileForUserEvenWhenDisallowed.id, profileAdminComponentName.getPackageName());
                        if (enableAdminAndSetProfileOwner(createProfileForUserEvenWhenDisallowed.id, callerIdentity.getUserId(), profileAdminComponentName)) {
                            setUserSetupComplete(createProfileForUserEvenWhenDisallowed.id);
                            startProfileForSetup(createProfileForUserEvenWhenDisallowed.id, str);
                            maybeMigrateAccount(createProfileForUserEvenWhenDisallowed.id, callerIdentity.getUserId(), managedProfileProvisioningParams.getAccountToMigrate(), managedProfileProvisioningParams.isKeepingAccountOnMigration(), str);
                            if (managedProfileProvisioningParams.isOrganizationOwnedProvisioning()) {
                                synchronized (getLockObject()) {
                                    setProfileOwnerOnOrganizationOwnedDeviceUncheckedLocked(profileAdminComponentName, createProfileForUserEvenWhenDisallowed.id, true);
                                }
                            }
                            onCreateAndProvisionManagedProfileCompleted(createProfileForUserEvenWhenDisallowed.id, managedProfileProvisioningParams);
                            sendProvisioningCompletedBroadcast(createProfileForUserEvenWhenDisallowed.id, "android.app.action.PROVISION_MANAGED_PROFILE", managedProfileProvisioningParams.isLeaveAllSystemAppsEnabled());
                            android.os.UserHandle userHandle = createProfileForUserEvenWhenDisallowed.getUserHandle();
                            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                            return userHandle;
                        }
                        throw new android.os.ServiceSpecificException(4, "Error setting profile owner.");
                    }
                    throw new android.os.ServiceSpecificException(2, "Error creating profile, createProfileForUserEvenWhenDisallowed returned null.");
                } catch (java.lang.Exception e) {
                    e = e;
                    userInfo = createProfileForUserEvenWhenDisallowed;
                    android.app.admin.DevicePolicyEventLogger.createEvent(194).setStrings(new java.lang.String[]{str}).write();
                    if (userInfo != null) {
                        this.mUserManager.removeUserEvenWhenDisallowed(userInfo.id);
                    }
                    throw e;
                }
            } catch (java.lang.Exception e2) {
                e = e2;
                userInfo = null;
            }
        } catch (java.lang.Throwable th) {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    public void finalizeWorkProfileProvisioning(android.os.UserHandle userHandle, android.accounts.Account account) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        if (!isManagedProfile(userHandle.getIdentifier())) {
            throw new java.lang.IllegalStateException("Given user is not a managed profile");
        }
        android.content.ComponentName profileOwnerComponent = this.mOwners.getProfileOwnerComponent(userHandle.getIdentifier());
        if (profileOwnerComponent == null) {
            throw new java.lang.IllegalStateException("There is no profile owner on the given profile");
        }
        android.content.Intent intent = new android.content.Intent("android.app.action.MANAGED_PROFILE_PROVISIONED");
        intent.setPackage(profileOwnerComponent.getPackageName());
        intent.addFlags(268435488);
        intent.putExtra("android.intent.extra.USER", userHandle);
        if (account != null) {
            intent.putExtra("android.app.extra.PROVISIONING_ACCOUNT_TO_MIGRATE", account);
        }
        this.mContext.sendBroadcastAsUser(intent, android.os.UserHandle.of(getProfileParentId(userHandle.getIdentifier())));
    }

    private void onCreateAndProvisionManagedProfileStarted(android.app.admin.ManagedProfileProvisioningParams managedProfileProvisioningParams) {
    }

    private void onCreateAndProvisionManagedProfileCompleted(int i, android.app.admin.ManagedProfileProvisioningParams managedProfileProvisioningParams) {
        try {
            java.util.Set uidsAllowedOnRestrictedNetworks = android.net.ConnectivitySettingsManager.getUidsAllowedOnRestrictedNetworks(this.mContext);
            uidsAllowedOnRestrictedNetworks.add(java.lang.Integer.valueOf(this.mContext.getPackageManager().getPackageUidAsUser(managedProfileProvisioningParams.getOwnerName(), i)));
            android.net.ConnectivitySettingsManager.setUidsAllowedOnRestrictedNetworks(this.mContext, uidsAllowedOnRestrictedNetworks);
        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
        }
    }

    private void maybeInstallDevicePolicyManagementRoleHolderInUser(int i) {
        java.lang.String roleHolderPackageName = getRoleHolderPackageName(this.mContext, "android.app.role.DEVICE_POLICY_MANAGEMENT");
        if (roleHolderPackageName == null) {
            com.android.server.utils.Slogf.d(LOG_TAG, "No device policy management role holder specified.");
            return;
        }
        try {
            if (this.mIPackageManager.isPackageAvailable(roleHolderPackageName, i)) {
                com.android.server.utils.Slogf.d(LOG_TAG, "The device policy management role holder " + roleHolderPackageName + " is already installed in user " + i);
                return;
            }
            com.android.server.utils.Slogf.d(LOG_TAG, "Installing the device policy management role holder " + roleHolderPackageName + " in user " + i);
            this.mIPackageManager.installExistingPackageAsUser(roleHolderPackageName, i, 4194304, 1, (java.util.List) null);
        } catch (android.os.RemoteException e) {
        }
    }

    @android.annotation.Nullable
    private java.lang.String getRoleHolderPackageName(android.content.Context context, java.lang.String str) {
        return getRoleHolderPackageNameOnUser(context, str, android.os.Process.myUserHandle());
    }

    /* JADX INFO: Access modifiers changed from: private */
    @android.annotation.Nullable
    public java.lang.String getRoleHolderPackageNameOnUser(android.content.Context context, final java.lang.String str, final android.os.UserHandle userHandle) {
        final android.app.role.RoleManager roleManager = (android.app.role.RoleManager) context.getSystemService(android.app.role.RoleManager.class);
        return (java.lang.String) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda148
            public final java.lang.Object getOrThrow() {
                java.lang.String lambda$getRoleHolderPackageNameOnUser$172;
                lambda$getRoleHolderPackageNameOnUser$172 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getRoleHolderPackageNameOnUser$172(roleManager, str, userHandle);
                return lambda$getRoleHolderPackageNameOnUser$172;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.String lambda$getRoleHolderPackageNameOnUser$172(android.app.role.RoleManager roleManager, java.lang.String str, android.os.UserHandle userHandle) throws java.lang.Exception {
        java.util.List roleHoldersAsUser = roleManager.getRoleHoldersAsUser(str, userHandle);
        if (roleHoldersAsUser.isEmpty()) {
            return null;
        }
        return (java.lang.String) roleHoldersAsUser.get(0);
    }

    private boolean isCallerDevicePolicyManagementRoleHolder(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return doesCallerHoldRole(callerIdentity, "android.app.role.DEVICE_POLICY_MANAGEMENT");
    }

    private boolean isCallerSystemSupervisionRoleHolder(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        return doesCallerHoldRole(callerIdentity, "android.app.role.SYSTEM_SUPERVISION");
    }

    private boolean doesCallerHoldRole(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) {
        return callerIdentity.getUid() == this.mInjector.getPackageManagerInternal().getPackageUid(getRoleHolderPackageNameOnUser(str, callerIdentity.getUserId()), 0L, callerIdentity.getUserId());
    }

    @android.annotation.Nullable
    private java.lang.String getRoleHolderPackageNameOnUser(final java.lang.String str, final int i) {
        final android.app.role.RoleManager roleManager = (android.app.role.RoleManager) this.mContext.getSystemService(android.app.role.RoleManager.class);
        return (java.lang.String) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda198
            public final java.lang.Object getOrThrow() {
                java.lang.String lambda$getRoleHolderPackageNameOnUser$173;
                lambda$getRoleHolderPackageNameOnUser$173 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getRoleHolderPackageNameOnUser$173(i, roleManager, str);
                return lambda$getRoleHolderPackageNameOnUser$173;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.String lambda$getRoleHolderPackageNameOnUser$173(int i, android.app.role.RoleManager roleManager, java.lang.String str) throws java.lang.Exception {
        java.util.List<android.content.pm.UserInfo> of;
        if (i == -1) {
            of = this.mInjector.getUserManagerInternal().getUsers(true);
        } else {
            of = java.util.List.of(new android.content.pm.UserInfo(i, (java.lang.String) null, 0));
        }
        java.util.Iterator<android.content.pm.UserInfo> it = of.iterator();
        while (it.hasNext()) {
            java.util.List roleHoldersAsUser = roleManager.getRoleHoldersAsUser(str, it.next().getUserHandle());
            if (!roleHoldersAsUser.isEmpty()) {
                return (java.lang.String) roleHoldersAsUser.get(0);
            }
        }
        return null;
    }

    private void resetInteractAcrossProfilesAppOps(int i) {
        this.mInjector.getCrossProfileApps(i).clearInteractAcrossProfilesAppOps();
        pregrantDefaultInteractAcrossProfilesAppOps(i);
    }

    private void pregrantDefaultInteractAcrossProfilesAppOps(int i) {
        java.lang.String permissionToOp = android.app.AppOpsManager.permissionToOp("android.permission.INTERACT_ACROSS_PROFILES");
        for (java.lang.String str : getConfigurableDefaultCrossProfilePackages(i)) {
            if (appOpIsDefaultOrAllowed(i, permissionToOp, str)) {
                this.mInjector.getCrossProfileApps(i).setInteractAcrossProfilesAppOp(str, 0);
            }
        }
    }

    private java.util.Set<java.lang.String> getConfigurableDefaultCrossProfilePackages(int i) {
        java.util.stream.Stream<java.lang.String> stream = getDefaultCrossProfilePackages().stream();
        final android.content.pm.CrossProfileApps crossProfileApps = this.mInjector.getCrossProfileApps(i);
        java.util.Objects.requireNonNull(crossProfileApps);
        return (java.util.Set) stream.filter(new java.util.function.Predicate() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda162
            @Override // java.util.function.Predicate
            public final boolean test(java.lang.Object obj) {
                return crossProfileApps.canConfigureInteractAcrossProfiles((java.lang.String) obj);
            }
        }).collect(java.util.stream.Collectors.toSet());
    }

    private boolean appOpIsDefaultOrAllowed(int i, java.lang.String str, java.lang.String str2) {
        try {
            int unsafeCheckOpNoThrow = this.mInjector.getAppOpsManager().unsafeCheckOpNoThrow(str, this.mContext.createContextAsUser(android.os.UserHandle.of(i), 0).getPackageManager().getPackageUid(str2, 0), str2);
            return unsafeCheckOpNoThrow == 0 || unsafeCheckOpNoThrow == 3;
        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    private void installExistingAdminPackage(int i, java.lang.String str) {
        try {
            int installExistingPackageAsUser = this.mContext.getPackageManager().installExistingPackageAsUser(str, i);
            if (installExistingPackageAsUser != 1) {
                throw new android.os.ServiceSpecificException(3, java.lang.String.format("Failed to install existing package %s for user %d with result code %d", str, java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(installExistingPackageAsUser)));
            }
        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
            throw new android.os.ServiceSpecificException(3, java.lang.String.format("Failed to install existing package %s for user %d: %s", str, java.lang.Integer.valueOf(i), e.getMessage()));
        }
    }

    private boolean enableAdminAndSetProfileOwner(int i, int i2, android.content.ComponentName componentName) {
        enableAndSetActiveAdmin(i, i2, componentName);
        return setProfileOwner(componentName, i);
    }

    private void enableAndSetActiveAdmin(int i, int i2, android.content.ComponentName componentName) {
        enablePackage(componentName.getPackageName(), i2);
        setActiveAdmin(componentName, true, i);
    }

    private void enablePackage(java.lang.String str, int i) {
        try {
            int applicationEnabledSetting = this.mIPackageManager.getApplicationEnabledSetting(str, i);
            if (applicationEnabledSetting != 0 && applicationEnabledSetting != 1) {
                this.mIPackageManager.setApplicationEnabledSetting(str, 0, 1, i, this.mContext.getOpPackageName());
            }
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Error setting application enabled", e);
        }
    }

    private void setUserSetupComplete(int i) {
        android.provider.Settings.Secure.putIntForUser(this.mContext.getContentResolver(), "user_setup_complete", 1, i);
    }

    private void startProfileForSetup(int i, java.lang.String str) throws java.lang.IllegalStateException {
        com.android.server.utils.Slogf.i(LOG_TAG, "Starting profile %d as requested by package %s", java.lang.Integer.valueOf(i), str);
        long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
        com.android.server.devicepolicy.UserUnlockedBlockingReceiver userUnlockedBlockingReceiver = new com.android.server.devicepolicy.UserUnlockedBlockingReceiver(i);
        this.mContext.registerReceiverAsUser(userUnlockedBlockingReceiver, new android.os.UserHandle(i), new android.content.IntentFilter("android.intent.action.USER_UNLOCKED"), null, null);
        try {
            if (!this.mInjector.getActivityManagerInternal().startProfileEvenWhenDisabled(i)) {
                throw new android.os.ServiceSpecificException(5, java.lang.String.format("Unable to start user %d in background", java.lang.Integer.valueOf(i)));
            }
            if (!userUnlockedBlockingReceiver.waitForUserUnlocked()) {
                throw new android.os.ServiceSpecificException(5, java.lang.String.format("Timeout whilst waiting for unlock of user %d.", java.lang.Integer.valueOf(i)));
            }
            logEventDuration(192, elapsedRealtime, str);
        } finally {
            this.mContext.unregisterReceiver(userUnlockedBlockingReceiver);
        }
    }

    private void maybeMigrateAccount(int i, int i2, android.accounts.Account account, boolean z, java.lang.String str) {
        android.os.UserHandle of = android.os.UserHandle.of(i2);
        android.os.UserHandle of2 = android.os.UserHandle.of(i);
        if (account == null) {
            com.android.server.utils.Slogf.d(LOG_TAG, "No account to migrate.");
            return;
        }
        if (of.equals(of2)) {
            com.android.server.utils.Slogf.w(LOG_TAG, "sourceUser and targetUser are the same, won't migrate account.");
            return;
        }
        copyAccount(of2, of, account, str);
        if (!z) {
            removeAccount(account, i2);
        }
    }

    private void copyAccount(android.os.UserHandle userHandle, android.os.UserHandle userHandle2, android.accounts.Account account, java.lang.String str) {
        long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
        try {
            if (((java.lang.Boolean) ((android.accounts.AccountManager) this.mContext.getSystemService(android.accounts.AccountManager.class)).copyAccountToUser(account, userHandle2, userHandle, null, null).getResult(180L, java.util.concurrent.TimeUnit.SECONDS)).booleanValue()) {
                logCopyAccountStatus(1, str);
                logEventDuration(com.android.internal.util.FrameworkStatsLog.DEVICE_POLICY_EVENT__EVENT_ID__PLATFORM_PROVISIONING_COPY_ACCOUNT_MS, elapsedRealtime, str);
            } else {
                logCopyAccountStatus(2, str);
                com.android.server.utils.Slogf.e(LOG_TAG, "Failed to copy account to " + userHandle);
            }
        } catch (android.accounts.AuthenticatorException | java.io.IOException e) {
            logCopyAccountStatus(4, str);
            com.android.server.utils.Slogf.e(LOG_TAG, "Exception copying account to " + userHandle, e);
        } catch (android.accounts.OperationCanceledException e2) {
            logCopyAccountStatus(3, str);
            com.android.server.utils.Slogf.e(LOG_TAG, "Exception copying account to " + userHandle, e2);
        }
    }

    private static void logCopyAccountStatus(@com.android.server.devicepolicy.DevicePolicyManagerService.CopyAccountStatus int i, java.lang.String str) {
        android.app.admin.DevicePolicyEventLogger.createEvent(193).setInt(i).setStrings(new java.lang.String[]{str}).write();
    }

    private void removeAccount(android.accounts.Account account, int i) {
        try {
            android.os.Bundle result = ((android.accounts.AccountManager) this.mContext.createContextAsUser(android.os.UserHandle.of(i), 0).getSystemService(android.accounts.AccountManager.class)).removeAccount(account, null, null, null).getResult(60L, java.util.concurrent.TimeUnit.SECONDS);
            if (result.getBoolean("booleanResult", false)) {
                com.android.server.utils.Slogf.i(LOG_TAG, "Account removed from the primary user.");
            } else {
                final android.content.Intent intent = (android.content.Intent) result.getParcelable("intent", android.content.Intent.class);
                intent.addFlags(268435456);
                com.android.server.utils.Slogf.i(LOG_TAG, "Starting activity to remove account");
                new android.os.Handler(android.os.Looper.getMainLooper()).post(new java.lang.Runnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda31
                    @Override // java.lang.Runnable
                    public final void run() {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$removeAccount$174(intent);
                    }
                });
            }
        } catch (android.accounts.AuthenticatorException | android.accounts.OperationCanceledException | java.io.IOException e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Exception removing account from the primary user.", e);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$removeAccount$174(android.content.Intent intent) {
        this.mContext.startActivity(intent);
    }

    public void provisionFullyManagedDevice(@android.annotation.NonNull android.app.admin.FullyManagedDeviceProvisioningParams fullyManagedDeviceProvisioningParams, @android.annotation.NonNull java.lang.String str) {
        java.util.Objects.requireNonNull(fullyManagedDeviceProvisioningParams, "provisioningParams is null.");
        java.util.Objects.requireNonNull(str, "callerPackage is null.");
        android.content.ComponentName deviceAdminComponentName = fullyManagedDeviceProvisioningParams.getDeviceAdminComponentName();
        java.util.Objects.requireNonNull(deviceAdminComponentName, "admin is null.");
        java.util.Objects.requireNonNull(fullyManagedDeviceProvisioningParams.getOwnerName(), "owner name is null.");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        int i = 0;
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS") || (hasCallingOrSelfPermission("android.permission.PROVISION_DEMO_DEVICE") && fullyManagedDeviceProvisioningParams.isDemoDevice()));
        fullyManagedDeviceProvisioningParams.logParams(str);
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            try {
                int checkProvisioningPreconditionSkipPermission = checkProvisioningPreconditionSkipPermission("android.app.action.PROVISION_MANAGED_DEVICE", deviceAdminComponentName.getPackageName(), callerIdentity.getUserId());
                if (checkProvisioningPreconditionSkipPermission != 0) {
                    throw new android.os.ServiceSpecificException(1, "Provisioning preconditions failed with result: " + checkProvisioningPreconditionSkipPermission);
                }
                onProvisionFullyManagedDeviceStarted(fullyManagedDeviceProvisioningParams);
                setTimeAndTimezone(fullyManagedDeviceProvisioningParams.getTimeZone(), fullyManagedDeviceProvisioningParams.getLocalTime());
                setLocale(fullyManagedDeviceProvisioningParams.getLocale());
                if (android.app.admin.flags.Flags.headlessDeviceOwnerSingleUserEnabled() && getHeadlessDeviceOwnerMode() == 2) {
                    i = this.mUserManagerInternal.getMainUserId();
                }
                if (!removeNonRequiredAppsForManagedDevice(i, fullyManagedDeviceProvisioningParams.isLeaveAllSystemAppsEnabled(), deviceAdminComponentName)) {
                    throw new android.os.ServiceSpecificException(6, "PackageManager failed to remove non required apps.");
                }
                if (!setActiveAdminAndDeviceOwner(i, deviceAdminComponentName)) {
                    throw new android.os.ServiceSpecificException(7, "Failed to set device owner.");
                }
                disallowAddUser();
                setAdminCanGrantSensorsPermissionForUserUnchecked(i, fullyManagedDeviceProvisioningParams.canDeviceOwnerGrantSensorsPermissions());
                setDemoDeviceStateUnchecked(i, fullyManagedDeviceProvisioningParams.isDemoDevice());
                onProvisionFullyManagedDeviceCompleted(fullyManagedDeviceProvisioningParams);
                sendProvisioningCompletedBroadcast(i, "android.app.action.PROVISION_MANAGED_DEVICE", fullyManagedDeviceProvisioningParams.isLeaveAllSystemAppsEnabled());
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            } catch (java.lang.Exception e) {
                android.app.admin.DevicePolicyEventLogger.createEvent(194).setStrings(new java.lang.String[]{str}).write();
                throw e;
            }
        } catch (java.lang.Throwable th) {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    private void onProvisionFullyManagedDeviceStarted(android.app.admin.FullyManagedDeviceProvisioningParams fullyManagedDeviceProvisioningParams) {
    }

    private void onProvisionFullyManagedDeviceCompleted(android.app.admin.FullyManagedDeviceProvisioningParams fullyManagedDeviceProvisioningParams) {
    }

    private void setTimeAndTimezone(java.lang.String str, long j) {
        try {
            android.app.AlarmManager alarmManager = (android.app.AlarmManager) this.mContext.getSystemService(android.app.AlarmManager.class);
            if (str != null) {
                alarmManager.setTimeZone(str);
            }
            if (j > 0) {
                alarmManager.setTime(j);
            }
        } catch (java.lang.Exception e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Alarm manager failed to set the system time/timezone.", e);
        }
    }

    private void setLocale(java.util.Locale locale) {
        if (locale == null || locale.equals(java.util.Locale.getDefault())) {
            return;
        }
        try {
            com.android.internal.app.LocalePicker.updateLocale(locale);
        } catch (java.lang.Exception e) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Failed to set the system locale.", e);
        }
    }

    private boolean removeNonRequiredAppsForManagedDevice(int i, boolean z, android.content.ComponentName componentName) {
        java.util.Set<java.lang.String> nonRequiredApps;
        if (z) {
            nonRequiredApps = java.util.Collections.emptySet();
        } else {
            nonRequiredApps = this.mOverlayPackagesProvider.getNonRequiredApps(componentName, i, "android.app.action.PROVISION_MANAGED_DEVICE");
        }
        removeNonInstalledPackages(nonRequiredApps, i);
        if (nonRequiredApps.isEmpty()) {
            com.android.server.utils.Slogf.i(LOG_TAG, "No packages to delete on user " + i);
            return true;
        }
        android.content.pm.IPackageDeleteObserver nonRequiredPackageDeleteObserver = new com.android.server.devicepolicy.NonRequiredPackageDeleteObserver(nonRequiredApps.size());
        for (java.lang.String str : nonRequiredApps) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Deleting package [" + str + "] as user " + i);
            this.mContext.getPackageManager().deletePackageAsUser(str, nonRequiredPackageDeleteObserver, 4, i);
        }
        com.android.server.utils.Slogf.i(LOG_TAG, "Waiting for non required apps to be deleted");
        return nonRequiredPackageDeleteObserver.awaitPackagesDeletion();
    }

    private void removeNonInstalledPackages(java.util.Set<java.lang.String> set, int i) {
        java.util.HashSet hashSet = new java.util.HashSet();
        for (java.lang.String str : set) {
            if (!isPackageInstalledForUser(str, i)) {
                hashSet.add(str);
            }
        }
        set.removeAll(hashSet);
    }

    private void disallowAddUser() {
        if (this.mIsAutomotive && this.mInjector.userManagerIsHeadlessSystemUserMode()) {
            com.android.server.utils.Slogf.i(LOG_TAG, "Not setting DISALLOW_ADD_USER on headless system user mode.");
            return;
        }
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            android.os.UserHandle userHandle = ((android.content.pm.UserInfo) it.next()).getUserHandle();
            if (!this.mUserManager.hasUserRestriction("no_add_user", userHandle)) {
                this.mUserManager.setUserRestriction("no_add_user", true, userHandle);
            }
        }
    }

    private boolean setActiveAdminAndDeviceOwner(int i, android.content.ComponentName componentName) {
        enableAndSetActiveAdmin(i, i, componentName);
        if (getDeviceOwnerComponent(true) != null) {
            return true;
        }
        return setDeviceOwner(componentName, i, true);
    }

    private static void logEventDuration(int i, long j, java.lang.String str) {
        android.app.admin.DevicePolicyEventLogger.createEvent(i).setTimePeriod(android.os.SystemClock.elapsedRealtime() - j).setStrings(new java.lang.String[]{str}).write();
    }

    public void resetDefaultCrossProfileIntentFilters(final int i) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda28
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$resetDefaultCrossProfileIntentFilters$175(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetDefaultCrossProfileIntentFilters$175(int i) throws java.lang.Exception {
        try {
            java.util.List profiles = this.mUserManager.getProfiles(i);
            int size = profiles.size();
            if (size <= 1) {
                return;
            }
            java.lang.String managedProvisioningPackage = getManagedProvisioningPackage(this.mContext);
            this.mIPackageManager.clearCrossProfileIntentFilters(i, this.mContext.getOpPackageName());
            this.mIPackageManager.clearCrossProfileIntentFilters(i, managedProvisioningPackage);
            for (int i2 = 0; i2 < size; i2++) {
                android.content.pm.UserInfo userInfo = (android.content.pm.UserInfo) profiles.get(i2);
                this.mIPackageManager.clearCrossProfileIntentFilters(userInfo.id, this.mContext.getOpPackageName());
                this.mIPackageManager.clearCrossProfileIntentFilters(userInfo.id, managedProvisioningPackage);
                this.mUserManagerInternal.setDefaultCrossProfileIntentFilters(i, userInfo.id);
            }
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Error resetting default cross profile intent filters", e);
        }
    }

    private void setAdminCanGrantSensorsPermissionForUserUnchecked(int i, boolean z) {
        com.android.server.utils.Slogf.d(LOG_TAG, "setAdminCanGrantSensorsPermissionForUserUnchecked(%d, %b)", java.lang.Integer.valueOf(i), java.lang.Boolean.valueOf(z));
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                com.android.internal.util.Preconditions.checkState(isDeviceOwner(deviceOrProfileOwnerAdminLocked) && deviceOrProfileOwnerAdminLocked.getUserHandle().getIdentifier() == i, "May only be set on a the user of a device owner.");
                deviceOrProfileOwnerAdminLocked.mAdminCanGrantSensorsPermissions = z;
                this.mPolicyCache.setAdminCanGrantSensorsPermissions(z);
                saveSettingsLocked(i);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void setDemoDeviceStateUnchecked(int i, boolean z) {
        com.android.server.utils.Slogf.d(LOG_TAG, "setDemoDeviceStateUnchecked(%d, %b)", java.lang.Integer.valueOf(i), java.lang.Boolean.valueOf(z));
        if (!z) {
            return;
        }
        synchronized (getLockObject()) {
            this.mInjector.settingsGlobalPutStringForUser("device_demo_mode", java.lang.Integer.toString(1), i);
        }
        setUserProvisioningState(3, i);
    }

    private void updateAdminCanGrantSensorsPermissionCache(int i) {
        com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked;
        synchronized (getLockObject()) {
            try {
                if (isUserAffiliatedWithDeviceLocked(i)) {
                    deviceOrProfileOwnerAdminLocked = getDeviceOwnerAdminLocked();
                } else {
                    deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(i);
                }
                this.mPolicyCache.setAdminCanGrantSensorsPermissions(deviceOrProfileOwnerAdminLocked != null ? deviceOrProfileOwnerAdminLocked.mAdminCanGrantSensorsPermissions : false);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void updateNetworkPreferenceForUser(final int i, java.util.List<android.app.admin.PreferentialNetworkServiceConfig> list) {
        if (!isManagedProfile(i) && !isDeviceOwnerUserId(i)) {
            return;
        }
        final java.util.ArrayList arrayList = new java.util.ArrayList();
        for (android.app.admin.PreferentialNetworkServiceConfig preferentialNetworkServiceConfig : list) {
            android.net.ProfileNetworkPreference.Builder builder = new android.net.ProfileNetworkPreference.Builder();
            if (preferentialNetworkServiceConfig.isEnabled()) {
                if (preferentialNetworkServiceConfig.isFallbackToDefaultConnectionAllowed()) {
                    builder.setPreference(1);
                } else if (preferentialNetworkServiceConfig.shouldBlockNonMatchingNetworks()) {
                    builder.setPreference(3);
                } else {
                    builder.setPreference(2);
                }
                builder.setIncludedUids(preferentialNetworkServiceConfig.getIncludedUids());
                builder.setExcludedUids(preferentialNetworkServiceConfig.getExcludedUids());
                builder.setPreferenceEnterpriseId(preferentialNetworkServiceConfig.getNetworkId());
            } else {
                builder.setPreference(0);
            }
            arrayList.add(builder.build());
        }
        com.android.server.utils.Slogf.d(LOG_TAG, "updateNetworkPreferenceForUser to " + arrayList);
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda120
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$updateNetworkPreferenceForUser$176(i, arrayList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateNetworkPreferenceForUser$176(int i, java.util.List list) throws java.lang.Exception {
        this.mInjector.getConnectivityManager().setProfileNetworkPreferences(android.os.UserHandle.of(i), list, null, null);
    }

    public boolean canAdminGrantSensorsPermissions() {
        if (!this.mHasFeature) {
            return false;
        }
        return this.mPolicyCache.canAdminGrantSensorsPermissions();
    }

    public void setDeviceOwnerType(@android.annotation.NonNull android.content.ComponentName componentName, int i) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        synchronized (getLockObject()) {
            setDeviceOwnerTypeLocked(componentName, i);
        }
    }

    private void setDeviceOwnerTypeLocked(android.content.ComponentName componentName, int i) {
        java.lang.String packageName = componentName.getPackageName();
        verifyDeviceOwnerTypePreconditionsLocked(componentName);
        boolean isAdminTestOnlyLocked = isAdminTestOnlyLocked(componentName, this.mOwners.getDeviceOwnerUserId());
        com.android.internal.util.Preconditions.checkState(isAdminTestOnlyLocked || !this.mOwners.isDeviceOwnerTypeSetForDeviceOwner(packageName), "Test only admins can only set the device owner type more than once");
        this.mOwners.setDeviceOwnerType(packageName, i, isAdminTestOnlyLocked);
        setGlobalSettingDeviceOwnerType(i);
    }

    private void setGlobalSettingDeviceOwnerType(final int i) {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda191
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setGlobalSettingDeviceOwnerType$177(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setGlobalSettingDeviceOwnerType$177(int i) throws java.lang.Exception {
        this.mInjector.settingsGlobalPutInt("device_owner_type", i);
    }

    public int getDeviceOwnerType(@android.annotation.NonNull android.content.ComponentName componentName) {
        int deviceOwnerTypeLocked;
        synchronized (getLockObject()) {
            verifyDeviceOwnerTypePreconditionsLocked(componentName);
            deviceOwnerTypeLocked = getDeviceOwnerTypeLocked(componentName.getPackageName());
        }
        return deviceOwnerTypeLocked;
    }

    private int getDeviceOwnerTypeLocked(java.lang.String str) {
        return this.mOwners.getDeviceOwnerType(str);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isFinancedDeviceOwner(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        boolean z;
        synchronized (getLockObject()) {
            try {
                if (isDeviceOwnerLocked(callerIdentity)) {
                    z = true;
                    if (getDeviceOwnerTypeLocked(this.mOwners.getDeviceOwnerPackageName()) == 1) {
                    }
                }
                z = false;
            } finally {
            }
        }
        return z;
    }

    private void verifyDeviceOwnerTypePreconditionsLocked(@android.annotation.NonNull android.content.ComponentName componentName) {
        com.android.internal.util.Preconditions.checkState(this.mOwners.hasDeviceOwner(), "there is no device owner");
        com.android.internal.util.Preconditions.checkState(this.mOwners.getDeviceOwnerComponent().equals(componentName), "admin is not the device owner");
    }

    public void setUsbDataSignalingEnabled(java.lang.String str, boolean z) {
        java.util.Objects.requireNonNull(str, "Admin package name must be provided");
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (!android.app.admin.flags.Flags.policyEngineMigrationV2Enabled()) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity), "USB data signaling can only be controlled by a device owner or a profile owner on an organization-owned device.");
            com.android.internal.util.Preconditions.checkState(canUsbDataSignalingBeDisabled(), "USB data signaling cannot be disabled.");
        }
        synchronized (getLockObject()) {
            try {
                if (android.app.admin.flags.Flags.policyEngineMigrationV2Enabled()) {
                    com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(null, "android.permission.MANAGE_DEVICE_POLICY_USB_DATA_SIGNALLING", callerIdentity.getPackageName(), callerIdentity.getUserId());
                    com.android.internal.util.Preconditions.checkState(canUsbDataSignalingBeDisabled(), "USB data signaling cannot be disabled.");
                    this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.USB_DATA_SIGNALING, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.BooleanPolicyValue(z));
                } else {
                    com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                    if (profileOwnerOrDeviceOwnerLocked.mUsbDataSignalingEnabled != z) {
                        profileOwnerOrDeviceOwnerLocked.mUsbDataSignalingEnabled = z;
                        saveSettingsLocked(callerIdentity.getUserId());
                        updateUsbDataSignal(this.mContext, isUsbDataSignalingEnabledInternalLocked());
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        android.app.admin.DevicePolicyEventLogger.createEvent(com.android.internal.util.FrameworkStatsLog.DEVICE_POLICY_EVENT__EVENT_ID__SET_USB_DATA_SIGNALING).setAdmin(str).setBoolean(z).write();
    }

    static void updateUsbDataSignal(final android.content.Context context, final boolean z) {
        if (canUsbDataSignalingBeDisabledInternal(context) && !((java.lang.Boolean) android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda181
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$updateUsbDataSignal$178;
                lambda$updateUsbDataSignal$178 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$updateUsbDataSignal$178(context, z);
                return lambda$updateUsbDataSignal$178;
            }
        })).booleanValue()) {
            com.android.server.utils.Slogf.w(LOG_TAG, "Failed to set usb data signaling state");
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Boolean lambda$updateUsbDataSignal$178(android.content.Context context, boolean z) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(((android.hardware.usb.UsbManager) context.getSystemService(android.hardware.usb.UsbManager.class)).enableUsbDataSignal(z));
    }

    public boolean isUsbDataSignalingEnabled(java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (android.app.admin.flags.Flags.policyEngineMigrationV2Enabled()) {
            java.lang.Boolean bool = (java.lang.Boolean) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.USB_DATA_SIGNALING, callerIdentity.getUserId());
            return bool == null || bool.booleanValue();
        }
        synchronized (getLockObject()) {
            try {
                if (isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) {
                    return getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId()).mUsbDataSignalingEnabled;
                }
                return isUsbDataSignalingEnabledInternalLocked();
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private boolean isUsbDataSignalingEnabledInternalLocked() {
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
        return deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked == null || deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.mUsbDataSignalingEnabled;
    }

    public boolean canUsbDataSignalingBeDisabled() {
        return canUsbDataSignalingBeDisabledInternal(this.mContext);
    }

    private static boolean canUsbDataSignalingBeDisabledInternal(final android.content.Context context) {
        return ((java.lang.Boolean) android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda59
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$canUsbDataSignalingBeDisabledInternal$179;
                lambda$canUsbDataSignalingBeDisabledInternal$179 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$canUsbDataSignalingBeDisabledInternal$179(context);
                return lambda$canUsbDataSignalingBeDisabledInternal$179;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Boolean lambda$canUsbDataSignalingBeDisabledInternal$179(android.content.Context context) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(context.getSystemService(android.hardware.usb.UsbManager.class) != null && ((android.hardware.usb.UsbManager) context.getSystemService(android.hardware.usb.UsbManager.class)).getUsbHalVersion() >= 13);
    }

    private void notifyMinimumRequiredWifiSecurityLevelChanged(final int i) {
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda158
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$notifyMinimumRequiredWifiSecurityLevelChanged$180(i);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$notifyMinimumRequiredWifiSecurityLevelChanged$180(int i) throws java.lang.Exception {
        this.mInjector.getWifiManager().notifyMinimumRequiredWifiSecurityLevelChanged(i);
    }

    private void notifyWifiSsidPolicyChanged(final android.app.admin.WifiSsidPolicy wifiSsidPolicy) {
        if (wifiSsidPolicy == null) {
            return;
        }
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda50
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$notifyWifiSsidPolicyChanged$181(wifiSsidPolicy);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$notifyWifiSsidPolicyChanged$181(android.app.admin.WifiSsidPolicy wifiSsidPolicy) throws java.lang.Exception {
        this.mInjector.getWifiManager().notifyWifiSsidPolicyChanged(wifiSsidPolicy);
    }

    public void setMinimumRequiredWifiSecurityLevel(java.lang.String str, int i) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked;
        boolean z = true;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(str);
        } else {
            callerIdentity = getCallerIdentity();
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity), "Wi-Fi minimum security level can only be controlled by a device owner or a profile owner on an organization-owned device.");
        }
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    profileOwnerOrDeviceOwnerLocked = enforcePermissionAndGetEnforcingAdmin(null, "android.permission.MANAGE_DEVICE_POLICY_WIFI", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
                } else {
                    profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                }
                if (profileOwnerOrDeviceOwnerLocked.mWifiMinimumSecurityLevel == i) {
                    z = false;
                } else {
                    profileOwnerOrDeviceOwnerLocked.mWifiMinimumSecurityLevel = i;
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (z) {
            notifyMinimumRequiredWifiSecurityLevelChanged(i);
        }
    }

    public int getMinimumRequiredWifiSecurityLevel() {
        int i;
        synchronized (getLockObject()) {
            com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
            i = deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked == null ? 0 : deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.mWifiMinimumSecurityLevel;
        }
        return i;
    }

    public android.app.admin.WifiSsidPolicy getWifiSsidPolicy(java.lang.String str) {
        android.app.admin.WifiSsidPolicy wifiSsidPolicy;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        if (isPermissionCheckFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_WIFI", str, callerIdentity.getUserId());
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || canQueryAdminPolicy(callerIdentity), "SSID policy can only be retrieved by a device owner or a profile owner on an organization-owned device or an app with the QUERY_ADMIN_POLICY permission.");
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceOrSystemPermissionBasedAdminLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceOrSystemPermissionBasedAdminLocked();
                wifiSsidPolicy = deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceOrSystemPermissionBasedAdminLocked != null ? deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceOrSystemPermissionBasedAdminLocked.mWifiSsidPolicy : null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return wifiSsidPolicy;
    }

    public boolean isTheftDetectionTriggered(java.lang.String str) {
        final com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (!android.app.admin.flags.Flags.deviceTheftImplEnabled()) {
            return false;
        }
        enforcePermission("android.permission.MANAGE_DEVICE_POLICY_THEFT_DETECTION", callerIdentity.getPackageName(), callerIdentity.getUserId());
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda42
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isTheftDetectionTriggered$182;
                lambda$isTheftDetectionTriggered$182 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isTheftDetectionTriggered$182(callerIdentity);
                return lambda$isTheftDetectionTriggered$182;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isTheftDetectionTriggered$182(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        return java.lang.Boolean.valueOf((this.mLockPatternUtils.getStrongAuthForUser(callerIdentity.getUserId()) & 512) != 0);
    }

    public void setWifiSsidPolicy(java.lang.String str, android.app.admin.WifiSsidPolicy wifiSsidPolicy) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity;
        com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked;
        boolean z = true;
        if (isPermissionCheckFlagEnabled()) {
            callerIdentity = getCallerIdentity(str);
        } else {
            callerIdentity = getCallerIdentity();
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity), "SSID denylist can only be controlled by a device owner or a profile owner on an organization-owned device.");
        }
        synchronized (getLockObject()) {
            try {
                if (isPermissionCheckFlagEnabled()) {
                    profileOwnerOrDeviceOwnerLocked = enforcePermissionAndGetEnforcingAdmin(null, "android.permission.MANAGE_DEVICE_POLICY_WIFI", callerIdentity.getPackageName(), callerIdentity.getUserId()).getActiveAdmin();
                } else {
                    profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(callerIdentity.getUserId());
                }
                if (java.util.Objects.equals(wifiSsidPolicy, profileOwnerOrDeviceOwnerLocked.mWifiSsidPolicy)) {
                    z = false;
                } else {
                    profileOwnerOrDeviceOwnerLocked.mWifiSsidPolicy = wifiSsidPolicy;
                }
                if (z) {
                    saveSettingsLocked(callerIdentity.getUserId());
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        if (z) {
            notifyWifiSsidPolicyChanged(wifiSsidPolicy);
        }
    }

    public void setDrawables(@android.annotation.NonNull final java.util.List<android.app.admin.DevicePolicyDrawableResource> list) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.UPDATE_DEVICE_MANAGEMENT_RESOURCES"));
        java.util.Objects.requireNonNull(list, "drawables must be provided.");
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda137
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDrawables$184(list);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setDrawables$184(java.util.List list) throws java.lang.Exception {
        if (this.mDeviceManagementResourcesProvider.updateDrawables(list)) {
            sendDrawableUpdatedBroadcast((java.util.List) list.stream().map(new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda33
                @Override // java.util.function.Function
                public final java.lang.Object apply(java.lang.Object obj) {
                    java.lang.String drawableId;
                    drawableId = ((android.app.admin.DevicePolicyDrawableResource) obj).getDrawableId();
                    return drawableId;
                }
            }).collect(java.util.stream.Collectors.toList()));
        }
    }

    public void resetDrawables(@android.annotation.NonNull final java.util.List<java.lang.String> list) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.UPDATE_DEVICE_MANAGEMENT_RESOURCES"));
        java.util.Objects.requireNonNull(list, "drawableIds must be provided.");
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda29
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$resetDrawables$185(list);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetDrawables$185(java.util.List list) throws java.lang.Exception {
        if (this.mDeviceManagementResourcesProvider.removeDrawables(list)) {
            sendDrawableUpdatedBroadcast(list);
        }
    }

    public android.app.admin.ParcelableResource getDrawable(final java.lang.String str, final java.lang.String str2, final java.lang.String str3) {
        return (android.app.admin.ParcelableResource) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda52
            public final java.lang.Object getOrThrow() {
                android.app.admin.ParcelableResource lambda$getDrawable$186;
                lambda$getDrawable$186 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getDrawable$186(str, str2, str3);
                return lambda$getDrawable$186;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.app.admin.ParcelableResource lambda$getDrawable$186(java.lang.String str, java.lang.String str2, java.lang.String str3) throws java.lang.Exception {
        return this.mDeviceManagementResourcesProvider.getDrawable(str, str2, str3);
    }

    private void sendDrawableUpdatedBroadcast(java.util.List<java.lang.String> list) {
        sendResourceUpdatedBroadcast(1, list);
    }

    public void setStrings(@android.annotation.NonNull final java.util.List<android.app.admin.DevicePolicyStringResource> list) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.UPDATE_DEVICE_MANAGEMENT_RESOURCES"));
        java.util.Objects.requireNonNull(list, "strings must be provided.");
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda88
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setStrings$188(list);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$setStrings$188(java.util.List list) throws java.lang.Exception {
        if (this.mDeviceManagementResourcesProvider.updateStrings(list)) {
            sendStringsUpdatedBroadcast((java.util.List) list.stream().map(new java.util.function.Function() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda114
                @Override // java.util.function.Function
                public final java.lang.Object apply(java.lang.Object obj) {
                    java.lang.String stringId;
                    stringId = ((android.app.admin.DevicePolicyStringResource) obj).getStringId();
                    return stringId;
                }
            }).collect(java.util.stream.Collectors.toList()));
        }
    }

    public void resetStrings(@android.annotation.NonNull final java.util.List<java.lang.String> list) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.UPDATE_DEVICE_MANAGEMENT_RESOURCES"));
        this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda138
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$resetStrings$189(list);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$resetStrings$189(java.util.List list) throws java.lang.Exception {
        if (this.mDeviceManagementResourcesProvider.removeStrings(list)) {
            sendStringsUpdatedBroadcast(list);
        }
    }

    public android.app.admin.ParcelableResource getString(final java.lang.String str) {
        return (android.app.admin.ParcelableResource) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda90
            public final java.lang.Object getOrThrow() {
                android.app.admin.ParcelableResource lambda$getString$190;
                lambda$getString$190 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getString$190(str);
                return lambda$getString$190;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ android.app.admin.ParcelableResource lambda$getString$190(java.lang.String str) throws java.lang.Exception {
        return this.mDeviceManagementResourcesProvider.getString(str);
    }

    private void sendStringsUpdatedBroadcast(java.util.List<java.lang.String> list) {
        sendResourceUpdatedBroadcast(2, list);
    }

    private void sendResourceUpdatedBroadcast(int i, java.util.List<java.lang.String> list) {
        android.content.Intent intent = new android.content.Intent("android.app.action.DEVICE_POLICY_RESOURCE_UPDATED");
        intent.putExtra("android.app.extra.RESOURCE_IDS", (java.lang.String[]) list.toArray(new java.util.function.IntFunction() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda176
            @Override // java.util.function.IntFunction
            public final java.lang.Object apply(int i2) {
                java.lang.String[] lambda$sendResourceUpdatedBroadcast$191;
                lambda$sendResourceUpdatedBroadcast$191 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$sendResourceUpdatedBroadcast$191(i2);
                return lambda$sendResourceUpdatedBroadcast$191;
            }
        }));
        intent.putExtra("android.app.extra.RESOURCE_TYPE", i);
        intent.setFlags(268435456);
        intent.setFlags(1073741824);
        java.util.List aliveUsers = this.mUserManager.getAliveUsers();
        for (int i2 = 0; i2 < aliveUsers.size(); i2++) {
            this.mContext.sendBroadcastAsUser(intent, ((android.content.pm.UserInfo) aliveUsers.get(i2)).getUserHandle());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.String[] lambda$sendResourceUpdatedBroadcast$191(int i) {
        return new java.lang.String[i];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public java.lang.String getUpdatableString(java.lang.String str, final int i, final java.lang.Object... objArr) {
        android.app.admin.ParcelableResource string = this.mDeviceManagementResourcesProvider.getString(str);
        if (string == null) {
            return android.app.admin.ParcelableResource.loadDefaultString(new java.util.function.Supplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda154
                @Override // java.util.function.Supplier
                public final java.lang.Object get() {
                    java.lang.String lambda$getUpdatableString$192;
                    lambda$getUpdatableString$192 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getUpdatableString$192(i, objArr);
                    return lambda$getUpdatableString$192;
                }
            });
        }
        return string.getString(this.mContext, new java.util.function.Supplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda155
            @Override // java.util.function.Supplier
            public final java.lang.Object get() {
                java.lang.String lambda$getUpdatableString$193;
                lambda$getUpdatableString$193 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getUpdatableString$193(i, objArr);
                return lambda$getUpdatableString$193;
            }
        }, objArr);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.String lambda$getUpdatableString$192(int i, java.lang.Object[] objArr) {
        return this.mContext.getString(i, objArr);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.String lambda$getUpdatableString$193(int i, java.lang.Object[] objArr) {
        return this.mContext.getString(i, objArr);
    }

    public boolean isDpcDownloaded() {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        final android.content.ContentResolver contentResolver = this.mContext.getContentResolver();
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda5
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isDpcDownloaded$194;
                lambda$isDpcDownloaded$194 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$isDpcDownloaded$194(contentResolver);
                return lambda$isDpcDownloaded$194;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Boolean lambda$isDpcDownloaded$194(android.content.ContentResolver contentResolver) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(android.provider.Settings.Secure.getIntForUser(contentResolver, "managed_provisioning_dpc_downloaded", 0, contentResolver.getUserId()) == 1);
    }

    public void setDpcDownloaded(boolean z) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        com.android.server.devicepolicy.DevicePolicyManagerService.Injector injector = this.mInjector;
        final int i = z ? 1 : 0;
        injector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda84
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$setDpcDownloaded$195;
                lambda$setDpcDownloaded$195 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$setDpcDownloaded$195(i);
                return lambda$setDpcDownloaded$195;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$setDpcDownloaded$195(int i) throws java.lang.Exception {
        return java.lang.Boolean.valueOf(android.provider.Settings.Secure.putInt(this.mContext.getContentResolver(), "managed_provisioning_dpc_downloaded", i));
    }

    public void resetShouldAllowBypassingDevicePolicyManagementRoleQualificationState() {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_ROLE_HOLDERS"));
        setBypassDevicePolicyManagementRoleQualificationStateInternal(null, false);
    }

    public boolean shouldAllowBypassingDevicePolicyManagementRoleQualification() {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_ROLE_HOLDERS"));
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda131
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$shouldAllowBypassingDevicePolicyManagementRoleQualification$196;
                lambda$shouldAllowBypassingDevicePolicyManagementRoleQualification$196 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$shouldAllowBypassingDevicePolicyManagementRoleQualification$196();
                return lambda$shouldAllowBypassingDevicePolicyManagementRoleQualification$196;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$shouldAllowBypassingDevicePolicyManagementRoleQualification$196() throws java.lang.Exception {
        if (lambda$getUserDataUnchecked$5(0).mBypassDevicePolicyManagementRoleQualifications) {
            return true;
        }
        return java.lang.Boolean.valueOf(shouldAllowBypassingDevicePolicyManagementRoleQualificationInternal());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean shouldAllowBypassingDevicePolicyManagementRoleQualificationInternal() {
        if (nonTestNonPrecreatedUsersExist()) {
            return false;
        }
        return !hasIncompatibleAccountsOnAnyUser();
    }

    private boolean hasAccountsOnAnyUser() {
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            java.util.Iterator<android.content.pm.UserInfo> it = this.mUserManagerInternal.getUsers(true).iterator();
            while (it.hasNext()) {
                if (((android.accounts.AccountManager) this.mContext.createContextAsUser(android.os.UserHandle.of(it.next().id), 0).getSystemService(android.accounts.AccountManager.class)).getAccounts().length != 0) {
                    return true;
                }
            }
            return false;
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setBypassDevicePolicyManagementRoleQualificationStateInternal(java.lang.String str, boolean z) {
        boolean z2;
        com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(0);
        boolean z3 = true;
        if (lambda$getUserDataUnchecked$5.mBypassDevicePolicyManagementRoleQualifications == z) {
            z2 = false;
        } else {
            lambda$getUserDataUnchecked$5.mBypassDevicePolicyManagementRoleQualifications = z;
            z2 = true;
        }
        if (java.util.Objects.equals(str, lambda$getUserDataUnchecked$5.mCurrentRoleHolder)) {
            z3 = z2;
        } else {
            lambda$getUserDataUnchecked$5.mCurrentRoleHolder = str;
        }
        if (z3) {
            synchronized (getLockObject()) {
                saveSettingsLocked(0);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    final class DevicePolicyManagementRoleObserver implements android.app.role.OnRoleHoldersChangedListener {
        private final android.content.Context mContext;
        private final java.util.concurrent.Executor mExecutor;
        private android.app.role.RoleManager mRm;

        DevicePolicyManagementRoleObserver(@android.annotation.NonNull android.content.Context context) {
            this.mContext = context;
            this.mExecutor = this.mContext.getMainExecutor();
            this.mRm = (android.app.role.RoleManager) this.mContext.getSystemService(android.app.role.RoleManager.class);
        }

        public void register() {
            this.mRm.addOnRoleHoldersChangedListenerAsUser(this.mExecutor, this, android.os.UserHandle.ALL);
        }

        public void onRoleHoldersChanged(@android.annotation.NonNull java.lang.String str, @android.annotation.NonNull android.os.UserHandle userHandle) {
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mDevicePolicyEngine.handleRoleChanged(str, userHandle.getIdentifier());
            if ("android.app.role.DEVICE_POLICY_MANAGEMENT".equals(str)) {
                handleDevicePolicyManagementRoleChange(userHandle);
            } else if ("android.app.role.FINANCED_DEVICE_KIOSK".equals(str)) {
                handleFinancedDeviceKioskRoleChange();
            }
        }

        private void handleDevicePolicyManagementRoleChange(android.os.UserHandle userHandle) {
            java.lang.String deviceManagementRoleHolder = getDeviceManagementRoleHolder(userHandle);
            if (isDefaultRoleHolder(deviceManagementRoleHolder)) {
                com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "onRoleHoldersChanged: Default role holder is set, returning early");
                return;
            }
            if (deviceManagementRoleHolder == null) {
                com.android.server.utils.Slogf.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "onRoleHoldersChanged: New role holder is null, returning early");
                return;
            }
            if (com.android.server.devicepolicy.DevicePolicyManagerService.this.shouldAllowBypassingDevicePolicyManagementRoleQualificationInternal()) {
                com.android.server.utils.Slogf.w(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "onRoleHoldersChanged: Updating current role holder to " + deviceManagementRoleHolder);
                com.android.server.devicepolicy.DevicePolicyManagerService.this.setBypassDevicePolicyManagementRoleQualificationStateInternal(deviceManagementRoleHolder, true);
                return;
            }
            if (!deviceManagementRoleHolder.equals(com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getUserDataUnchecked$5(0).mCurrentRoleHolder)) {
                com.android.server.utils.Slogf.w(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "onRoleHoldersChanged: You can't set a different role holder, role is getting revoked from " + deviceManagementRoleHolder);
                com.android.server.devicepolicy.DevicePolicyManagerService.this.setBypassDevicePolicyManagementRoleQualificationStateInternal(null, false);
                this.mRm.removeRoleHolderAsUser("android.app.role.DEVICE_POLICY_MANAGEMENT", deviceManagementRoleHolder, 0, userHandle, this.mExecutor, new java.util.function.Consumer() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyManagementRoleObserver$$ExternalSyntheticLambda1
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.DevicePolicyManagementRoleObserver.lambda$handleDevicePolicyManagementRoleChange$0((java.lang.Boolean) obj);
                    }
                });
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$handleDevicePolicyManagementRoleChange$0(java.lang.Boolean bool) {
        }

        private void handleFinancedDeviceKioskRoleChange() {
            android.util.Slog.i(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Handling action android.app.admin.action.DEVICE_FINANCING_STATE_CHANGED");
            final android.content.Intent intent = new android.content.Intent("android.app.admin.action.DEVICE_FINANCING_STATE_CHANGED");
            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyManagementRoleObserver$$ExternalSyntheticLambda0
                public final void runOrThrow() {
                    com.android.server.devicepolicy.DevicePolicyManagerService.DevicePolicyManagementRoleObserver.this.lambda$handleFinancedDeviceKioskRoleChange$1(intent);
                }
            });
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$handleFinancedDeviceKioskRoleChange$1(android.content.Intent intent) throws java.lang.Exception {
            java.util.Iterator it = com.android.server.devicepolicy.DevicePolicyManagerService.this.mUserManager.getUsers().iterator();
            while (it.hasNext()) {
                android.os.UserHandle userHandle = ((android.content.pm.UserInfo) it.next()).getUserHandle();
                com.android.server.devicepolicy.DevicePolicyManagerService.this.broadcastExplicitIntentToRoleHolder(intent, "android.app.role.SYSTEM_SUPERVISION", userHandle);
                com.android.server.devicepolicy.DevicePolicyManagerService.this.broadcastExplicitIntentToRoleHolder(intent, "android.app.role.DEVICE_POLICY_MANAGEMENT", userHandle);
                com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked = com.android.server.devicepolicy.DevicePolicyManagerService.this.getDeviceOrProfileOwnerAdminLocked(userHandle.getIdentifier());
                if (deviceOrProfileOwnerAdminLocked != null && (com.android.server.devicepolicy.DevicePolicyManagerService.this.isProfileOwnerOfOrganizationOwnedDevice(deviceOrProfileOwnerAdminLocked.info.getComponent(), userHandle.getIdentifier()) || com.android.server.devicepolicy.DevicePolicyManagerService.this.isDeviceOwner(deviceOrProfileOwnerAdminLocked) || (com.android.server.devicepolicy.DevicePolicyManagerService.this.isProfileOwner(deviceOrProfileOwnerAdminLocked.info.getComponent(), userHandle.getIdentifier()) && deviceOrProfileOwnerAdminLocked.getUserHandle().isSystem()))) {
                    if (!deviceOrProfileOwnerAdminLocked.info.getPackageName().equals(getDeviceManagementRoleHolder(userHandle))) {
                        com.android.server.devicepolicy.DevicePolicyManagerService.this.broadcastExplicitIntentToPackage(intent, deviceOrProfileOwnerAdminLocked.info.getPackageName(), deviceOrProfileOwnerAdminLocked.getUserHandle());
                    }
                }
            }
        }

        private java.lang.String getDeviceManagementRoleHolder(android.os.UserHandle userHandle) {
            return com.android.server.devicepolicy.DevicePolicyManagerService.this.getRoleHolderPackageNameOnUser(this.mContext, "android.app.role.DEVICE_POLICY_MANAGEMENT", userHandle);
        }

        private boolean isDefaultRoleHolder(java.lang.String str) {
            java.lang.String defaultRoleHolderPackageName = getDefaultRoleHolderPackageName();
            if (str == null || defaultRoleHolderPackageName == null || !defaultRoleHolderPackageName.equals(str)) {
                return false;
            }
            return hasSigningCertificate(str, getDefaultRoleHolderPackageSignature());
        }

        private boolean hasSigningCertificate(java.lang.String str, java.lang.String str2) {
            if (str == null || str2 == null) {
                return false;
            }
            try {
                return com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.getPackageManager().hasSigningCertificate(str, new android.content.pm.Signature(str2).toByteArray(), 1);
            } catch (java.lang.IllegalArgumentException e) {
                com.android.server.utils.Slogf.w(com.android.server.devicepolicy.DevicePolicyManagerService.LOG_TAG, "Cannot parse signing certificate: " + str2, e);
                return false;
            }
        }

        private java.lang.String getDefaultRoleHolderPackageName() {
            java.lang.String[] defaultRoleHolderPackageNameAndSignature = getDefaultRoleHolderPackageNameAndSignature();
            if (defaultRoleHolderPackageNameAndSignature == null) {
                return null;
            }
            return defaultRoleHolderPackageNameAndSignature[0];
        }

        private java.lang.String getDefaultRoleHolderPackageSignature() {
            java.lang.String[] defaultRoleHolderPackageNameAndSignature = getDefaultRoleHolderPackageNameAndSignature();
            if (defaultRoleHolderPackageNameAndSignature == null || defaultRoleHolderPackageNameAndSignature.length < 2) {
                return null;
            }
            return defaultRoleHolderPackageNameAndSignature[1];
        }

        private java.lang.String[] getDefaultRoleHolderPackageNameAndSignature() {
            java.lang.String string = this.mContext.getString(android.R.string.config_devicePolicyManagement);
            if (android.text.TextUtils.isEmpty(string)) {
                return null;
            }
            if (string.contains(":")) {
                return string.split(":");
            }
            return new java.lang.String[]{string};
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void broadcastExplicitIntentToRoleHolder(android.content.Intent intent, java.lang.String str, android.os.UserHandle userHandle) {
        java.lang.String roleHolderPackageNameOnUser = getRoleHolderPackageNameOnUser(this.mContext, str, userHandle);
        if (roleHolderPackageNameOnUser == null) {
            return;
        }
        broadcastExplicitIntentToPackage(intent, roleHolderPackageNameOnUser, userHandle);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void broadcastExplicitIntentToPackage(android.content.Intent intent, java.lang.String str, android.os.UserHandle userHandle) {
        int identifier = userHandle.getIdentifier();
        if (str == null) {
            return;
        }
        android.content.Intent intent2 = new android.content.Intent(intent).setPackage(str);
        java.util.List queryBroadcastReceiversAsUser = this.mContext.getPackageManager().queryBroadcastReceiversAsUser(intent2, android.content.pm.PackageManager.ResolveInfoFlags.of(2L), identifier);
        if (queryBroadcastReceiversAsUser.isEmpty()) {
            android.util.Slog.i(LOG_TAG, "Found no receivers to handle intent " + intent + " in package " + str);
            return;
        }
        java.util.Iterator it = queryBroadcastReceiversAsUser.iterator();
        while (it.hasNext()) {
            this.mContext.sendBroadcastAsUser(new android.content.Intent(intent2).setComponent(((android.content.pm.ResolveInfo) it.next()).getComponentInfo().getComponentName()).addFlags(16777216), userHandle);
        }
    }

    public java.util.List<android.os.UserHandle> getPolicyManagedProfiles(@android.annotation.NonNull android.os.UserHandle userHandle) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        final int identifier = userHandle.getIdentifier();
        return (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda175
            public final java.lang.Object getOrThrow() {
                java.util.List lambda$getPolicyManagedProfiles$197;
                lambda$getPolicyManagedProfiles$197 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getPolicyManagedProfiles$197(identifier);
                return lambda$getPolicyManagedProfiles$197;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.List lambda$getPolicyManagedProfiles$197(int i) throws java.lang.Exception {
        java.util.List profiles = this.mUserManager.getProfiles(i);
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (int i2 = 0; i2 < profiles.size(); i2++) {
            android.content.pm.UserInfo userInfo = (android.content.pm.UserInfo) profiles.get(i2);
            if (userInfo.isManagedProfile() && hasProfileOwner(userInfo.id)) {
                arrayList.add(new android.os.UserHandle(userInfo.id));
            }
        }
        return arrayList;
    }

    private com.android.server.devicepolicy.EnforcingAdmin enforcePermissionsAndGetEnforcingAdmin(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String[] strArr, java.lang.String str, int i) {
        enforcePermissions(strArr, str, i);
        return getEnforcingAdminForCaller(componentName, str);
    }

    private com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, int i) {
        enforcePermission(str, str2, i);
        return getEnforcingAdminForCaller(componentName, str2);
    }

    private com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, int i, java.lang.String str2, int i2) {
        enforcePermission(str, i, str2, i2);
        return getEnforcingAdminForCaller(componentName, str2);
    }

    private com.android.server.devicepolicy.EnforcingAdmin enforcePermissionsAndGetEnforcingAdmin(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String[] strArr, int i, java.lang.String str, int i2) {
        enforcePermissions(strArr, i, str, i2);
        return getEnforcingAdminForCaller(componentName, str);
    }

    private com.android.server.devicepolicy.EnforcingAdmin enforceCanQueryAndGetEnforcingAdmin(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, java.lang.String str2, int i) {
        enforceCanQuery(str, str2, i);
        return getEnforcingAdminForCaller(componentName, str2);
    }

    private void enforcePermission(java.lang.String str, java.lang.String str2) throws java.lang.SecurityException {
        if (!hasPermission(str, str2)) {
            throw new java.lang.SecurityException("Caller does not have the required permissions for this user. Permission required: " + str + ".");
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void enforcePermission(java.lang.String str, java.lang.String str2, int i) throws java.lang.SecurityException {
        enforcePermission(str, str2);
        if (i != getCallerIdentity(str2).getUserId()) {
            enforcePermission(CROSS_USER_PERMISSIONS.get(str), str2);
        }
    }

    private void enforcePermissions(java.lang.String[] strArr, java.lang.String str, int i) throws java.lang.SecurityException {
        java.lang.String str2;
        int length = strArr.length;
        int i2 = 0;
        while (true) {
            if (i2 >= length) {
                str2 = "";
                break;
            }
            str2 = strArr[i2];
            if (hasPermission(str2, str)) {
                break;
            } else {
                i2++;
            }
        }
        if (str2.isEmpty()) {
            throw new java.lang.SecurityException("Caller does not have the required permissions for this user. One of the following permission required: " + java.util.Arrays.toString(strArr));
        }
        enforcePermission(str2, str, i);
    }

    private void enforcePermission(java.lang.String str, int i, java.lang.String str2, int i2) throws java.lang.SecurityException {
        if (hasAdminPolicy(i, str2)) {
            return;
        }
        enforcePermission(str, str2, i2);
    }

    private void enforcePermissions(java.lang.String[] strArr, int i, java.lang.String str, int i2) throws java.lang.SecurityException {
        if (hasAdminPolicy(i, str) && this.mInjector.userHandleGetCallingUserId() == i2) {
            return;
        }
        enforcePermissions(strArr, str, i2);
    }

    private void enforceCanQuery(java.lang.String str, java.lang.String str2, int i) throws java.lang.SecurityException {
        if (hasPermission("android.permission.QUERY_ADMIN_POLICY", str2)) {
            return;
        }
        enforcePermission(str, str2, i);
    }

    private boolean hasAdminPolicy(int i, java.lang.String str) {
        return getActiveAdminWithPolicyForUidLocked(null, i, getCallerIdentity(str).getUid()) != null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean hasPermission(java.lang.String str, java.lang.String str2, int i) {
        boolean z;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str2);
        boolean hasPermission = hasPermission(str, callerIdentity.getPackageName());
        if (hasPermission && callerIdentity.getUserId() != i) {
            z = hasPermission(CROSS_USER_PERMISSIONS.get(str), callerIdentity.getPackageName());
        } else {
            z = true;
        }
        return hasPermission && z;
    }

    private boolean hasPermission(java.lang.String str, @android.annotation.NonNull java.lang.String str2) {
        java.util.Objects.requireNonNull(str2, "callerPackageName is null");
        if (str == null) {
            return true;
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str2);
        if (this.mContext.checkCallingOrSelfPermission(str) == 0) {
            return true;
        }
        int dpcType = getDpcType(callerIdentity);
        if (dpcType != -1) {
            return DPC_PERMISSIONS.get(java.lang.Integer.valueOf(dpcType)).contains(str);
        }
        if (isCallerDevicePolicyManagementRoleHolder(callerIdentity)) {
            return anyDpcHasPermission(str, callerIdentity.getUserId());
        }
        if (DELEGATE_SCOPES.containsKey(str)) {
            return isCallerDelegate(callerIdentity, DELEGATE_SCOPES.get(str));
        }
        return false;
    }

    private boolean anyDpcHasPermission(java.lang.String str, int i) {
        if (this.mOwners.isDefaultDeviceOwnerUserId(i)) {
            return DPC_PERMISSIONS.get(0).contains(str);
        }
        if (this.mOwners.isFinancedDeviceOwnerUserId(i)) {
            return DPC_PERMISSIONS.get(1).contains(str);
        }
        if (this.mOwners.isProfileOwnerOfOrganizationOwnedDevice(i)) {
            return DPC_PERMISSIONS.get(2).contains(str);
        }
        if (i == 0 && this.mOwners.hasProfileOwner(0)) {
            return DPC_PERMISSIONS.get(3).contains(str);
        }
        if (this.mOwners.hasProfileOwner(i)) {
            return DPC_PERMISSIONS.get(4).contains(str);
        }
        return false;
    }

    private com.android.server.devicepolicy.EnforcingAdmin getEnforcingAdminForCaller(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str) {
        com.android.server.devicepolicy.ActiveAdmin deviceOrProfileOwnerAdminLocked;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(componentName, str);
        int userId = callerIdentity.getUserId();
        if (isDeviceOwner(callerIdentity) || isProfileOwner(callerIdentity) || isCallerDelegate(callerIdentity)) {
            synchronized (getLockObject()) {
                try {
                    if (componentName != null) {
                        deviceOrProfileOwnerAdminLocked = getActiveAdminUncheckedLocked(componentName, userId);
                    } else {
                        deviceOrProfileOwnerAdminLocked = getDeviceOrProfileOwnerAdminLocked(userId);
                        componentName = deviceOrProfileOwnerAdminLocked.info.getComponent();
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            return com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(componentName, userId, deviceOrProfileOwnerAdminLocked);
        }
        com.android.server.devicepolicy.ActiveAdmin activeAdminForCaller = getActiveAdminForCaller(componentName, callerIdentity);
        if (activeAdminForCaller != null) {
            return com.android.server.devicepolicy.EnforcingAdmin.createDeviceAdminEnforcingAdmin(activeAdminForCaller.info.getComponent(), userId, activeAdminForCaller);
        }
        return com.android.server.devicepolicy.EnforcingAdmin.createEnforcingAdmin(callerIdentity.getPackageName(), userId, lambda$getUserDataUnchecked$5(userId).createOrGetPermissionBasedAdmin(userId));
    }

    private com.android.server.devicepolicy.EnforcingAdmin getEnforcingAdminForPackage(@android.annotation.Nullable android.content.ComponentName componentName, java.lang.String str, int i) {
        com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked;
        if (componentName != null) {
            if (isDeviceOwner(componentName, i) || isProfileOwner(componentName, i)) {
                synchronized (getLockObject()) {
                    activeAdminUncheckedLocked = getActiveAdminUncheckedLocked(componentName, i);
                }
                if (activeAdminUncheckedLocked != null) {
                    return com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(componentName, i, activeAdminUncheckedLocked);
                }
            } else {
                com.android.server.devicepolicy.ActiveAdmin activeAdminUncheckedLocked2 = getActiveAdminUncheckedLocked(componentName, i);
                if (activeAdminUncheckedLocked2 != null) {
                    return com.android.server.devicepolicy.EnforcingAdmin.createDeviceAdminEnforcingAdmin(componentName, i, activeAdminUncheckedLocked2);
                }
            }
        }
        return com.android.server.devicepolicy.EnforcingAdmin.createEnforcingAdmin(str, i, lambda$getUserDataUnchecked$5(i).createOrGetPermissionBasedAdmin(i));
    }

    private int getAffectedUser(boolean z) {
        int userHandleGetCallingUserId = this.mInjector.userHandleGetCallingUserId();
        return z ? getProfileParentId(userHandleGetCallingUserId) : userHandleGetCallingUserId;
    }

    @com.android.server.devicepolicy.DevicePolicyManagerService.DpcType
    private int getDpcType(com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        if (isDefaultDeviceOwner(callerIdentity)) {
            return 0;
        }
        if (isFinancedDeviceOwner(callerIdentity)) {
            return 1;
        }
        if (isProfileOwner(callerIdentity)) {
            if (isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) {
                return 2;
            }
            if (isManagedProfile(callerIdentity.getUserId())) {
                return 4;
            }
            if (isProfileOwnerOnUser0(callerIdentity)) {
                return 3;
            }
            if (isUserAffiliatedWithDevice(callerIdentity.getUserId())) {
                return 6;
            }
            return 5;
        }
        return -1;
    }

    private boolean isPermissionCheckFlagEnabled() {
        return android.provider.DeviceConfig.getBoolean("device_policy_manager", PERMISSION_BASED_ACCESS_EXPERIMENT_FLAG, false);
    }

    private boolean isUnicornFlagEnabled() {
        return false;
    }

    private void unsuspendWorkAppsIfNecessary() {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.DevicePolicyData userDataUnchecked = getUserDataUnchecked(0);
                if (userDataUnchecked.mEffectiveKeepProfilesRunning) {
                    userDataUnchecked.mEffectiveKeepProfilesRunning = false;
                    saveSettingsLocked(0);
                    android.util.Slog.w(LOG_TAG, "Work apps may have been paused via suspension previously.");
                    unsuspendAppsForQuietProfiles();
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setMtePolicy(int i, java.lang.String str) {
        boolean z = false;
        com.android.internal.util.Preconditions.checkArgument(java.util.Set.of(0, 2, 1).contains(java.lang.Integer.valueOf(i)), "Provided mode is not one of the allowed values.");
        if (!this.mInjector.systemPropertiesGetBoolean("ro.arm64.memtag.bootctl_device_policy_manager", this.mInjector.systemPropertiesGetBoolean("ro.arm64.memtag.bootctl_settings_toggle", false))) {
            throw new java.lang.UnsupportedOperationException("device does not support MTE");
        }
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (i == 2) {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity));
        }
        if (isPermissionCheckFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_MTE", callerIdentity.getPackageName(), -1);
        } else {
            if (isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity)) {
                z = true;
            }
            com.android.internal.util.Preconditions.checkCallAuthorization(z);
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
                if (deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked != null) {
                    if (i == 1) {
                        this.mInjector.systemPropertiesSet("arm64.memtag.bootctl", "memtag");
                    } else if (i == 2) {
                        this.mInjector.systemPropertiesSet("arm64.memtag.bootctl", "memtag-off");
                    } else if (i == 0 && deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.mtePolicy != 0) {
                        this.mInjector.systemPropertiesSet("arm64.memtag.bootctl", "default");
                    }
                    deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.mtePolicy = i;
                    saveSettingsLocked(callerIdentity.getUserId());
                    android.app.admin.DevicePolicyEventLogger.createEvent(com.android.internal.util.FrameworkStatsLog.DEVICE_POLICY_EVENT__EVENT_ID__SET_MTE_POLICY).setInt(i).setAdmin(callerIdentity.getPackageName()).write();
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public int getMtePolicy(java.lang.String str) {
        int i;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        if (isPermissionCheckFlagEnabled()) {
            enforcePermission("android.permission.MANAGE_DEVICE_POLICY_MTE", callerIdentity.getPackageName(), -1);
        } else {
            com.android.internal.util.Preconditions.checkCallAuthorization(isDefaultDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || isSystemUid(callerIdentity));
        }
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
                i = deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked != null ? deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.mtePolicy : 0;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        return i;
    }

    public void setContentProtectionPolicy(android.content.ComponentName componentName, java.lang.String str, int i) throws java.lang.SecurityException {
        if (!android.view.contentprotection.flags.Flags.manageDevicePolicyEnabled()) {
            return;
        }
        int userId = getCallerIdentity(componentName, str).getUserId();
        checkCanExecuteOrThrowUnsafe(41);
        com.android.server.devicepolicy.EnforcingAdmin enforcePermissionAndGetEnforcingAdmin = enforcePermissionAndGetEnforcingAdmin(componentName, "android.permission.MANAGE_DEVICE_POLICY_CONTENT_PROTECTION", str, userId);
        if (i == 1) {
            this.mDevicePolicyEngine.removeLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.CONTENT_PROTECTION, enforcePermissionAndGetEnforcingAdmin, userId);
        } else {
            this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.CONTENT_PROTECTION, enforcePermissionAndGetEnforcingAdmin, new android.app.admin.IntegerPolicyValue(i), userId);
        }
    }

    public int getContentProtectionPolicy(android.content.ComponentName componentName, java.lang.String str) {
        if (!android.view.contentprotection.flags.Flags.manageDevicePolicyEnabled()) {
            return 1;
        }
        int userId = getCallerIdentity(componentName, str).getUserId();
        enforceCanQuery("android.permission.MANAGE_DEVICE_POLICY_CONTENT_PROTECTION", str, userId);
        java.lang.Integer num = (java.lang.Integer) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.CONTENT_PROTECTION, userId);
        if (num == null) {
            return 1;
        }
        return num.intValue();
    }

    private void updateContentProtectionPolicyCache(int i) {
        this.mPolicyCache.setContentProtectionPolicy(i, (java.lang.Integer) this.mDevicePolicyEngine.getResolvedPolicy(com.android.server.devicepolicy.PolicyDefinition.CONTENT_PROTECTION, i));
    }

    public android.app.admin.ManagedSubscriptionsPolicy getManagedSubscriptionsPolicy() {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerOfOrganizationOwnedDeviceLocked = getProfileOwnerOfOrganizationOwnedDeviceLocked();
                if (profileOwnerOfOrganizationOwnedDeviceLocked != null && profileOwnerOfOrganizationOwnedDeviceLocked.mManagedSubscriptionsPolicy != null) {
                    return profileOwnerOfOrganizationOwnedDeviceLocked.mManagedSubscriptionsPolicy;
                }
                return new android.app.admin.ManagedSubscriptionsPolicy(0);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public void setManagedSubscriptionsPolicy(android.app.admin.ManagedSubscriptionsPolicy managedSubscriptionsPolicy) {
        boolean z;
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity();
        if (!isCallerDevicePolicyManagementRoleHolder(callerIdentity) && !java.util.Objects.equals(this.mInjector.settingsGlobalGetString("allow_work_profile_telephony_for_non_dpm_role_holders"), "1")) {
            throw new java.lang.UnsupportedOperationException("This api is not enabled");
        }
        com.android.internal.util.Preconditions.checkCallAuthorization(isProfileOwnerOfOrganizationOwnedDevice(callerIdentity), "This policy can only be set by a profile owner on an organization-owned device.");
        int profileParentId = getProfileParentId(callerIdentity.getUserId());
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(callerIdentity.getUserId());
                if (hasUserSetupCompleted(profileParentId) && !isAdminTestOnlyLocked(profileOwnerLocked.info.getComponent(), callerIdentity.getUserId())) {
                    throw new java.lang.IllegalStateException("Not allowed to apply this policy after setup");
                }
                if (java.util.Objects.equals(managedSubscriptionsPolicy, profileOwnerLocked.mManagedSubscriptionsPolicy)) {
                    z = false;
                } else {
                    profileOwnerLocked.mManagedSubscriptionsPolicy = managedSubscriptionsPolicy;
                    z = true;
                }
                if (z) {
                    saveSettingsLocked(callerIdentity.getUserId());
                    applyManagedSubscriptionsPolicyIfRequired();
                    int policyType = getManagedSubscriptionsPolicy().getPolicyType();
                    long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                    try {
                        if (policyType == 1) {
                            installOemDefaultDialerAndSmsApp(callerIdentity.getUserId());
                            updateTelephonyCrossProfileIntentFilters(profileParentId, callerIdentity.getUserId(), true);
                        } else {
                            if (policyType == 0) {
                                updateTelephonyCrossProfileIntentFilters(profileParentId, callerIdentity.getUserId(), false);
                            }
                            this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        }
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                    } catch (java.lang.Throwable th) {
                        this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        throw th;
                    }
                }
            } finally {
            }
        }
    }

    private void installOemDefaultDialerAndSmsApp(int i) {
        try {
            java.lang.String oemDefaultDialerPackage = getOemDefaultDialerPackage();
            java.lang.String oemDefaultSmsPackage = getOemDefaultSmsPackage();
            if (oemDefaultDialerPackage == null) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Couldn't install dialer app, dialer app package is null");
            } else {
                this.mIPackageManager.installExistingPackageAsUser(oemDefaultDialerPackage, i, 4194304, 1, (java.util.List) null);
            }
            if (oemDefaultSmsPackage == null) {
                com.android.server.utils.Slogf.w(LOG_TAG, "Couldn't install sms app, sms app package is null");
            } else {
                this.mIPackageManager.installExistingPackageAsUser(oemDefaultSmsPackage, i, 4194304, 1, (java.util.List) null);
            }
            lambda$setDefaultSmsApplication$91();
        } catch (android.os.RemoteException e) {
            com.android.server.utils.Slogf.wtf(LOG_TAG, "Failed to install dialer/sms app", e);
        }
    }

    private java.lang.String getOemDefaultDialerPackage() {
        return ((android.telecom.TelecomManager) this.mContext.getSystemService(android.telecom.TelecomManager.class)).getSystemDialerPackage();
    }

    private java.lang.String getOemDefaultSmsPackage() {
        return this.mContext.getString(android.R.string.config_defaultSms);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: updateDialerAndSmsManagedShortcutsOverrideCache, reason: merged with bridge method [inline-methods] and merged with bridge method [inline-methods] */
    public void lambda$setDefaultSmsApplication$91() {
        android.util.ArrayMap<java.lang.String, java.lang.String> arrayMap = new android.util.ArrayMap<>();
        int managedUserId = getManagedUserId();
        java.util.List roleHoldersAsUser = this.mRoleManager.getRoleHoldersAsUser("android.app.role.DIALER", android.os.UserHandle.of(managedUserId));
        java.util.List roleHoldersAsUser2 = this.mRoleManager.getRoleHoldersAsUser("android.app.role.SMS", android.os.UserHandle.of(managedUserId));
        java.lang.String oemDefaultDialerPackage = getOemDefaultDialerPackage();
        java.lang.String oemDefaultSmsPackage = getOemDefaultSmsPackage();
        if (oemDefaultDialerPackage != null) {
            arrayMap.put(oemDefaultDialerPackage, roleHoldersAsUser.isEmpty() ? oemDefaultDialerPackage : (java.lang.String) roleHoldersAsUser.get(0));
        }
        if (oemDefaultSmsPackage != null) {
            arrayMap.put(oemDefaultSmsPackage, roleHoldersAsUser2.isEmpty() ? oemDefaultSmsPackage : (java.lang.String) roleHoldersAsUser2.get(0));
        }
        this.mPolicyCache.setLauncherShortcutOverrides(arrayMap);
    }

    private void registerListenerToAssignSubscriptionsToUser(final int i) {
        synchronized (this.mSubscriptionsChangedListenerLock) {
            try {
                if (this.mSubscriptionsChangedListener != null) {
                    return;
                }
                final android.telephony.SubscriptionManager subscriptionManager = (android.telephony.SubscriptionManager) this.mContext.getSystemService(android.telephony.SubscriptionManager.class);
                this.mSubscriptionsChangedListener = new android.telephony.SubscriptionManager.OnSubscriptionsChangedListener(this.mHandler.getLooper()) { // from class: com.android.server.devicepolicy.DevicePolicyManagerService.8
                    @Override // android.telephony.SubscriptionManager.OnSubscriptionsChangedListener
                    public void onSubscriptionsChanged() {
                        int i2;
                        long binderClearCallingIdentity = com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.binderClearCallingIdentity();
                        try {
                            int[] activeSubscriptionIdList = subscriptionManager.getActiveSubscriptionIdList(false);
                            int length = activeSubscriptionIdList.length;
                            while (i2 < length) {
                                int i3 = activeSubscriptionIdList[i2];
                                android.os.UserHandle subscriptionUserHandle = subscriptionManager.getSubscriptionUserHandle(i3);
                                i2 = (subscriptionUserHandle != null && subscriptionUserHandle.getIdentifier() == i) ? i2 + 1 : 0;
                                subscriptionManager.setSubscriptionUserHandle(i3, android.os.UserHandle.of(i));
                            }
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                        } catch (java.lang.Throwable th) {
                            com.android.server.devicepolicy.DevicePolicyManagerService.this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                            throw th;
                        }
                    }
                };
                long binderClearCallingIdentity = this.mInjector.binderClearCallingIdentity();
                try {
                    android.os.Handler handler = this.mHandler;
                    java.util.Objects.requireNonNull(handler);
                    subscriptionManager.addOnSubscriptionsChangedListener(new com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda208(handler), this.mSubscriptionsChangedListener);
                } finally {
                    this.mInjector.binderRestoreCallingIdentity(binderClearCallingIdentity);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private void unregisterOnSubscriptionsChangedListener() {
        synchronized (this.mSubscriptionsChangedListenerLock) {
            try {
                if (this.mSubscriptionsChangedListener != null) {
                    ((android.telephony.SubscriptionManager) this.mContext.getSystemService(android.telephony.SubscriptionManager.class)).removeOnSubscriptionsChangedListener(this.mSubscriptionsChangedListener);
                    this.mSubscriptionsChangedListener = null;
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    public android.app.admin.DevicePolicyState getDevicePolicyState() {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        com.android.server.devicepolicy.DevicePolicyManagerService.Injector injector = this.mInjector;
        final com.android.server.devicepolicy.DevicePolicyEngine devicePolicyEngine = this.mDevicePolicyEngine;
        java.util.Objects.requireNonNull(devicePolicyEngine);
        return (android.app.admin.DevicePolicyState) injector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda4
            public final java.lang.Object getOrThrow() {
                return com.android.server.devicepolicy.DevicePolicyEngine.this.getDevicePolicyState();
            }
        });
    }

    public boolean triggerDevicePolicyEngineMigration(final boolean z) {
        com.android.internal.util.Preconditions.checkCallAuthorization(hasCallingOrSelfPermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"));
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda12
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$triggerDevicePolicyEngineMigration$198;
                lambda$triggerDevicePolicyEngineMigration$198 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$triggerDevicePolicyEngineMigration$198(z);
                return lambda$triggerDevicePolicyEngineMigration$198;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$triggerDevicePolicyEngineMigration$198(boolean z) throws java.lang.Exception {
        boolean z2;
        synchronized (getLockObject()) {
            if (z) {
                try {
                    if (!hasNonTestOnlyActiveAdmins()) {
                        z2 = true;
                        if (z2 && !shouldMigrateV1ToDevicePolicyEngine()) {
                            return false;
                        }
                        return java.lang.Boolean.valueOf(migrateV1PoliciesToDevicePolicyEngine() & migratePoliciesPostUpgradeToDevicePolicyEngineLocked());
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            z2 = false;
            if (z2) {
            }
            return java.lang.Boolean.valueOf(migrateV1PoliciesToDevicePolicyEngine() & migratePoliciesPostUpgradeToDevicePolicyEngineLocked());
        }
    }

    private boolean hasNonTestOnlyActiveAdmins() {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda24
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$hasNonTestOnlyActiveAdmins$199;
                lambda$hasNonTestOnlyActiveAdmins$199 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$hasNonTestOnlyActiveAdmins$199();
                return lambda$hasNonTestOnlyActiveAdmins$199;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$hasNonTestOnlyActiveAdmins$199() throws java.lang.Exception {
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getUsers()) {
            synchronized (getLockObject()) {
                try {
                    java.util.List<android.content.ComponentName> activeAdmins = getActiveAdmins(userInfo.id);
                    if (activeAdmins != null) {
                        java.util.Iterator<android.content.ComponentName> it = activeAdmins.iterator();
                        while (it.hasNext()) {
                            if (!isAdminTestOnlyLocked(it.next(), userInfo.id)) {
                                return true;
                            }
                        }
                    }
                } finally {
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$shouldMigrateV1ToDevicePolicyEngine$200() throws java.lang.Exception {
        return java.lang.Boolean.valueOf(!this.mOwners.isMigratedToPolicyEngine());
    }

    private boolean shouldMigrateV1ToDevicePolicyEngine() {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda49
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$shouldMigrateV1ToDevicePolicyEngine$200;
                lambda$shouldMigrateV1ToDevicePolicyEngine$200 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$shouldMigrateV1ToDevicePolicyEngine$200();
                return lambda$shouldMigrateV1ToDevicePolicyEngine$200;
            }
        })).booleanValue();
    }

    private void maybeMigratePoliciesPostUpgradeToDevicePolicyEngineLocked() {
        if (!this.mOwners.isMigratedToPolicyEngine() || this.mOwners.isMigratedPostUpdate()) {
            return;
        }
        migratePoliciesPostUpgradeToDevicePolicyEngineLocked();
        this.mOwners.markPostUpgradeMigration();
    }

    private boolean migratePoliciesPostUpgradeToDevicePolicyEngineLocked() {
        try {
            migrateScreenCapturePolicyLocked();
            migrateLockTaskPolicyLocked();
            migrateUserRestrictionsLocked();
            return true;
        } catch (java.lang.Exception e) {
            com.android.server.utils.Slogf.e(LOG_TAG, e, "Error occurred during post upgrade migration to the device policy engine.", new java.lang.Object[0]);
            return false;
        }
    }

    private boolean migrateV1PoliciesToDevicePolicyEngine() {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda75
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$migrateV1PoliciesToDevicePolicyEngine$201;
                lambda$migrateV1PoliciesToDevicePolicyEngine$201 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$migrateV1PoliciesToDevicePolicyEngine$201();
                return lambda$migrateV1PoliciesToDevicePolicyEngine$201;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$migrateV1PoliciesToDevicePolicyEngine$201() throws java.lang.Exception {
        try {
            synchronized (getLockObject()) {
                try {
                    com.android.server.utils.Slogf.i(LOG_TAG, "Started device policies migration to the device policy engine.");
                    if (isUnicornFlagEnabled()) {
                        migrateAutoTimezonePolicy();
                        migratePermissionGrantStatePolicies();
                    }
                    migratePermittedInputMethodsPolicyLocked();
                    migrateAccountManagementDisabledPolicyLocked();
                    migrateUserControlDisabledPackagesLocked();
                    this.mOwners.markMigrationToPolicyEngine();
                } finally {
                }
            }
            return true;
        } catch (java.lang.Exception e) {
            this.mDevicePolicyEngine.clearAllPolicies();
            com.android.server.utils.Slogf.e(LOG_TAG, e, "Error occurred during device policy migration, will reattempt on the next system server restart.", new java.lang.Object[0]);
            return false;
        }
    }

    @com.android.internal.annotations.GuardedBy({"getLockObject()"})
    private void migratePoliciesToPolicyEngineLocked() {
        maybeMigrateSecurityLoggingPolicyLocked();
    }

    private void migrateAutoTimezonePolicy() {
        com.android.server.utils.Slogf.i(LOG_TAG, "Skipping Migration of AUTO_TIMEZONE policy to device policy engine,as no way to identify if the value was set by the admin or the user.");
    }

    private void migratePermissionGrantStatePolicies() {
        int i;
        com.android.server.utils.Slogf.i(LOG_TAG, "Migrating PERMISSION_GRANT policy to device policy engine.");
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getUsers()) {
            com.android.server.devicepolicy.ActiveAdmin mostProbableDPCAdminForLocalPolicy = getMostProbableDPCAdminForLocalPolicy(userInfo.id);
            if (mostProbableDPCAdminForLocalPolicy != null) {
                for (android.content.pm.PackageInfo packageInfo : getInstalledPackagesOnUser(userInfo.id)) {
                    if (packageInfo.requestedPermissions != null) {
                        for (java.lang.String str : packageInfo.requestedPermissions) {
                            if (isRuntimePermission(str)) {
                                try {
                                    i = getPermissionGrantStateForUser(packageInfo.packageName, str, new com.android.server.devicepolicy.CallerIdentity(this.mInjector.binderGetCallingUid(), mostProbableDPCAdminForLocalPolicy.info.getComponent().getPackageName(), mostProbableDPCAdminForLocalPolicy.info.getComponent()), userInfo.id);
                                } catch (android.os.RemoteException e) {
                                    com.android.server.utils.Slogf.e(LOG_TAG, e, "Error retrieving permission grant state for %s and %s", packageInfo.packageName, str);
                                    i = 0;
                                }
                                if (i != 0) {
                                    this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PERMISSION_GRANT(packageInfo.packageName, str), com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(mostProbableDPCAdminForLocalPolicy.info.getComponent(), mostProbableDPCAdminForLocalPolicy.getUserHandle().getIdentifier()), new android.app.admin.IntegerPolicyValue(i), userInfo.id, true);
                                }
                            }
                        }
                    }
                }
            } else {
                com.android.server.utils.Slogf.i(LOG_TAG, "No admin found that can set permission grant state on user " + userInfo.id);
            }
        }
    }

    private void migrateScreenCapturePolicyLocked() {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda73
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$migrateScreenCapturePolicyLocked$202();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateScreenCapturePolicyLocked$202() throws java.lang.Exception {
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked = getDeviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked();
        if (deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked != null && ((isDeviceOwner(deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked) && deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.disableScreenCapture) || (deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.getParentActiveAdmin() != null && deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.getParentActiveAdmin().disableScreenCapture))) {
            this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED, com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.info.getComponent(), deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked.getUserHandle().getIdentifier(), deviceOwnerOrProfileOwnerOfOrganizationOwnedDeviceLocked), new android.app.admin.BooleanPolicyValue(true));
        }
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(((android.content.pm.UserInfo) it.next()).id);
            if (profileOwnerLocked != null && profileOwnerLocked.disableScreenCapture) {
                this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.SCREEN_CAPTURE_DISABLED, com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(profileOwnerLocked.info.getComponent(), profileOwnerLocked.getUserHandle().getIdentifier(), profileOwnerLocked), new android.app.admin.BooleanPolicyValue(true), profileOwnerLocked.getUserHandle().getIdentifier());
            }
        }
    }

    private void migrateLockTaskPolicyLocked() {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda161
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$migrateLockTaskPolicyLocked$203();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateLockTaskPolicyLocked$203() throws java.lang.Exception {
        com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
        if (deviceOwnerAdminLocked != null) {
            int identifier = deviceOwnerAdminLocked.getUserHandle().getIdentifier();
            com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$5 = lambda$getUserDataUnchecked$5(identifier);
            java.util.List<java.lang.String> list = lambda$getUserDataUnchecked$5.mLockTaskPackages;
            int i = lambda$getUserDataUnchecked$5.mLockTaskFeatures;
            if (!list.isEmpty()) {
                setLockTaskPolicyInPolicyEngine(deviceOwnerAdminLocked, identifier, list, i);
            }
        }
        for (int i2 : this.mUserManagerInternal.getUserIds()) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(i2);
            if (profileOwnerLocked != null && canDPCManagedUserUseLockTaskLocked(i2)) {
                com.android.server.devicepolicy.DevicePolicyData lambda$getUserDataUnchecked$52 = lambda$getUserDataUnchecked$5(i2);
                java.util.List<java.lang.String> list2 = lambda$getUserDataUnchecked$52.mLockTaskPackages;
                int i3 = lambda$getUserDataUnchecked$52.mLockTaskFeatures;
                if (!list2.isEmpty()) {
                    setLockTaskPolicyInPolicyEngine(profileOwnerLocked, i2, list2, i3);
                }
            }
        }
    }

    private void setLockTaskPolicyInPolicyEngine(com.android.server.devicepolicy.ActiveAdmin activeAdmin, int i, java.util.List<java.lang.String> list, int i2) {
        this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.LOCK_TASK, com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(activeAdmin.info.getComponent(), i, activeAdmin), new android.app.admin.LockTaskPolicy(new java.util.HashSet(list), i2), i);
    }

    private void migratePermittedInputMethodsPolicyLocked() {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda146
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$migratePermittedInputMethodsPolicyLocked$204();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migratePermittedInputMethodsPolicyLocked$204() throws java.lang.Exception {
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(((android.content.pm.UserInfo) it.next()).id);
            if (profileOwnerOrDeviceOwnerLocked != null) {
                com.android.server.devicepolicy.EnforcingAdmin createEnterpriseEnforcingAdmin = com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(profileOwnerOrDeviceOwnerLocked.info.getComponent(), profileOwnerOrDeviceOwnerLocked.getUserHandle().getIdentifier(), profileOwnerOrDeviceOwnerLocked);
                if (profileOwnerOrDeviceOwnerLocked.permittedInputMethods != null) {
                    this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PERMITTED_INPUT_METHODS, createEnterpriseEnforcingAdmin, new android.app.admin.StringSetPolicyValue(new java.util.HashSet(profileOwnerOrDeviceOwnerLocked.permittedInputMethods)), profileOwnerOrDeviceOwnerLocked.getUserHandle().getIdentifier());
                }
                if (profileOwnerOrDeviceOwnerLocked.getParentActiveAdmin() != null && profileOwnerOrDeviceOwnerLocked.getParentActiveAdmin().permittedInputMethods != null) {
                    this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.PERMITTED_INPUT_METHODS, createEnterpriseEnforcingAdmin, new android.app.admin.StringSetPolicyValue(new java.util.HashSet(profileOwnerOrDeviceOwnerLocked.getParentActiveAdmin().permittedInputMethods)), getProfileParentId(profileOwnerOrDeviceOwnerLocked.getUserHandle().getIdentifier()));
                }
            }
        }
    }

    private void migrateAccountManagementDisabledPolicyLocked() {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda105
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$migrateAccountManagementDisabledPolicyLocked$205();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateAccountManagementDisabledPolicyLocked$205() throws java.lang.Exception {
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(((android.content.pm.UserInfo) it.next()).id);
            if (profileOwnerOrDeviceOwnerLocked != null) {
                com.android.server.devicepolicy.EnforcingAdmin createEnterpriseEnforcingAdmin = com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(profileOwnerOrDeviceOwnerLocked.info.getComponent(), profileOwnerOrDeviceOwnerLocked.getUserHandle().getIdentifier(), profileOwnerOrDeviceOwnerLocked);
                java.util.Iterator<java.lang.String> it2 = profileOwnerOrDeviceOwnerLocked.accountTypesWithManagementDisabled.iterator();
                while (it2.hasNext()) {
                    this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.ACCOUNT_MANAGEMENT_DISABLED(it2.next()), createEnterpriseEnforcingAdmin, new android.app.admin.BooleanPolicyValue(true), profileOwnerOrDeviceOwnerLocked.getUserHandle().getIdentifier());
                }
                if (profileOwnerOrDeviceOwnerLocked.getParentActiveAdmin() != null) {
                    java.util.Iterator<java.lang.String> it3 = profileOwnerOrDeviceOwnerLocked.getParentActiveAdmin().accountTypesWithManagementDisabled.iterator();
                    while (it3.hasNext()) {
                        this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.ACCOUNT_MANAGEMENT_DISABLED(it3.next()), createEnterpriseEnforcingAdmin, new android.app.admin.BooleanPolicyValue(true), getProfileParentId(profileOwnerOrDeviceOwnerLocked.getUserHandle().getIdentifier()));
                    }
                }
            }
        }
    }

    private void migrateUserControlDisabledPackagesLocked() {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda8
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$migrateUserControlDisabledPackagesLocked$206();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateUserControlDisabledPackagesLocked$206() throws java.lang.Exception {
        java.util.Iterator it = this.mUserManager.getUsers().iterator();
        while (it.hasNext()) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(((android.content.pm.UserInfo) it.next()).id);
            if (profileOwnerOrDeviceOwnerLocked != null && profileOwnerOrDeviceOwnerLocked.protectedPackages != null) {
                com.android.server.devicepolicy.EnforcingAdmin createEnterpriseEnforcingAdmin = com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(profileOwnerOrDeviceOwnerLocked.info.getComponent(), profileOwnerOrDeviceOwnerLocked.getUserHandle().getIdentifier(), profileOwnerOrDeviceOwnerLocked);
                if (isDeviceOwner(profileOwnerOrDeviceOwnerLocked)) {
                    this.mDevicePolicyEngine.setGlobalPolicy(com.android.server.devicepolicy.PolicyDefinition.USER_CONTROLLED_DISABLED_PACKAGES, createEnterpriseEnforcingAdmin, new android.app.admin.StringSetPolicyValue(new java.util.HashSet(profileOwnerOrDeviceOwnerLocked.protectedPackages)));
                } else {
                    this.mDevicePolicyEngine.setLocalPolicy(com.android.server.devicepolicy.PolicyDefinition.USER_CONTROLLED_DISABLED_PACKAGES, createEnterpriseEnforcingAdmin, new android.app.admin.StringSetPolicyValue(new java.util.HashSet(profileOwnerOrDeviceOwnerLocked.protectedPackages)), profileOwnerOrDeviceOwnerLocked.getUserHandle().getIdentifier());
                }
            }
        }
    }

    private void migrateUserRestrictionsLocked() {
        android.os.Binder.withCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingRunnable() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda188
            public final void runOrThrow() {
                com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$migrateUserRestrictionsLocked$207();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateUserRestrictionsLocked$207() throws java.lang.Exception {
        int i;
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getUsers()) {
            com.android.server.devicepolicy.ActiveAdmin profileOwnerOrDeviceOwnerLocked = getProfileOwnerOrDeviceOwnerLocked(userInfo.id);
            if (profileOwnerOrDeviceOwnerLocked != null) {
                android.content.ComponentName component = profileOwnerOrDeviceOwnerLocked.info.getComponent();
                int i2 = userInfo.id;
                com.android.server.devicepolicy.EnforcingAdmin createEnterpriseEnforcingAdmin = com.android.server.devicepolicy.EnforcingAdmin.createEnterpriseEnforcingAdmin(component, i2, profileOwnerOrDeviceOwnerLocked);
                if (isDeviceOwner(profileOwnerOrDeviceOwnerLocked)) {
                    i = 0;
                } else if (isProfileOwnerOfOrganizationOwnedDevice(component, i2)) {
                    i = 2;
                } else if (isProfileOwner(component, i2)) {
                    i = 1;
                } else {
                    throw new java.lang.IllegalStateException("Invalid DO/PO state");
                }
                java.util.Iterator<java.lang.String> it = profileOwnerOrDeviceOwnerLocked.ensureUserRestrictions().keySet().iterator();
                while (it.hasNext()) {
                    setBackwardCompatibleUserRestrictionLocked(i, createEnterpriseEnforcingAdmin, i2, it.next(), true, false);
                }
                java.util.Iterator<java.lang.String> it2 = profileOwnerOrDeviceOwnerLocked.getParentActiveAdmin().ensureUserRestrictions().keySet().iterator();
                while (it2.hasNext()) {
                    setBackwardCompatibleUserRestrictionLocked(i, createEnterpriseEnforcingAdmin, i2, it2.next(), true, true);
                }
            }
        }
    }

    private java.util.List<android.content.pm.PackageInfo> getInstalledPackagesOnUser(final int i) {
        return (java.util.List) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda26
            public final java.lang.Object getOrThrow() {
                java.util.List lambda$getInstalledPackagesOnUser$208;
                lambda$getInstalledPackagesOnUser$208 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getInstalledPackagesOnUser$208(i);
                return lambda$getInstalledPackagesOnUser$208;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.util.List lambda$getInstalledPackagesOnUser$208(int i) throws java.lang.Exception {
        return this.mContext.getPackageManager().getInstalledPackagesAsUser(android.content.pm.PackageManager.PackageInfoFlags.of(4096L), i);
    }

    @android.annotation.Nullable
    private com.android.server.devicepolicy.ActiveAdmin getMostProbableDPCAdminForGlobalPolicy() {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                if (deviceOwnerAdminLocked != null) {
                    return deviceOwnerAdminLocked;
                }
                java.util.List<android.content.pm.UserInfo> users = this.mUserManager.getUsers();
                for (android.content.pm.UserInfo userInfo : users) {
                    if (isProfileOwnerOfOrganizationOwnedDevice(userInfo.id)) {
                        return getProfileOwnerAdminLocked(userInfo.id);
                    }
                }
                java.util.Iterator it = users.iterator();
                while (it.hasNext()) {
                    com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(((android.content.pm.UserInfo) it.next()).id);
                    if (profileOwnerLocked != null) {
                        return profileOwnerLocked;
                    }
                }
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    @android.annotation.Nullable
    private com.android.server.devicepolicy.ActiveAdmin getMostProbableDPCAdminForLocalPolicy(int i) {
        synchronized (getLockObject()) {
            try {
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerLocked = getDeviceOwnerLocked(i);
                if (deviceOwnerLocked != null) {
                    return deviceOwnerLocked;
                }
                com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked = getProfileOwnerLocked(i);
                if (profileOwnerLocked != null) {
                    return profileOwnerLocked;
                }
                int[] profileIds = this.mUserManager.getProfileIds(i, false);
                for (int i2 : profileIds) {
                    if (i2 != i && isProfileOwnerOfOrganizationOwnedDevice(i2)) {
                        return getProfileOwnerAdminLocked(i2);
                    }
                }
                for (int i3 : profileIds) {
                    if (i3 != i && isManagedProfile(i3)) {
                        return getProfileOwnerAdminLocked(i3);
                    }
                }
                com.android.server.devicepolicy.ActiveAdmin deviceOwnerAdminLocked = getDeviceOwnerAdminLocked();
                if (deviceOwnerAdminLocked != null) {
                    return deviceOwnerAdminLocked;
                }
                java.util.Iterator it = this.mUserManager.getUsers().iterator();
                while (it.hasNext()) {
                    com.android.server.devicepolicy.ActiveAdmin profileOwnerLocked2 = getProfileOwnerLocked(((android.content.pm.UserInfo) it.next()).id);
                    if (profileOwnerLocked2 != null) {
                        return profileOwnerLocked2;
                    }
                }
                return null;
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private java.util.List<com.android.server.devicepolicy.ActiveAdmin> getNonDPCActiveAdminsForPolicyLocked(java.lang.String str) {
        java.lang.Integer num = POLICY_IDENTIFIER_TO_ACTIVE_ADMIN_POLICY.get(str);
        if (num == null) {
            com.android.server.utils.Slogf.e(LOG_TAG, "Can't find a active admin policy for %s in POLICY_IDENTIFIER_TO_PERMISSION", str);
            return new java.util.ArrayList();
        }
        java.util.ArrayList arrayList = new java.util.ArrayList();
        for (android.content.pm.UserInfo userInfo : this.mUserManager.getUsers()) {
            for (android.content.ComponentName componentName : getActiveAdmins(userInfo.id)) {
                if (!isDeviceOwner(componentName, userInfo.id) && !isProfileOwner(componentName, userInfo.id)) {
                    com.android.server.devicepolicy.DevicePolicyData userDataUnchecked = getUserDataUnchecked(userInfo.id);
                    if (isActiveAdminWithPolicyForUserLocked(userDataUnchecked.mAdminMap.get(componentName), num.intValue(), userInfo.id)) {
                        arrayList.add(userDataUnchecked.mAdminMap.get(componentName));
                    }
                }
            }
        }
        return arrayList;
    }

    private boolean isCallerActiveAdminOrDelegate(final com.android.server.devicepolicy.CallerIdentity callerIdentity, @android.annotation.Nullable final java.lang.String str) {
        return ((java.lang.Boolean) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda68
            public final java.lang.Object getOrThrow() {
                java.lang.Boolean lambda$isCallerActiveAdminOrDelegate$209;
                lambda$isCallerActiveAdminOrDelegate$209 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$isCallerActiveAdminOrDelegate$209(callerIdentity, str);
                return lambda$isCallerActiveAdminOrDelegate$209;
            }
        })).booleanValue();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$isCallerActiveAdminOrDelegate$209(com.android.server.devicepolicy.CallerIdentity callerIdentity, java.lang.String str) throws java.lang.Exception {
        java.util.List<android.content.ComponentName> activeAdmins = getActiveAdmins(callerIdentity.getUserId());
        if (activeAdmins != null) {
            java.util.Iterator<android.content.ComponentName> it = activeAdmins.iterator();
            while (it.hasNext()) {
                if (it.next().getPackageName().equals(callerIdentity.getPackageName())) {
                    return true;
                }
            }
        }
        return java.lang.Boolean.valueOf(str != null && isCallerDelegate(callerIdentity, str));
    }

    private com.android.server.devicepolicy.ActiveAdmin getActiveAdminForCaller(@android.annotation.Nullable android.content.ComponentName componentName, final com.android.server.devicepolicy.CallerIdentity callerIdentity) {
        synchronized (getLockObject()) {
            try {
                if (componentName != null) {
                    return getActiveAdminUncheckedLocked(componentName, callerIdentity.getUserId());
                }
                return (com.android.server.devicepolicy.ActiveAdmin) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda130
                    public final java.lang.Object getOrThrow() {
                        com.android.server.devicepolicy.ActiveAdmin lambda$getActiveAdminForCaller$210;
                        lambda$getActiveAdminForCaller$210 = com.android.server.devicepolicy.DevicePolicyManagerService.this.lambda$getActiveAdminForCaller$210(callerIdentity);
                        return lambda$getActiveAdminForCaller$210;
                    }
                });
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ com.android.server.devicepolicy.ActiveAdmin lambda$getActiveAdminForCaller$210(com.android.server.devicepolicy.CallerIdentity callerIdentity) throws java.lang.Exception {
        java.util.List<android.content.ComponentName> activeAdmins = getActiveAdmins(callerIdentity.getUserId());
        if (activeAdmins != null) {
            for (android.content.ComponentName componentName : activeAdmins) {
                if (componentName.getPackageName().equals(callerIdentity.getPackageName())) {
                    return getActiveAdminUncheckedLocked(componentName, callerIdentity.getUserId());
                }
            }
            return null;
        }
        return null;
    }

    public boolean isDeviceFinanced(java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        com.android.internal.util.Preconditions.checkCallAuthorization(isDeviceOwner(callerIdentity) || isProfileOwnerOfOrganizationOwnedDevice(callerIdentity) || isProfileOwnerOnUser0(callerIdentity) || isCallerDevicePolicyManagementRoleHolder(callerIdentity) || isCallerSystemSupervisionRoleHolder(callerIdentity));
        return getFinancedDeviceKioskRoleHolderOnAnyUser() != null;
    }

    public java.lang.String getFinancedDeviceKioskRoleHolder(java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        enforcePermission("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS", callerIdentity.getPackageName(), callerIdentity.getUserId());
        return getFinancedDeviceKioskRoleHolderOnAnyUser();
    }

    private java.lang.String getFinancedDeviceKioskRoleHolderOnAnyUser() {
        return getRoleHolderPackageNameOnUser("android.app.role.FINANCED_DEVICE_KIOSK", -1);
    }

    private void logStackTrace(java.lang.String str) {
        try {
            java.lang.StackTraceElement[] stackTrace = java.lang.Thread.currentThread().getStackTrace();
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            for (java.lang.StackTraceElement stackTraceElement : stackTrace) {
                java.lang.String methodName = stackTraceElement.getMethodName();
                if (methodName != null && !methodName.equals("getThreadStackTrace") && !methodName.equals("getStackTrace") && !methodName.equals("logStackTrace")) {
                    sb.append(stackTraceElement.getMethodName() + ":" + stackTraceElement.getLineNumber() + "\n");
                }
            }
            com.android.server.utils.Slogf.d(LOG_TAG, "StackTrace for " + str + ": \n" + ((java.lang.Object) sb));
        } catch (java.lang.Exception e) {
            com.android.server.utils.Slogf.d(LOG_TAG, "Unable to get stacktrace");
        }
    }

    public int[] getSubscriptionIds(java.lang.String str) {
        com.android.server.devicepolicy.CallerIdentity callerIdentity = getCallerIdentity(str);
        enforceCanQuery("android.permission.MANAGE_DEVICE_POLICY_MANAGED_SUBSCRIPTIONS", callerIdentity.getPackageName(), callerIdentity.getUserId());
        return getSubscriptionIdsInternal(str).toArray();
    }

    private android.util.IntArray getSubscriptionIdsInternal(final java.lang.String str) {
        final android.telephony.SubscriptionManager subscriptionManager = (android.telephony.SubscriptionManager) this.mContext.getSystemService(android.telephony.SubscriptionManager.class);
        return (android.util.IntArray) this.mInjector.binderWithCleanCallingIdentity(new com.android.internal.util.FunctionalUtils.ThrowingSupplier() { // from class: com.android.server.devicepolicy.DevicePolicyManagerService$$ExternalSyntheticLambda121
            public final java.lang.Object getOrThrow() {
                android.util.IntArray lambda$getSubscriptionIdsInternal$211;
                lambda$getSubscriptionIdsInternal$211 = com.android.server.devicepolicy.DevicePolicyManagerService.lambda$getSubscriptionIdsInternal$211(subscriptionManager, str);
                return lambda$getSubscriptionIdsInternal$211;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ android.util.IntArray lambda$getSubscriptionIdsInternal$211(android.telephony.SubscriptionManager subscriptionManager, java.lang.String str) throws java.lang.Exception {
        android.util.IntArray intArray = new android.util.IntArray();
        java.util.List availableSubscriptionInfoList = subscriptionManager.getAvailableSubscriptionInfoList();
        int size = availableSubscriptionInfoList != null ? availableSubscriptionInfoList.size() : 0;
        for (int i = 0; i < size; i++) {
            android.telephony.SubscriptionInfo subscriptionInfo = (android.telephony.SubscriptionInfo) availableSubscriptionInfoList.get(i);
            if (subscriptionInfo.getGroupOwner().equals(str)) {
                intArray.add(subscriptionInfo.getSubscriptionId());
            }
        }
        return intArray;
    }

    public void setMaxPolicyStorageLimit(java.lang.String str, int i) {
        android.app.admin.flags.Flags.devicePolicySizeTrackingEnabled();
    }

    public int getMaxPolicyStorageLimit(java.lang.String str) {
        android.app.admin.flags.Flags.devicePolicySizeTrackingEnabled();
        return -1;
    }
}
