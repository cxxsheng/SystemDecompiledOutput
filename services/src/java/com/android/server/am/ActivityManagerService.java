package com.android.server.am;

/* loaded from: classes.dex */
public class ActivityManagerService extends android.app.IActivityManager.Stub implements com.android.server.Watchdog.Monitor, com.android.server.power.stats.BatteryStatsImpl.BatteryCallback, com.android.server.am.ActivityManagerGlobalLock {
    static final int ABORT_DUMPHEAP_MSG = 51;
    public static final java.lang.String ACTION_TRIGGER_IDLE = "com.android.server.ACTION_TRIGGER_IDLE";
    static final int ADD_UID_TO_OBSERVER_MSG = 80;
    static final int BINDER_HEAVYHITTER_AUTOSAMPLER_TIMEOUT_MSG = 72;
    private static final long BINDER_HEAVY_HITTER_AUTO_SAMPLER_DURATION_MS = 300000;
    private static final long BINDER_HEAVY_HITTER_AUTO_SAMPLER_THROTTLE_MS = 3600000;
    private static final int BINDER_PROXY_HIGH_WATERMARK = 6000;
    private static final int BINDER_PROXY_LOW_WATERMARK = 5500;
    static final int BIND_APPLICATION_TIMEOUT_HARD_MSG = 83;
    static final int BIND_APPLICATION_TIMEOUT_SOFT_MSG = 82;
    static final int BROADCAST_QUEUE_BG = 1;
    static final int BROADCAST_QUEUE_BG_OFFLOAD = 2;
    static final int BROADCAST_QUEUE_FG = 0;
    static final int BROADCAST_QUEUE_FG_OFFLOAD = 3;
    static final int CHECK_EXCESSIVE_POWER_USE_MSG = 27;
    static final int CLEAR_DNS_CACHE_MSG = 28;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 57;
    public static final java.lang.String DATA_FILE_PATH_FOOTER = "End Data File\n";
    public static final java.lang.String DATA_FILE_PATH_HEADER = "Data File: ";
    static final int DISPATCH_BINDING_SERVICE_EVENT = 75;
    static final int DISPATCH_OOM_ADJ_OBSERVER_MSG = 70;
    static final int DISPATCH_PROCESSES_CHANGED_UI_MSG = 31;
    static final int DISPATCH_PROCESS_DIED_UI_MSG = 32;
    static final int DISPATCH_SENDING_BROADCAST_EVENT = 74;
    static final int DROPBOX_DEFAULT_MAX_SIZE = 196608;
    private static final long DYNAMIC_RECEIVER_EXPLICIT_EXPORT_REQUIRED = 161145287;
    private static final boolean ENABLE_PROC_LOCK = true;
    static final java.lang.String EXTRA_BUGREPORT_NONCE = "android.intent.extra.BUGREPORT_NONCE";
    static final java.lang.String EXTRA_BUGREPORT_TYPE = "android.intent.extra.BUGREPORT_TYPE";
    static final java.lang.String EXTRA_DESCRIPTION = "android.intent.extra.DESCRIPTION";
    static final java.lang.String EXTRA_TITLE = "android.intent.extra.TITLE";
    static final int FIRST_BROADCAST_QUEUE_MSG = 200;
    static final int GC_BACKGROUND_PROCESSES_MSG = 5;
    static final int HANDLE_TRUST_STORAGE_UPDATE_MSG = 63;
    private static final long HOME_LAUNCH_TIMEOUT_MS = 15000;
    static final int IDLE_UIDS_MSG = 58;
    public static final long IMPLICIT_INTENTS_ONLY_MATCH_EXPORTED_COMPONENTS = 229362273;
    private static final int INDEX_DALVIK_PRIVATE_DIRTY = 7;
    private static final int INDEX_DALVIK_PSS = 4;
    private static final int INDEX_DALVIK_RSS = 6;
    private static final int INDEX_DALVIK_SWAP_PSS = 5;
    private static final int INDEX_LAST = 19;
    private static final int INDEX_NATIVE_PRIVATE_DIRTY = 3;
    private static final int INDEX_NATIVE_PSS = 0;
    private static final int INDEX_NATIVE_RSS = 2;
    private static final int INDEX_NATIVE_SWAP_PSS = 1;
    private static final int INDEX_OTHER_PRIVATE_DIRTY = 11;
    private static final int INDEX_OTHER_PSS = 8;
    private static final int INDEX_OTHER_RSS = 10;
    private static final int INDEX_OTHER_SWAP_PSS = 9;
    private static final int INDEX_TOTAL_MEMTRACK_GL = 18;
    private static final int INDEX_TOTAL_MEMTRACK_GRAPHICS = 17;
    private static final int INDEX_TOTAL_NATIVE_PSS = 16;
    private static final int INDEX_TOTAL_PRIVATE_DIRTY = 15;
    private static final int INDEX_TOTAL_PSS = 12;
    private static final int INDEX_TOTAL_RSS = 14;
    private static final int INDEX_TOTAL_SWAP_PSS = 13;
    private static final java.lang.String INTENT_BUGREPORT_REQUESTED = "com.android.internal.intent.action.BUGREPORT_REQUESTED";
    private static final java.lang.String INTENT_REMOTE_BUGREPORT_FINISHED = "com.android.internal.intent.action.REMOTE_BUGREPORT_FINISHED";
    static final int KILL_APPLICATION_MSG = 22;
    static final int KILL_APP_ZYGOTE_DELAY_MS = 5000;
    static final int KILL_APP_ZYGOTE_MSG = 71;
    static final int KSM_SHARED = 0;
    static final int KSM_SHARING = 1;
    static final int KSM_UNSHARED = 2;
    static final int KSM_VOLATILE = 3;
    private static final int MAX_BUGREPORT_DESCRIPTION_SIZE = 150;
    private static final int MAX_BUGREPORT_TITLE_SIZE = 100;
    private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
    private static final int MAX_RECEIVERS_ALLOWED_PER_APP = 1000;
    static final int MAX_STATE_DATA_SIZE = 128;
    private static final int MEMINFO_COMPACT_VERSION = 1;
    private static final int MINIMUM_MEMORY_GROWTH_THRESHOLD = 10000;
    static final int NOTIFY_CLEARTEXT_NETWORK_MSG = 49;
    static final int PERSISTENT_MASK = 9;
    static final int POST_DUMP_HEAP_NOTIFICATION_MSG = 50;
    static final int PROC_START_TIMEOUT_MSG = 20;
    static final int PROC_START_TIMEOUT_WITH_WRAPPER = 1200000;
    static final int PUSH_TEMP_ALLOWLIST_UI_MSG = 68;
    static final int REMOVE_UID_FROM_OBSERVER_MSG = 81;
    static final int REPORT_MEM_USAGE_MSG = 33;
    static final int RESERVED_BYTES_PER_LOGCAT_LINE = 100;
    static final int SERVICE_FGS_ANR_TIMEOUT_MSG = 85;
    static final int SERVICE_FGS_TIMEOUT_MSG = 84;
    static final int SERVICE_FOREGROUND_CRASH_MSG = 69;
    static final int SERVICE_FOREGROUND_TIMEOUT_ANR_MSG = 67;
    static final int SERVICE_FOREGROUND_TIMEOUT_MSG = 66;
    static final int SERVICE_SHORT_FGS_ANR_TIMEOUT_MSG = 78;
    static final int SERVICE_SHORT_FGS_PROCSTATE_TIMEOUT_MSG = 77;
    static final int SERVICE_SHORT_FGS_TIMEOUT_MSG = 76;
    static final int SERVICE_TIMEOUT_MSG = 12;
    private static final java.lang.String SHELL_APP_PACKAGE = "com.android.shell";
    static final int SHOW_ERROR_UI_MSG = 1;
    static final int SHOW_NOT_RESPONDING_UI_MSG = 2;
    static final int SHOW_STRICT_MODE_VIOLATION_UI_MSG = 26;
    static final int SHUTDOWN_UI_AUTOMATION_CONNECTION_MSG = 56;
    public static final int STOCK_PM_FLAGS = 1024;
    private static final java.lang.String SYSTEM_PROPERTY_DEVICE_PROVISIONED = "persist.sys.device_provisioned";
    static final java.lang.String SYSTEM_USER_HOME_NEEDED = "ro.system_user_home_needed";
    static final java.lang.String TAG = "ActivityManager";
    static final java.lang.String TAG_BACKUP = "ActivityManager";
    private static final java.lang.String TAG_BROADCAST = "ActivityManager";
    private static final java.lang.String TAG_CLEANUP = "ActivityManager";
    private static final java.lang.String TAG_CONFIGURATION = "ActivityManager";
    private static final java.lang.String TAG_LOCKTASK = "ActivityManager";
    static final java.lang.String TAG_LRU = "ActivityManager";
    static final java.lang.String TAG_MU = "ActivityManager_MU";
    static final java.lang.String TAG_NETWORK = "ActivityManager_Network";
    static final java.lang.String TAG_OOM_ADJ = "ActivityManager";
    private static final java.lang.String TAG_POWER = "ActivityManager";
    static final java.lang.String TAG_PROCESSES = "ActivityManager";
    private static final java.lang.String TAG_SERVICE = "ActivityManager";
    private static final java.lang.String TAG_SWITCH = "ActivityManager";
    static final java.lang.String TAG_UID_OBSERVERS = "ActivityManager";
    private static final java.lang.String TICK = "-------------------------------------------------------------------------------";
    static final boolean TRACK_PROCSTATS_ASSOCIATIONS = true;
    static final int UPDATE_CACHED_APP_HIGH_WATERMARK = 79;
    static final int UPDATE_HTTP_PROXY_MSG = 29;
    static final int UPDATE_TIME_PREFERENCE_MSG = 41;
    static final int UPDATE_TIME_ZONE = 13;
    static final int WAIT_FOR_CONTENT_PROVIDER_TIMEOUT_MSG = 73;
    static final int WAIT_FOR_DEBUGGER_UI_MSG = 6;

    @com.android.internal.annotations.GuardedBy({"mActiveCameraUids"})
    final android.util.IntArray mActiveCameraUids;

    @com.android.internal.annotations.CompositeRWLock({"this", "mProcLock"})
    final java.util.ArrayList<com.android.server.am.ActiveInstrumentation> mActiveInstrumentation;
    private final com.android.server.wm.ActivityMetricsLaunchObserver mActivityLaunchObserver;

    @com.android.internal.annotations.VisibleForTesting
    public com.android.server.wm.ActivityTaskManagerService mActivityTaskManager;

    @com.android.internal.annotations.GuardedBy({"this"})
    private android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.PackageAssociationInfo> mAllowedAssociations;

    @com.android.internal.annotations.GuardedBy({"mAlreadyLoggedViolatedStacks"})
    private final java.util.HashSet<java.lang.Integer> mAlreadyLoggedViolatedStacks;

    @com.android.internal.annotations.GuardedBy({"this"})
    boolean mAlwaysFinishActivities;
    final com.android.server.am.AnrHelper mAnrHelper;
    android.util.ArrayMap<java.lang.String, android.os.IBinder> mAppBindArgs;
    final com.android.server.am.AppErrors mAppErrors;
    private android.app.AppOpsManager mAppOpsManager;
    final com.android.server.appop.AppOpsService mAppOpsService;
    com.android.server.am.AppProfiler mAppProfiler;
    final com.android.server.am.AppRestrictionController mAppRestrictionController;

    @com.android.internal.annotations.GuardedBy({"this"})
    final android.util.SparseArray<android.util.ArrayMap<android.content.ComponentName, android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>>>> mAssociations;

    @com.android.internal.annotations.VisibleForTesting
    public com.android.server.wm.ActivityTaskManagerInternal mAtmInternal;

    @com.android.internal.annotations.CompositeRWLock({"this", "mProcLock"})
    private int[] mBackgroundAppIdAllowlist;

    @com.android.internal.annotations.GuardedBy({"this"})
    private android.util.ArraySet<java.lang.String> mBackgroundLaunchBroadcasts;

    @com.android.internal.annotations.GuardedBy({"this"})
    final android.util.SparseArray<com.android.server.am.BackupRecord> mBackupTargets;
    final com.android.server.am.BatteryStatsService mBatteryStatsService;
    final java.util.concurrent.CopyOnWriteArrayList<android.app.ActivityManagerInternal.BindServiceEventListener> mBindServiceEventListeners;
    private volatile boolean mBinderTransactionTrackingEnabled;

    @com.android.internal.annotations.GuardedBy({"this"})
    boolean mBootAnimationComplete;
    volatile long mBootCompletedTimestamp;
    int mBootPhase;
    volatile boolean mBooted;
    volatile boolean mBooting;
    final java.util.concurrent.CopyOnWriteArrayList<android.app.ActivityManagerInternal.BroadcastEventListener> mBroadcastEventListeners;
    final com.android.server.am.BroadcastQueue[] mBroadcastQueues;

    @com.android.internal.annotations.GuardedBy({"this"})
    boolean mCallFinishBooting;
    private final java.util.Map<java.lang.Integer, java.util.Set<java.lang.Integer>> mCompanionAppUidsMap;

    @com.android.internal.annotations.GuardedBy({"this"})
    final com.android.server.am.ComponentAliasResolver mComponentAliasResolver;
    com.android.server.am.ActivityManagerConstants mConstants;

    @android.annotation.Nullable
    volatile com.android.server.contentcapture.ContentCaptureManagerInternal mContentCaptureService;
    final android.content.Context mContext;
    com.android.server.am.CoreSettingsObserver mCoreSettingsObserver;
    final com.android.server.am.ContentProviderHelper mCpHelper;

    @com.android.internal.annotations.GuardedBy({"this"})
    com.android.server.am.BroadcastStats mCurBroadcastStats;

    @com.android.internal.annotations.GuardedBy({"mOomAdjObserverLock"})
    com.android.server.am.ActivityManagerService.OomAdjObserver mCurOomAdjObserver;

    @com.android.internal.annotations.GuardedBy({"mOomAdjObserverLock"})
    int mCurOomAdjUid;
    private final java.lang.Object mCurResumedAppLock;

    @com.android.internal.annotations.GuardedBy({"mCurResumedAppLock"})
    private java.lang.String mCurResumedPackage;

    @com.android.internal.annotations.GuardedBy({"mCurResumedAppLock"})
    private int mCurResumedUid;

    @com.android.internal.annotations.GuardedBy({"this"})
    private java.lang.String mDebugApp;

    @com.android.internal.annotations.GuardedBy({"this"})
    private boolean mDebugTransient;

    @com.android.internal.annotations.GuardedBy({"mDeliveryGroupPolicyIgnoredActions"})
    private final android.util.ArraySet<java.lang.String> mDeliveryGroupPolicyIgnoredActions;

    @com.android.internal.annotations.GuardedBy({"this"})
    boolean mDeterministicUidIdle;

    @com.android.internal.annotations.CompositeRWLock({"this", "mProcLock"})
    int[] mDeviceIdleAllowlist;

    @com.android.internal.annotations.CompositeRWLock({"this", "mProcLock"})
    int[] mDeviceIdleExceptIdleAllowlist;

    @com.android.internal.annotations.CompositeRWLock({"this", "mProcLock"})
    int[] mDeviceIdleTempAllowlist;
    private volatile int mDeviceOwnerUid;
    private final com.android.server.am.DropboxRateLimiter mDropboxRateLimiter;
    final boolean mEnableModernQueue;
    final boolean mEnableOffloadQueue;
    final int mFactoryTest;

    @com.android.internal.annotations.CompositeRWLock({"this", "mProcLock"})
    final com.android.server.am.FgsTempAllowList<com.android.server.am.ActivityManagerService.FgsTempAllowListItem> mFgsStartTempAllowList;
    private final com.android.server.am.FgsTempAllowList<java.lang.String> mFgsWhileInUseTempAllowList;

    @com.android.internal.annotations.CompositeRWLock({"this", "mProcLock"})
    private boolean mForceBackgroundCheck;

    @com.android.internal.annotations.GuardedBy({"this"})
    final com.android.internal.app.ProcessMap<java.util.ArrayList<com.android.server.am.ProcessRecord>> mForegroundPackages;

    @com.android.internal.annotations.GuardedBy({"this"})
    final java.util.ArrayList<android.app.ActivityManagerInternal.ForegroundServiceStateListener> mForegroundServiceStateListeners;
    private final com.android.server.am.ActivityManagerService.GetBackgroundStartPrivilegesFunctor mGetBackgroundStartPrivilegesFunctor;
    final com.android.server.am.ActivityManagerGlobalLock mGlobalLock;
    final com.android.server.am.ActivityManagerService.MainHandler mHandler;

    @com.android.internal.annotations.VisibleForTesting
    public final com.android.server.ServiceThread mHandlerThread;
    private final java.util.concurrent.atomic.AtomicBoolean mHasHomeDelay;
    final com.android.server.am.ActivityManagerService.HiddenApiSettings mHiddenApiBlacklist;

    @com.android.internal.annotations.GuardedBy({"this"})
    final android.util.SparseArray<com.android.server.am.ActivityManagerService.ImportanceToken> mImportantProcesses;
    final com.android.server.am.ActivityManagerService.Injector mInjector;
    private com.android.server.pm.Installer mInstaller;
    final com.android.server.am.InstrumentationReporter mInstrumentationReporter;
    public final com.android.server.firewall.IntentFirewall mIntentFirewall;

    @com.android.internal.annotations.VisibleForTesting
    public final android.app.ActivityManagerInternal mInternal;
    android.util.ArrayMap<java.lang.String, android.os.IBinder> mIsolatedAppBindArgs;

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    private long mLastBinderHeavyHitterAutoSamplerStart;

    @com.android.internal.annotations.GuardedBy({"this"})
    com.android.server.am.BroadcastStats mLastBroadcastStats;

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    long mLastIdleTime;

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    long mLastPowerCheckUptime;

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    private android.os.ParcelFileDescriptor[] mLifeMonitorFds;
    com.android.server.DeviceIdleInternal mLocalDeviceIdleController;
    android.os.PowerManagerInternal mLocalPowerManager;

    @com.android.internal.annotations.GuardedBy({"mMediaProjectionTokenMap"})
    private final android.util.SparseArray<android.util.ArraySet<android.os.IBinder>> mMediaProjectionTokenMap;

    @com.android.internal.annotations.GuardedBy({"this"})
    java.lang.String mNativeDebuggingApp;
    private volatile android.app.IUidObserver mNetworkPolicyUidObserver;
    volatile boolean mOnBattery;
    final java.lang.Object mOomAdjObserverLock;
    public com.android.server.am.OomAdjProfiler mOomAdjProfiler;
    com.android.server.am.OomAdjuster mOomAdjuster;

    @com.android.internal.annotations.GuardedBy({"this"})
    private java.lang.String mOrigDebugApp;

    @com.android.internal.annotations.GuardedBy({"this"})
    private boolean mOrigWaitForDebugger;
    android.content.pm.PackageManagerInternal mPackageManagerInt;
    final com.android.server.PackageWatchdog mPackageWatchdog;

    @com.android.internal.annotations.VisibleForTesting
    public final com.android.server.am.PendingIntentController mPendingIntentController;
    private final com.android.server.am.PendingStartActivityUids mPendingStartActivityUids;

    @com.android.internal.annotations.CompositeRWLock({"this", "mProcLock"})
    final com.android.server.am.PendingTempAllowlists mPendingTempAllowlist;
    com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManagerInt;

    @com.android.internal.annotations.GuardedBy({"this"})
    final java.util.ArrayList<com.android.server.am.ProcessRecord> mPersistentStartingProcesses;
    final com.android.server.am.PhantomProcessList mPhantomProcessList;
    final com.android.server.am.ActivityManagerService.PidMap mPidsSelfLocked;
    private final com.android.server.compat.PlatformCompat mPlatformCompat;
    private final com.android.server.utils.PriorityDump.PriorityDumper mPriorityDumper;
    final com.android.server.am.ActivityManagerGlobalLock mProcLock;
    final com.android.server.am.ProcessList.ProcStartHandler mProcStartHandler;
    final com.android.server.ServiceThread mProcStartHandlerThread;
    final com.android.server.am.ProcessList mProcessList;
    final com.android.server.am.ProcessStatsService mProcessStats;

    @com.android.internal.annotations.GuardedBy({"this"})
    final java.util.ArrayList<com.android.server.am.ProcessRecord> mProcessesOnHold;
    volatile boolean mProcessesReady;
    private android.util.ArraySet<java.lang.Integer> mProfileOwnerUids;
    final com.android.server.IntentResolver<com.android.server.am.BroadcastFilter, com.android.server.am.BroadcastFilter> mReceiverResolver;

    @com.android.internal.annotations.GuardedBy({"this"})
    final java.util.HashMap<android.os.IBinder, com.android.server.am.ReceiverList> mRegisteredReceivers;

    @com.android.internal.annotations.GuardedBy({"this"})
    boolean mSafeMode;
    final com.android.server.am.ActiveServices mServices;
    com.android.server.stats.pull.StatsPullAtomServiceInternal mStatsPullAtomServiceInternal;

    @com.android.internal.annotations.GuardedBy({"mStickyBroadcasts"})
    final android.util.SparseArray<android.util.ArrayMap<java.lang.String, java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast>>> mStickyBroadcasts;

    @com.android.internal.annotations.GuardedBy({"this"})
    private final android.util.SparseArray<android.app.IUnsafeIntentStrictModeCallback> mStrictModeCallbacks;

    @com.android.internal.annotations.GuardedBy({"this"})
    private boolean mSuspendUponWait;
    volatile boolean mSystemReady;
    com.android.server.SystemServiceManager mSystemServiceManager;
    final android.app.ActivityThread mSystemThread;
    private android.content.pm.TestUtilityService mTestUtilityService;

    @com.android.internal.annotations.GuardedBy({"this"})
    private final java.util.Set<java.lang.Integer> mThemeOverlayReadyUsers;
    com.android.server.am.TraceErrorLogger mTraceErrorLogger;

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    private java.lang.String mTrackAllocationApp;
    boolean mTrackingAssociations;
    com.android.server.uri.UriGrantsManagerInternal mUgmInternal;
    final android.content.Context mUiContext;
    final android.os.Handler mUiHandler;

    @com.android.internal.annotations.GuardedBy({"mUidFrozenStateChangedCallbackList"})
    private final android.os.RemoteCallbackList<android.app.IUidFrozenStateChangedCallback> mUidFrozenStateChangedCallbackList;

    @com.android.internal.annotations.GuardedBy({"mUidNetworkBlockedReasons"})
    private final android.util.SparseIntArray mUidNetworkBlockedReasons;
    final com.android.server.am.UidObserverController mUidObserverController;
    volatile android.app.usage.UsageStatsManagerInternal mUsageStatsService;
    final boolean mUseFifoUiScheduling;
    final com.android.server.am.UserController mUserController;
    private volatile boolean mUserIsMonkey;

    @android.annotation.Nullable
    volatile android.app.ActivityManagerInternal.VoiceInteractionManagerProvider mVoiceInteractionManagerProvider;

    @com.android.internal.annotations.GuardedBy({"this"})
    private boolean mWaitForDebugger;
    java.util.concurrent.atomic.AtomicInteger mWakefulness;

    @com.android.internal.annotations.VisibleForTesting
    public com.android.server.wm.WindowManagerService mWindowManager;
    com.android.server.wm.WindowManagerInternal mWmInternal;
    static final int PROC_START_TIMEOUT = android.os.Build.HW_TIMEOUT_MULTIPLIER * 10000;
    static final int BIND_APPLICATION_TIMEOUT = android.os.Build.HW_TIMEOUT_MULTIPLIER * com.android.server.am.ProcessList.PSS_MIN_TIME_FROM_STATE_CHANGE;
    static final int BROADCAST_FG_TIMEOUT = android.os.Build.HW_TIMEOUT_MULTIPLIER * 10000;
    static final int BROADCAST_BG_TIMEOUT = android.os.Build.HW_TIMEOUT_MULTIPLIER * 60000;
    public static final int MY_PID = android.os.Process.myPid();
    static final java.lang.String[] EMPTY_STRING_ARRAY = new java.lang.String[0];
    private static com.android.server.ThreadPriorityBooster sThreadPriorityBooster = new com.android.server.ThreadPriorityBooster(-2, 7);
    private static com.android.server.ThreadPriorityBooster sProcThreadPriorityBooster = new com.android.server.ThreadPriorityBooster(-2, 6);

    @com.android.internal.annotations.GuardedBy({"sActiveProcessInfoSelfLocked"})
    static final android.util.SparseArray<android.content.pm.ProcessInfo> sActiveProcessInfoSelfLocked = new android.util.SparseArray<>();
    static final com.android.server.am.ActivityManagerService.FgsTempAllowListItem FAKE_TEMP_ALLOW_LIST_ITEM = new com.android.server.am.ActivityManagerService.FgsTempAllowListItem(com.android.server.job.controllers.JobStatus.NO_LATEST_RUNTIME, 300, "", -1);
    private static java.lang.String sTheRealBuildSerial = "unknown";
    static final com.android.server.am.HostingRecord sNullHostingRecord = new com.android.server.am.HostingRecord("");
    static final long[] DUMP_MEM_BUCKETS = {5120, 7168, 10240, 15360, 20480, 30720, 40960, 81920, 122880, 163840, 204800, 256000, 307200, 358400, 409600, 512000, 614400, 819200, 1048576, 2097152, 5242880, 10485760, 20971520};
    static final int[] DUMP_MEM_OOM_ADJ = {-1000, com.android.server.am.ProcessList.SYSTEM_ADJ, com.android.server.am.ProcessList.PERSISTENT_PROC_ADJ, com.android.server.am.ProcessList.PERSISTENT_SERVICE_ADJ, 0, 100, 200, 250, com.android.server.am.ProcessList.PERCEPTIBLE_MEDIUM_APP_ADJ, 300, 400, 500, 600, com.android.server.am.ProcessList.PREVIOUS_APP_ADJ, com.android.server.am.ProcessList.SERVICE_B_ADJ, com.android.server.am.ProcessList.CACHED_APP_MIN_ADJ};
    static final java.lang.String[] DUMP_MEM_OOM_LABEL = {"Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Perceptible Low", "Perceptible Medium", "Backup", "Heavy Weight", "A Services", "Home", "Previous", "B Services", "Cached"};
    static final java.lang.String[] DUMP_MEM_OOM_COMPACT_LABEL = {"native", "sys", "pers", "persvc", "fore", "vis", "percept", "perceptl", "perceptm", com.android.server.am.HostingRecord.HOSTING_TYPE_BACKUP, "heavy", "servicea", "home", "prev", "serviceb", "cached"};

    /* JADX INFO: Access modifiers changed from: private */
    static class MemoryUsageDumpOptions {
        boolean dumpDalvik;
        boolean dumpDetails;
        boolean dumpFullDetails;
        boolean dumpProto;
        boolean dumpSummaryOnly;
        boolean dumpSwapPss;
        boolean dumpUnreachable;
        boolean isCheckinRequest;
        boolean isCompact;
        boolean localOnly;
        boolean mDumpAllocatorStats;
        boolean mDumpPrivateDirty;
        boolean oomOnly;
        boolean packages;

        private MemoryUsageDumpOptions() {
        }
    }

    interface OomAdjObserver {
        void onOomAdjMessage(java.lang.String str);
    }

    static final class ProcessChangeItem {
        static final int CHANGE_ACTIVITIES = 1;
        static final int CHANGE_FOREGROUND_SERVICES = 2;
        int changes;
        boolean foregroundActivities;
        int foregroundServiceTypes;
        int pid;
        int processState;
        int uid;

        ProcessChangeItem() {
        }
    }

    com.android.server.am.BroadcastQueue broadcastQueueForIntent(android.content.Intent intent) {
        return broadcastQueueForFlags(intent.getFlags(), intent);
    }

    com.android.server.am.BroadcastQueue broadcastQueueForFlags(int i) {
        return broadcastQueueForFlags(i, null);
    }

    com.android.server.am.BroadcastQueue broadcastQueueForFlags(int i, java.lang.Object obj) {
        if (this.mEnableModernQueue) {
            return this.mBroadcastQueues[0];
        }
        if (isOnFgOffloadQueue(i)) {
            return this.mBroadcastQueues[3];
        }
        if (isOnBgOffloadQueue(i)) {
            return this.mBroadcastQueues[2];
        }
        return (i & 268435456) != 0 ? this.mBroadcastQueues[0] : this.mBroadcastQueues[1];
    }

    static void boostPriorityForLockedSection() {
        sThreadPriorityBooster.boost();
    }

    static void resetPriorityAfterLockedSection() {
        sThreadPriorityBooster.reset();
    }

    static void boostPriorityForProcLockedSection() {
        sProcThreadPriorityBooster.boost();
    }

    static void resetPriorityAfterProcLockedSection() {
        sProcThreadPriorityBooster.reset();
    }

    private final class PackageAssociationInfo {
        private final android.util.ArraySet<java.lang.String> mAllowedPackageAssociations;
        private boolean mIsDebuggable;
        private final java.lang.String mSourcePackage;

        PackageAssociationInfo(java.lang.String str, android.util.ArraySet<java.lang.String> arraySet, boolean z) {
            this.mSourcePackage = str;
            this.mAllowedPackageAssociations = arraySet;
            this.mIsDebuggable = z;
        }

        boolean isPackageAssociationAllowed(java.lang.String str) {
            return this.mIsDebuggable || this.mAllowedPackageAssociations.contains(str);
        }

        boolean isDebuggable() {
            return this.mIsDebuggable;
        }

        void setDebuggable(boolean z) {
            this.mIsDebuggable = z;
        }

        android.util.ArraySet<java.lang.String> getAllowedPackageAssociations() {
            return this.mAllowedPackageAssociations;
        }
    }

    static final class PidMap {
        private final android.util.SparseArray<com.android.server.am.ProcessRecord> mPidMap = new android.util.SparseArray<>();

        PidMap() {
        }

        com.android.server.am.ProcessRecord get(int i) {
            return this.mPidMap.get(i);
        }

        int size() {
            return this.mPidMap.size();
        }

        com.android.server.am.ProcessRecord valueAt(int i) {
            return this.mPidMap.valueAt(i);
        }

        int keyAt(int i) {
            return this.mPidMap.keyAt(i);
        }

        int indexOfKey(int i) {
            return this.mPidMap.indexOfKey(i);
        }

        void doAddInternal(int i, com.android.server.am.ProcessRecord processRecord) {
            this.mPidMap.put(i, processRecord);
        }

        boolean doRemoveInternal(int i, com.android.server.am.ProcessRecord processRecord) {
            com.android.server.am.ProcessRecord processRecord2 = this.mPidMap.get(i);
            if (processRecord2 != null && processRecord2.getStartSeq() == processRecord.getStartSeq()) {
                this.mPidMap.remove(i);
                return true;
            }
            return false;
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void addPidLocked(com.android.server.am.ProcessRecord processRecord) {
        int pid = processRecord.getPid();
        synchronized (this.mPidsSelfLocked) {
            this.mPidsSelfLocked.doAddInternal(pid, processRecord);
        }
        synchronized (sActiveProcessInfoSelfLocked) {
            try {
                if (processRecord.processInfo != null) {
                    sActiveProcessInfoSelfLocked.put(pid, processRecord.processInfo);
                } else {
                    sActiveProcessInfoSelfLocked.remove(pid);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        this.mAtmInternal.onProcessMapped(pid, processRecord.getWindowProcessController());
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    boolean removePidLocked(int i, com.android.server.am.ProcessRecord processRecord) {
        boolean doRemoveInternal;
        synchronized (this.mPidsSelfLocked) {
            doRemoveInternal = this.mPidsSelfLocked.doRemoveInternal(i, processRecord);
        }
        if (doRemoveInternal) {
            synchronized (sActiveProcessInfoSelfLocked) {
                sActiveProcessInfoSelfLocked.remove(i);
            }
            this.mAtmInternal.onProcessUnMapped(i);
        }
        return doRemoveInternal;
    }

    abstract class ImportanceToken implements android.os.IBinder.DeathRecipient {
        final int pid;
        final java.lang.String reason;
        final android.os.IBinder token;

        ImportanceToken(int i, android.os.IBinder iBinder, java.lang.String str) {
            this.pid = i;
            this.token = iBinder;
            this.reason = str;
        }

        public java.lang.String toString() {
            return "ImportanceToken { " + java.lang.Integer.toHexString(java.lang.System.identityHashCode(this)) + " " + this.reason + " " + this.pid + " " + this.token + " }";
        }

        void dumpDebug(android.util.proto.ProtoOutputStream protoOutputStream, long j) {
            long start = protoOutputStream.start(j);
            protoOutputStream.write(1120986464257L, this.pid);
            if (this.token != null) {
                protoOutputStream.write(1138166333442L, this.token.toString());
            }
            protoOutputStream.write(1138166333443L, this.reason);
            protoOutputStream.end(start);
        }
    }

    @com.android.internal.annotations.VisibleForTesting
    static final class StickyBroadcast {
        public boolean deferUntilActive;
        public android.content.Intent intent;
        public int originalCallingAppProcessState;
        public int originalCallingUid;

        StickyBroadcast() {
        }

        public static com.android.server.am.ActivityManagerService.StickyBroadcast create(android.content.Intent intent, boolean z, int i, int i2) {
            com.android.server.am.ActivityManagerService.StickyBroadcast stickyBroadcast = new com.android.server.am.ActivityManagerService.StickyBroadcast();
            stickyBroadcast.intent = intent;
            stickyBroadcast.deferUntilActive = z;
            stickyBroadcast.originalCallingUid = i;
            stickyBroadcast.originalCallingAppProcessState = i2;
            return stickyBroadcast;
        }

        public java.lang.String toString() {
            return "{intent=" + this.intent + ", defer=" + this.deferUntilActive + ", originalCallingUid=" + this.originalCallingUid + ", originalCallingAppProcessState=" + this.originalCallingAppProcessState + "}";
        }
    }

    static final class Association {
        int mCount;
        long mLastStateUptime;
        int mNesting;
        final java.lang.String mSourceProcess;
        final int mSourceUid;
        long mStartTime;
        final android.content.ComponentName mTargetComponent;
        final java.lang.String mTargetProcess;
        final int mTargetUid;
        long mTime;
        int mLastState = 21;
        long[] mStateTimes = new long[21];

        Association(int i, java.lang.String str, int i2, android.content.ComponentName componentName, java.lang.String str2) {
            this.mSourceUid = i;
            this.mSourceProcess = str;
            this.mTargetUid = i2;
            this.mTargetComponent = componentName;
            this.mTargetProcess = str2;
        }
    }

    static final class PendingTempAllowlist {
        final int callingUid;
        final long duration;
        final int reasonCode;
        final java.lang.String tag;
        final int targetUid;
        final int type;

        PendingTempAllowlist(int i, long j, int i2, java.lang.String str, int i3, int i4) {
            this.targetUid = i;
            this.duration = j;
            this.tag = str;
            this.type = i3;
            this.reasonCode = i2;
            this.callingUid = i4;
        }

        void dumpDebug(android.util.proto.ProtoOutputStream protoOutputStream, long j) {
            long start = protoOutputStream.start(j);
            protoOutputStream.write(1120986464257L, this.targetUid);
            protoOutputStream.write(1112396529666L, this.duration);
            protoOutputStream.write(1138166333443L, this.tag);
            protoOutputStream.write(1120986464260L, this.type);
            protoOutputStream.write(1120986464261L, this.reasonCode);
            protoOutputStream.write(1120986464262L, this.callingUid);
            protoOutputStream.end(start);
        }
    }

    public static final class FgsTempAllowListItem {
        final int mCallingUid;
        final long mDuration;
        final java.lang.String mReason;
        final int mReasonCode;

        FgsTempAllowListItem(long j, int i, java.lang.String str, int i2) {
            this.mDuration = j;
            this.mReasonCode = i;
            this.mReason = str;
            this.mCallingUid = i2;
        }

        void dump(java.io.PrintWriter printWriter) {
            printWriter.print(" duration=" + this.mDuration + " callingUid=" + android.os.UserHandle.formatUid(this.mCallingUid) + " reasonCode=" + android.os.PowerExemptionManager.reasonCodeToString(this.mReasonCode) + " reason=" + this.mReason);
        }
    }

    private final class AppDeathRecipient implements android.os.IBinder.DeathRecipient {
        final com.android.server.am.ProcessRecord mApp;
        final android.app.IApplicationThread mAppThread;
        final int mPid;

        AppDeathRecipient(com.android.server.am.ProcessRecord processRecord, int i, android.app.IApplicationThread iApplicationThread) {
            this.mApp = processRecord;
            this.mPid = i;
            this.mAppThread = iApplicationThread;
        }

        @Override // android.os.IBinder.DeathRecipient
        public void binderDied() {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread, true, null);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }
    }

    final class UiHandler extends android.os.Handler {
        public UiHandler() {
            super(com.android.server.UiThread.get().getLooper(), null, true);
        }

        @Override // android.os.Handler
        public void handleMessage(android.os.Message message) {
            switch (message.what) {
                case 1:
                    com.android.server.am.ActivityManagerService.this.mAppErrors.handleShowAppErrorUi(message);
                    com.android.server.am.ActivityManagerService.this.ensureBootCompleted();
                    return;
                case 2:
                    com.android.server.am.ActivityManagerService.this.mAppErrors.handleShowAnrUi(message);
                    com.android.server.am.ActivityManagerService.this.ensureBootCompleted();
                    return;
                case 6:
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) message.obj;
                            if (message.arg1 != 0) {
                                if (!processRecord.hasWaitedForDebugger()) {
                                    processRecord.mErrorState.getDialogController().showDebugWaitingDialogs();
                                    processRecord.setWaitedForDebugger(true);
                                }
                            } else {
                                processRecord.mErrorState.getDialogController().clearWaitingDialog();
                            }
                        } catch (java.lang.Throwable th) {
                            throw th;
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 26:
                    java.util.HashMap hashMap = (java.util.HashMap) message.obj;
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock2 = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock2) {
                        try {
                            com.android.server.am.ProcessRecord processRecord2 = (com.android.server.am.ProcessRecord) hashMap.get("app");
                            if (processRecord2 == null) {
                                android.util.Slog.e("ActivityManager", "App not found when showing strict mode dialog.");
                                com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                                return;
                            }
                            if (processRecord2.mErrorState.getDialogController().hasViolationDialogs()) {
                                android.util.Slog.e("ActivityManager", "App already has strict mode dialog: " + processRecord2);
                                com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                                return;
                            }
                            com.android.server.am.AppErrorResult appErrorResult = (com.android.server.am.AppErrorResult) hashMap.get("result");
                            if (com.android.server.am.ActivityManagerService.this.mAtmInternal.showStrictModeViolationDialog()) {
                                processRecord2.mErrorState.getDialogController().showViolationDialogs(appErrorResult);
                            } else {
                                appErrorResult.set(0);
                            }
                            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                            com.android.server.am.ActivityManagerService.this.ensureBootCompleted();
                            return;
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                    }
                case 31:
                    com.android.server.am.ActivityManagerService.this.mProcessList.dispatchProcessesChanged();
                    return;
                case 32:
                    com.android.server.am.ActivityManagerService.this.mProcessList.dispatchProcessDied(message.arg1, message.arg2);
                    return;
                case 68:
                    com.android.server.am.ActivityManagerService.this.pushTempAllowlist();
                    return;
                case 70:
                    com.android.server.am.ActivityManagerService.this.dispatchOomAdjObserver((java.lang.String) message.obj);
                    return;
                case 80:
                    com.android.server.am.ActivityManagerService.this.mUidObserverController.addUidToObserverImpl((android.os.IBinder) message.obj, message.arg1);
                    return;
                case 81:
                    com.android.server.am.ActivityManagerService.this.mUidObserverController.removeUidFromObserverImpl((android.os.IBinder) message.obj, message.arg1);
                    return;
                default:
                    return;
            }
        }
    }

    final class MainHandler extends android.os.Handler {
        public MainHandler(android.os.Looper looper) {
            super(looper, null, true);
        }

        @Override // android.os.Handler
        public void handleMessage(final android.os.Message message) {
            switch (message.what) {
                case 5:
                    com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (activityManagerService) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mAppProfiler.performAppGcsIfAppropriateLocked();
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 12:
                    com.android.server.am.ActivityManagerService.this.mServices.serviceTimeout((com.android.server.am.ProcessRecord) message.obj);
                    return;
                case 13:
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mProcessList.forEachLruProcessesLOSP(false, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda0
                                @Override // java.util.function.Consumer
                                public final void accept(java.lang.Object obj) {
                                    com.android.server.am.ActivityManagerService.MainHandler.lambda$handleMessage$0((com.android.server.am.ProcessRecord) obj);
                                }
                            });
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 20:
                    com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) message.obj;
                    com.android.server.am.ActivityManagerService activityManagerService2 = com.android.server.am.ActivityManagerService.this;
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (activityManagerService2) {
                        try {
                            com.android.server.am.ActivityManagerService.this.handleProcessStartOrKillTimeoutLocked(processRecord, false);
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 22:
                    com.android.server.am.ActivityManagerService activityManagerService3 = com.android.server.am.ActivityManagerService.this;
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (activityManagerService3) {
                        try {
                            int i = message.arg1;
                            int i2 = message.arg2;
                            com.android.internal.os.SomeArgs someArgs = (com.android.internal.os.SomeArgs) message.obj;
                            java.lang.String str = (java.lang.String) someArgs.arg1;
                            java.lang.String str2 = (java.lang.String) someArgs.arg2;
                            int intValue = ((java.lang.Integer) someArgs.arg3).intValue();
                            someArgs.recycle();
                            com.android.server.am.ActivityManagerService.this.forceStopPackageLocked(str, i, false, false, true, false, false, false, i2, str2, intValue);
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 27:
                    com.android.server.am.ActivityManagerService.this.checkExcessivePowerUsage();
                    removeMessages(27);
                    sendMessageDelayed(obtainMessage(27), com.android.server.am.ActivityManagerService.this.mConstants.POWER_CHECK_INTERVAL);
                    return;
                case 28:
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock2 = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock2) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mProcessList.clearAllDnsCacheLOSP();
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 29:
                    com.android.server.am.ActivityManagerService.this.mProcessList.setAllHttpProxy();
                    return;
                case 33:
                    final java.util.ArrayList arrayList = (java.util.ArrayList) message.obj;
                    new java.lang.Thread() { // from class: com.android.server.am.ActivityManagerService.MainHandler.1
                        @Override // java.lang.Thread, java.lang.Runnable
                        public void run() {
                            com.android.server.am.ActivityManagerService.this.mAppProfiler.reportMemUsage(arrayList);
                        }
                    }.start();
                    return;
                case 41:
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock3 = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock3) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mProcessList.updateAllTimePrefsLOSP(message.arg1);
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 49:
                    int i3 = message.arg1;
                    byte[] bArr = (byte[]) message.obj;
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock4 = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock4) {
                        try {
                            synchronized (com.android.server.am.ActivityManagerService.this.mPidsSelfLocked) {
                                for (int i4 = 0; i4 < com.android.server.am.ActivityManagerService.this.mPidsSelfLocked.size(); i4++) {
                                    com.android.server.am.ProcessRecord valueAt = com.android.server.am.ActivityManagerService.this.mPidsSelfLocked.valueAt(i4);
                                    android.app.IApplicationThread thread = valueAt.getThread();
                                    if (valueAt.uid == i3 && thread != null) {
                                        try {
                                            thread.notifyCleartextNetwork(bArr);
                                        } catch (android.os.RemoteException e) {
                                        }
                                    }
                                }
                            }
                        } finally {
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 50:
                    com.android.server.am.ActivityManagerService.this.mAppProfiler.handlePostDumpHeapNotification();
                    return;
                case 51:
                    com.android.server.am.ActivityManagerService.this.mAppProfiler.handleAbortDumpHeap((java.lang.String) message.obj);
                    return;
                case 56:
                    try {
                        ((android.app.IUiAutomationConnection) message.obj).shutdown();
                    } catch (android.os.RemoteException e2) {
                        android.util.Slog.w("ActivityManager", "Error shutting down UiAutomationConnection");
                    }
                    com.android.server.am.ActivityManagerService.this.mUserIsMonkey = false;
                    return;
                case 57:
                    com.android.server.am.ProcessRecord processRecord2 = (com.android.server.am.ProcessRecord) message.obj;
                    com.android.server.am.ActivityManagerService activityManagerService4 = com.android.server.am.ActivityManagerService.this;
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (activityManagerService4) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mCpHelper.processContentProviderPublishTimedOutLocked(processRecord2);
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 58:
                    com.android.server.am.ActivityManagerService.this.idleUids();
                    return;
                case 63:
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock5 = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock5) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mProcessList.handleAllTrustStorageUpdateLOSP();
                        } finally {
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 66:
                    com.android.server.am.ActivityManagerService.this.mServices.serviceForegroundTimeout((com.android.server.am.ServiceRecord) message.obj);
                    return;
                case 67:
                    com.android.internal.os.SomeArgs someArgs2 = (com.android.internal.os.SomeArgs) message.obj;
                    com.android.server.am.ActivityManagerService.this.mServices.serviceForegroundTimeoutANR((com.android.server.am.ProcessRecord) someArgs2.arg1, (com.android.internal.os.TimeoutRecord) someArgs2.arg2);
                    someArgs2.recycle();
                    return;
                case 69:
                    com.android.internal.os.SomeArgs someArgs3 = (com.android.internal.os.SomeArgs) message.obj;
                    com.android.server.am.ActivityManagerService.this.mServices.serviceForegroundCrash((com.android.server.am.ProcessRecord) someArgs3.arg1, (java.lang.String) someArgs3.arg2, (android.content.ComponentName) someArgs3.arg3);
                    someArgs3.recycle();
                    return;
                case 71:
                    com.android.server.am.ActivityManagerService activityManagerService5 = com.android.server.am.ActivityManagerService.this;
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (activityManagerService5) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mProcessList.killAppZygoteIfNeededLocked((android.os.AppZygote) message.obj, false);
                        } finally {
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 72:
                    com.android.server.am.ActivityManagerService.this.handleBinderHeavyHitterAutoSamplerTimeOut();
                    return;
                case 73:
                    com.android.server.am.ActivityManagerService activityManagerService6 = com.android.server.am.ActivityManagerService.this;
                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (activityManagerService6) {
                        try {
                            ((com.android.server.am.ContentProviderRecord) message.obj).onProviderPublishStatusLocked(false);
                        } finally {
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 74:
                    com.android.server.am.ActivityManagerService.this.mBroadcastEventListeners.forEach(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda1
                        @Override // java.util.function.Consumer
                        public final void accept(java.lang.Object obj) {
                            com.android.server.am.ActivityManagerService.MainHandler.lambda$handleMessage$1(message, (android.app.ActivityManagerInternal.BroadcastEventListener) obj);
                        }
                    });
                    return;
                case 75:
                    com.android.server.am.ActivityManagerService.this.mBindServiceEventListeners.forEach(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda2
                        @Override // java.util.function.Consumer
                        public final void accept(java.lang.Object obj) {
                            com.android.server.am.ActivityManagerService.MainHandler.lambda$handleMessage$2(message, (android.app.ActivityManagerInternal.BindServiceEventListener) obj);
                        }
                    });
                    return;
                case 76:
                    com.android.server.am.ActivityManagerService.this.mServices.onShortFgsTimeout((com.android.server.am.ServiceRecord) message.obj);
                    return;
                case 77:
                    com.android.server.am.ActivityManagerService.this.mServices.onShortFgsProcstateTimeout((com.android.server.am.ServiceRecord) message.obj);
                    return;
                case 78:
                    com.android.server.am.ActivityManagerService.this.mServices.onShortFgsAnrTimeout((com.android.server.am.ServiceRecord) message.obj);
                    return;
                case 79:
                    com.android.server.am.ActivityManagerService.this.mAppProfiler.mCachedAppsWatermarkData.updateCachedAppsSnapshot(((java.lang.Long) message.obj).longValue());
                    return;
                case 82:
                    com.android.server.am.ActivityManagerService.this.handleBindApplicationTimeoutSoft((com.android.server.am.ProcessRecord) message.obj, message.arg1);
                    return;
                case 83:
                    com.android.server.am.ActivityManagerService.this.handleBindApplicationTimeoutHard((com.android.server.am.ProcessRecord) message.obj);
                    return;
                case 84:
                    com.android.server.am.ActivityManagerService.this.mServices.onFgsTimeout((com.android.server.am.ServiceRecord) message.obj);
                    return;
                case 85:
                    com.android.server.am.ActivityManagerService.this.mServices.onFgsAnrTimeout((com.android.server.am.ServiceRecord) message.obj);
                    return;
                default:
                    return;
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$handleMessage$0(com.android.server.am.ProcessRecord processRecord) {
            android.app.IApplicationThread thread = processRecord.getThread();
            if (thread != null) {
                try {
                    thread.updateTimeZone();
                } catch (android.os.RemoteException e) {
                    android.util.Slog.w("ActivityManager", "Failed to update time zone for: " + processRecord.info.processName);
                }
            }
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$handleMessage$1(android.os.Message message, android.app.ActivityManagerInternal.BroadcastEventListener broadcastEventListener) {
            broadcastEventListener.onSendingBroadcast((java.lang.String) message.obj, message.arg1);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ void lambda$handleMessage$2(android.os.Message message, android.app.ActivityManagerInternal.BindServiceEventListener bindServiceEventListener) {
            bindServiceEventListener.onBindingService((java.lang.String) message.obj, message.arg1);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void setSystemProcess() {
        try {
            android.os.ServiceManager.addService(com.android.server.am.HostingRecord.HOSTING_TYPE_ACTIVITY, this, true, 21);
            android.os.ServiceManager.addService("procstats", this.mProcessStats);
            android.os.ServiceManager.addService("meminfo", new com.android.server.am.ActivityManagerService.MemBinder(this), false, 2);
            android.os.ServiceManager.addService("gfxinfo", new com.android.server.am.ActivityManagerService.GraphicsBinder(this));
            android.os.ServiceManager.addService("dbinfo", new com.android.server.am.ActivityManagerService.DbBinder(this));
            this.mAppProfiler.setCpuInfoService();
            android.os.ServiceManager.addService("permission", new com.android.server.am.ActivityManagerService.PermissionController(this));
            android.os.ServiceManager.addService("processinfo", new com.android.server.am.ActivityManagerService.ProcessInfoService(this));
            android.os.ServiceManager.addService("cacheinfo", new com.android.server.am.ActivityManagerService.CacheBinder(this));
            android.content.pm.ApplicationInfo applicationInfo = this.mContext.getPackageManager().getApplicationInfo(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME, 1049600);
            this.mSystemThread.installSystemApplicationInfo(applicationInfo, getClass().getClassLoader());
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    com.android.server.am.ProcessRecord newProcessRecordLocked = this.mProcessList.newProcessRecordLocked(applicationInfo, applicationInfo.processName, false, 0, false, 0, null, new com.android.server.am.HostingRecord("system"));
                    newProcessRecordLocked.setPersistent(true);
                    newProcessRecordLocked.setPid(MY_PID);
                    newProcessRecordLocked.mState.setMaxAdj(com.android.server.am.ProcessList.SYSTEM_ADJ);
                    newProcessRecordLocked.makeActive(this.mSystemThread.getApplicationThread(), this.mProcessStats);
                    newProcessRecordLocked.mProfile.addHostingComponentType(1);
                    addPidLocked(newProcessRecordLocked);
                    updateLruProcessLocked(newProcessRecordLocked, false, null);
                    updateOomAdjLocked(14);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            this.mAppOpsService.startWatchingMode(63, null, new com.android.internal.app.IAppOpsCallback.Stub() { // from class: com.android.server.am.ActivityManagerService.4
                public void opChanged(int i, int i2, java.lang.String str, java.lang.String str2) {
                    if (i == 63 && str != null && com.android.server.am.ActivityManagerService.this.getAppOpsManager().checkOpNoThrow(i, i2, str) != 0) {
                        com.android.server.am.ActivityManagerService.this.runInBackgroundDisabled(i2);
                    }
                }
            });
            this.mAppOpsService.startWatchingActive(new int[]{26}, new com.android.internal.app.IAppOpsActiveCallback.Stub() { // from class: com.android.server.am.ActivityManagerService.5
                public void opActiveChanged(int i, int i2, java.lang.String str, java.lang.String str2, int i3, boolean z, int i4, int i5) {
                    com.android.server.am.ActivityManagerService.this.cameraActiveChanged(i2, z);
                }
            });
        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
            throw new java.lang.RuntimeException("Unable to find android system package", e);
        }
    }

    public void setWindowManager(com.android.server.wm.WindowManagerService windowManagerService) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mWindowManager = windowManagerService;
                this.mWmInternal = (com.android.server.wm.WindowManagerInternal) com.android.server.LocalServices.getService(com.android.server.wm.WindowManagerInternal.class);
                this.mActivityTaskManager.setWindowManager(windowManagerService);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setUsageStatsManager(@android.annotation.NonNull android.app.usage.UsageStatsManagerInternal usageStatsManagerInternal) {
        this.mUsageStatsService = usageStatsManagerInternal;
        this.mActivityTaskManager.setUsageStatsManager(usageStatsManagerInternal);
    }

    public void setContentCaptureManager(@android.annotation.Nullable com.android.server.contentcapture.ContentCaptureManagerInternal contentCaptureManagerInternal) {
        this.mContentCaptureService = contentCaptureManagerInternal;
    }

    public void startObservingNativeCrashes() {
        new com.android.server.am.NativeCrashListener(this).start();
    }

    public void setAppOpsPolicy(@android.annotation.Nullable android.app.AppOpsManagerInternal.CheckOpsDelegate checkOpsDelegate) {
        this.mAppOpsService.setAppOpsPolicy(checkOpsDelegate);
    }

    public com.android.internal.app.IAppOpsService getAppOpsService() {
        return this.mAppOpsService;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setVoiceInteractionManagerProvider(@android.annotation.Nullable android.app.ActivityManagerInternal.VoiceInteractionManagerProvider voiceInteractionManagerProvider) {
        this.mVoiceInteractionManagerProvider = voiceInteractionManagerProvider;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static class VolatileDropboxEntryStates {
        private final java.lang.Boolean mIsProcessFrozen;

        private VolatileDropboxEntryStates(java.lang.Boolean bool) {
            this.mIsProcessFrozen = bool;
        }

        public static com.android.server.am.ActivityManagerService.VolatileDropboxEntryStates withProcessFrozenState(boolean z) {
            return new com.android.server.am.ActivityManagerService.VolatileDropboxEntryStates(java.lang.Boolean.valueOf(z));
        }

        public static com.android.server.am.ActivityManagerService.VolatileDropboxEntryStates emptyVolatileDropboxEnytyStates() {
            return new com.android.server.am.ActivityManagerService.VolatileDropboxEntryStates(null);
        }

        public java.lang.Boolean isProcessFrozen() {
            return this.mIsProcessFrozen;
        }
    }

    static class MemBinder extends android.os.Binder {
        com.android.server.am.ActivityManagerService mActivityManagerService;
        private final com.android.server.utils.PriorityDump.PriorityDumper mPriorityDumper = new com.android.server.utils.PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.MemBinder.1
            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpHigh(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
                dump(fileDescriptor, printWriter, new java.lang.String[]{"-a"}, z);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
                com.android.server.am.ActivityManagerService.MemBinder.this.mActivityManagerService.dumpApplicationMemoryUsage(fileDescriptor, printWriter, "  ", strArr, false, null, z);
            }
        };

        MemBinder(com.android.server.am.ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (!com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "meminfo", printWriter)) {
                    return;
                }
                com.android.server.utils.PriorityDump.dump(this.mPriorityDumper, fileDescriptor, printWriter, strArr);
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    static class GraphicsBinder extends android.os.Binder {
        com.android.server.am.ActivityManagerService mActivityManagerService;

        GraphicsBinder(com.android.server.am.ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (!com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "gfxinfo", printWriter)) {
                    return;
                }
                this.mActivityManagerService.dumpGraphicsHardwareUsage(fileDescriptor, printWriter, strArr);
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    static class DbBinder extends android.os.Binder {
        com.android.server.am.ActivityManagerService mActivityManagerService;

        DbBinder(com.android.server.am.ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (!com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "dbinfo", printWriter)) {
                    return;
                }
                this.mActivityManagerService.dumpDbInfo(fileDescriptor, printWriter, strArr);
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    static class CacheBinder extends android.os.Binder {
        com.android.server.am.ActivityManagerService mActivityManagerService;

        CacheBinder(com.android.server.am.ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (!com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "cacheinfo", printWriter)) {
                    return;
                }
                this.mActivityManagerService.dumpBinderCacheContents(fileDescriptor, printWriter, strArr);
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    public static final class Lifecycle extends com.android.server.SystemService {
        private static com.android.server.wm.ActivityTaskManagerService sAtm;
        private final com.android.server.am.ActivityManagerService mService;

        public Lifecycle(android.content.Context context) {
            super(context);
            this.mService = new com.android.server.am.ActivityManagerService(context, sAtm);
        }

        public static com.android.server.am.ActivityManagerService startService(com.android.server.SystemServiceManager systemServiceManager, com.android.server.wm.ActivityTaskManagerService activityTaskManagerService) {
            sAtm = activityTaskManagerService;
            return ((com.android.server.am.ActivityManagerService.Lifecycle) systemServiceManager.startService(com.android.server.am.ActivityManagerService.Lifecycle.class)).getService();
        }

        @Override // com.android.server.SystemService
        public void onStart() {
            this.mService.start();
        }

        @Override // com.android.server.SystemService
        public void onBootPhase(int i) {
            this.mService.mBootPhase = i;
            if (i == 500) {
                this.mService.mBatteryStatsService.systemServicesReady();
                this.mService.mServices.systemServicesReady();
            } else if (i == 550) {
                this.mService.startBroadcastObservers();
            } else if (i == 600) {
                this.mService.mPackageWatchdog.onPackagesReady();
                this.mService.scheduleHomeTimeout();
            }
        }

        @Override // com.android.server.SystemService
        public void onUserStopped(@android.annotation.NonNull com.android.server.SystemService.TargetUser targetUser) {
            this.mService.mBatteryStatsService.onCleanupUser(targetUser.getUserIdentifier());
        }

        public com.android.server.am.ActivityManagerService getService() {
            return this.mService;
        }
    }

    private void maybeLogUserspaceRebootEvent() {
        int currentUserId;
        if (!com.android.server.UserspaceRebootLogger.shouldLogUserspaceRebootEvent() || (currentUserId = this.mUserController.getCurrentUserId()) != 0) {
            return;
        }
        com.android.server.UserspaceRebootLogger.logEventAsync(android.os.storage.StorageManager.isCeStorageUnlocked(currentUserId), com.android.internal.os.BackgroundThread.getExecutor());
    }

    static class HiddenApiSettings extends android.database.ContentObserver implements android.provider.DeviceConfig.OnPropertiesChangedListener {
        public static final java.lang.String HIDDEN_API_ACCESS_LOG_SAMPLING_RATE = "hidden_api_access_log_sampling_rate";
        public static final java.lang.String HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE = "hidden_api_access_statslog_sampling_rate";
        private boolean mBlacklistDisabled;
        private final android.content.Context mContext;
        private java.util.List<java.lang.String> mExemptions;
        private java.lang.String mExemptionsStr;
        private int mLogSampleRate;
        private int mPolicy;
        private int mStatslogSampleRate;

        public void onPropertiesChanged(android.provider.DeviceConfig.Properties properties) {
            int i = properties.getInt(HIDDEN_API_ACCESS_LOG_SAMPLING_RATE, 0);
            if (i < 0 || i > 65536) {
                i = -1;
            }
            if (i != -1 && i != this.mLogSampleRate) {
                this.mLogSampleRate = i;
                android.os.Process.ZYGOTE_PROCESS.setHiddenApiAccessLogSampleRate(this.mLogSampleRate);
            }
            int i2 = properties.getInt(HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE, 0);
            if (i2 < 0 || i2 > 65536) {
                i2 = -1;
            }
            if (i2 != -1 && i2 != this.mStatslogSampleRate) {
                this.mStatslogSampleRate = i2;
                android.os.Process.ZYGOTE_PROCESS.setHiddenApiAccessStatslogSampleRate(this.mStatslogSampleRate);
            }
        }

        public HiddenApiSettings(android.os.Handler handler, android.content.Context context) {
            super(handler);
            this.mExemptions = java.util.Collections.emptyList();
            this.mLogSampleRate = -1;
            this.mStatslogSampleRate = -1;
            this.mPolicy = -1;
            this.mContext = context;
        }

        public void registerObserver() {
            this.mContext.getContentResolver().registerContentObserver(android.provider.Settings.Global.getUriFor("hidden_api_blacklist_exemptions"), false, this);
            this.mContext.getContentResolver().registerContentObserver(android.provider.Settings.Global.getUriFor("hidden_api_policy"), false, this);
            android.provider.DeviceConfig.addOnPropertiesChangedListener("app_compat", this.mContext.getMainExecutor(), this);
            update();
        }

        private void update() {
            java.util.List<java.lang.String> asList;
            java.lang.String string = android.provider.Settings.Global.getString(this.mContext.getContentResolver(), "hidden_api_blacklist_exemptions");
            if (!android.text.TextUtils.equals(string, this.mExemptionsStr)) {
                this.mExemptionsStr = string;
                if (com.android.server.am.SettingsToPropertiesMapper.NAMESPACE_REBOOT_STAGING_DELIMITER.equals(string)) {
                    this.mBlacklistDisabled = true;
                    this.mExemptions = java.util.Collections.emptyList();
                } else {
                    this.mBlacklistDisabled = false;
                    if (android.text.TextUtils.isEmpty(string)) {
                        asList = java.util.Collections.emptyList();
                    } else {
                        asList = java.util.Arrays.asList(string.split(","));
                    }
                    this.mExemptions = asList;
                }
                if (!android.os.Process.ZYGOTE_PROCESS.setApiDenylistExemptions(this.mExemptions)) {
                    android.util.Slog.e("ActivityManager", "Failed to set API blacklist exemptions!");
                    this.mExemptions = java.util.Collections.emptyList();
                }
            }
            this.mPolicy = getValidEnforcementPolicy("hidden_api_policy");
        }

        private int getValidEnforcementPolicy(java.lang.String str) {
            int i = android.provider.Settings.Global.getInt(this.mContext.getContentResolver(), str, -1);
            if (android.content.pm.ApplicationInfo.isValidHiddenApiEnforcementPolicy(i)) {
                return i;
            }
            return -1;
        }

        boolean isDisabled() {
            return this.mBlacklistDisabled;
        }

        int getPolicy() {
            return this.mPolicy;
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean z) {
            update();
        }
    }

    android.app.AppOpsManager getAppOpsManager() {
        if (this.mAppOpsManager == null) {
            this.mAppOpsManager = (android.app.AppOpsManager) this.mContext.getSystemService(android.app.AppOpsManager.class);
        }
        return this.mAppOpsManager;
    }

    @com.android.internal.annotations.VisibleForTesting
    ActivityManagerService(com.android.server.am.ActivityManagerService.Injector injector, @android.annotation.NonNull com.android.server.ServiceThread serviceThread) {
        this(injector, serviceThread, null);
    }

    @com.android.internal.annotations.VisibleForTesting
    ActivityManagerService(com.android.server.am.ActivityManagerService.Injector injector, @android.annotation.NonNull com.android.server.ServiceThread serviceThread, @android.annotation.Nullable com.android.server.am.UserController userController) {
        com.android.server.am.OomAdjuster oomAdjuster;
        this.mInstrumentationReporter = new com.android.server.am.InstrumentationReporter();
        this.mActiveInstrumentation = new java.util.ArrayList<>();
        this.mOomAdjProfiler = new com.android.server.am.OomAdjProfiler();
        this.mGlobalLock = this;
        this.mProcLock = new com.android.server.am.ActivityManagerProcLock();
        this.mStrictModeCallbacks = new android.util.SparseArray<>();
        this.mDeviceOwnerUid = -1;
        this.mCompanionAppUidsMap = new android.util.ArrayMap();
        this.mProfileOwnerUids = null;
        this.mDeliveryGroupPolicyIgnoredActions = new android.util.ArraySet<>();
        this.mActiveCameraUids = new android.util.IntArray(4);
        this.mPriorityDumper = new com.android.server.utils.PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.1
            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpCritical(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
                if (z) {
                    return;
                }
                com.android.server.am.ActivityManagerService.this.doDump(fileDescriptor, printWriter, new java.lang.String[]{com.android.server.wm.ActivityTaskManagerService.DUMP_ACTIVITIES_CMD}, z);
                com.android.server.am.ActivityManagerService.this.doDump(fileDescriptor, printWriter, new java.lang.String[]{com.android.server.am.HostingRecord.HOSTING_TYPE_SERVICE, "all-platform-critical"}, z);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpNormal(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
                com.android.server.am.ActivityManagerService.this.doDump(fileDescriptor, printWriter, new java.lang.String[]{"-a", "--normal-priority"}, z);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
                com.android.server.am.ActivityManagerService.this.doDump(fileDescriptor, printWriter, strArr, z);
            }
        };
        this.mBackgroundAppIdAllowlist = new int[]{1002};
        this.mHasHomeDelay = new java.util.concurrent.atomic.AtomicBoolean(false);
        this.mThemeOverlayReadyUsers = new java.util.HashSet();
        this.mPidsSelfLocked = new com.android.server.am.ActivityManagerService.PidMap();
        this.mImportantProcesses = new android.util.SparseArray<>();
        this.mProcessesOnHold = new java.util.ArrayList<>();
        this.mPersistentStartingProcesses = new java.util.ArrayList<>();
        this.mActivityLaunchObserver = new com.android.server.wm.ActivityMetricsLaunchObserver() { // from class: com.android.server.am.ActivityManagerService.2
            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onIntentStarted(@android.annotation.NonNull android.content.Intent intent, long j) {
                synchronized (this) {
                    com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onIntentStarted(intent, j);
                }
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onIntentFailed(long j) {
                com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onIntentFailed(j);
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onActivityLaunched(long j, android.content.ComponentName componentName, int i, int i2) {
                com.android.server.am.ProcessRecord processRecord;
                com.android.server.am.ActivityManagerService.this.mAppProfiler.onActivityLaunched();
                com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        try {
                            processRecord = com.android.server.am.ActivityManagerService.this.getProcessRecordLocked(componentName.getPackageName(), com.android.server.am.ActivityManagerService.this.mContext.getPackageManager().getPackageUidAsUser(componentName.getPackageName(), 0, i2));
                        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                            processRecord = null;
                        }
                        com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onActivityLaunched(j, componentName, i, processRecord);
                    } catch (java.lang.Throwable th) {
                        com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onActivityLaunchCancelled(long j) {
                com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onActivityLaunchCancelled(j);
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onActivityLaunchFinished(long j, android.content.ComponentName componentName, long j2, int i) {
                com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onActivityLaunchFinished(j, componentName, j2, i);
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onReportFullyDrawn(long j, long j2) {
                com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onReportFullyDrawn(j, j2);
            }
        };
        this.mBinderTransactionTrackingEnabled = false;
        this.mAlreadyLoggedViolatedStacks = new java.util.HashSet<>();
        this.mRegisteredReceivers = new java.util.HashMap<>();
        this.mReceiverResolver = new com.android.server.IntentResolver<com.android.server.am.BroadcastFilter, com.android.server.am.BroadcastFilter>() { // from class: com.android.server.am.ActivityManagerService.3
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean allowFilterResult(com.android.server.am.BroadcastFilter broadcastFilter, java.util.List<com.android.server.am.BroadcastFilter> list) {
                android.os.IBinder asBinder = broadcastFilter.receiverList.receiver.asBinder();
                for (int size = list.size() - 1; size >= 0; size--) {
                    if (list.get(size).receiverList.receiver.asBinder() == asBinder) {
                        return false;
                    }
                }
                return true;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public com.android.server.am.BroadcastFilter newResult(@android.annotation.NonNull com.android.server.pm.Computer computer, com.android.server.am.BroadcastFilter broadcastFilter, int i, int i2, long j) {
                if (i2 == -1 || broadcastFilter.owningUserId == -1 || i2 == broadcastFilter.owningUserId) {
                    return (com.android.server.am.BroadcastFilter) super.newResult(computer, (com.android.server.pm.Computer) broadcastFilter, i, i2, j);
                }
                return null;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public android.content.IntentFilter getIntentFilter(@android.annotation.NonNull com.android.server.am.BroadcastFilter broadcastFilter) {
                return broadcastFilter;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // com.android.server.IntentResolver
            public com.android.server.am.BroadcastFilter[] newArray(int i) {
                return new com.android.server.am.BroadcastFilter[i];
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean isPackageForFilter(java.lang.String str, com.android.server.am.BroadcastFilter broadcastFilter) {
                return str.equals(broadcastFilter.packageName);
            }
        };
        this.mStickyBroadcasts = new android.util.SparseArray<>();
        this.mAssociations = new android.util.SparseArray<>();
        this.mBackupTargets = new android.util.SparseArray<>();
        this.mDeviceIdleAllowlist = new int[0];
        this.mDeviceIdleExceptIdleAllowlist = new int[0];
        this.mDeviceIdleTempAllowlist = new int[0];
        this.mPendingTempAllowlist = new com.android.server.am.PendingTempAllowlists(this);
        this.mFgsStartTempAllowList = new com.android.server.am.FgsTempAllowList<>();
        this.mFgsWhileInUseTempAllowList = new com.android.server.am.FgsTempAllowList<>();
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = new java.util.concurrent.atomic.AtomicInteger(1);
        this.mLastIdleTime = android.os.SystemClock.uptimeMillis();
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mCurResumedAppLock = new java.lang.Object();
        this.mForegroundPackages = new com.android.internal.app.ProcessMap<>();
        this.mForegroundServiceStateListeners = new java.util.ArrayList<>();
        this.mBroadcastEventListeners = new java.util.concurrent.CopyOnWriteArrayList<>();
        this.mBindServiceEventListeners = new java.util.concurrent.CopyOnWriteArrayList<>();
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mSuspendUponWait = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mOomAdjObserverLock = new java.lang.Object();
        this.mAnrHelper = new com.android.server.am.AnrHelper(this);
        this.mBooted = false;
        this.mDeterministicUidIdle = false;
        this.mUidNetworkBlockedReasons = new android.util.SparseIntArray();
        this.mMediaProjectionTokenMap = new android.util.SparseArray<>();
        this.mLastBinderHeavyHitterAutoSamplerStart = 0L;
        this.mGetBackgroundStartPrivilegesFunctor = new com.android.server.am.ActivityManagerService.GetBackgroundStartPrivilegesFunctor();
        this.mUidFrozenStateChangedCallbackList = new android.os.RemoteCallbackList<>();
        this.mDropboxRateLimiter = new com.android.server.am.DropboxRateLimiter();
        this.mInjector = injector;
        this.mContext = this.mInjector.getContext();
        this.mUiContext = null;
        this.mAppErrors = injector.getAppErrors();
        this.mPackageWatchdog = null;
        this.mAppOpsService = this.mInjector.getAppOpsService(null, null, null);
        this.mBatteryStatsService = this.mInjector.getBatteryStatsService();
        this.mHandler = new com.android.server.am.ActivityManagerService.MainHandler(serviceThread.getLooper());
        this.mHandlerThread = serviceThread;
        this.mConstants = new com.android.server.am.ActivityManagerConstants(this.mContext, this, this.mHandler);
        com.android.server.am.ActiveUids activeUids = new com.android.server.am.ActiveUids(this, false);
        this.mPlatformCompat = null;
        this.mProcessList = injector.getProcessList(this);
        this.mProcessList.init(this, activeUids, this.mPlatformCompat);
        this.mAppProfiler = new com.android.server.am.AppProfiler(this, com.android.internal.os.BackgroundThread.getHandler().getLooper(), null);
        this.mPhantomProcessList = new com.android.server.am.PhantomProcessList(this);
        if (this.mConstants.ENABLE_NEW_OOMADJ) {
            oomAdjuster = new com.android.server.am.OomAdjusterModernImpl(this, this.mProcessList, activeUids, serviceThread);
        } else {
            oomAdjuster = new com.android.server.am.OomAdjuster(this, this.mProcessList, activeUids, serviceThread);
        }
        this.mOomAdjuster = oomAdjuster;
        this.mIntentFirewall = injector.getIntentFirewall();
        this.mProcessStats = new com.android.server.am.ProcessStatsService(this, this.mContext.getCacheDir());
        this.mCpHelper = new com.android.server.am.ContentProviderHelper(this, false);
        this.mServices = this.mInjector.getActiveServices(this);
        this.mSystemThread = null;
        this.mUiHandler = injector.getUiHandler(null);
        this.mUidObserverController = new com.android.server.am.UidObserverController(this.mUiHandler);
        this.mUserController = userController == null ? new com.android.server.am.UserController(this) : userController;
        this.mInjector.mUserController = this.mUserController;
        this.mPendingIntentController = new com.android.server.am.PendingIntentController(serviceThread.getLooper(), this.mUserController, this.mConstants);
        this.mAppRestrictionController = new com.android.server.am.AppRestrictionController(this.mContext, this);
        this.mProcStartHandlerThread = null;
        this.mProcStartHandler = null;
        this.mHiddenApiBlacklist = null;
        this.mFactoryTest = 0;
        this.mUgmInternal = (com.android.server.uri.UriGrantsManagerInternal) com.android.server.LocalServices.getService(com.android.server.uri.UriGrantsManagerInternal.class);
        this.mInternal = new com.android.server.am.ActivityManagerService.LocalService();
        this.mPendingStartActivityUids = new com.android.server.am.PendingStartActivityUids();
        this.mUseFifoUiScheduling = false;
        this.mEnableOffloadQueue = false;
        this.mEnableModernQueue = false;
        this.mBroadcastQueues = injector.getBroadcastQueues(this);
        this.mComponentAliasResolver = new com.android.server.am.ComponentAliasResolver(this);
    }

    public ActivityManagerService(android.content.Context context, com.android.server.wm.ActivityTaskManagerService activityTaskManagerService) {
        com.android.server.am.OomAdjuster oomAdjuster;
        this.mInstrumentationReporter = new com.android.server.am.InstrumentationReporter();
        this.mActiveInstrumentation = new java.util.ArrayList<>();
        this.mOomAdjProfiler = new com.android.server.am.OomAdjProfiler();
        this.mGlobalLock = this;
        this.mProcLock = new com.android.server.am.ActivityManagerProcLock();
        this.mStrictModeCallbacks = new android.util.SparseArray<>();
        this.mDeviceOwnerUid = -1;
        this.mCompanionAppUidsMap = new android.util.ArrayMap();
        this.mProfileOwnerUids = null;
        this.mDeliveryGroupPolicyIgnoredActions = new android.util.ArraySet<>();
        this.mActiveCameraUids = new android.util.IntArray(4);
        this.mPriorityDumper = new com.android.server.utils.PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.1
            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpCritical(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
                if (z) {
                    return;
                }
                com.android.server.am.ActivityManagerService.this.doDump(fileDescriptor, printWriter, new java.lang.String[]{com.android.server.wm.ActivityTaskManagerService.DUMP_ACTIVITIES_CMD}, z);
                com.android.server.am.ActivityManagerService.this.doDump(fileDescriptor, printWriter, new java.lang.String[]{com.android.server.am.HostingRecord.HOSTING_TYPE_SERVICE, "all-platform-critical"}, z);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpNormal(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
                com.android.server.am.ActivityManagerService.this.doDump(fileDescriptor, printWriter, new java.lang.String[]{"-a", "--normal-priority"}, z);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
                com.android.server.am.ActivityManagerService.this.doDump(fileDescriptor, printWriter, strArr, z);
            }
        };
        this.mBackgroundAppIdAllowlist = new int[]{1002};
        this.mHasHomeDelay = new java.util.concurrent.atomic.AtomicBoolean(false);
        this.mThemeOverlayReadyUsers = new java.util.HashSet();
        this.mPidsSelfLocked = new com.android.server.am.ActivityManagerService.PidMap();
        this.mImportantProcesses = new android.util.SparseArray<>();
        this.mProcessesOnHold = new java.util.ArrayList<>();
        this.mPersistentStartingProcesses = new java.util.ArrayList<>();
        this.mActivityLaunchObserver = new com.android.server.wm.ActivityMetricsLaunchObserver() { // from class: com.android.server.am.ActivityManagerService.2
            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onIntentStarted(@android.annotation.NonNull android.content.Intent intent, long j) {
                synchronized (this) {
                    com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onIntentStarted(intent, j);
                }
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onIntentFailed(long j) {
                com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onIntentFailed(j);
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onActivityLaunched(long j, android.content.ComponentName componentName, int i, int i2) {
                com.android.server.am.ProcessRecord processRecord;
                com.android.server.am.ActivityManagerService.this.mAppProfiler.onActivityLaunched();
                com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        try {
                            processRecord = com.android.server.am.ActivityManagerService.this.getProcessRecordLocked(componentName.getPackageName(), com.android.server.am.ActivityManagerService.this.mContext.getPackageManager().getPackageUidAsUser(componentName.getPackageName(), 0, i2));
                        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                            processRecord = null;
                        }
                        com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onActivityLaunched(j, componentName, i, processRecord);
                    } catch (java.lang.Throwable th) {
                        com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onActivityLaunchCancelled(long j) {
                com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onActivityLaunchCancelled(j);
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onActivityLaunchFinished(long j, android.content.ComponentName componentName, long j2, int i) {
                com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onActivityLaunchFinished(j, componentName, j2, i);
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onReportFullyDrawn(long j, long j2) {
                com.android.server.am.ActivityManagerService.this.mProcessList.getAppStartInfoTracker().onReportFullyDrawn(j, j2);
            }
        };
        this.mBinderTransactionTrackingEnabled = false;
        this.mAlreadyLoggedViolatedStacks = new java.util.HashSet<>();
        this.mRegisteredReceivers = new java.util.HashMap<>();
        this.mReceiverResolver = new com.android.server.IntentResolver<com.android.server.am.BroadcastFilter, com.android.server.am.BroadcastFilter>() { // from class: com.android.server.am.ActivityManagerService.3
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean allowFilterResult(com.android.server.am.BroadcastFilter broadcastFilter, java.util.List<com.android.server.am.BroadcastFilter> list) {
                android.os.IBinder asBinder = broadcastFilter.receiverList.receiver.asBinder();
                for (int size = list.size() - 1; size >= 0; size--) {
                    if (list.get(size).receiverList.receiver.asBinder() == asBinder) {
                        return false;
                    }
                }
                return true;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public com.android.server.am.BroadcastFilter newResult(@android.annotation.NonNull com.android.server.pm.Computer computer, com.android.server.am.BroadcastFilter broadcastFilter, int i, int i2, long j) {
                if (i2 == -1 || broadcastFilter.owningUserId == -1 || i2 == broadcastFilter.owningUserId) {
                    return (com.android.server.am.BroadcastFilter) super.newResult(computer, (com.android.server.pm.Computer) broadcastFilter, i, i2, j);
                }
                return null;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public android.content.IntentFilter getIntentFilter(@android.annotation.NonNull com.android.server.am.BroadcastFilter broadcastFilter) {
                return broadcastFilter;
            }

            /* JADX INFO: Access modifiers changed from: protected */
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // com.android.server.IntentResolver
            public com.android.server.am.BroadcastFilter[] newArray(int i) {
                return new com.android.server.am.BroadcastFilter[i];
            }

            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean isPackageForFilter(java.lang.String str, com.android.server.am.BroadcastFilter broadcastFilter) {
                return str.equals(broadcastFilter.packageName);
            }
        };
        this.mStickyBroadcasts = new android.util.SparseArray<>();
        this.mAssociations = new android.util.SparseArray<>();
        this.mBackupTargets = new android.util.SparseArray<>();
        this.mDeviceIdleAllowlist = new int[0];
        this.mDeviceIdleExceptIdleAllowlist = new int[0];
        this.mDeviceIdleTempAllowlist = new int[0];
        this.mPendingTempAllowlist = new com.android.server.am.PendingTempAllowlists(this);
        this.mFgsStartTempAllowList = new com.android.server.am.FgsTempAllowList<>();
        this.mFgsWhileInUseTempAllowList = new com.android.server.am.FgsTempAllowList<>();
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = new java.util.concurrent.atomic.AtomicInteger(1);
        this.mLastIdleTime = android.os.SystemClock.uptimeMillis();
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mCurResumedAppLock = new java.lang.Object();
        this.mForegroundPackages = new com.android.internal.app.ProcessMap<>();
        this.mForegroundServiceStateListeners = new java.util.ArrayList<>();
        this.mBroadcastEventListeners = new java.util.concurrent.CopyOnWriteArrayList<>();
        this.mBindServiceEventListeners = new java.util.concurrent.CopyOnWriteArrayList<>();
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mSuspendUponWait = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mOomAdjObserverLock = new java.lang.Object();
        this.mAnrHelper = new com.android.server.am.AnrHelper(this);
        this.mBooted = false;
        this.mDeterministicUidIdle = false;
        this.mUidNetworkBlockedReasons = new android.util.SparseIntArray();
        this.mMediaProjectionTokenMap = new android.util.SparseArray<>();
        this.mLastBinderHeavyHitterAutoSamplerStart = 0L;
        this.mGetBackgroundStartPrivilegesFunctor = new com.android.server.am.ActivityManagerService.GetBackgroundStartPrivilegesFunctor();
        this.mUidFrozenStateChangedCallbackList = new android.os.RemoteCallbackList<>();
        this.mDropboxRateLimiter = new com.android.server.am.DropboxRateLimiter();
        com.android.server.LockGuard.installLock(this, 7);
        this.mInjector = new com.android.server.am.ActivityManagerService.Injector(context);
        this.mContext = context;
        this.mFactoryTest = android.os.FactoryTest.getMode();
        this.mSystemThread = android.app.ActivityThread.currentActivityThread();
        this.mUiContext = this.mSystemThread.getSystemUiContext();
        android.util.Slog.i("ActivityManager", "Memory class: " + android.app.ActivityManager.staticGetMemoryClass());
        this.mHandlerThread = new com.android.server.ServiceThread("ActivityManager", -2, false);
        this.mHandlerThread.start();
        this.mHandler = new com.android.server.am.ActivityManagerService.MainHandler(this.mHandlerThread.getLooper());
        this.mUiHandler = this.mInjector.getUiHandler(this);
        this.mProcStartHandlerThread = new com.android.server.ServiceThread("ActivityManager:procStart", -2, false);
        this.mProcStartHandlerThread.start();
        this.mProcStartHandler = new com.android.server.am.ProcessList.ProcStartHandler(this, this.mProcStartHandlerThread.getLooper());
        this.mConstants = new com.android.server.am.ActivityManagerConstants(this.mContext, this, this.mHandler);
        com.android.server.am.ActiveUids activeUids = new com.android.server.am.ActiveUids(this, true);
        this.mPlatformCompat = (com.android.server.compat.PlatformCompat) android.os.ServiceManager.getService("platform_compat");
        this.mProcessList = this.mInjector.getProcessList(this);
        this.mProcessList.init(this, activeUids, this.mPlatformCompat);
        this.mAppProfiler = new com.android.server.am.AppProfiler(this, com.android.internal.os.BackgroundThread.getHandler().getLooper(), new com.android.server.am.LowMemDetector(this));
        this.mPhantomProcessList = new com.android.server.am.PhantomProcessList(this);
        if (this.mConstants.ENABLE_NEW_OOMADJ) {
            oomAdjuster = new com.android.server.am.OomAdjusterModernImpl(this, this.mProcessList, activeUids);
        } else {
            oomAdjuster = new com.android.server.am.OomAdjuster(this, this.mProcessList, activeUids);
        }
        this.mOomAdjuster = oomAdjuster;
        this.mEnableOffloadQueue = android.os.SystemProperties.getBoolean("persist.device_config.activity_manager_native_boot.offload_queue_enabled", true);
        this.mEnableModernQueue = new com.android.server.am.BroadcastConstants("bcast_fg_constants").MODERN_QUEUE_ENABLED;
        this.mBroadcastQueues = this.mInjector.getBroadcastQueues(this);
        this.mServices = new com.android.server.am.ActiveServices(this);
        this.mCpHelper = new com.android.server.am.ContentProviderHelper(this, true);
        this.mPackageWatchdog = com.android.server.PackageWatchdog.getInstance(this.mUiContext);
        this.mAppErrors = new com.android.server.am.AppErrors(this.mUiContext, this, this.mPackageWatchdog);
        this.mUidObserverController = new com.android.server.am.UidObserverController(this.mUiHandler);
        java.io.File ensureSystemDir = com.android.server.SystemServiceManager.ensureSystemDir();
        this.mBatteryStatsService = com.android.server.am.BatteryStatsService.create(context, ensureSystemDir, com.android.internal.os.BackgroundThread.getHandler(), this);
        this.mOnBattery = this.mBatteryStatsService.getActiveStatistics().getIsOnBattery();
        this.mOomAdjProfiler.batteryPowerChanged(this.mOnBattery);
        this.mProcessStats = new com.android.server.am.ProcessStatsService(this, new java.io.File(ensureSystemDir, "procstats"));
        this.mAppOpsService = this.mInjector.getAppOpsService(new java.io.File(ensureSystemDir, "appops_accesses.xml"), new java.io.File(ensureSystemDir, "appops.xml"), this.mHandler);
        this.mUgmInternal = (com.android.server.uri.UriGrantsManagerInternal) com.android.server.LocalServices.getService(com.android.server.uri.UriGrantsManagerInternal.class);
        this.mUserController = new com.android.server.am.UserController(this);
        this.mInjector.mUserController = this.mUserController;
        this.mPendingIntentController = new com.android.server.am.PendingIntentController(this.mHandlerThread.getLooper(), this.mUserController, this.mConstants);
        this.mAppRestrictionController = new com.android.server.am.AppRestrictionController(this.mContext, this);
        this.mUseFifoUiScheduling = android.os.SystemProperties.getInt("sys.use_fifo_ui", 0) != 0;
        this.mTrackingAssociations = "1".equals(android.os.SystemProperties.get("debug.track-associations"));
        this.mIntentFirewall = new com.android.server.firewall.IntentFirewall(new com.android.server.am.ActivityManagerService.IntentFirewallInterface(), this.mHandler);
        this.mActivityTaskManager = activityTaskManagerService;
        this.mActivityTaskManager.initialize(this.mIntentFirewall, this.mPendingIntentController, com.android.server.DisplayThread.get().getLooper());
        this.mAtmInternal = (com.android.server.wm.ActivityTaskManagerInternal) com.android.server.LocalServices.getService(com.android.server.wm.ActivityTaskManagerInternal.class);
        this.mHiddenApiBlacklist = new com.android.server.am.ActivityManagerService.HiddenApiSettings(this.mHandler, this.mContext);
        com.android.server.Watchdog.getInstance().addMonitor(this);
        com.android.server.Watchdog.getInstance().addThread(this.mHandler);
        updateOomAdjLocked(14);
        try {
            android.os.Process.setThreadGroupAndCpuset(com.android.internal.os.BackgroundThread.get().getThreadId(), 2);
            android.os.Process.setThreadGroupAndCpuset(this.mOomAdjuster.mCachedAppOptimizer.mCachedAppOptimizerThread.getThreadId(), 2);
        } catch (java.lang.Exception e) {
            android.util.Slog.w("ActivityManager", "Setting background thread cpuset failed");
        }
        this.mInternal = new com.android.server.am.ActivityManagerService.LocalService();
        this.mPendingStartActivityUids = new com.android.server.am.PendingStartActivityUids();
        this.mTraceErrorLogger = new com.android.server.am.TraceErrorLogger();
        this.mComponentAliasResolver = new com.android.server.am.ComponentAliasResolver(this);
    }

    public void setSystemServiceManager(com.android.server.SystemServiceManager systemServiceManager) {
        this.mSystemServiceManager = systemServiceManager;
    }

    public void setInstaller(com.android.server.pm.Installer installer) {
        this.mInstaller = installer;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void start() {
        this.mBatteryStatsService.publish();
        this.mAppOpsService.publish();
        this.mProcessStats.publish();
        android.util.Slog.d("AppOps", "AppOpsService published");
        com.android.server.LocalServices.addService(android.app.ActivityManagerInternal.class, this.mInternal);
        com.android.server.LocalManagerRegistry.addManager(com.android.server.am.ActivityManagerLocal.class, this.mInternal);
        this.mActivityTaskManager.onActivityManagerInternalAdded();
        this.mPendingIntentController.onActivityManagerInternalAdded();
        this.mAppProfiler.onActivityManagerInternalAdded();
        com.android.server.criticalevents.CriticalEventLog.init();
    }

    public void initPowerManagement() {
        this.mActivityTaskManager.onInitPowerManagement();
        this.mBatteryStatsService.initPowerManagement();
        this.mLocalPowerManager = (android.os.PowerManagerInternal) com.android.server.LocalServices.getService(android.os.PowerManagerInternal.class);
    }

    private android.util.ArraySet<java.lang.String> getBackgroundLaunchBroadcasts() {
        if (this.mBackgroundLaunchBroadcasts == null) {
            this.mBackgroundLaunchBroadcasts = com.android.server.SystemConfig.getInstance().getAllowImplicitBroadcasts();
        }
        return this.mBackgroundLaunchBroadcasts;
    }

    void requireAllowedAssociationsLocked(java.lang.String str) {
        ensureAllowedAssociations();
        if (this.mAllowedAssociations.get(str) == null) {
            this.mAllowedAssociations.put(str, new com.android.server.am.ActivityManagerService.PackageAssociationInfo(str, new android.util.ArraySet(), false));
        }
    }

    boolean validateAssociationAllowedLocked(java.lang.String str, int i, java.lang.String str2, int i2) {
        ensureAllowedAssociations();
        if (i == i2 || android.os.UserHandle.getAppId(i) == 1000 || android.os.UserHandle.getAppId(i2) == 1000) {
            return true;
        }
        com.android.server.am.ActivityManagerService.PackageAssociationInfo packageAssociationInfo = this.mAllowedAssociations.get(str);
        if (packageAssociationInfo != null && !packageAssociationInfo.isPackageAssociationAllowed(str2)) {
            return false;
        }
        com.android.server.am.ActivityManagerService.PackageAssociationInfo packageAssociationInfo2 = this.mAllowedAssociations.get(str2);
        if (packageAssociationInfo2 == null || packageAssociationInfo2.isPackageAssociationAllowed(str)) {
            return true;
        }
        return false;
    }

    private void ensureAllowedAssociations() {
        boolean z;
        if (this.mAllowedAssociations == null) {
            android.util.ArrayMap<java.lang.String, android.util.ArraySet<java.lang.String>> allowedAssociations = com.android.server.SystemConfig.getInstance().getAllowedAssociations();
            this.mAllowedAssociations = new android.util.ArrayMap<>(allowedAssociations.size());
            getPackageManagerInternal();
            for (int i = 0; i < allowedAssociations.size(); i++) {
                java.lang.String keyAt = allowedAssociations.keyAt(i);
                android.util.ArraySet<java.lang.String> valueAt = allowedAssociations.valueAt(i);
                try {
                    android.content.pm.ApplicationInfo applicationInfo = android.app.AppGlobals.getPackageManager().getApplicationInfo(keyAt, 131072L, 0);
                    if (applicationInfo == null) {
                        z = false;
                    } else {
                        z = (applicationInfo.flags & 2) != 0;
                    }
                } catch (android.os.RemoteException e) {
                    z = false;
                }
                this.mAllowedAssociations.put(keyAt, new com.android.server.am.ActivityManagerService.PackageAssociationInfo(keyAt, valueAt, z));
            }
        }
    }

    private void updateAssociationForApp(android.content.pm.ApplicationInfo applicationInfo) {
        ensureAllowedAssociations();
        com.android.server.am.ActivityManagerService.PackageAssociationInfo packageAssociationInfo = this.mAllowedAssociations.get(applicationInfo.packageName);
        if (packageAssociationInfo != null) {
            packageAssociationInfo.setDebuggable((applicationInfo.flags & 2) != 0);
        }
    }

    public boolean onTransact(int i, android.os.Parcel parcel, android.os.Parcel parcel2, int i2) throws android.os.RemoteException {
        int i3;
        if (i == 1599295570) {
            java.util.ArrayList arrayList = new java.util.ArrayList();
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    android.util.ArrayMap map = this.mProcessList.getProcessNamesLOSP().getMap();
                    int size = map.size();
                    for (int i4 = 0; i4 < size; i4++) {
                        android.util.SparseArray sparseArray = (android.util.SparseArray) map.valueAt(i4);
                        int size2 = sparseArray.size();
                        for (int i5 = 0; i5 < size2; i5++) {
                            android.app.IApplicationThread thread = ((com.android.server.am.ProcessRecord) sparseArray.valueAt(i5)).getThread();
                            if (thread != null) {
                                arrayList.add(thread.asBinder());
                            }
                        }
                    }
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            int size3 = arrayList.size();
            for (i3 = 0; i3 < size3; i3++) {
                android.os.Parcel obtain = android.os.Parcel.obtain();
                try {
                    ((android.os.IBinder) arrayList.get(i3)).transact(1599295570, obtain, null, 1);
                } catch (android.os.RemoteException e) {
                }
                obtain.recycle();
            }
        }
        try {
            return super.onTransact(i, parcel, parcel2, i2);
        } catch (java.lang.RuntimeException e2) {
            if (!(e2 instanceof java.lang.SecurityException) && !(e2 instanceof java.lang.IllegalArgumentException) && !(e2 instanceof java.lang.IllegalStateException)) {
                android.util.Slog.wtf("ActivityManager", "Activity Manager Crash. UID:" + android.os.Binder.getCallingUid() + " PID:" + android.os.Binder.getCallingPid() + " TRANS:" + i, e2);
            }
            throw e2;
        }
    }

    void updateCpuStats() {
        this.mAppProfiler.updateCpuStats();
    }

    void updateCpuStatsNow() {
        this.mAppProfiler.updateCpuStatsNow();
    }

    @Override // com.android.server.power.stats.BatteryStatsImpl.BatteryCallback
    public void batteryNeedsCpuUpdate() {
        updateCpuStatsNow();
    }

    @Override // com.android.server.power.stats.BatteryStatsImpl.BatteryCallback
    public void batteryPowerChanged(boolean z) {
        updateCpuStatsNow();
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mOnBattery = z;
                this.mOomAdjProfiler.batteryPowerChanged(z);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    @Override // com.android.server.power.stats.BatteryStatsImpl.BatteryCallback
    public void batteryStatsReset() {
        this.mOomAdjProfiler.reset();
    }

    @Override // com.android.server.power.stats.BatteryStatsImpl.BatteryCallback
    public void batterySendBroadcast(android.content.Intent intent) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, null, false, false, -1, 1000, android.os.Binder.getCallingUid(), android.os.Binder.getCallingPid(), -1);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    private android.util.ArrayMap<java.lang.String, android.os.IBinder> getCommonServicesLocked(boolean z) {
        if (z) {
            if (this.mIsolatedAppBindArgs == null) {
                this.mIsolatedAppBindArgs = new android.util.ArrayMap<>(1);
                addServiceToMap(this.mIsolatedAppBindArgs, com.android.server.pm.Settings.ATTR_PACKAGE);
                addServiceToMap(this.mIsolatedAppBindArgs, "permissionmgr");
            }
            return this.mIsolatedAppBindArgs;
        }
        if (this.mAppBindArgs == null) {
            this.mAppBindArgs = new android.util.ArrayMap<>();
            addServiceToMap(this.mAppBindArgs, com.android.server.pm.Settings.ATTR_PACKAGE);
            addServiceToMap(this.mAppBindArgs, "permissionmgr");
            addServiceToMap(this.mAppBindArgs, "window");
            addServiceToMap(this.mAppBindArgs, com.android.server.am.HostingRecord.TRIGGER_TYPE_ALARM);
            addServiceToMap(this.mAppBindArgs, "display");
            addServiceToMap(this.mAppBindArgs, "network_management");
            addServiceToMap(this.mAppBindArgs, "connectivity");
            addServiceToMap(this.mAppBindArgs, "accessibility");
            addServiceToMap(this.mAppBindArgs, "input_method");
            addServiceToMap(this.mAppBindArgs, "input");
            addServiceToMap(this.mAppBindArgs, "graphicsstats");
            addServiceToMap(this.mAppBindArgs, "appops");
            addServiceToMap(this.mAppBindArgs, com.android.server.wm.ActivityTaskManagerInternal.ASSIST_KEY_CONTENT);
            addServiceToMap(this.mAppBindArgs, "jobscheduler");
            addServiceToMap(this.mAppBindArgs, "notification");
            addServiceToMap(this.mAppBindArgs, "vibrator");
            addServiceToMap(this.mAppBindArgs, "account");
            addServiceToMap(this.mAppBindArgs, "power");
            addServiceToMap(this.mAppBindArgs, "user");
            addServiceToMap(this.mAppBindArgs, "mount");
            addServiceToMap(this.mAppBindArgs, "platform_compat");
        }
        return this.mAppBindArgs;
    }

    private static void addServiceToMap(android.util.ArrayMap<java.lang.String, android.os.IBinder> arrayMap, java.lang.String str) {
        android.os.IBinder service = android.os.ServiceManager.getService(str);
        if (service != null) {
            arrayMap.put(str, service);
        }
    }

    public void setFocusedRootTask(int i) {
        this.mActivityTaskManager.setFocusedRootTask(i);
    }

    public void registerTaskStackListener(android.app.ITaskStackListener iTaskStackListener) {
        this.mActivityTaskManager.registerTaskStackListener(iTaskStackListener);
    }

    public void unregisterTaskStackListener(android.app.ITaskStackListener iTaskStackListener) {
        this.mActivityTaskManager.unregisterTaskStackListener(iTaskStackListener);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void updateLruProcessLocked(com.android.server.am.ProcessRecord processRecord, boolean z, com.android.server.am.ProcessRecord processRecord2) {
        this.mProcessList.updateLruProcessLocked(processRecord, z, processRecord2);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void removeLruProcessLocked(com.android.server.am.ProcessRecord processRecord) {
        this.mProcessList.removeLruProcessLocked(processRecord);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final com.android.server.am.ProcessRecord getProcessRecordLocked(java.lang.String str, int i) {
        return this.mProcessList.getProcessRecordLocked(str, i);
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    final com.android.internal.app.ProcessMap<com.android.server.am.ProcessRecord> getProcessNamesLOSP() {
        return this.mProcessList.getProcessNamesLOSP();
    }

    void notifyPackageUse(java.lang.String str, int i) {
        getPackageManagerInternal().notifyPackageUse(str, i);
    }

    boolean startIsolatedProcess(java.lang.String str, java.lang.String[] strArr, java.lang.String str2, java.lang.String str3, int i, java.lang.Runnable runnable) {
        boolean z;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                android.content.pm.ApplicationInfo applicationInfo = new android.content.pm.ApplicationInfo();
                applicationInfo.uid = 1000;
                applicationInfo.processName = str2;
                applicationInfo.className = str;
                applicationInfo.packageName = com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME;
                applicationInfo.seInfoUser = com.android.server.pm.pkg.SELinuxUtil.COMPLETE_STR;
                applicationInfo.targetSdkVersion = android.os.Build.VERSION.SDK_INT;
                z = this.mProcessList.startProcessLocked(str2, applicationInfo, false, 0, sNullHostingRecord, 0, true, true, i, false, 0, null, str3, str, strArr, runnable) != null;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final com.android.server.am.ProcessRecord startSdkSandboxProcessLocked(java.lang.String str, android.content.pm.ApplicationInfo applicationInfo, boolean z, int i, com.android.server.am.HostingRecord hostingRecord, int i2, int i3, java.lang.String str2) {
        return this.mProcessList.startProcessLocked(str, applicationInfo, z, i, hostingRecord, i2, false, false, 0, true, i3, str2, null, null, null, null);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final com.android.server.am.ProcessRecord startProcessLocked(java.lang.String str, android.content.pm.ApplicationInfo applicationInfo, boolean z, int i, com.android.server.am.HostingRecord hostingRecord, int i2, boolean z2, boolean z3) {
        return this.mProcessList.startProcessLocked(str, applicationInfo, z, i, hostingRecord, i2, z2, z3, 0, false, 0, null, null, null, null, null);
    }

    boolean isAllowedWhileBooting(android.content.pm.ApplicationInfo applicationInfo) {
        return (applicationInfo.flags & 8) != 0;
    }

    void updateBatteryStats(android.content.ComponentName componentName, int i, int i2, boolean z) {
        this.mBatteryStatsService.updateBatteryStatsOnActivityUsage(componentName.getPackageName(), componentName.getShortClassName(), i, i2, z);
    }

    public void updateActivityUsageStats(android.content.ComponentName componentName, int i, int i2, android.os.IBinder iBinder, android.content.ComponentName componentName2, android.app.assist.ActivityId activityId) {
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(componentName, i, i2, iBinder.hashCode(), componentName2);
            if (i2 == 1) {
                this.mUsageStatsService.reportEvent(componentName.getPackageName(), i, 31);
            }
        }
        com.android.server.contentcapture.ContentCaptureManagerInternal contentCaptureManagerInternal = this.mContentCaptureService;
        if (contentCaptureManagerInternal != null && (i2 == 2 || i2 == 1 || i2 == 23 || i2 == 24)) {
            contentCaptureManagerInternal.notifyActivityEvent(i, componentName, i2, activityId);
        }
        if (this.mVoiceInteractionManagerProvider != null && i2 == 24) {
            this.mVoiceInteractionManagerProvider.notifyActivityDestroyed(iBinder);
        }
    }

    public void updateActivityUsageStats(java.lang.String str, int i, int i2) {
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(str, i, i2);
        }
    }

    void updateForegroundServiceUsageStats(android.content.ComponentName componentName, int i, boolean z) {
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(componentName, i, z ? 19 : 20, 0, null);
        }
    }

    android.content.res.CompatibilityInfo compatibilityInfoForPackage(android.content.pm.ApplicationInfo applicationInfo) {
        return this.mAtmInternal.compatibilityInfoForPackage(applicationInfo);
    }

    void enforceNotIsolatedCaller(java.lang.String str) {
        if (android.os.UserHandle.isIsolated(android.os.Binder.getCallingUid())) {
            throw new java.lang.SecurityException("Isolated process not allowed to call " + str);
        }
    }

    void enforceNotIsolatedOrSdkSandboxCaller(java.lang.String str) {
        enforceNotIsolatedCaller(str);
        if (android.os.Process.isSdkSandboxUid(android.os.Binder.getCallingUid())) {
            throw new java.lang.SecurityException("SDK sandbox process not allowed to call " + str);
        }
    }

    private void enforceAllowedToStartOrBindServiceIfSdkSandbox(android.content.Intent intent) {
        if (android.os.Process.isSdkSandboxUid(android.os.Binder.getCallingUid())) {
            com.android.server.sdksandbox.SdkSandboxManagerLocal sdkSandboxManagerLocal = (com.android.server.sdksandbox.SdkSandboxManagerLocal) com.android.server.LocalManagerRegistry.getManager(com.android.server.sdksandbox.SdkSandboxManagerLocal.class);
            if (sdkSandboxManagerLocal != null) {
                sdkSandboxManagerLocal.enforceAllowedToStartOrBindService(intent);
                return;
            }
            throw new java.lang.IllegalStateException("SdkSandboxManagerLocal not found when checking whether SDK sandbox uid may start or bind to a service.");
        }
    }

    private void enforceCallingPackage(java.lang.String str, int i) {
        if (getPackageManagerInternal().getPackageUid(str, 0L, android.os.UserHandle.getUserId(i)) != i) {
            throw new java.lang.SecurityException(str + " does not belong to uid " + i);
        }
    }

    public void setPackageScreenCompatMode(java.lang.String str, int i) {
        this.mActivityTaskManager.setPackageScreenCompatMode(str, i);
    }

    private boolean hasUsageStatsPermission(java.lang.String str, int i, int i2) {
        int opMode = this.mAppOpsService.noteOperation(43, i, str, null, false, "", false).getOpMode();
        return opMode == 3 ? checkPermission("android.permission.PACKAGE_USAGE_STATS", i2, i) == 0 : opMode == 0;
    }

    private boolean hasUsageStatsPermission(java.lang.String str) {
        return hasUsageStatsPermission(str, android.os.Binder.getCallingUid(), android.os.Binder.getCallingPid());
    }

    private void enforceUsageStatsPermission(java.lang.String str, int i, int i2, java.lang.String str2) {
        if (!hasUsageStatsPermission(str, i, i2)) {
            throw new java.lang.SecurityException("Permission denial for <" + str2 + "> from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " which requires PACKAGE_USAGE_STATS permission");
        }
    }

    public int getPackageProcessState(final java.lang.String str, java.lang.String str2) {
        if (!hasUsageStatsPermission(str2)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getPackageProcessState");
        }
        final int[] iArr = {20};
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(false, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda0
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.am.ActivityManagerService.lambda$getPackageProcessState$0(iArr, str, (com.android.server.am.ProcessRecord) obj);
                    }
                });
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return iArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getPackageProcessState$0(int[] iArr, java.lang.String str, com.android.server.am.ProcessRecord processRecord) {
        if (iArr[0] > processRecord.mState.getSetProcState()) {
            if (processRecord.getPkgList().containsKey(str) || (processRecord.getPkgDeps() != null && processRecord.getPkgDeps().contains(str))) {
                iArr[0] = processRecord.mState.getSetProcState();
            }
        }
    }

    public boolean setProcessMemoryTrimLevel(java.lang.String str, int i, int i2) throws android.os.RemoteException {
        if (!isCallerShell()) {
            throw new java.lang.SecurityException("Only shell can call it");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ProcessRecord findProcessLOSP = findProcessLOSP(str, i, "setProcessMemoryTrimLevel");
                if (findProcessLOSP == null) {
                    throw new java.lang.IllegalArgumentException("Unknown process: " + str);
                }
                android.app.IApplicationThread thread = findProcessLOSP.getThread();
                if (thread == null) {
                    throw new java.lang.IllegalArgumentException("Process has no app thread");
                }
                if (findProcessLOSP.mProfile.getTrimMemoryLevel() >= i2) {
                    throw new java.lang.IllegalArgumentException("Unable to set a higher trim level than current level");
                }
                if (i2 >= 20 && findProcessLOSP.mState.getCurProcState() <= 6) {
                    throw new java.lang.IllegalArgumentException("Unable to set a background trim level on a foreground process");
                }
                thread.scheduleTrimMemory(i2);
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        findProcessLOSP.mProfile.setTrimMemoryLevel(i2);
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    void dispatchOomAdjObserver(java.lang.String str) {
        com.android.server.am.ActivityManagerService.OomAdjObserver oomAdjObserver;
        synchronized (this.mOomAdjObserverLock) {
            oomAdjObserver = this.mCurOomAdjObserver;
        }
        if (oomAdjObserver != null) {
            oomAdjObserver.onOomAdjMessage(str);
        }
    }

    void setOomAdjObserver(int i, com.android.server.am.ActivityManagerService.OomAdjObserver oomAdjObserver) {
        synchronized (this.mOomAdjObserverLock) {
            this.mCurOomAdjUid = i;
            this.mCurOomAdjObserver = oomAdjObserver;
        }
    }

    void clearOomAdjObserver() {
        synchronized (this.mOomAdjObserverLock) {
            this.mCurOomAdjUid = -1;
            this.mCurOomAdjObserver = null;
        }
    }

    void reportUidInfoMessageLocked(java.lang.String str, java.lang.String str2, int i) {
        android.util.Slog.i("ActivityManager", str2);
        synchronized (this.mOomAdjObserverLock) {
            try {
                if (this.mCurOomAdjObserver != null && i == this.mCurOomAdjUid) {
                    this.mUiHandler.obtainMessage(70, str2).sendToTarget();
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    @java.lang.Deprecated
    public int startActivity(android.app.IApplicationThread iApplicationThread, java.lang.String str, android.content.Intent intent, java.lang.String str2, android.os.IBinder iBinder, java.lang.String str3, int i, int i2, android.app.ProfilerInfo profilerInfo, android.os.Bundle bundle) {
        return this.mActivityTaskManager.startActivity(iApplicationThread, str, null, intent, str2, iBinder, str3, i, i2, profilerInfo, bundle);
    }

    public int startActivityWithFeature(android.app.IApplicationThread iApplicationThread, java.lang.String str, java.lang.String str2, android.content.Intent intent, java.lang.String str3, android.os.IBinder iBinder, java.lang.String str4, int i, int i2, android.app.ProfilerInfo profilerInfo, android.os.Bundle bundle) {
        return this.mActivityTaskManager.startActivity(iApplicationThread, str, str2, intent, str3, iBinder, str4, i, i2, profilerInfo, bundle);
    }

    @java.lang.Deprecated
    public final int startActivityAsUser(android.app.IApplicationThread iApplicationThread, java.lang.String str, android.content.Intent intent, java.lang.String str2, android.os.IBinder iBinder, java.lang.String str3, int i, int i2, android.app.ProfilerInfo profilerInfo, android.os.Bundle bundle, int i3) {
        return startActivityAsUserWithFeature(iApplicationThread, str, null, intent, str2, iBinder, str3, i, i2, profilerInfo, bundle, i3);
    }

    public final int startActivityAsUserWithFeature(android.app.IApplicationThread iApplicationThread, java.lang.String str, java.lang.String str2, android.content.Intent intent, java.lang.String str3, android.os.IBinder iBinder, java.lang.String str4, int i, int i2, android.app.ProfilerInfo profilerInfo, android.os.Bundle bundle, int i3) {
        return this.mActivityTaskManager.startActivityAsUser(iApplicationThread, str, str2, intent, str3, iBinder, str4, i, i2, profilerInfo, bundle, i3);
    }

    android.app.WaitResult startActivityAndWait(android.app.IApplicationThread iApplicationThread, java.lang.String str, @android.annotation.Nullable java.lang.String str2, android.content.Intent intent, java.lang.String str3, android.os.IBinder iBinder, java.lang.String str4, int i, int i2, android.app.ProfilerInfo profilerInfo, android.os.Bundle bundle, int i3) {
        return this.mActivityTaskManager.startActivityAndWait(iApplicationThread, str, str2, intent, str3, iBinder, str4, i, i2, profilerInfo, bundle, i3);
    }

    public final int startActivityFromRecents(int i, android.os.Bundle bundle) {
        return this.mActivityTaskManager.startActivityFromRecents(i, bundle);
    }

    public final boolean finishActivity(android.os.IBinder iBinder, int i, android.content.Intent intent, int i2) {
        return android.app.ActivityClient.getInstance().finishActivity(iBinder, i, intent, i2);
    }

    public void setRequestedOrientation(android.os.IBinder iBinder, int i) {
        android.app.ActivityClient.getInstance().setRequestedOrientation(iBinder, i);
    }

    public final void finishHeavyWeightApp() {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            java.lang.String str = "Permission Denial: finishHeavyWeightApp() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            android.util.Slog.w("ActivityManager", str);
            throw new java.lang.SecurityException(str);
        }
        this.mAtmInternal.finishHeavyWeightApp();
    }

    public void crashApplicationWithType(int i, int i2, java.lang.String str, int i3, java.lang.String str2, boolean z, int i4) {
        crashApplicationWithTypeWithExtras(i, i2, str, i3, str2, z, i4, null);
    }

    public void crashApplicationWithTypeWithExtras(int i, int i2, java.lang.String str, int i3, java.lang.String str2, boolean z, int i4, @android.annotation.Nullable android.os.Bundle bundle) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            java.lang.String str3 = "Permission Denial: crashApplication() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            android.util.Slog.w("ActivityManager", str3);
            throw new java.lang.SecurityException(str3);
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mAppErrors.scheduleAppCrashLocked(i, i2, str, i3, str2, z, i4, bundle);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void handleAppDiedLocked(final com.android.server.am.ProcessRecord processRecord, int i, boolean z, boolean z2, boolean z3) {
        if (!cleanUpApplicationRecordLocked(processRecord, i, z, z2, -1, false, z3) && !z) {
            removeLruProcessLocked(processRecord);
            if (i > 0) {
                com.android.server.am.ProcessList.remove(i);
            }
        }
        this.mAppProfiler.onAppDiedLocked(processRecord);
        this.mAtmInternal.handleAppDied(processRecord.getWindowProcessController(), z, new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda1
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.am.ActivityManagerService.this.lambda$handleAppDiedLocked$1(processRecord);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$handleAppDiedLocked$1(com.android.server.am.ProcessRecord processRecord) {
        android.util.Slog.w("ActivityManager", "Crash of app " + processRecord.processName + " running instrumentation " + processRecord.getActiveInstrumentation().mClass);
        android.os.Bundle bundle = new android.os.Bundle();
        bundle.putString("shortMsg", "Process crashed.");
        finishInstrumentationLocked(processRecord, 0, bundle);
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    com.android.server.am.ProcessRecord getRecordForAppLOSP(android.app.IApplicationThread iApplicationThread) {
        if (iApplicationThread == null) {
            return null;
        }
        return getRecordForAppLOSP(iApplicationThread.asBinder());
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    com.android.server.am.ProcessRecord getRecordForAppLOSP(android.os.IBinder iBinder) {
        if (iBinder == null) {
            return null;
        }
        com.android.server.am.ProcessRecord lRURecordForAppLOSP = this.mProcessList.getLRURecordForAppLOSP(iBinder);
        if (lRURecordForAppLOSP != null) {
            return lRURecordForAppLOSP;
        }
        android.util.ArrayMap map = this.mProcessList.getProcessNamesLOSP().getMap();
        for (int size = map.size() - 1; size >= 0; size--) {
            android.util.SparseArray sparseArray = (android.util.SparseArray) map.valueAt(size);
            for (int size2 = sparseArray.size() - 1; size2 >= 0; size2--) {
                com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) sparseArray.valueAt(size2);
                android.app.IApplicationThread thread = processRecord.getThread();
                if (thread != null && thread.asBinder() == iBinder) {
                    if (!processRecord.isPendingFinishAttach()) {
                        android.util.Slog.wtf("ActivityManager", "getRecordForApp: exists in name list but not in LRU list: " + processRecord);
                    }
                    return processRecord;
                }
            }
        }
        return null;
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void appDiedLocked(com.android.server.am.ProcessRecord processRecord, java.lang.String str) {
        appDiedLocked(processRecord, processRecord.getPid(), processRecord.getThread(), false, str);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void appDiedLocked(com.android.server.am.ProcessRecord processRecord, int i, android.app.IApplicationThread iApplicationThread, boolean z, java.lang.String str) {
        com.android.server.am.ProcessRecord processRecord2;
        android.app.IApplicationThread thread;
        synchronized (this.mPidsSelfLocked) {
            processRecord2 = this.mPidsSelfLocked.get(i);
        }
        if (processRecord2 != processRecord) {
            if (!z || !this.mProcessList.handleDyingAppDeathLocked(processRecord, i)) {
                android.util.Slog.w("ActivityManager", "Spurious death for " + processRecord + ", curProc for " + i + ": " + processRecord2);
                return;
            }
            return;
        }
        this.mBatteryStatsService.noteProcessDied(processRecord.info.uid, i);
        boolean z2 = false;
        if (!processRecord.isKilled()) {
            if (!z) {
                android.os.Process.killProcessQuiet(i);
                this.mProcessList.noteAppKill(processRecord, 13, 0, str);
            }
            processRecord.killProcessGroupIfNecessaryLocked(true);
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    processRecord.setKilled(true);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
        }
        int setAdj = processRecord.mState.getSetAdj();
        int setProcState = processRecord.mState.getSetProcState();
        if (processRecord.getPid() == i && (thread = processRecord.getThread()) != null && thread.asBinder() == iApplicationThread.asBinder()) {
            boolean z3 = processRecord.getActiveInstrumentation() == null;
            if (!processRecord.isKilledByAm()) {
                reportUidInfoMessageLocked("ActivityManager", "Process " + processRecord.processName + " (pid " + i + ") has died: " + com.android.server.am.ProcessList.makeOomAdjString(setAdj, true) + " " + com.android.server.am.ProcessList.makeProcStateString(setProcState), processRecord.info.uid);
                this.mAppProfiler.setAllowLowerMemLevelLocked(true);
                z2 = z3;
            } else {
                this.mAppProfiler.setAllowLowerMemLevelLocked(false);
            }
            com.android.server.am.EventLogTags.writeAmProcDied(processRecord.userId, i, processRecord.processName, setAdj, setProcState);
            handleAppDiedLocked(processRecord, i, false, true, z);
            if (z3) {
                updateOomAdjLocked(12);
            }
            if (z2) {
                this.mAppProfiler.doLowMemReportIfNeededLocked(processRecord);
            }
        } else if (processRecord.getPid() != i) {
            reportUidInfoMessageLocked("ActivityManager", "Process " + processRecord.processName + " (pid " + i + ") has died and restarted (pid " + processRecord.getPid() + ").", processRecord.info.uid);
            com.android.server.am.EventLogTags.writeAmProcDied(processRecord.userId, processRecord.getPid(), processRecord.processName, setAdj, setProcState);
        }
        if (!com.android.server.am.MemoryStatUtil.hasMemcg()) {
            com.android.internal.util.FrameworkStatsLog.write(65, android.os.SystemClock.elapsedRealtime());
        }
    }

    public boolean clearApplicationUserData(java.lang.String str, boolean z, android.content.pm.IPackageDataObserver iPackageDataObserver, int i) {
        return clearApplicationUserData(str, z, false, iPackageDataObserver, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r17v0 */
    /* JADX WARN: Type inference failed for: r17v10 */
    /* JADX WARN: Type inference failed for: r17v11 */
    /* JADX WARN: Type inference failed for: r17v3 */
    /* JADX WARN: Type inference failed for: r17v5 */
    /* JADX WARN: Type inference failed for: r17v6, types: [long] */
    /* JADX WARN: Type inference failed for: r17v9 */
    public boolean clearApplicationUserData(java.lang.String str, boolean z, final boolean z2, final android.content.pm.IPackageDataObserver iPackageDataObserver, int i) {
        long j;
        android.content.pm.IPackageManager packageManager;
        boolean z3;
        android.content.pm.ApplicationInfo applicationInfo;
        enforceNotIsolatedCaller("clearApplicationUserData");
        int callingUid = android.os.Binder.getCallingUid();
        int callingPid = android.os.Binder.getCallingPid();
        android.util.EventLog.writeEvent(com.android.server.am.EventLogTags.AM_CLEAR_APP_DATA_CALLER, java.lang.Integer.valueOf(callingPid), java.lang.Integer.valueOf(callingUid), str);
        ?? r17 = 0;
        r17 = 0;
        r17 = 0;
        final int handleIncomingUser = this.mUserController.handleIncomingUser(callingPid, callingUid, i, false, 2, "clearApplicationUserData", null);
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            packageManager = android.app.AppGlobals.getPackageManager();
            if (!getPackageManagerInternal().isPackageDataProtected(handleIncomingUser, str)) {
                z3 = true;
            } else {
                if (android.app.ActivityManager.checkUidPermission("android.permission.MANAGE_USERS", callingUid) == 0) {
                    throw new java.lang.SecurityException("Cannot clear data for a protected package: " + str);
                }
                z3 = false;
            }
            android.content.pm.ApplicationInfo applicationInfo2 = null;
            if (z3) {
                try {
                    applicationInfo2 = packageManager.getApplicationInfo(str, 8192L, handleIncomingUser);
                } catch (android.os.RemoteException e) {
                }
                z3 = (applicationInfo2 != null && applicationInfo2.uid == callingUid) || checkComponentPermission("android.permission.CLEAR_APP_USER_DATA", callingPid, callingUid, -1, true) == 0;
                applicationInfo = applicationInfo2;
            } else {
                applicationInfo = null;
            }
        } catch (java.lang.Throwable th) {
            th = th;
            j = clearCallingIdentity;
        }
        try {
            if (!z3) {
                throw new java.lang.SecurityException("PID " + callingPid + " does not have permission android.permission.CLEAR_APP_USER_DATA to clear data of package " + str);
            }
            boolean hasInstantApplicationMetadata = getPackageManagerInternal().hasInstantApplicationMetadata(str, handleIncomingUser);
            boolean z4 = applicationInfo == null && !hasInstantApplicationMetadata;
            boolean z5 = (applicationInfo != null && applicationInfo.isInstantApp()) || hasInstantApplicationMetadata;
            boolean z6 = checkComponentPermission("android.permission.ACCESS_INSTANT_APPS", callingPid, callingUid, -1, true) == 0;
            if (z4) {
                r17 = clearCallingIdentity;
            } else {
                if (!z5 || z6) {
                    boostPriorityForLockedSection();
                    synchronized (this) {
                        if (applicationInfo != null) {
                            try {
                                forceStopPackageLocked(str, applicationInfo.uid, "clear data");
                                this.mAtmInternal.removeRecentTasksByPackageName(str, handleIncomingUser);
                            } catch (java.lang.Throwable th2) {
                                th = th2;
                                while (true) {
                                    try {
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    } catch (java.lang.Throwable th3) {
                                        th = th3;
                                    }
                                }
                            }
                        }
                    }
                    resetPriorityAfterLockedSection();
                    final android.content.pm.ApplicationInfo applicationInfo3 = applicationInfo;
                    android.content.pm.ApplicationInfo applicationInfo4 = applicationInfo;
                    final boolean z7 = z5;
                    try {
                        packageManager.clearApplicationUserData(str, new android.content.pm.IPackageDataObserver.Stub() { // from class: com.android.server.am.ActivityManagerService.6
                            public void onRemoveCompleted(java.lang.String str2, boolean z8) throws android.os.RemoteException {
                                if (applicationInfo3 != null) {
                                    com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
                                    com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                                    synchronized (activityManagerService) {
                                        try {
                                            com.android.server.am.ActivityManagerService.this.finishForceStopPackageLocked(str2, applicationInfo3.uid);
                                        } catch (java.lang.Throwable th4) {
                                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                                            throw th4;
                                        }
                                    }
                                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                                }
                                if (z8) {
                                    com.android.server.am.ActivityManagerService.this.mPackageManagerInt.sendPackageDataClearedBroadcast(str2, applicationInfo3 != null ? applicationInfo3.uid : -1, handleIncomingUser, z2, z7);
                                }
                                if (iPackageDataObserver != null) {
                                    iPackageDataObserver.onRemoveCompleted(str2, z8);
                                }
                            }
                        }, handleIncomingUser);
                        if (applicationInfo4 != null) {
                            if (!z) {
                                this.mUgmInternal.removeUriPermissionsForPackage(str, handleIncomingUser, true, false);
                                android.app.NotificationManager.getService().clearData(str, applicationInfo4.uid, callingUid == applicationInfo4.uid);
                            }
                            ((com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class)).cancelJobsForUid(applicationInfo4.uid, true, 13, 8, "clear data");
                            ((com.android.server.AlarmManagerInternal) com.android.server.LocalServices.getService(com.android.server.AlarmManagerInternal.class)).removeAlarmsForUid(applicationInfo4.uid);
                        }
                    } catch (android.os.RemoteException e2) {
                    }
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                    return true;
                }
                r17 = clearCallingIdentity;
            }
            android.util.Slog.w("ActivityManager", "Invalid packageName: " + str);
            if (iPackageDataObserver != null) {
                try {
                    iPackageDataObserver.onRemoveCompleted(str, false);
                } catch (android.os.RemoteException e3) {
                    android.util.Slog.i("ActivityManager", "Observer no longer exists.");
                }
            }
            android.os.Binder.restoreCallingIdentity(r17);
            return false;
        } catch (java.lang.Throwable th4) {
            th = th4;
            j = r17;
            android.os.Binder.restoreCallingIdentity(j);
            throw th;
        }
    }

    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:43:? -> B:38:0x00e0). Please report as a decompilation issue!!! */
    public void killBackgroundProcesses(java.lang.String str, int i) {
        int i2;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock;
        int i3;
        int i4;
        int i5;
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0 && checkCallingPermission("android.permission.RESTART_PACKAGES") != 0) {
            java.lang.String str2 = "Permission Denial: killBackgroundProcesses() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.KILL_BACKGROUND_PROCESSES";
            android.util.Slog.w("ActivityManager", str2);
            throw new java.lang.SecurityException(str2);
        }
        boolean z = checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") == 0;
        int callingUid = android.os.Binder.getCallingUid();
        int appId = android.os.UserHandle.getAppId(callingUid);
        int[] expandUserId = this.mUserController.expandUserId(this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), callingUid, i, true, 2, "killBackgroundProcesses", null));
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            android.content.pm.IPackageManager packageManager = android.app.AppGlobals.getPackageManager();
            int length = expandUserId.length;
            int i6 = 0;
            while (i6 < length) {
                int i7 = expandUserId[i6];
                try {
                    i2 = android.os.UserHandle.getAppId(packageManager.getPackageUid(str, 268435456L, i7));
                } catch (android.os.RemoteException e) {
                    i2 = -1;
                }
                if (i2 == -1 || !(z || i2 == appId)) {
                    android.util.Slog.w("ActivityManager", "Invalid packageName: " + str);
                    return;
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerGlobalLock2) {
                            try {
                                activityManagerGlobalLock = activityManagerGlobalLock2;
                                i3 = i6;
                                i4 = length;
                                i5 = appId;
                            } catch (java.lang.Throwable th) {
                                th = th;
                                activityManagerGlobalLock = activityManagerGlobalLock2;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                            try {
                                this.mProcessList.killPackageProcessesLSP(str, i2, i7, 500, 10, 24, "kill background");
                                resetPriorityAfterProcLockedSection();
                            } catch (java.lang.Throwable th2) {
                                th = th2;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                    } catch (java.lang.Throwable th3) {
                        resetPriorityAfterLockedSection();
                        throw th3;
                    }
                }
                resetPriorityAfterLockedSection();
                i6 = i3 + 1;
                length = i4;
                appId = i5;
            }
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void killAllBackgroundProcesses() {
        if (checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") != 0) {
            java.lang.String str = "Permission Denial: killAllBackgroundProcesses() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.KILL_ALL_BACKGROUND_PROCESSES";
            android.util.Slog.w("ActivityManager", str);
            throw new java.lang.SecurityException(str);
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    this.mAppProfiler.setAllowLowerMemLevelLocked(true);
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, -1, -1, com.android.server.am.ProcessList.CACHED_APP_MIN_ADJ, 10, 24, "kill all background");
                        } catch (java.lang.Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                    this.mAppProfiler.doLowMemReportIfNeededLocked(null);
                } catch (java.lang.Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    void killAllBackgroundProcessesExcept(int i, int i2) {
        if (checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") != 0) {
            java.lang.String str = "Permission Denial: killAllBackgroundProcessesExcept() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.KILL_ALL_BACKGROUND_PROCESSES";
            android.util.Slog.w("ActivityManager", str);
            throw new java.lang.SecurityException(str);
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killAllBackgroundProcessesExceptLSP(i, i2);
                        } catch (java.lang.Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (java.lang.Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void stopAppForUser(java.lang.String str, int i) {
        if (checkCallingPermission("android.permission.MANAGE_ACTIVITY_TASKS") != 0) {
            java.lang.String str2 = "Permission Denial: stopAppForUser() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.MANAGE_ACTIVITY_TASKS";
            android.util.Slog.w("ActivityManager", str2);
            throw new java.lang.SecurityException(str2);
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), i, true, 2, "stopAppForUser", null);
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            stopAppForUserInternal(str, handleIncomingUser);
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public boolean registerForegroundServiceObserver(android.app.IForegroundServiceObserver iForegroundServiceObserver) {
        boolean registerForegroundServiceObserverLocked;
        int callingUid = android.os.Binder.getCallingUid();
        int checkCallingPermission = checkCallingPermission("android.permission.MANAGE_ACTIVITY_TASKS");
        int checkCallingPermission2 = checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL");
        if (checkCallingPermission != 0 || checkCallingPermission2 != 0) {
            java.lang.String str = "Permission Denial: registerForegroundServiceObserver() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + callingUid + " requires android.permission.MANAGE_ACTIVITY_TASKS and android.permission.INTERACT_ACROSS_USERS_FULL";
            android.util.Slog.w("ActivityManager", str);
            throw new java.lang.SecurityException(str);
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                registerForegroundServiceObserverLocked = this.mServices.registerForegroundServiceObserverLocked(callingUid, iForegroundServiceObserver);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return registerForegroundServiceObserverLocked;
    }

    public void forceStopPackage(java.lang.String str, int i) {
        forceStopPackage(str, i, 0, null);
    }

    public void forceStopPackageEvenWhenStopping(java.lang.String str, int i) {
        forceStopPackage(str, i, 1, null);
    }

    private void forceStopPackage(java.lang.String str, int i, int i2, java.lang.String str2) {
        int i3;
        int i4;
        int i5;
        int[] iArr;
        int i6;
        android.content.pm.IPackageManager iPackageManager;
        java.lang.String str3;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            java.lang.String str4 = "Permission Denial: forceStopPackage() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            android.util.Slog.w("ActivityManager", str4);
            throw new java.lang.SecurityException(str4);
        }
        int callingPid = android.os.Binder.getCallingPid();
        int handleIncomingUser = this.mUserController.handleIncomingUser(callingPid, android.os.Binder.getCallingUid(), i, true, 2, "forceStopPackage", null);
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            android.content.pm.IPackageManager packageManager = android.app.AppGlobals.getPackageManager();
            boostPriorityForLockedSection();
            synchronized (this) {
                int i7 = -1;
                try {
                    int[] users = handleIncomingUser == -1 ? this.mUserController.getUsers() : new int[]{handleIncomingUser};
                    int length = users.length;
                    int i8 = 0;
                    while (i8 < length) {
                        int i9 = users[i8];
                        if (getPackageManagerInternal().isPackageStateProtected(str, i9)) {
                            android.util.Slog.w("ActivityManager", "Ignoring request to force stop protected package " + str + " u" + i9);
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        try {
                            i3 = packageManager.getPackageUid(str, 268435456L, i9);
                        } catch (android.os.RemoteException e) {
                            i3 = i7;
                        }
                        if (i3 == i7) {
                            android.util.Slog.w("ActivityManager", "Invalid packageName: " + str);
                            i4 = i8;
                            i5 = length;
                            iArr = users;
                            i6 = i7;
                            iPackageManager = packageManager;
                        } else {
                            try {
                                packageManager.setPackageStoppedState(str, true, i9);
                            } catch (android.os.RemoteException e2) {
                            } catch (java.lang.IllegalArgumentException e3) {
                                android.util.Slog.w("ActivityManager", "Failed trying to unstop package " + str + ": " + e3);
                            }
                            if (this.mUserController.isUserRunning(i9, i2)) {
                                int appId = android.os.UserHandle.getAppId(i3);
                                if (str2 == null) {
                                    str3 = "from pid " + callingPid;
                                } else {
                                    str3 = str2;
                                }
                                i4 = i8;
                                i5 = length;
                                iArr = users;
                                i6 = i7;
                                iPackageManager = packageManager;
                                forceStopPackageLocked(str, appId, false, false, true, false, false, true, i9, str3);
                                finishForceStopPackageLocked(str, i3);
                            } else {
                                i4 = i8;
                                i5 = length;
                                iArr = users;
                                i6 = i7;
                                iPackageManager = packageManager;
                            }
                        }
                        i8 = i4 + 1;
                        packageManager = iPackageManager;
                        length = i5;
                        users = iArr;
                        i7 = i6;
                    }
                    resetPriorityAfterLockedSection();
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void addPackageDependency(java.lang.String str) {
        com.android.server.am.ProcessRecord processRecord;
        if (android.os.Binder.getCallingPid() == android.os.Process.myPid()) {
            return;
        }
        int callingUid = android.os.Binder.getCallingUid();
        if (getPackageManagerInternal().filterAppAccess(str, callingUid, android.os.UserHandle.getUserId(callingUid))) {
            android.util.Slog.w("ActivityManager", "Failed trying to add dependency on non-existing package: " + str);
            return;
        }
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(android.os.Binder.getCallingPid());
        }
        if (processRecord != null) {
            android.util.ArraySet<java.lang.String> pkgDeps = processRecord.getPkgDeps();
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        if (pkgDeps == null) {
                            try {
                                pkgDeps = new android.util.ArraySet<>(1);
                                processRecord.setPkgDeps(pkgDeps);
                            } catch (java.lang.Throwable th) {
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        pkgDeps.add(str);
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (java.lang.Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    public void killApplication(java.lang.String str, int i, int i2, java.lang.String str2, int i3) {
        if (str == null) {
            return;
        }
        if (i < 0) {
            android.util.Slog.w("ActivityManager", "Invalid appid specified for pkg : " + str);
            return;
        }
        int callingUid = android.os.Binder.getCallingUid();
        if (android.os.UserHandle.getAppId(callingUid) == 1000) {
            android.os.Message obtainMessage = this.mHandler.obtainMessage(22);
            obtainMessage.arg1 = i;
            obtainMessage.arg2 = i2;
            com.android.internal.os.SomeArgs obtain = com.android.internal.os.SomeArgs.obtain();
            obtain.arg1 = str;
            obtain.arg2 = str2;
            obtain.arg3 = java.lang.Integer.valueOf(i3);
            obtainMessage.obj = obtain;
            this.mHandler.sendMessage(obtainMessage);
            return;
        }
        throw new java.lang.SecurityException(callingUid + " cannot kill pkg: " + str);
    }

    public void closeSystemDialogs(java.lang.String str) {
        this.mAtmInternal.closeSystemDialogs(str);
    }

    public android.os.Debug.MemoryInfo[] getProcessMemoryInfo(int[] iArr) {
        boolean z;
        com.android.server.am.ProcessRecord processRecord;
        com.android.server.am.ProcessProfileRecord processProfileRecord;
        android.os.Debug.MemoryInfo[] memoryInfoArr;
        int i;
        long j;
        com.android.server.am.ActivityManagerService activityManagerService = this;
        int[] iArr2 = iArr;
        activityManagerService.enforceNotIsolatedCaller("getProcessMemoryInfo");
        long uptimeMillis = android.os.SystemClock.uptimeMillis() - activityManagerService.mConstants.MEMORY_INFO_THROTTLE_TIME;
        int callingPid = android.os.Binder.getCallingPid();
        int callingUid = android.os.Binder.getCallingUid();
        int userId = android.os.UserHandle.getUserId(callingUid);
        boolean z2 = android.app.ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = activityManagerService.mAtmInternal.isGetTasksAllowed("getProcessMemoryInfo", callingPid, callingUid);
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = activityManagerService.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                synchronized (activityManagerService.mPidsSelfLocked) {
                    try {
                        com.android.server.am.ProcessRecord processRecord2 = activityManagerService.mPidsSelfLocked.get(callingPid);
                        if (processRecord2 == null) {
                            z = false;
                        } else {
                            com.android.server.am.ActiveInstrumentation activeInstrumentation = processRecord2.getActiveInstrumentation();
                            z = activeInstrumentation != null && (activeInstrumentation.mSourceUid == 2000 || activeInstrumentation.mSourceUid == 0);
                        }
                    } finally {
                    }
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        android.os.Debug.MemoryInfo[] memoryInfoArr2 = new android.os.Debug.MemoryInfo[iArr2.length];
        int length = iArr2.length - 1;
        while (length >= 0) {
            android.os.Debug.MemoryInfo memoryInfo = new android.os.Debug.MemoryInfo();
            memoryInfoArr2[length] = memoryInfo;
            synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                synchronized (activityManagerService.mPidsSelfLocked) {
                    try {
                        processRecord = activityManagerService.mPidsSelfLocked.get(iArr2[length]);
                        if (processRecord != null) {
                            processProfileRecord = processRecord.mProfile;
                            memoryInfoArr = memoryInfoArr2;
                            i = processProfileRecord.getSetAdj();
                        } else {
                            processProfileRecord = null;
                            memoryInfoArr = memoryInfoArr2;
                            i = 0;
                        }
                    } finally {
                    }
                }
            }
            int i2 = processRecord != null ? processRecord.uid : -1;
            int userId2 = processRecord != null ? android.os.UserHandle.getUserId(i2) : -1;
            if (callingUid != i2) {
                if (!isGetTasksAllowed) {
                    j = uptimeMillis;
                } else if (!z2 && userId2 != userId) {
                    j = uptimeMillis;
                }
                length--;
                activityManagerService = this;
                iArr2 = iArr;
                memoryInfoArr2 = memoryInfoArr;
                uptimeMillis = j;
            }
            if (processRecord != null) {
                synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                    try {
                        if (processProfileRecord.getLastMemInfoTime() >= uptimeMillis && processProfileRecord.getLastMemInfo() != null && !z) {
                            memoryInfo.set(processProfileRecord.getLastMemInfo());
                            j = uptimeMillis;
                        }
                    } finally {
                    }
                }
                length--;
                activityManagerService = this;
                iArr2 = iArr;
                memoryInfoArr2 = memoryInfoArr;
                uptimeMillis = j;
            }
            long currentThreadTimeMillis = android.os.SystemClock.currentThreadTimeMillis();
            j = uptimeMillis;
            android.os.Debug.MemoryInfo memoryInfo2 = new android.os.Debug.MemoryInfo();
            android.os.Debug.getMemoryInfo(iArr2[length], memoryInfo2);
            long currentThreadTimeMillis2 = android.os.SystemClock.currentThreadTimeMillis() - currentThreadTimeMillis;
            memoryInfo.set(memoryInfo2);
            if (processRecord != null) {
                synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                    try {
                        processProfileRecord.setLastMemInfo(memoryInfo2);
                        processProfileRecord.setLastMemInfoTime(android.os.SystemClock.uptimeMillis());
                        if (processProfileRecord.getThread() != null && processProfileRecord.getSetAdj() == i) {
                            processProfileRecord.addPss(memoryInfo.getTotalPss(), memoryInfo.getTotalUss(), memoryInfo.getTotalRss(), false, 4, currentThreadTimeMillis2);
                        }
                    } finally {
                    }
                }
            } else {
                continue;
            }
            length--;
            activityManagerService = this;
            iArr2 = iArr;
            memoryInfoArr2 = memoryInfoArr;
            uptimeMillis = j;
        }
        return memoryInfoArr2;
    }

    public long[] getProcessPss(int[] iArr) {
        com.android.server.am.ProcessRecord processRecord;
        int setAdj;
        enforceNotIsolatedCaller("getProcessPss");
        int callingPid = android.os.Binder.getCallingPid();
        int callingUid = android.os.Binder.getCallingUid();
        int userId = android.os.UserHandle.getUserId(callingUid);
        boolean z = android.app.ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = this.mAtmInternal.isGetTasksAllowed("getProcessPss", callingPid, callingUid);
        long[] jArr = new long[iArr.length];
        for (int length = iArr.length - 1; length >= 0; length--) {
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    synchronized (this.mPidsSelfLocked) {
                        try {
                            processRecord = this.mPidsSelfLocked.get(iArr[length]);
                            setAdj = processRecord != null ? processRecord.mState.getSetAdj() : 0;
                        } finally {
                        }
                    }
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            if (isGetTasksAllowed && (z || android.os.UserHandle.getUserId(processRecord.uid) == userId)) {
                long[] jArr2 = new long[3];
                long currentThreadTimeMillis = android.os.SystemClock.currentThreadTimeMillis();
                long pss = android.os.Debug.getPss(iArr[length], jArr2, null);
                jArr[length] = pss;
                long currentThreadTimeMillis2 = android.os.SystemClock.currentThreadTimeMillis() - currentThreadTimeMillis;
                if (processRecord != null) {
                    com.android.server.am.ProcessProfileRecord processProfileRecord = processRecord.mProfile;
                    synchronized (this.mAppProfiler.mProfilerLock) {
                        try {
                            if (processProfileRecord.getThread() != null && processProfileRecord.getSetAdj() == setAdj) {
                                processProfileRecord.addPss(pss, jArr2[0], jArr2[2], false, 3, currentThreadTimeMillis2);
                            }
                        } finally {
                        }
                    }
                } else {
                    continue;
                }
            }
        }
        return jArr;
    }

    public void killApplicationProcess(java.lang.String str, int i) {
        android.app.IApplicationThread thread;
        if (str == null) {
            return;
        }
        int callingUid = android.os.Binder.getCallingUid();
        if (callingUid == 1000) {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    com.android.server.am.ProcessRecord processRecordLocked = getProcessRecordLocked(str, i);
                    if (processRecordLocked != null && (thread = processRecordLocked.getThread()) != null) {
                        try {
                            thread.scheduleSuicide();
                        } catch (android.os.RemoteException e) {
                        }
                    } else {
                        android.util.Slog.w("ActivityManager", "Process/uid not found attempting kill of " + str + " / " + i);
                    }
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new java.lang.SecurityException(callingUid + " cannot kill app process: " + str);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    private void forceStopPackageLocked(java.lang.String str, int i, java.lang.String str2) {
        forceStopPackageLocked(str, android.os.UserHandle.getAppId(i), false, false, true, false, false, false, android.os.UserHandle.getUserId(i), str2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    @com.android.internal.annotations.GuardedBy({"this"})
    public void finishForceStopPackageLocked(java.lang.String str, int i) {
        int i2;
        if (this.mProcessesReady) {
            i2 = 0;
        } else {
            i2 = com.android.server.tare.AlarmManagerEconomicPolicy.ACTION_ALARM_WAKEUP_EXACT_ALLOW_WHILE_IDLE;
        }
        this.mPackageManagerInt.sendPackageRestartedBroadcast(str, i, i2);
    }

    private void cleanupDisabledPackageComponentsLocked(java.lang.String str, int i, java.lang.String[] strArr) {
        android.util.ArraySet arraySet;
        android.content.pm.IPackageManager packageManager = android.app.AppGlobals.getPackageManager();
        if (strArr == null) {
            return;
        }
        int length = strArr.length - 1;
        android.util.ArraySet arraySet2 = null;
        boolean z = false;
        while (true) {
            if (length < 0) {
                arraySet = arraySet2;
                break;
            }
            java.lang.String str2 = strArr[length];
            if (str2.equals(str)) {
                try {
                    int applicationEnabledSetting = packageManager.getApplicationEnabledSetting(str, i != -1 ? i : 0);
                    z = (applicationEnabledSetting == 1 || applicationEnabledSetting == 0) ? false : true;
                    if (z) {
                        arraySet = null;
                        break;
                    }
                } catch (java.lang.Exception e) {
                    return;
                }
            } else {
                try {
                    int componentEnabledSetting = packageManager.getComponentEnabledSetting(new android.content.ComponentName(str, str2), i != -1 ? i : 0);
                    if (componentEnabledSetting != 1 && componentEnabledSetting != 0) {
                        if (arraySet2 == null) {
                            arraySet2 = new android.util.ArraySet(strArr.length);
                        }
                        arraySet2.add(str2);
                    }
                } catch (java.lang.Exception e2) {
                    return;
                }
            }
            length--;
        }
        if (!z && arraySet == null) {
            return;
        }
        this.mAtmInternal.cleanupDisabledPackageComponents(str, arraySet, i, this.mBooted);
        android.util.ArraySet arraySet3 = arraySet;
        this.mServices.bringDownDisabledPackageServicesLocked(str, arraySet3, i, false, false, true);
        java.util.ArrayList<com.android.server.am.ContentProviderRecord> arrayList = new java.util.ArrayList<>();
        this.mCpHelper.getProviderMap().collectPackageProvidersLocked(str, (java.util.Set<java.lang.String>) arraySet3, true, false, i, arrayList);
        for (int size = arrayList.size() - 1; size >= 0; size--) {
            this.mCpHelper.removeDyingProviderLocked(null, arrayList.get(size), true);
        }
        for (int length2 = this.mBroadcastQueues.length - 1; length2 >= 0; length2--) {
            this.mBroadcastQueues[length2].cleanupDisabledPackageReceiversLocked(str, arraySet, i);
        }
    }

    final boolean clearBroadcastQueueForUserLocked(int i) {
        boolean z = false;
        for (int length = this.mBroadcastQueues.length - 1; length >= 0; length--) {
            z |= this.mBroadcastQueues[length].cleanupDisabledPackageReceiversLocked(null, null, i);
        }
        return z;
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void forceStopAppZygoteLocked(java.lang.String str, int i, int i2) {
        if (str == null) {
            return;
        }
        if (i < 0) {
            i = android.os.UserHandle.getAppId(getPackageManagerInternal().getPackageUid(str, 272629760L, 0));
        }
        this.mProcessList.killAppZygotesLocked(str, i, i2, true);
    }

    void stopAppForUserInternal(java.lang.String str, int i) {
        int packageUid = getPackageManagerInternal().getPackageUid(str, 272629760L, i);
        if (packageUid < 0) {
            android.util.Slog.w("ActivityManager", "Asked to stop " + str + "/u" + i + " but does not exist in that user");
            return;
        }
        if (getPackageManagerInternal().isPackageStateProtected(str, i)) {
            android.util.Slog.w("ActivityManager", "Asked to stop " + str + "/u" + i + " but it is protected");
            return;
        }
        android.util.Slog.i("ActivityManager", "Stopping app for user: " + str + com.android.server.slice.SliceClientPermissions.SliceAuthority.DELIMITER + i);
        int appId = android.os.UserHandle.getAppId(packageUid);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                try {
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mAtmInternal.onForceStopPackage(str, true, false, i);
                            this.mProcessList.killPackageProcessesLSP(str, appId, i, com.android.server.am.ProcessList.INVALID_ADJ, true, false, true, false, true, false, 10, 23, "fully stop " + str + com.android.server.slice.SliceClientPermissions.SliceAuthority.DELIMITER + i + " by user request");
                            resetPriorityAfterProcLockedSection();
                            this.mServices.bringDownDisabledPackageServicesLocked(str, null, i, false, true, true);
                            if (this.mBooted) {
                                this.mAtmInternal.resumeTopActivities(true);
                            }
                        } catch (java.lang.Throwable th) {
                            th = th;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                } catch (java.lang.Throwable th2) {
                    th = th2;
                }
            } catch (java.lang.Throwable th3) {
                resetPriorityAfterLockedSection();
                throw th3;
            }
        }
        resetPriorityAfterLockedSection();
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final boolean forceStopPackageLocked(java.lang.String str, int i, boolean z, boolean z2, boolean z3, boolean z4, boolean z5, boolean z6, int i2, java.lang.String str2) {
        return forceStopPackageLocked(str, i, z, z2, z3, z4, z5, z6, i2, str2, str == null ? 11 : 10);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r8v2 */
    /* JADX WARN: Type inference failed for: r8v3, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r8v4 */
    @com.android.internal.annotations.GuardedBy({"this"})
    final boolean forceStopPackageLocked(java.lang.String str, int i, boolean z, boolean z2, boolean z3, boolean z4, boolean z5, boolean z6, int i2, java.lang.String str2, int i3) {
        int i4;
        int i5;
        java.lang.StringBuilder sb;
        ?? r8;
        int i6;
        com.android.internal.policy.AttributeCache instance;
        if (i2 == -1 && str == null) {
            android.util.Slog.w("ActivityManager", "Can't force stop all processes of all users, that is insane!");
        }
        if (i < 0 && str != null) {
            i4 = android.os.UserHandle.getAppId(getPackageManagerInternal().getPackageUid(str, 272629760L, 0));
        } else {
            i4 = i;
        }
        if (z3) {
            if (str != null) {
                android.util.Slog.i("ActivityManager", "Force stopping " + str + " appid=" + i4 + " user=" + i2 + ": " + str2);
            } else {
                android.util.Slog.i("ActivityManager", "Force stopping u" + i2 + ": " + str2);
            }
            this.mAppErrors.resetProcessCrashTime(str == null, i4, i2);
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                try {
                    boolean onForceStopPackage = this.mAtmInternal.onForceStopPackage(str, z3, z4, i2);
                    if (i3 == 10) {
                        i5 = 21;
                    } else {
                        i5 = 0;
                    }
                    com.android.server.am.ProcessList processList = this.mProcessList;
                    java.lang.StringBuilder sb2 = new java.lang.StringBuilder();
                    if (str == null) {
                        sb = new java.lang.StringBuilder();
                        sb.append("stop user ");
                        sb.append(i2);
                    } else {
                        sb = new java.lang.StringBuilder();
                        sb.append("stop ");
                        sb.append(str);
                    }
                    sb2.append(sb.toString());
                    sb2.append(" due to ");
                    sb2.append(str2);
                    int i7 = i4;
                    boolean killPackageProcessesLSP = onForceStopPackage | processList.killPackageProcessesLSP(str, i4, i2, com.android.server.am.ProcessList.INVALID_ADJ, z, false, z3, z4, true, z5, i3, i5, sb2.toString());
                    resetPriorityAfterProcLockedSection();
                    if (!this.mServices.bringDownDisabledPackageServicesLocked(str, null, i2, z4, true, z3)) {
                        r8 = 1;
                    } else {
                        if (!z3) {
                            return true;
                        }
                        r8 = 1;
                        killPackageProcessesLSP = true;
                    }
                    if (str != null) {
                        i6 = i2;
                    } else {
                        synchronized (this.mStickyBroadcasts) {
                            i6 = i2;
                            this.mStickyBroadcasts.remove(i6);
                        }
                    }
                    java.util.ArrayList<com.android.server.am.ContentProviderRecord> arrayList = new java.util.ArrayList<>();
                    if (this.mCpHelper.getProviderMap().collectPackageProvidersLocked(str, (java.util.Set<java.lang.String>) null, z3, z4, i2, arrayList)) {
                        if (!z3) {
                            return r8;
                        }
                        killPackageProcessesLSP = r8;
                    }
                    for (int size = arrayList.size() - r8; size >= 0; size--) {
                        this.mCpHelper.removeDyingProviderLocked(null, arrayList.get(size), r8);
                    }
                    boolean z7 = false;
                    this.mUgmInternal.removeUriPermissionsForPackage(str, i6, false, false);
                    if (z3) {
                        for (int length = this.mBroadcastQueues.length - r8; length >= 0; length--) {
                            killPackageProcessesLSP |= this.mBroadcastQueues[length].cleanupDisabledPackageReceiversLocked(str, null, i6);
                        }
                    }
                    if (android.content.pm.Flags.stayStopped() && z6) {
                        z7 = r8;
                    }
                    if (str == null || z5 || z7) {
                        killPackageProcessesLSP |= this.mPendingIntentController.removePendingIntentsForPackage(str, i6, i7, z3);
                    }
                    if (z3) {
                        if (z2 && str != null && (instance = com.android.internal.policy.AttributeCache.instance()) != null) {
                            instance.removePackage(str);
                        }
                        if (this.mBooted) {
                            this.mAtmInternal.resumeTopActivities(r8);
                        }
                    }
                    return killPackageProcessesLSP;
                } catch (java.lang.Throwable th) {
                    th = th;
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            } catch (java.lang.Throwable th2) {
                th = th2;
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void handleProcessStartOrKillTimeoutLocked(com.android.server.am.ProcessRecord processRecord, boolean z) {
        int pid = processRecord.getPid();
        if (z || removePidLocked(pid, processRecord)) {
            if (z) {
                com.android.server.am.ProcessRecord processRecord2 = processRecord.mSuccessor;
                if (processRecord2 == null) {
                    return;
                }
                android.util.Slog.wtf("ActivityManager", processRecord.toString() + " " + processRecord.getDyingPid() + " refused to die while trying to launch " + processRecord2 + ", cancelling the process start");
                processRecord.mSuccessorStartRunnable = null;
                processRecord.mSuccessor = null;
                processRecord2.mPredecessor = null;
                processRecord = processRecord2;
            } else {
                java.lang.String str = "Process " + processRecord + " failed to attach";
                android.util.Slog.w("ActivityManager", str);
                com.android.server.am.EventLogTags.writeAmProcessStartTimeout(processRecord.userId, pid, processRecord.uid, processRecord.processName);
                if (processRecord.getActiveInstrumentation() != null) {
                    android.os.Bundle bundle = new android.os.Bundle();
                    bundle.putString("shortMsg", "failed to attach");
                    bundle.putString("longMsg", str);
                    finishInstrumentationLocked(processRecord, 0, bundle);
                }
            }
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    this.mProcessList.removeProcessNameLocked(processRecord.processName, processRecord.uid);
                    this.mAtmInternal.clearHeavyWeightProcessIfEquals(processRecord.getWindowProcessController());
                    this.mCpHelper.cleanupAppInLaunchingProvidersLocked(processRecord, true);
                    this.mServices.processStartTimedOutLocked(processRecord);
                    for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
                        broadcastQueue.onApplicationTimeoutLocked(processRecord);
                    }
                    if (!z) {
                        this.mBatteryStatsService.noteProcessFinish(processRecord.processName, processRecord.info.uid);
                        processRecord.killLocked("start timeout", 7, true);
                        removeLruProcessLocked(processRecord);
                    }
                    if (processRecord.isolated) {
                        this.mBatteryStatsService.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
                        this.mProcessList.mAppExitInfoTracker.mIsolatedUidRecords.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
                        getPackageManagerInternal().removeIsolatedUid(processRecord.uid);
                    }
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            com.android.server.am.BackupRecord backupRecord = this.mBackupTargets.get(processRecord.userId);
            if (!z && backupRecord != null && backupRecord.app.getPid() == pid) {
                android.util.Slog.w("ActivityManager", "Unattached app died before backup, skipping");
                final int i = processRecord.userId;
                final java.lang.String str2 = processRecord.info.packageName;
                this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService.7
                    @Override // java.lang.Runnable
                    public void run() {
                        try {
                            android.app.backup.IBackupManager.Stub.asInterface(android.os.ServiceManager.getService(com.android.server.am.HostingRecord.HOSTING_TYPE_BACKUP)).agentDisconnectedForUser(i, str2);
                        } catch (android.os.RemoteException e) {
                        }
                    }
                });
                return;
            }
            return;
        }
        android.util.Slog.w("ActivityManager", "Spurious process start timeout - pid not known for " + processRecord);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    private void attachApplicationLocked(@android.annotation.NonNull android.app.IApplicationThread iApplicationThread, int i, int i2, long j) {
        com.android.server.am.ProcessRecord processRecord;
        java.util.List<android.content.pm.ProviderInfo> list;
        int i3;
        boolean z;
        boolean z2;
        android.content.pm.ApplicationInfo applicationInfo;
        android.app.ProfilerInfo profilerInfo;
        java.lang.String str;
        android.content.AutofillOptions autofillOptions;
        android.content.ContentCaptureOptions optionsForPackage;
        android.os.SharedMemory serializedSystemFontMap;
        long uptimeMillis;
        long elapsedRealtimeNanos;
        com.android.server.am.ActiveInstrumentation activeInstrumentation;
        android.content.pm.ProviderInfoList fromList;
        int i4;
        long j2;
        long j3;
        long j4;
        long j5;
        com.android.server.contentcapture.ContentCaptureManagerInternal contentCaptureManagerInternal;
        android.view.autofill.AutofillManagerInternal autofillManagerInternal;
        com.android.server.am.ProcessRecord processRecord2;
        com.android.server.am.ProcessRecord processRecord3;
        com.android.server.am.ProcessRecord processRecord4;
        long uptimeMillis2 = android.os.SystemClock.uptimeMillis();
        if (i == MY_PID || i < 0) {
            processRecord = null;
        } else {
            synchronized (this.mPidsSelfLocked) {
                processRecord3 = this.mPidsSelfLocked.get(i);
            }
            if (processRecord3 == null) {
                processRecord4 = processRecord3;
            } else if (processRecord3.getStartUid() == i2 && processRecord3.getStartSeq() == j) {
                processRecord4 = processRecord3;
            } else {
                com.android.server.am.ProcessRecord processRecord5 = this.mProcessList.mPendingStarts.get(j);
                java.lang.String str2 = "attachApplicationLocked process:" + (processRecord5 != null ? processRecord5.processName : null) + " startSeq:" + j + " pid:" + i + " belongs to another existing app:" + processRecord3.processName + " startSeq:" + processRecord3.getStartSeq();
                android.util.Slog.wtf("ActivityManager", str2);
                android.util.EventLog.writeEvent(1397638484, "131105245", java.lang.Integer.valueOf(processRecord3.getStartUid()), str2);
                cleanUpApplicationRecordLocked(processRecord3, i, false, false, -1, true, false);
                removePidLocked(i, processRecord3);
                processRecord = null;
            }
            processRecord = processRecord4;
        }
        if (processRecord == null && j > 0 && (processRecord2 = this.mProcessList.mPendingStarts.get(j)) != null && processRecord2.getStartUid() == i2 && processRecord2.getStartSeq() == j && this.mProcessList.handleProcessStartedLocked(processRecord2, i, processRecord2.isUsingWrapper(), j, true)) {
            processRecord = processRecord2;
        }
        if (processRecord == null) {
            android.util.Slog.w("ActivityManager", "No pending application record for pid " + i + " (IApplicationThread " + iApplicationThread + "); dropping process");
            com.android.server.am.EventLogTags.writeAmDropProcess(i);
            if (i > 0 && i != MY_PID) {
                android.os.Process.killProcessQuiet(i);
                return;
            } else {
                try {
                    iApplicationThread.scheduleExit();
                    return;
                } catch (java.lang.Exception e) {
                    return;
                }
            }
        }
        if (processRecord.getThread() != null) {
            handleAppDiedLocked(processRecord, i, true, true, false);
        }
        java.lang.String str3 = processRecord.processName;
        try {
            com.android.server.am.ActivityManagerService.AppDeathRecipient appDeathRecipient = new com.android.server.am.ActivityManagerService.AppDeathRecipient(processRecord, i, iApplicationThread);
            iApplicationThread.asBinder().linkToDeath(appDeathRecipient, 0);
            processRecord.setDeathRecipient(appDeathRecipient);
            com.android.server.am.EventLogTags.writeAmProcBound(processRecord.userId, i, processRecord.processName);
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    this.mOomAdjuster.setAttachingProcessStatesLSP(processRecord);
                    clearProcessForegroundLocked(processRecord);
                    processRecord.setDebugging(false);
                    processRecord.setKilledByAm(false);
                    processRecord.setKilled(false);
                    processRecord.setUnlocked(android.os.storage.StorageManager.isCeStorageUnlocked(processRecord.userId));
                } finally {
                    resetPriorityAfterProcLockedSection();
                }
            }
            resetPriorityAfterProcLockedSection();
            boolean z3 = this.mProcessesReady || isAllowedWhileBooting(processRecord.info);
            java.util.List<android.content.pm.ProviderInfo> generateApplicationProvidersLocked = z3 ? this.mCpHelper.generateApplicationProvidersLocked(processRecord) : null;
            if (generateApplicationProvidersLocked == null || !this.mCpHelper.checkAppInLaunchingProvidersLocked(processRecord)) {
                list = generateApplicationProvidersLocked;
            } else {
                android.os.Message obtainMessage = this.mHandler.obtainMessage(57);
                obtainMessage.obj = processRecord;
                list = generateApplicationProvidersLocked;
                this.mHandler.sendMessageDelayed(obtainMessage, android.content.ContentResolver.CONTENT_PROVIDER_PUBLISH_TIMEOUT_MILLIS);
            }
            checkTime(uptimeMillis2, "attachApplicationLocked: before bindApplication");
            if (!z3) {
                android.util.Slog.i("ActivityManager", "Launching preboot mode app: " + processRecord);
            }
            com.android.server.am.BackupRecord backupRecord = this.mBackupTargets.get(processRecord.userId);
            try {
                if (this.mDebugApp == null || !this.mDebugApp.equals(str3)) {
                    i3 = 0;
                } else {
                    int i5 = this.mWaitForDebugger ? this.mSuspendUponWait ? 3 : 2 : 1;
                    processRecord.setDebugging(true);
                    if (this.mDebugTransient) {
                        this.mDebugApp = this.mOrigDebugApp;
                        this.mWaitForDebugger = this.mOrigWaitForDebugger;
                    }
                    i3 = i5;
                }
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock2) {
                    try {
                        try {
                            if (this.mTrackAllocationApp == null || !this.mTrackAllocationApp.equals(str3)) {
                                z = false;
                            } else {
                                this.mTrackAllocationApp = null;
                                z = true;
                            }
                        } catch (java.lang.Exception e2) {
                            e = e2;
                        }
                    } catch (java.lang.Throwable th) {
                        th = th;
                        while (true) {
                            try {
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            } catch (java.lang.Throwable th2) {
                                th = th2;
                            }
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
                z2 = (backupRecord == null || !backupRecord.appInfo.packageName.equals(str3)) ? false : backupRecord.appInfo.uid >= 10000 && (backupRecord.backupMode == 3 || backupRecord.backupMode == 1);
                com.android.server.am.ActiveInstrumentation activeInstrumentation2 = processRecord.getActiveInstrumentation();
                if (activeInstrumentation2 != null) {
                    notifyPackageUse(activeInstrumentation2.mClass.getPackageName(), 7);
                }
                com.android.internal.protolog.ProtoLogImpl_1545807451.v(com.android.internal.protolog.ProtoLogGroup.WM_DEBUG_CONFIGURATION, 7286191062634870297L, 0, null, java.lang.String.valueOf(str3), java.lang.String.valueOf(processRecord.getWindowProcessController().getConfiguration()));
                applicationInfo = activeInstrumentation2 != null ? activeInstrumentation2.mTargetInfo : processRecord.info;
                processRecord.setCompat(compatibilityInfoForPackage(applicationInfo));
                profilerInfo = this.mAppProfiler.setupProfilerInfoLocked(iApplicationThread, processRecord, activeInstrumentation2);
                str = (applicationInfo.isInstantApp() || applicationInfo.targetSdkVersion >= 28) ? "unknown" : sTheRealBuildSerial;
                autofillOptions = (android.os.UserHandle.getAppId(processRecord.info.uid) < 10000 || (autofillManagerInternal = (android.view.autofill.AutofillManagerInternal) com.android.server.LocalServices.getService(android.view.autofill.AutofillManagerInternal.class)) == null) ? null : autofillManagerInternal.getAutofillOptions(processRecord.info.packageName, processRecord.info.longVersionCode, processRecord.userId);
                optionsForPackage = (android.os.UserHandle.getAppId(processRecord.info.uid) < 10000 || (contentCaptureManagerInternal = (com.android.server.contentcapture.ContentCaptureManagerInternal) com.android.server.LocalServices.getService(com.android.server.contentcapture.ContentCaptureManagerInternal.class)) == null) ? null : contentCaptureManagerInternal.getOptionsForPackage(processRecord.userId, processRecord.info.packageName);
                com.android.server.graphics.fonts.FontManagerInternal fontManagerInternal = (com.android.server.graphics.fonts.FontManagerInternal) com.android.server.LocalServices.getService(com.android.server.graphics.fonts.FontManagerInternal.class);
                serializedSystemFontMap = fontManagerInternal != null ? fontManagerInternal.getSerializedSystemFontMap() : null;
                checkTime(uptimeMillis2, "attachApplicationLocked: immediately before bindApplication");
                uptimeMillis = android.os.SystemClock.uptimeMillis();
                elapsedRealtimeNanos = android.os.SystemClock.elapsedRealtimeNanos();
                this.mAtmInternal.preBindApplication(processRecord.getWindowProcessController());
                activeInstrumentation = processRecord.getActiveInstrumentation();
                if (this.mPlatformCompat != null) {
                    this.mPlatformCompat.resetReporting(processRecord.info);
                }
                fromList = android.content.pm.ProviderInfoList.fromList(list);
                processRecord.mProfile.mLastCpuDelayTime.set(processRecord.getCpuDelayTime());
            } catch (java.lang.Exception e3) {
                e = e3;
            }
            try {
                if (processRecord.getIsolatedEntryPoint() != null) {
                    iApplicationThread.runIsolatedEntryPoint(processRecord.getIsolatedEntryPoint(), processRecord.getIsolatedEntryPointArgs());
                    i4 = i2;
                    j2 = elapsedRealtimeNanos;
                    j3 = uptimeMillis2;
                    j4 = uptimeMillis;
                } else if (activeInstrumentation != null) {
                    j2 = elapsedRealtimeNanos;
                    j3 = uptimeMillis2;
                    j4 = uptimeMillis;
                    iApplicationThread.bindApplication(str3, applicationInfo, processRecord.sdkSandboxClientAppVolumeUuid, processRecord.sdkSandboxClientAppPackage, activeInstrumentation.mIsSdkInSandbox, fromList, activeInstrumentation.mClass, profilerInfo, activeInstrumentation.mArguments, activeInstrumentation.mWatcher, activeInstrumentation.mUiAutomationConnection, i3, this.mBinderTransactionTrackingEnabled, z, z2 || !z3, processRecord.isPersistent(), new android.content.res.Configuration(processRecord.getWindowProcessController().getConfiguration()), processRecord.getCompat(), getCommonServicesLocked(processRecord.isolated), this.mCoreSettingsObserver.getCoreSettingsLocked(), str, autofillOptions, optionsForPackage, processRecord.getDisabledCompatChanges(), serializedSystemFontMap, processRecord.getStartElapsedTime(), processRecord.getStartUptime());
                    i4 = i2;
                } else {
                    i4 = i2;
                    j2 = elapsedRealtimeNanos;
                    j3 = uptimeMillis2;
                    j4 = uptimeMillis;
                    iApplicationThread.bindApplication(str3, applicationInfo, processRecord.sdkSandboxClientAppVolumeUuid, processRecord.sdkSandboxClientAppPackage, false, fromList, (android.content.ComponentName) null, profilerInfo, (android.os.Bundle) null, (android.app.IInstrumentationWatcher) null, (android.app.IUiAutomationConnection) null, i3, this.mBinderTransactionTrackingEnabled, z, z2 || !z3, processRecord.isPersistent(), new android.content.res.Configuration(processRecord.getWindowProcessController().getConfiguration()), processRecord.getCompat(), getCommonServicesLocked(processRecord.isolated), this.mCoreSettingsObserver.getCoreSettingsLocked(), str, autofillOptions, optionsForPackage, processRecord.getDisabledCompatChanges(), serializedSystemFontMap, processRecord.getStartElapsedTime(), processRecord.getStartUptime());
                }
                android.os.Message obtainMessage2 = this.mHandler.obtainMessage(82);
                obtainMessage2.obj = processRecord;
                obtainMessage2.arg1 = BIND_APPLICATION_TIMEOUT;
                this.mHandler.sendMessageDelayed(obtainMessage2, obtainMessage2.arg1);
                this.mHandler.removeMessages(20, processRecord);
                if (profilerInfo != null) {
                    profilerInfo.closeFd();
                }
                processRecord.setBindApplicationTime(j4);
                this.mProcessList.getAppStartInfoTracker().reportBindApplicationTimeNanos(processRecord, j2);
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock3 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock3) {
                    try {
                        processRecord.makeActive(iApplicationThread, this.mProcessStats);
                        j5 = j3;
                        checkTime(j5, "attachApplicationLocked: immediately after bindApplication");
                    } catch (java.lang.Throwable th3) {
                        th = th3;
                        while (true) {
                            try {
                                throw th;
                            } catch (java.lang.Throwable th4) {
                                th = th4;
                            }
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
                processRecord.setPendingFinishAttach(true);
                updateLruProcessLocked(processRecord, false, null);
                checkTime(j5, "attachApplicationLocked: after updateLruProcessLocked");
                updateOomAdjLocked(processRecord, 11);
                checkTime(j5, "attachApplicationLocked: after updateOomAdjLocked");
                long uptimeMillis3 = android.os.SystemClock.uptimeMillis();
                synchronized (this.mAppProfiler.mProfilerLock) {
                    try {
                        processRecord.mProfile.setLastRequestedGc(uptimeMillis3);
                        processRecord.mProfile.setLastLowMemory(uptimeMillis3);
                    } catch (java.lang.Throwable th5) {
                        th = th5;
                        while (true) {
                            try {
                                throw th;
                            } catch (java.lang.Throwable th6) {
                                th = th6;
                            }
                        }
                    }
                }
                this.mPersistentStartingProcesses.remove(processRecord);
                this.mProcessesOnHold.remove(processRecord);
                if (!this.mConstants.mEnableWaitForFinishAttachApplication) {
                    finishAttachApplicationInner(j, i4, i);
                }
                maybeSendBootCompletedLocked(processRecord);
            } catch (java.lang.Exception e4) {
                e = e4;
                android.util.Slog.wtf("ActivityManager", "Exception thrown during bind of " + processRecord, e);
                processRecord.resetPackageList(this.mProcessStats);
                processRecord.unlinkDeathRecipient();
                processRecord.killLocked("error during bind", 7, true);
                handleAppDiedLocked(processRecord, i, false, true, false);
            }
        } catch (android.os.RemoteException e5) {
            processRecord.resetPackageList(this.mProcessStats);
            this.mProcessList.startProcessLocked(processRecord, new com.android.server.am.HostingRecord(com.android.server.am.HostingRecord.HOSTING_TYPE_LINK_FAIL, str3), 0);
        }
    }

    public final void attachApplication(android.app.IApplicationThread iApplicationThread, long j) {
        if (iApplicationThread == null) {
            throw new java.lang.SecurityException("Invalid application interface");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                int callingPid = android.os.Binder.getCallingPid();
                int callingUid = android.os.Binder.getCallingUid();
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                attachApplicationLocked(iApplicationThread, callingPid, callingUid, j);
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    private void finishAttachApplicationInner(long j, int i, int i2) {
        com.android.server.am.ProcessRecord processRecord;
        boolean z;
        boolean z2;
        boolean z3;
        long uptimeMillis = android.os.SystemClock.uptimeMillis();
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(i2);
        }
        if (processRecord != null && processRecord.getStartUid() == i && processRecord.getStartSeq() == j) {
            this.mHandler.removeMessages(82, processRecord);
            this.mHandler.removeMessages(83, processRecord);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    processRecord.setPendingFinishAttach(false);
                    if (!this.mProcessesReady && !isAllowedWhileBooting(processRecord.info)) {
                        z = false;
                    } else {
                        z = true;
                    }
                    java.lang.String str = processRecord.processName;
                    if (!z) {
                        z3 = false;
                        z2 = false;
                    } else {
                        try {
                            z2 = this.mAtmInternal.attachApplication(processRecord.getWindowProcessController());
                            z3 = false;
                        } catch (java.lang.Exception e) {
                            android.util.Slog.wtf("ActivityManager", "Exception thrown launching activities in " + processRecord, e);
                            z2 = false;
                            z3 = true;
                        }
                    }
                    if (!z3) {
                        try {
                            z2 |= this.mServices.attachApplicationLocked(processRecord, str);
                            checkTime(uptimeMillis, "finishAttachApplicationInner: after mServices.attachApplicationLocked");
                        } catch (java.lang.Exception e2) {
                            android.util.Slog.wtf("ActivityManager", "Exception thrown starting services in " + processRecord, e2);
                            z3 = true;
                        }
                    }
                    if (!z3) {
                        try {
                            for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
                                z2 |= broadcastQueue.onApplicationAttachedLocked(processRecord);
                            }
                            checkTime(uptimeMillis, "finishAttachApplicationInner: after dispatching broadcasts");
                        } catch (com.android.server.am.BroadcastDeliveryFailedException e3) {
                            android.util.Slog.wtf("ActivityManager", "Exception thrown dispatching broadcasts in " + processRecord, e3);
                            z3 = true;
                        }
                    }
                    com.android.server.am.BackupRecord backupRecord = this.mBackupTargets.get(processRecord.userId);
                    if (!z3 && backupRecord != null && backupRecord.app == processRecord) {
                        notifyPackageUse(backupRecord.appInfo.packageName, 5);
                        try {
                            processRecord.getThread().scheduleCreateBackupAgent(backupRecord.appInfo, backupRecord.backupMode, backupRecord.userId, backupRecord.backupDestination);
                        } catch (java.lang.Exception e4) {
                            android.util.Slog.wtf("ActivityManager", "Exception thrown creating backup agent in " + processRecord, e4);
                            z3 = true;
                        }
                    }
                    if (z3) {
                        processRecord.killLocked("error during init", 7, true);
                        handleAppDiedLocked(processRecord, i2, false, true, false);
                        return;
                    }
                    if (!z2) {
                        updateOomAdjLocked(processRecord, 11);
                        checkTime(uptimeMillis, "finishAttachApplicationInner: after updateOomAdjLocked");
                    }
                    com.android.server.am.HostingRecord hostingRecord = processRecord.getHostingRecord();
                    com.android.internal.util.FrameworkStatsLog.write(169, processRecord.info.uid, i2, processRecord.info.packageName, 3, processRecord.getStartElapsedTime(), (int) (processRecord.getBindApplicationTime() - processRecord.getStartUptime()), (int) (android.os.SystemClock.uptimeMillis() - processRecord.getStartUptime()), hostingRecord.getType(), hostingRecord.getName(), getShortAction(hostingRecord.getAction()), com.android.server.am.HostingRecord.getHostingTypeIdStatsd(hostingRecord.getType()), com.android.server.am.HostingRecord.getTriggerTypeForStatsd(hostingRecord.getTriggerType()));
                    resetPriorityAfterLockedSection();
                    return;
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        android.util.Slog.wtf("ActivityManager", "Mismatched or missing ProcessRecord: " + processRecord + ". Pid: " + i2 + ". Uid: " + i);
        if (i2 > 0) {
            android.os.Process.killProcess(i2);
            android.os.Process.killProcessGroup(i, i2);
        }
        this.mProcessList.noteAppKill(i2, i, 7, 0, "wrong startSeq");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                processRecord.killLocked("unexpected process record", 13, true);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void finishAttachApplication(long j) {
        int callingPid = android.os.Binder.getCallingPid();
        int callingUid = android.os.Binder.getCallingUid();
        if (!this.mConstants.mEnableWaitForFinishAttachApplication) {
            android.util.Slog.i("ActivityManager", "Flag disabled. Ignoring finishAttachApplication from uid: " + callingUid + ". pid: " + callingPid);
            return;
        }
        if (callingPid == MY_PID && callingUid == 1000) {
            return;
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            finishAttachApplicationInner(j, callingUid, callingPid);
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handleBindApplicationTimeoutSoft(com.android.server.am.ProcessRecord processRecord, int i) {
        long constrain = android.util.MathUtils.constrain(processRecord.getCpuDelayTime() - processRecord.mProfile.mLastCpuDelayTime.get(), 0L, i);
        if (constrain == 0) {
            handleBindApplicationTimeoutHard(processRecord);
            return;
        }
        android.util.Slog.i("ActivityManager", "Extending process start timeout by " + constrain + "ms for " + processRecord);
        android.os.Trace.instant(64L, "bindApplicationTimeSoft " + processRecord.processName + "(" + processRecord.getPid() + ")");
        this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(83, processRecord), constrain);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handleBindApplicationTimeoutHard(com.android.server.am.ProcessRecord processRecord) {
        java.lang.String str;
        synchronized (processRecord) {
            str = "Process " + processRecord + " failed to complete startup";
        }
        this.mAnrHelper.appNotResponding(processRecord, com.android.internal.os.TimeoutRecord.forAppStart(str));
    }

    @android.annotation.Nullable
    static java.lang.String getShortAction(@android.annotation.Nullable java.lang.String str) {
        int lastIndexOf;
        if (str != null && (lastIndexOf = str.lastIndexOf(46)) != -1 && lastIndexOf != str.length() - 1) {
            return str.substring(lastIndexOf + 1);
        }
        return str;
    }

    void checkTime(long j, java.lang.String str) {
        long uptimeMillis = android.os.SystemClock.uptimeMillis() - j;
        if (uptimeMillis > 50) {
            android.util.Slog.w("ActivityManager", "Slow operation: " + uptimeMillis + "ms so far, now at " + str);
        }
    }

    private void maybeSendBootCompletedLocked(com.android.server.am.ProcessRecord processRecord) {
        if (!android.content.pm.Flags.stayStopped() || !processRecord.wasForceStopped()) {
            return;
        }
        if (processRecord.getApplicationInfo().isEncryptionAware()) {
            sendBootBroadcastToAppLocked(processRecord, new android.content.Intent("android.intent.action.LOCKED_BOOT_COMPLETED"), 202);
        }
        if (android.os.storage.StorageManager.isCeStorageUnlocked(processRecord.userId)) {
            sendBootBroadcastToAppLocked(processRecord, new android.content.Intent("android.intent.action.BOOT_COMPLETED"), 200);
        }
        processRecord.setWasForceStopped(false);
    }

    private void sendBootBroadcastToAppLocked(com.android.server.am.ProcessRecord processRecord, android.content.Intent intent, int i) {
        intent.setPackage(processRecord.info.packageName);
        intent.putExtra("android.intent.extra.user_handle", processRecord.userId);
        intent.addFlags(150994976);
        broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, new java.lang.String[]{"android.permission.RECEIVE_BOOT_COMPLETED"}, null, null, -1, null, true, false, MY_PID, 1000, 1000, MY_PID, processRecord.userId);
    }

    public void showBootMessage(java.lang.CharSequence charSequence, boolean z) {
        if (android.os.Binder.getCallingUid() != android.os.Process.myUid()) {
            throw new java.lang.SecurityException();
        }
        this.mWindowManager.showBootMessage(charSequence, z);
    }

    final void finishBooting() {
        com.android.server.utils.TimingsTraceAndSlog timingsTraceAndSlog = new com.android.server.utils.TimingsTraceAndSlog("ActivityManagerTiming", 64L);
        timingsTraceAndSlog.traceBegin("FinishBooting");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mBootAnimationComplete) {
                    this.mCallFinishBooting = true;
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mCallFinishBooting = false;
                resetPriorityAfterLockedSection();
                android.os.Process.ZYGOTE_PROCESS.bootCompleted();
                dalvik.system.VMRuntime.bootCompleted();
                android.content.IntentFilter intentFilter = new android.content.IntentFilter();
                intentFilter.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
                intentFilter.addDataScheme(com.android.server.pm.Settings.ATTR_PACKAGE);
                this.mContext.registerReceiver(new android.content.BroadcastReceiver() { // from class: com.android.server.am.ActivityManagerService.8
                    @Override // android.content.BroadcastReceiver
                    public void onReceive(android.content.Context context, android.content.Intent intent) {
                        java.lang.String[] stringArrayExtra = intent.getStringArrayExtra("android.intent.extra.PACKAGES");
                        if (stringArrayExtra != null) {
                            for (java.lang.String str : stringArrayExtra) {
                                com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
                                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                                synchronized (activityManagerService) {
                                    try {
                                        if (com.android.server.am.ActivityManagerService.this.forceStopPackageLocked(str, -1, false, false, false, false, false, false, 0, "query restart")) {
                                            setResultCode(-1);
                                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                                            return;
                                        }
                                    } catch (java.lang.Throwable th) {
                                        com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                }
                                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                    }
                }, intentFilter);
                try {
                    android.util.Slog.i("ActivityManager", "About to commit checkpoint");
                    com.android.internal.content.InstallLocationUtils.getStorageManager().commitChanges();
                } catch (java.lang.Exception e) {
                    ((android.os.PowerManager) this.mInjector.getContext().getSystemService("power")).reboot("Checkpoint commit failed");
                }
                this.mSystemServiceManager.startBootPhase(timingsTraceAndSlog, 1000);
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        int size = this.mProcessesOnHold.size();
                        if (size > 0) {
                            java.util.ArrayList arrayList = new java.util.ArrayList(this.mProcessesOnHold);
                            for (int i = 0; i < size; i++) {
                                this.mProcessList.startProcessLocked((com.android.server.am.ProcessRecord) arrayList.get(i), new com.android.server.am.HostingRecord(com.android.server.am.HostingRecord.HOSTING_TYPE_ON_HOLD), 2);
                            }
                        }
                        if (this.mFactoryTest == 1) {
                            return;
                        }
                        this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(27), this.mConstants.POWER_CHECK_INTERVAL);
                        if (((java.lang.Boolean) android.sysprop.InitProperties.userspace_reboot_in_progress().orElse(false)).booleanValue()) {
                            com.android.server.UserspaceRebootLogger.noteUserspaceRebootSuccess();
                        }
                        android.os.SystemProperties.set("sys.boot_completed", "1");
                        android.os.SystemProperties.set("dev.bootcomplete", "1");
                        com.android.server.am.ProcessList.startPsiMonitoringAfterBoot();
                        this.mUserController.onBootComplete(new com.android.server.am.ActivityManagerService.AnonymousClass9());
                        maybeLogUserspaceRebootEvent();
                        this.mUserController.scheduleStartProfiles();
                        resetPriorityAfterLockedSection();
                        showConsoleNotificationIfActive();
                        showMteOverrideNotificationIfActive();
                        timingsTraceAndSlog.traceEnd();
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    /* renamed from: com.android.server.am.ActivityManagerService$9, reason: invalid class name */
    class AnonymousClass9 extends android.content.IIntentReceiver.Stub {
        AnonymousClass9() {
        }

        public void performReceive(android.content.Intent intent, int i, java.lang.String str, android.os.Bundle bundle, boolean z, boolean z2, int i2) {
            com.android.server.am.ActivityManagerService.this.mBootCompletedTimestamp = android.os.SystemClock.uptimeMillis();
            com.android.server.am.ActivityManagerService.this.mHandler.postDelayed(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$9$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    com.android.server.am.ActivityManagerService.AnonymousClass9.this.lambda$performReceive$0();
                }
            }, com.android.server.am.ActivityManagerService.this.mConstants.FULL_PSS_MIN_INTERVAL);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$performReceive$0() {
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
            com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    com.android.server.am.ActivityManagerService.this.mAppProfiler.requestPssAllProcsLPr(android.os.SystemClock.uptimeMillis(), true, false);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
        }
    }

    private void showConsoleNotificationIfActive() {
        if (!android.os.SystemProperties.get("init.svc.console").equals(android.net.INetd.IF_FLAG_RUNNING)) {
            return;
        }
        java.lang.String string = this.mContext.getString(android.R.string.config_wlan_data_service_package);
        ((android.app.NotificationManager) this.mContext.getSystemService(android.app.NotificationManager.class)).notifyAsUser(null, 55, new android.app.Notification.Builder(this.mContext, com.android.internal.notification.SystemNotificationChannels.DEVELOPER).setSmallIcon(android.R.drawable.stat_notify_sync_anim0).setWhen(0L).setOngoing(true).setTicker(string).setDefaults(0).setColor(this.mContext.getColor(android.R.color.system_notification_accent_color)).setContentTitle(string).setContentText(this.mContext.getString(android.R.string.config_wlan_data_service_class)).setVisibility(1).build(), android.os.UserHandle.ALL);
    }

    private void showMteOverrideNotificationIfActive() {
        if (java.util.Arrays.asList(android.os.SystemProperties.get("arm64.memtag.bootctl").split(",")).contains("memtag") || !android.os.SystemProperties.getBoolean("ro.arm64.memtag.bootctl_supported", false) || !com.android.internal.os.Zygote.nativeSupportsMemoryTagging()) {
            return;
        }
        java.lang.String string = this.mContext.getString(android.R.string.miniresolver_switch);
        ((android.app.NotificationManager) this.mContext.getSystemService(android.app.NotificationManager.class)).notifyAsUser(null, 69, new android.app.Notification.Builder(this.mContext, com.android.internal.notification.SystemNotificationChannels.DEVELOPER).setSmallIcon(android.R.drawable.stat_notify_sync_anim0).setOngoing(true).setTicker(string).setDefaults(0).setColor(this.mContext.getColor(android.R.color.system_notification_accent_color)).setContentTitle(string).setContentText(this.mContext.getString(android.R.string.miniresolver_sms_information)).setVisibility(1).build(), android.os.UserHandle.ALL);
    }

    public void bootAnimationComplete() {
        boolean z;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                z = this.mCallFinishBooting;
                this.mBootAnimationComplete = true;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (z) {
            finishBooting();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void scheduleHomeTimeout() {
        com.android.systemui.shared.Flags.enableHomeDelay();
    }

    private /* synthetic */ void lambda$scheduleHomeTimeout$2(int i) {
        if (!isThemeOverlayReady(i)) {
            android.util.Slog.d("ActivityManager", "ThemeHomeDelay: ThemeOverlayController not responding, launching Home after 15000ms");
            setThemeOverlayReady(i);
        }
    }

    public void setThemeOverlayReady(int i) {
        boolean add;
        enforceCallingPermission("android.permission.SET_THEME_OVERLAY_CONTROLLER_READY", "setThemeOverlayReady");
        synchronized (this.mThemeOverlayReadyUsers) {
            add = this.mThemeOverlayReadyUsers.add(java.lang.Integer.valueOf(i));
        }
        if (add) {
            com.android.systemui.shared.Flags.enableHomeDelay();
        }
    }

    public boolean isThemeOverlayReady(int i) {
        boolean contains;
        synchronized (this.mThemeOverlayReadyUsers) {
            contains = this.mThemeOverlayReadyUsers.contains(java.lang.Integer.valueOf(i));
        }
        return contains;
    }

    final void ensureBootCompleted() {
        boolean z;
        boolean z2;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                z = this.mBooting;
                this.mBooting = false;
                z2 = this.mBooted ? false : true;
                this.mBooted = true;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (z) {
            finishBooting();
        }
        if (z2) {
            this.mAtmInternal.enableScreenAfterBoot(this.mBooted);
        }
    }

    @java.lang.Deprecated
    public android.content.IIntentSender getIntentSender(int i, java.lang.String str, android.os.IBinder iBinder, java.lang.String str2, int i2, android.content.Intent[] intentArr, java.lang.String[] strArr, int i3, android.os.Bundle bundle, int i4) {
        return getIntentSenderWithFeature(i, str, null, iBinder, str2, i2, intentArr, strArr, i3, bundle, i4);
    }

    public android.content.IIntentSender getIntentSenderWithFeature(int i, java.lang.String str, java.lang.String str2, android.os.IBinder iBinder, java.lang.String str3, int i2, android.content.Intent[] intentArr, java.lang.String[] strArr, int i3, android.os.Bundle bundle, int i4) {
        enforceNotIsolatedCaller("getIntentSender");
        return getIntentSenderWithFeatureAsApp(i, str, str2, iBinder, str3, i2, intentArr, strArr, i3, bundle, i4, android.os.Binder.getCallingUid());
    }

    public android.content.IIntentSender getIntentSenderWithFeatureAsApp(int i, java.lang.String str, java.lang.String str2, android.os.IBinder iBinder, java.lang.String str3, int i2, android.content.Intent[] intentArr, java.lang.String[] strArr, int i3, android.os.Bundle bundle, int i4, int i5) {
        if (intentArr != null) {
            if (intentArr.length < 1) {
                throw new java.lang.IllegalArgumentException("Intents array length must be >= 1");
            }
            int i6 = 0;
            while (i6 < intentArr.length) {
                android.content.Intent intent = intentArr[i6];
                if (intent != null) {
                    if (intent.hasFileDescriptors()) {
                        throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
                    }
                    if (i == 1 && (intent.getFlags() & 33554432) != 0) {
                        throw new java.lang.IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                    }
                    if (android.app.PendingIntent.isNewMutableDisallowedImplicitPendingIntent(i3, intent, i == 3)) {
                        boolean isChangeEnabled = android.app.compat.CompatChanges.isChangeEnabled(236704164L, str, android.os.UserHandle.of(i4));
                        com.android.server.am.ActivityManagerUtils.logUnsafeIntentEvent(4, i5, intent, (strArr == null || i6 >= strArr.length) ? null : strArr[i6], isChangeEnabled);
                        if (isChangeEnabled) {
                            throw new java.lang.IllegalArgumentException(str + ": Targeting U+ (version 34 and above) disallows creating or retrieving a PendingIntent with FLAG_MUTABLE, an implicit Intent within and without FLAG_NO_CREATE and FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT for security reasons. To retrieve an already existing PendingIntent, use FLAG_NO_CREATE, however, to create a new PendingIntent with an implicit Intent use FLAG_IMMUTABLE.");
                        }
                    }
                    intentArr[i6] = new android.content.Intent(intent);
                    intentArr[i6].removeExtendedFlags(1);
                }
                i6++;
            }
            if (strArr != null && strArr.length != intentArr.length) {
                throw new java.lang.IllegalArgumentException("Intent array length does not match resolvedTypes length");
            }
        }
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in options");
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), i5, i4, i == 1, 0, "getIntentSender", null);
        if (i4 == -2) {
            handleIncomingUser = -2;
        }
        if (i5 != 0 && i5 != 1000) {
            try {
                int packageUid = android.app.AppGlobals.getPackageManager().getPackageUid(str, 268435456L, android.os.UserHandle.getUserId(i5));
                if (!android.os.UserHandle.isSameApp(i5, packageUid)) {
                    java.lang.String str4 = "Permission Denial: getIntentSender() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + i5 + ", (need uid=" + packageUid + ") is not allowed to send as package " + str;
                    android.util.Slog.w("ActivityManager", str4);
                    throw new java.lang.SecurityException(str4);
                }
            } catch (android.os.RemoteException e) {
                throw new java.lang.SecurityException(e);
            }
        }
        if (i == 3) {
            return this.mAtmInternal.getIntentSender(i, str, str2, i5, handleIncomingUser, iBinder, str3, i2, intentArr, strArr, i3, bundle);
        }
        return this.mPendingIntentController.getIntentSender(i, str, str2, i5, handleIncomingUser, iBinder, str3, i2, intentArr, strArr, i3, bundle);
    }

    public int sendIntentSender(android.app.IApplicationThread iApplicationThread, android.content.IIntentSender iIntentSender, android.os.IBinder iBinder, int i, android.content.Intent intent, java.lang.String str, android.content.IIntentReceiver iIntentReceiver, java.lang.String str2, android.os.Bundle bundle) {
        android.content.Intent intent2;
        if (iIntentSender instanceof com.android.server.am.PendingIntentRecord) {
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            com.android.server.am.PendingIntentRecord.Key key = pendingIntentRecord.key;
            com.android.server.pm.UserManagerInternal userManagerInternal = (com.android.server.pm.UserManagerInternal) com.android.server.LocalServices.getService(com.android.server.pm.UserManagerInternal.class);
            int callingUserId = android.os.UserHandle.getCallingUserId();
            if (android.os.UserManager.isVisibleBackgroundUsersEnabled() && key.userId == -2 && callingUserId != 0 && userManagerInternal.isUserVisible(callingUserId)) {
                com.android.server.am.EventLogTags.writeAmIntentSenderRedirectUser(callingUserId);
                return new com.android.server.am.PendingIntentRecord(pendingIntentRecord.controller, new com.android.server.am.PendingIntentRecord.Key(key.type, key.packageName, key.featureId, key.activity, key.who, key.requestCode, key.allIntents, key.allResolvedTypes, key.flags, key.options, callingUserId), pendingIntentRecord.uid).sendWithResult(iApplicationThread, i, intent, str, iBinder, iIntentReceiver, str2, bundle);
            }
            return pendingIntentRecord.sendWithResult(iApplicationThread, i, intent, str, iBinder, iIntentReceiver, str2, bundle);
        }
        if (intent == null) {
            android.util.Slog.wtf("ActivityManager", "Can't use null intent with direct IIntentSender call");
            intent2 = new android.content.Intent("android.intent.action.MAIN");
        } else {
            intent2 = intent;
        }
        if (iBinder != null) {
            try {
                int callingUid = android.os.Binder.getCallingUid();
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    java.lang.String nameForUid = android.app.AppGlobals.getPackageManager().getNameForUid(callingUid);
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                    android.util.Slog.wtf("ActivityManager", "Send a non-null allowlistToken to a non-PI target. Calling package: " + nameForUid + "; intent: " + intent2 + "; options: " + bundle);
                } catch (java.lang.Throwable th) {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            } catch (android.os.RemoteException e) {
            }
        }
        iIntentSender.send(i, intent2, str, (android.os.IBinder) null, (android.content.IIntentReceiver) null, str2, bundle);
        if (iIntentReceiver != null) {
            try {
                iIntentReceiver.performReceive(intent2, 0, (java.lang.String) null, (android.os.Bundle) null, false, false, android.os.UserHandle.getCallingUserId());
                return 0;
            } catch (android.os.RemoteException e2) {
                return 0;
            }
        }
        return 0;
    }

    public void cancelIntentSender(android.content.IIntentSender iIntentSender) {
        this.mPendingIntentController.cancelIntentSender(iIntentSender);
    }

    public boolean registerIntentSenderCancelListenerEx(android.content.IIntentSender iIntentSender, com.android.internal.os.IResultReceiver iResultReceiver) {
        return this.mPendingIntentController.registerIntentSenderCancelListener(iIntentSender, iResultReceiver);
    }

    public void unregisterIntentSenderCancelListener(android.content.IIntentSender iIntentSender, com.android.internal.os.IResultReceiver iResultReceiver) {
        this.mPendingIntentController.unregisterIntentSenderCancelListener(iIntentSender, iResultReceiver);
    }

    public android.app.ActivityManager.PendingIntentInfo getInfoForIntentSender(android.content.IIntentSender iIntentSender) {
        if (iIntentSender instanceof com.android.server.am.PendingIntentRecord) {
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            java.lang.String str = pendingIntentRecord.key.packageName;
            int i = pendingIntentRecord.uid;
            boolean filterAppAccess = getPackageManagerInternal().filterAppAccess(str, android.os.Binder.getCallingUid(), android.os.UserHandle.getUserId(i));
            return new android.app.ActivityManager.PendingIntentInfo(filterAppAccess ? null : str, filterAppAccess ? -1 : i, (pendingIntentRecord.key.flags & 67108864) != 0, pendingIntentRecord.key.type);
        }
        return new android.app.ActivityManager.PendingIntentInfo((java.lang.String) null, -1, false, 0);
    }

    public boolean isIntentSenderTargetedToPackage(android.content.IIntentSender iIntentSender) {
        if (!(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
            return false;
        }
        try {
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            if (pendingIntentRecord.key.allIntents == null) {
                return false;
            }
            for (int i = 0; i < pendingIntentRecord.key.allIntents.length; i++) {
                android.content.Intent intent = pendingIntentRecord.key.allIntents[i];
                if (intent.getPackage() != null && intent.getComponent() != null) {
                    return false;
                }
            }
            return true;
        } catch (java.lang.ClassCastException e) {
            return false;
        }
    }

    public boolean isIntentSenderAnActivity(android.content.IIntentSender iIntentSender) {
        if (!(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
            return false;
        }
        try {
            return ((com.android.server.am.PendingIntentRecord) iIntentSender).key.type == 2;
        } catch (java.lang.ClassCastException e) {
            return false;
        }
    }

    public android.content.Intent getIntentForIntentSender(android.content.IIntentSender iIntentSender) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
        if (!(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
            return null;
        }
        try {
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            if (pendingIntentRecord.key.requestIntent != null) {
                return new android.content.Intent(pendingIntentRecord.key.requestIntent);
            }
            return null;
        } catch (java.lang.ClassCastException e) {
            return null;
        }
    }

    public android.content.pm.ParceledListSlice<android.content.pm.ResolveInfo> queryIntentComponentsForIntentSender(android.content.IIntentSender iIntentSender, int i) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "queryIntentComponentsForIntentSender()");
        java.util.Objects.requireNonNull(iIntentSender);
        try {
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            android.content.Intent intent = pendingIntentRecord.key.requestIntent;
            if (intent == null) {
                return null;
            }
            int i2 = pendingIntentRecord.key.userId;
            int i3 = pendingIntentRecord.uid;
            java.lang.String str = pendingIntentRecord.key.requestResolvedType;
            switch (pendingIntentRecord.key.type) {
                case 1:
                    return new android.content.pm.ParceledListSlice<>(this.mPackageManagerInt.queryIntentReceivers(intent, str, i, i3, i2, false));
                case 2:
                    return new android.content.pm.ParceledListSlice<>(this.mPackageManagerInt.queryIntentActivities(intent, str, i, i3, i2));
                case 3:
                default:
                    throw new java.lang.IllegalStateException("Unsupported intent sender type: " + pendingIntentRecord.key.type);
                case 4:
                case 5:
                    return new android.content.pm.ParceledListSlice<>(this.mPackageManagerInt.queryIntentServices(intent, i, i3, i2));
            }
        } catch (java.lang.ClassCastException e) {
            return null;
        }
    }

    public java.lang.String getTagForIntentSender(android.content.IIntentSender iIntentSender, java.lang.String str) {
        java.lang.String tagForIntentSenderLocked;
        if (!(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
            return null;
        }
        try {
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    tagForIntentSenderLocked = getTagForIntentSenderLocked(pendingIntentRecord, str);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            return tagForIntentSenderLocked;
        } catch (java.lang.ClassCastException e) {
            return null;
        }
    }

    java.lang.String getTagForIntentSenderLocked(com.android.server.am.PendingIntentRecord pendingIntentRecord, java.lang.String str) {
        android.content.Intent intent = pendingIntentRecord.key.requestIntent;
        if (intent != null) {
            if (pendingIntentRecord.lastTag != null && pendingIntentRecord.lastTagPrefix == str && (pendingIntentRecord.lastTagPrefix == null || pendingIntentRecord.lastTagPrefix.equals(str))) {
                return pendingIntentRecord.lastTag;
            }
            pendingIntentRecord.lastTagPrefix = str;
            java.lang.StringBuilder sb = new java.lang.StringBuilder(128);
            if (str != null) {
                sb.append(str);
            }
            if (intent.getAction() != null) {
                sb.append(intent.getAction());
            } else if (intent.getComponent() != null) {
                intent.getComponent().appendShortString(sb);
            } else {
                sb.append("?");
            }
            java.lang.String sb2 = sb.toString();
            pendingIntentRecord.lastTag = sb2;
            return sb2;
        }
        return null;
    }

    public void setProcessLimit(int i) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mConstants.setOverrideMaxCachedProcesses(i);
                trimApplicationsLocked(true, 12);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getProcessLimit() {
        int overrideMaxCachedProcesses;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                overrideMaxCachedProcesses = this.mConstants.getOverrideMaxCachedProcesses();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return overrideMaxCachedProcesses;
    }

    void importanceTokenDied(com.android.server.am.ActivityManagerService.ImportanceToken importanceToken) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    if (this.mImportantProcesses.get(importanceToken.pid) != importanceToken) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mImportantProcesses.remove(importanceToken.pid);
                    com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(importanceToken.pid);
                    if (processRecord == null) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    processRecord.mState.setForcingToImportant(null);
                    clearProcessForegroundLocked(processRecord);
                    updateOomAdjLocked(processRecord, 9);
                    resetPriorityAfterLockedSection();
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:29:0x007a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void setProcessImportant(android.os.IBinder iBinder, int i, boolean z, java.lang.String str) {
        boolean z2;
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessImportant()");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
                    if (processRecord == null && z) {
                        android.util.Slog.w("ActivityManager", "setProcessForeground called on unknown pid: " + i);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    com.android.server.am.ActivityManagerService.ImportanceToken importanceToken = this.mImportantProcesses.get(i);
                    boolean z3 = true;
                    if (importanceToken == null) {
                        z2 = false;
                    } else {
                        importanceToken.token.unlinkToDeath(importanceToken, 0);
                        this.mImportantProcesses.remove(i);
                        if (processRecord != null) {
                            processRecord.mState.setForcingToImportant(null);
                        }
                        z2 = true;
                    }
                    if (z && iBinder != null) {
                        com.android.server.am.ActivityManagerService.ImportanceToken importanceToken2 = new com.android.server.am.ActivityManagerService.ImportanceToken(i, iBinder, str) { // from class: com.android.server.am.ActivityManagerService.10
                            @Override // android.os.IBinder.DeathRecipient
                            public void binderDied() {
                                com.android.server.am.ActivityManagerService.this.importanceTokenDied(this);
                            }
                        };
                        try {
                            iBinder.linkToDeath(importanceToken2, 0);
                            this.mImportantProcesses.put(i, importanceToken2);
                            processRecord.mState.setForcingToImportant(importanceToken2);
                        } catch (android.os.RemoteException e) {
                        }
                        if (z3) {
                            updateOomAdjLocked(processRecord, 9);
                        }
                        resetPriorityAfterLockedSection();
                    }
                    z3 = z2;
                    if (z3) {
                    }
                    resetPriorityAfterLockedSection();
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isAppForeground(int i) {
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                com.android.server.am.UidRecord uidRecord = this.mProcessList.mActiveUids.get(i);
                if (uidRecord == null || uidRecord.isIdle()) {
                    resetPriorityAfterProcLockedSection();
                    return false;
                }
                boolean z = uidRecord.getCurProcState() <= 6;
                resetPriorityAfterProcLockedSection();
                return z;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isAppBad(java.lang.String str, int i) {
        return this.mAppErrors.isBadProcess(str, i);
    }

    int getUidState(int i) {
        int uidProcStateLOSP;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                uidProcStateLOSP = this.mProcessList.getUidProcStateLOSP(i);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcStateLOSP;
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    int getUidStateLocked(int i) {
        return this.mProcessList.getUidProcStateLOSP(i);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    int getUidProcessCapabilityLocked(int i) {
        return this.mProcessList.getUidProcessCapabilityLOSP(i);
    }

    static class ProcessInfoService extends android.os.IProcessInfoService.Stub {
        final com.android.server.am.ActivityManagerService mActivityManagerService;

        ProcessInfoService(com.android.server.am.ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public void getProcessStatesFromPids(int[] iArr, int[] iArr2) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(iArr, iArr2, null);
        }

        public void getProcessStatesAndOomScoresFromPids(int[] iArr, int[] iArr2, int[] iArr3) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(iArr, iArr2, iArr3);
        }
    }

    public void getProcessStatesAndOomScoresForPIDs(int[] iArr, int[] iArr2, int[] iArr3) {
        if (iArr3 != null) {
            enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
        }
        if (iArr == null) {
            throw new java.lang.NullPointerException("pids");
        }
        if (iArr2 == null) {
            throw new java.lang.NullPointerException("states");
        }
        if (iArr.length != iArr2.length) {
            throw new java.lang.IllegalArgumentException("pids and states arrays have different lengths!");
        }
        if (iArr3 != null && iArr.length != iArr3.length) {
            throw new java.lang.IllegalArgumentException("pids and scores arrays have different lengths!");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    long j = Long.MIN_VALUE;
                    int i = -1;
                    for (int i2 = 0; i2 < iArr.length; i2++) {
                        try {
                            com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(iArr[i2]);
                            if (processRecord != null) {
                                long pendingTopPidTime = this.mPendingStartActivityUids.getPendingTopPidTime(processRecord.uid, iArr[i2]);
                                if (pendingTopPidTime != 0) {
                                    iArr2[i2] = 2;
                                    if (iArr3 != null) {
                                        iArr3[i2] = -1;
                                    }
                                    if (pendingTopPidTime > j) {
                                        i = i2;
                                        j = pendingTopPidTime;
                                    }
                                } else {
                                    iArr2[i2] = processRecord.mState.getCurProcState();
                                    if (iArr3 != null) {
                                        iArr3[i2] = processRecord.mState.getCurAdj();
                                    }
                                }
                            } else {
                                iArr2[i2] = 20;
                                if (iArr3 != null) {
                                    iArr3[i2] = -10000;
                                }
                            }
                        } catch (java.lang.Throwable th) {
                            throw th;
                        }
                    }
                    if (i != -1 && iArr3 != null) {
                        iArr3[i] = -2;
                    }
                }
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterProcLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    static class PermissionController extends android.os.IPermissionController.Stub {
        com.android.server.am.ActivityManagerService mActivityManagerService;

        PermissionController(com.android.server.am.ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public boolean checkPermission(java.lang.String str, int i, int i2) {
            return this.mActivityManagerService.checkPermission(str, i, i2) == 0;
        }

        public int noteOp(java.lang.String str, int i, java.lang.String str2) {
            return this.mActivityManagerService.mAppOpsService.noteOperation(android.app.AppOpsManager.strOpToOp(str), i, str2, null, false, "", false).getOpMode();
        }

        public java.lang.String[] getPackagesForUid(int i) {
            return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(i);
        }

        public boolean isRuntimePermission(java.lang.String str) {
            try {
                return (this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(str, 0).protectionLevel & 15) == 1;
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                android.util.Slog.e("ActivityManager", "No such permission: " + str, e);
                return false;
            }
        }

        public int getPackageUid(java.lang.String str, int i) {
            try {
                return this.mActivityManagerService.mContext.getPackageManager().getPackageUid(str, i);
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                return -1;
            }
        }
    }

    class IntentFirewallInterface implements com.android.server.firewall.IntentFirewall.AMSInterface {
        IntentFirewallInterface() {
        }

        @Override // com.android.server.firewall.IntentFirewall.AMSInterface
        public int checkComponentPermission(java.lang.String str, int i, int i2, int i3, boolean z) {
            return com.android.server.am.ActivityManagerService.checkComponentPermission(str, i, i2, i3, z);
        }

        @Override // com.android.server.firewall.IntentFirewall.AMSInterface
        public java.lang.Object getAMSLock() {
            return com.android.server.am.ActivityManagerService.this;
        }
    }

    @android.annotation.PermissionMethod
    public static int checkComponentPermission(@android.annotation.PermissionName java.lang.String str, int i, int i2, int i3, boolean z) {
        return checkComponentPermission(str, i, i2, 0, i3, z);
    }

    @android.annotation.PermissionMethod
    public static int checkComponentPermission(@android.annotation.PermissionName java.lang.String str, int i, int i2, int i3, int i4, boolean z) {
        if (i == MY_PID) {
            return 0;
        }
        if (str != null) {
            synchronized (sActiveProcessInfoSelfLocked) {
                try {
                    android.content.pm.ProcessInfo processInfo = sActiveProcessInfoSelfLocked.get(i);
                    if (processInfo != null && processInfo.deniedPermissions != null && processInfo.deniedPermissions.contains(str)) {
                        return -1;
                    }
                } finally {
                }
            }
        }
        return android.app.ActivityManager.checkComponentPermission(str, i2, i3, i4, z);
    }

    private void enforceDebuggable(com.android.server.am.ProcessRecord processRecord) {
        if (!android.os.Build.IS_DEBUGGABLE && !processRecord.isDebuggable()) {
            throw new java.lang.SecurityException("Process not debuggable: " + processRecord.info.packageName);
        }
    }

    private void enforceDebuggable(android.content.pm.ApplicationInfo applicationInfo) {
        if (!android.os.Build.IS_DEBUGGABLE && (applicationInfo.flags & 2) == 0) {
            throw new java.lang.SecurityException("Process not debuggable: " + applicationInfo.packageName);
        }
    }

    @android.annotation.PermissionMethod
    public int checkPermission(@android.annotation.PermissionName java.lang.String str, int i, int i2) {
        return checkPermissionForDevice(str, i, i2, 0);
    }

    @android.annotation.PermissionMethod
    public int checkPermissionForDevice(@android.annotation.PermissionName java.lang.String str, int i, int i2, int i3) {
        if (str == null) {
            return -1;
        }
        return checkComponentPermission(str, i, i2, i3, -1, true);
    }

    @android.annotation.PermissionMethod
    int checkCallingPermission(@android.annotation.PermissionName java.lang.String str) {
        return checkPermission(str, android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid());
    }

    @android.annotation.PermissionMethod
    void enforceCallingPermission(@android.annotation.PermissionName java.lang.String str, java.lang.String str2) {
        if (checkCallingPermission(str) == 0) {
            return;
        }
        java.lang.String str3 = "Permission Denial: " + str2 + " from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires " + str;
        android.util.Slog.w("ActivityManager", str3);
        throw new java.lang.SecurityException(str3);
    }

    @android.annotation.PermissionMethod(anyOf = true)
    private void enforceCallingHasAtLeastOnePermission(java.lang.String str, java.lang.String... strArr) {
        for (java.lang.String str2 : strArr) {
            if (checkCallingPermission(str2) == 0) {
                return;
            }
        }
        java.lang.String str3 = "Permission Denial: " + str + " from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires one of " + java.util.Arrays.toString(strArr);
        android.util.Slog.w("ActivityManager", str3);
        throw new java.lang.SecurityException(str3);
    }

    @android.annotation.PermissionMethod
    void enforcePermission(@android.annotation.PermissionName java.lang.String str, int i, int i2, java.lang.String str2) {
        if (checkPermission(str, i, i2) == 0) {
            return;
        }
        java.lang.String str3 = "Permission Denial: " + str2 + " from pid=" + i + ", uid=" + i2 + " requires " + str;
        android.util.Slog.w("ActivityManager", str3);
        throw new java.lang.SecurityException(str3);
    }

    public boolean isAppStartModeDisabled(int i, java.lang.String str) {
        boolean z;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                z = getAppStartModeLOSP(i, str, 0, -1, false, true, false) == 3;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return z;
    }

    private boolean isInRestrictedBucket(int i, java.lang.String str, long j) {
        return 45 <= this.mUsageStatsService.getAppStandbyBucket(str, i, j);
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    int appRestrictedInBackgroundLOSP(int i, java.lang.String str, int i2) {
        if (i2 >= 26) {
            return 2;
        }
        if (this.mOnBattery && this.mConstants.FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS && isInRestrictedBucket(android.os.UserHandle.getUserId(i), str, android.os.SystemClock.elapsedRealtime())) {
            return 1;
        }
        switch (getAppOpsManager().noteOpNoThrow(63, i, str, (java.lang.String) null, "")) {
            case 0:
                return (!this.mForceBackgroundCheck || android.os.UserHandle.isCore(i) || isOnDeviceIdleAllowlistLOSP(i, true)) ? 0 : 1;
            case 1:
                return 1;
            default:
                return 2;
        }
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    int appServicesRestrictedInBackgroundLOSP(int i, java.lang.String str, int i2) {
        if (this.mPackageManagerInt.isPackagePersistent(str) || uidOnBackgroundAllowlistLOSP(i) || isOnDeviceIdleAllowlistLOSP(i, false)) {
            return 0;
        }
        return appRestrictedInBackgroundLOSP(i, str, i2);
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    int getAppStartModeLOSP(int i, java.lang.String str, int i2, int i3, boolean z, boolean z2, boolean z3) {
        boolean isEphemeral;
        int appServicesRestrictedInBackgroundLOSP;
        com.android.server.am.ProcessRecord processRecord;
        if (this.mInternal.isPendingTopUid(i)) {
            return 0;
        }
        com.android.server.am.UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
        if (uidRecordLOSP != null && !z && !z3 && !uidRecordLOSP.isIdle()) {
            return 0;
        }
        if (uidRecordLOSP == null) {
            isEphemeral = getPackageManagerInternal().isPackageEphemeral(android.os.UserHandle.getUserId(i), str);
        } else {
            isEphemeral = uidRecordLOSP.isEphemeral();
        }
        if (isEphemeral) {
            return 3;
        }
        if (z2) {
            return 0;
        }
        if (z) {
            appServicesRestrictedInBackgroundLOSP = appRestrictedInBackgroundLOSP(i, str, i2);
        } else {
            appServicesRestrictedInBackgroundLOSP = appServicesRestrictedInBackgroundLOSP(i, str, i2);
        }
        if (appServicesRestrictedInBackgroundLOSP == 1 && i3 >= 0) {
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(i3);
            }
            if (processRecord != null && !android.app.ActivityManager.isProcStateBackground(processRecord.mState.getCurProcState())) {
                return 0;
            }
        }
        return appServicesRestrictedInBackgroundLOSP;
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    boolean isOnDeviceIdleAllowlistLOSP(int i, boolean z) {
        int[] iArr;
        int appId = android.os.UserHandle.getAppId(i);
        if (z) {
            iArr = this.mDeviceIdleExceptIdleAllowlist;
        } else {
            iArr = this.mDeviceIdleAllowlist;
        }
        return java.util.Arrays.binarySearch(iArr, appId) >= 0 || java.util.Arrays.binarySearch(this.mDeviceIdleTempAllowlist, appId) >= 0 || this.mPendingTempAllowlist.get(i) != null;
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    @android.annotation.Nullable
    com.android.server.am.ActivityManagerService.FgsTempAllowListItem isAllowlistedForFgsStartLOSP(int i) {
        if (java.util.Arrays.binarySearch(this.mDeviceIdleExceptIdleAllowlist, android.os.UserHandle.getAppId(i)) >= 0) {
            return FAKE_TEMP_ALLOW_LIST_ITEM;
        }
        android.util.Pair<java.lang.Long, com.android.server.am.ActivityManagerService.FgsTempAllowListItem> pair = this.mFgsStartTempAllowList.get(i);
        if (pair == null) {
            return null;
        }
        return (com.android.server.am.ActivityManagerService.FgsTempAllowListItem) pair.second;
    }

    private static class GetBackgroundStartPrivilegesFunctor implements java.util.function.Consumer<com.android.server.am.ProcessRecord> {
        private android.app.BackgroundStartPrivileges mBackgroundStartPrivileges;
        private int mUid;

        private GetBackgroundStartPrivilegesFunctor() {
            this.mBackgroundStartPrivileges = android.app.BackgroundStartPrivileges.NONE;
        }

        void prepare(int i) {
            this.mUid = i;
            this.mBackgroundStartPrivileges = android.app.BackgroundStartPrivileges.NONE;
        }

        @android.annotation.NonNull
        android.app.BackgroundStartPrivileges getResult() {
            return this.mBackgroundStartPrivileges;
        }

        @Override // java.util.function.Consumer
        public void accept(com.android.server.am.ProcessRecord processRecord) {
            if (processRecord.uid == this.mUid) {
                this.mBackgroundStartPrivileges = this.mBackgroundStartPrivileges.merge(processRecord.getBackgroundStartPrivileges());
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    @android.annotation.NonNull
    public android.app.BackgroundStartPrivileges getBackgroundStartPrivileges(int i) {
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                com.android.server.am.UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
                if (uidRecordLOSP == null) {
                    android.app.BackgroundStartPrivileges backgroundStartPrivileges = android.app.BackgroundStartPrivileges.NONE;
                    resetPriorityAfterProcLockedSection();
                    return backgroundStartPrivileges;
                }
                this.mGetBackgroundStartPrivilegesFunctor.prepare(i);
                uidRecordLOSP.forEachProcess(this.mGetBackgroundStartPrivilegesFunctor);
                android.app.BackgroundStartPrivileges result = this.mGetBackgroundStartPrivilegesFunctor.getResult();
                resetPriorityAfterProcLockedSection();
                return result;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    static boolean doesReasonCodeAllowSchedulingUserInitiatedJobs(int i) {
        switch (i) {
            case 10:
            case 11:
            case 12:
            case 13:
            case 50:
            case 51:
            case 53:
            case 57:
            case 58:
            case 60:
            case 62:
            case 67:
                return true;
            default:
                return false;
        }
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    private boolean isProcessInStateToScheduleUserInitiatedJobsLocked(@android.annotation.Nullable com.android.server.am.ProcessRecord processRecord, long j) {
        if (processRecord == null) {
            return false;
        }
        if (processRecord.getBackgroundStartPrivileges().allowsBackgroundActivityStarts()) {
            return true;
        }
        com.android.server.am.ProcessStateRecord processStateRecord = processRecord.mState;
        int curProcState = processStateRecord.getCurProcState();
        if (curProcState <= 3 && doesReasonCodeAllowSchedulingUserInitiatedJobs(android.os.PowerExemptionManager.getReasonCodeFromProcState(curProcState))) {
            return true;
        }
        long lastInvisibleTime = processStateRecord.getLastInvisibleTime();
        if (lastInvisibleTime > 0 && lastInvisibleTime < com.android.server.job.controllers.JobStatus.NO_LATEST_RUNTIME && j - lastInvisibleTime < this.mConstants.mVisibleToInvisibleUijScheduleGraceDurationMs) {
            return true;
        }
        com.android.server.am.ProcessServiceRecord processServiceRecord = processRecord.mServices;
        if (processServiceRecord != null && processServiceRecord.hasForegroundServices()) {
            for (int numberOfRunningServices = processServiceRecord.numberOfRunningServices() - 1; numberOfRunningServices >= 0; numberOfRunningServices--) {
                com.android.server.am.ServiceRecord runningServiceAt = processServiceRecord.getRunningServiceAt(numberOfRunningServices);
                if (runningServiceAt.isForeground && runningServiceAt.mAllowUiJobScheduling) {
                    return true;
                }
            }
        }
        return false;
    }

    boolean canScheduleUserInitiatedJobs(int i, int i2, java.lang.String str) {
        com.android.server.am.ProcessRecord processRecord;
        android.app.BackgroundStartPrivileges backgroundStartPrivileges;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(i2);
                }
                long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
                if (processRecord != null) {
                    if (isProcessInStateToScheduleUserInitiatedJobsLocked(processRecord, elapsedRealtime)) {
                        resetPriorityAfterLockedSection();
                        return true;
                    }
                    backgroundStartPrivileges = processRecord.getBackgroundStartPrivileges();
                } else {
                    backgroundStartPrivileges = getBackgroundStartPrivileges(i);
                }
                if (backgroundStartPrivileges.allowsBackgroundActivityStarts()) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                if (this.mServices.canAllowWhileInUsePermissionInFgsLocked(i2, i, str, processRecord, backgroundStartPrivileges)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                com.android.server.am.UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
                if (uidRecordLOSP != null) {
                    for (int numOfProcs = uidRecordLOSP.getNumOfProcs() - 1; numOfProcs >= 0; numOfProcs--) {
                        if (isProcessInStateToScheduleUserInitiatedJobsLocked(uidRecordLOSP.getProcessRecordByIndex(numOfProcs), elapsedRealtime)) {
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                    }
                }
                if (this.mAtmInternal.hasSystemAlertWindowPermission(i, i2, str)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                if (this.mInternal.isAssociatedCompanionApp(android.os.UserHandle.getUserId(i), i) && checkPermission("android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND", i2, i) == 0) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    java.lang.String getPendingTempAllowlistTagForUidLOSP(int i) {
        com.android.server.am.ActivityManagerService.PendingTempAllowlist pendingTempAllowlist = this.mPendingTempAllowlist.get(i);
        if (pendingTempAllowlist != null) {
            return pendingTempAllowlist.tag;
        }
        return null;
    }

    @com.android.internal.annotations.VisibleForTesting
    public void grantImplicitAccess(int i, android.content.Intent intent, int i2, int i3) {
        getPackageManagerInternal().grantImplicitAccess(i, intent, i3, i2, true);
    }

    public int checkUriPermission(android.net.Uri uri, int i, int i2, int i3, int i4, android.os.IBinder iBinder) {
        return checkUriPermission(uri, i, i2, i3, i4, false, "checkUriPermission");
    }

    public int checkContentUriPermissionFull(android.net.Uri uri, int i, int i2, int i3, int i4) {
        return checkUriPermission(uri, i, i2, i3, i4, true, "checkContentUriPermissionFull");
    }

    private int checkUriPermission(android.net.Uri uri, int i, int i2, int i3, int i4, boolean z, java.lang.String str) {
        enforceNotIsolatedCaller(str);
        if (i == MY_PID) {
            return 0;
        }
        return ((i2 == 0 || !this.mPackageManagerInt.filterAppAccess(i2, android.os.Binder.getCallingUid())) && this.mUgmInternal.checkUriPermission(new com.android.server.uri.GrantUri(i4, uri, i3), i2, i3, z)) ? 0 : -1;
    }

    public int[] checkUriPermissions(@android.annotation.NonNull java.util.List<android.net.Uri> list, int i, int i2, int i3, int i4, android.os.IBinder iBinder) {
        int size = list.size();
        int[] iArr = new int[size];
        java.util.Arrays.fill(iArr, -1);
        for (int i5 = 0; i5 < size; i5++) {
            android.net.Uri uri = list.get(i5);
            iArr[i5] = checkUriPermission(android.content.ContentProvider.getUriWithoutUserId(uri), i, i2, i3, android.content.ContentProvider.getUserIdFromUri(uri, i4), iBinder);
        }
        return iArr;
    }

    public void grantUriPermission(android.app.IApplicationThread iApplicationThread, java.lang.String str, android.net.Uri uri, int i, int i2) {
        enforceNotIsolatedCaller("grantUriPermission");
        com.android.server.uri.GrantUri grantUri = new com.android.server.uri.GrantUri(i2, uri, i);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    throw new java.lang.SecurityException("Unable to find app for caller " + iApplicationThread + " when granting permission to uri " + grantUri);
                }
                if (str == null) {
                    throw new java.lang.IllegalArgumentException("null target");
                }
                int userId = android.os.UserHandle.getUserId(recordForAppLOSP.uid);
                if (this.mPackageManagerInt.filterAppAccess(str, recordForAppLOSP.uid, userId)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                com.android.internal.util.Preconditions.checkFlagsArgument(i, 195);
                android.content.Intent intent = new android.content.Intent();
                intent.setData(android.content.ContentProvider.maybeAddUserId(uri, i2));
                intent.setFlags(i);
                this.mUgmInternal.grantUriPermissionUncheckedFromIntent(this.mUgmInternal.checkGrantUriPermissionFromIntent(intent, recordForAppLOSP.uid, str, userId), null);
                resetPriorityAfterLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void revokeUriPermission(android.app.IApplicationThread iApplicationThread, java.lang.String str, android.net.Uri uri, int i, int i2) {
        enforceNotIsolatedCaller("revokeUriPermission");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    throw new java.lang.SecurityException("Unable to find app for caller " + iApplicationThread + " when revoking permission to uri " + uri);
                }
                if (uri == null) {
                    android.util.Slog.w("ActivityManager", "revokeUriPermission: null uri");
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (!android.content.Intent.isAccessUriMode(i)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (this.mCpHelper.getProviderInfoLocked(uri.getAuthority(), i2, 786432) == null) {
                    android.util.Slog.w("ActivityManager", "No content provider found for permission revoke: " + uri.toSafeString());
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mUgmInternal.revokeUriPermission(str, recordForAppLOSP.uid, new com.android.server.uri.GrantUri(i2, uri, i), i);
                resetPriorityAfterLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void showWaitingForDebugger(android.app.IApplicationThread iApplicationThread, boolean z) {
        com.android.server.am.ProcessRecord recordForAppLOSP;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            if (iApplicationThread == null) {
                recordForAppLOSP = null;
            } else {
                try {
                    recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            if (recordForAppLOSP == null) {
                resetPriorityAfterProcLockedSection();
                return;
            }
            android.os.Message obtain = android.os.Message.obtain();
            obtain.what = 6;
            obtain.obj = recordForAppLOSP;
            obtain.arg1 = z ? 1 : 0;
            this.mUiHandler.sendMessage(obtain);
            resetPriorityAfterProcLockedSection();
        }
    }

    public void getMemoryInfo(android.app.ActivityManager.MemoryInfo memoryInfo) {
        this.mProcessList.getMemoryInfo(memoryInfo);
    }

    public java.util.List<android.app.ActivityManager.RunningTaskInfo> getTasks(int i) {
        return this.mActivityTaskManager.getTasks(i);
    }

    public void cancelTaskWindowTransition(int i) {
        this.mActivityTaskManager.cancelTaskWindowTransition(i);
    }

    public void setTaskResizeable(int i, int i2) {
        this.mActivityTaskManager.setTaskResizeable(i, i2);
    }

    public void resizeTask(int i, android.graphics.Rect rect, int i2) {
        this.mActivityTaskManager.resizeTask(i, rect, i2);
    }

    public android.graphics.Rect getTaskBounds(int i) {
        return this.mActivityTaskManager.getTaskBounds(i);
    }

    public boolean removeTask(int i) {
        return this.mActivityTaskManager.removeTask(i);
    }

    public void moveTaskToFront(android.app.IApplicationThread iApplicationThread, java.lang.String str, int i, int i2, android.os.Bundle bundle) {
        this.mActivityTaskManager.moveTaskToFront(iApplicationThread, str, i, i2, bundle);
    }

    public boolean moveActivityTaskToBack(android.os.IBinder iBinder, boolean z) {
        return android.app.ActivityClient.getInstance().moveActivityTaskToBack(iBinder, z);
    }

    public void moveTaskToRootTask(int i, int i2, boolean z) {
        this.mActivityTaskManager.moveTaskToRootTask(i, i2, z);
    }

    public android.content.pm.ParceledListSlice<android.app.ActivityManager.RecentTaskInfo> getRecentTasks(int i, int i2, int i3) {
        return this.mActivityTaskManager.getRecentTasks(i, i2, i3);
    }

    public java.util.List<android.app.ActivityTaskManager.RootTaskInfo> getAllRootTaskInfos() {
        return this.mActivityTaskManager.getAllRootTaskInfos();
    }

    public int getTaskForActivity(android.os.IBinder iBinder, boolean z) {
        return android.app.ActivityClient.getInstance().getTaskForActivity(iBinder, z);
    }

    public void updateLockTaskPackages(int i, java.lang.String[] strArr) {
        this.mActivityTaskManager.updateLockTaskPackages(i, strArr);
    }

    public boolean isInLockTaskMode() {
        return this.mActivityTaskManager.isInLockTaskMode();
    }

    public int getLockTaskModeState() {
        return this.mActivityTaskManager.getLockTaskModeState();
    }

    public void startSystemLockTaskMode(int i) throws android.os.RemoteException {
        this.mActivityTaskManager.startSystemLockTaskMode(i);
    }

    @com.android.internal.annotations.VisibleForTesting
    public android.content.pm.IPackageManager getPackageManager() {
        return android.app.AppGlobals.getPackageManager();
    }

    @com.android.internal.annotations.VisibleForTesting
    public android.content.pm.PackageManagerInternal getPackageManagerInternal() {
        if (this.mPackageManagerInt == null) {
            this.mPackageManagerInt = (android.content.pm.PackageManagerInternal) com.android.server.LocalServices.getService(android.content.pm.PackageManagerInternal.class);
        }
        return this.mPackageManagerInt;
    }

    private com.android.server.pm.permission.PermissionManagerServiceInternal getPermissionManagerInternal() {
        if (this.mPermissionManagerInt == null) {
            this.mPermissionManagerInt = (com.android.server.pm.permission.PermissionManagerServiceInternal) com.android.server.LocalServices.getService(com.android.server.pm.permission.PermissionManagerServiceInternal.class);
        }
        return this.mPermissionManagerInt;
    }

    private android.content.pm.TestUtilityService getTestUtilityServiceLocked() {
        if (this.mTestUtilityService == null) {
            this.mTestUtilityService = (android.content.pm.TestUtilityService) com.android.server.LocalServices.getService(android.content.pm.TestUtilityService.class);
        }
        return this.mTestUtilityService;
    }

    public void appNotResponding(java.lang.String str) {
        appNotResponding(str, false);
    }

    public void appNotResponding(java.lang.String str, boolean z) {
        com.android.internal.os.TimeoutRecord forApp = com.android.internal.os.TimeoutRecord.forApp("App requested: " + str);
        int callingPid = android.os.Binder.getCallingPid();
        forApp.mLatencyTracker.waitingOnPidLockStarted();
        synchronized (this.mPidsSelfLocked) {
            try {
                forApp.mLatencyTracker.waitingOnPidLockEnded();
                com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
                if (processRecord == null) {
                    throw new java.lang.SecurityException("Unknown process: " + callingPid);
                }
                this.mAnrHelper.appNotResponding(processRecord, null, processRecord.info, null, null, false, forApp, z);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    void appNotResponding(@android.annotation.NonNull com.android.server.am.ProcessRecord processRecord, @android.annotation.NonNull com.android.internal.os.TimeoutRecord timeoutRecord) {
        this.mAnrHelper.appNotResponding(processRecord, timeoutRecord);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void appNotResponding(@android.annotation.NonNull java.lang.String str, int i, @android.annotation.NonNull com.android.internal.os.TimeoutRecord timeoutRecord) {
        java.util.Objects.requireNonNull(str);
        java.util.Objects.requireNonNull(timeoutRecord);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ProcessRecord processRecordLocked = getProcessRecordLocked(str, i);
                if (processRecordLocked == null) {
                    android.util.Slog.e("ActivityManager", "Unknown process: " + str);
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mAnrHelper.appNotResponding(processRecordLocked, timeoutRecord);
                resetPriorityAfterLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    void startPersistentApps(int i) {
        com.android.server.am.ProcessRecord addAppLocked;
        if (this.mFactoryTest == 1) {
            return;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                try {
                    for (android.content.pm.ApplicationInfo applicationInfo : android.app.AppGlobals.getPackageManager().getPersistentApplications(i | 1024).getList()) {
                        if (!com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME.equals(applicationInfo.packageName) && (addAppLocked = addAppLocked(applicationInfo, null, false, null, 2)) != null) {
                            addAppLocked.mProfile.addHostingComponentType(2);
                        }
                    }
                } catch (android.os.RemoteException e) {
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public com.android.server.am.ContentProviderHelper getContentProviderHelper() {
        return this.mCpHelper;
    }

    public final android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread iApplicationThread, java.lang.String str, java.lang.String str2, int i, boolean z) {
        traceBegin(64L, "getContentProvider: ", str2);
        try {
            return this.mCpHelper.getContentProvider(iApplicationThread, str, str2, i, z);
        } finally {
            android.os.Trace.traceEnd(64L);
        }
    }

    public android.app.ContentProviderHolder getContentProviderExternal(java.lang.String str, int i, android.os.IBinder iBinder, java.lang.String str2) {
        traceBegin(64L, "getContentProviderExternal: ", str);
        try {
            return this.mCpHelper.getContentProviderExternal(str, i, iBinder, str2);
        } finally {
            android.os.Trace.traceEnd(64L);
        }
    }

    public void removeContentProvider(android.os.IBinder iBinder, boolean z) {
        this.mCpHelper.removeContentProvider(iBinder, z);
    }

    @java.lang.Deprecated
    public void removeContentProviderExternal(java.lang.String str, android.os.IBinder iBinder) {
        traceBegin(64L, "removeContentProviderExternal: ", str);
        try {
            removeContentProviderExternalAsUser(str, iBinder, android.os.UserHandle.getCallingUserId());
        } finally {
            android.os.Trace.traceEnd(64L);
        }
    }

    public void removeContentProviderExternalAsUser(java.lang.String str, android.os.IBinder iBinder, int i) {
        traceBegin(64L, "removeContentProviderExternalAsUser: ", str);
        try {
            this.mCpHelper.removeContentProviderExternalAsUser(str, iBinder, i);
        } finally {
            android.os.Trace.traceEnd(64L);
        }
    }

    public final void publishContentProviders(android.app.IApplicationThread iApplicationThread, java.util.List<android.app.ContentProviderHolder> list) {
        if (android.os.Trace.isTagEnabled(64L)) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder(256);
            sb.append("publishContentProviders: ");
            if (list != null) {
                int size = list.size();
                boolean z = true;
                int i = 0;
                while (true) {
                    if (i >= size) {
                        break;
                    }
                    android.app.ContentProviderHolder contentProviderHolder = list.get(i);
                    if (contentProviderHolder != null && contentProviderHolder.info != null && contentProviderHolder.info.authority != null) {
                        if (sb.length() + contentProviderHolder.info.authority.length() > 256) {
                            sb.append("[[TRUNCATED]]");
                            break;
                        }
                        if (!z) {
                            sb.append(';');
                        } else {
                            z = false;
                        }
                        sb.append(contentProviderHolder.info.authority);
                    }
                    i++;
                }
            }
            android.os.Trace.traceBegin(64L, sb.toString());
        }
        try {
            this.mCpHelper.publishContentProviders(iApplicationThread, list);
        } finally {
            android.os.Trace.traceEnd(64L);
        }
    }

    public boolean refContentProvider(android.os.IBinder iBinder, int i, int i2) {
        return this.mCpHelper.refContentProvider(iBinder, i, i2);
    }

    public void unstableProviderDied(android.os.IBinder iBinder) {
        this.mCpHelper.unstableProviderDied(iBinder);
    }

    public void appNotRespondingViaProvider(android.os.IBinder iBinder) {
        this.mCpHelper.appNotRespondingViaProvider(iBinder);
    }

    public void getMimeTypeFilterAsync(android.net.Uri uri, int i, android.os.RemoteCallback remoteCallback) {
        this.mCpHelper.getMimeTypeFilterAsync(uri, i, remoteCallback);
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    private boolean uidOnBackgroundAllowlistLOSP(int i) {
        int appId = android.os.UserHandle.getAppId(i);
        for (int i2 : this.mBackgroundAppIdAllowlist) {
            if (appId == i2) {
                return true;
            }
        }
        return false;
    }

    public boolean isBackgroundRestricted(java.lang.String str) {
        int callingUid = android.os.Binder.getCallingUid();
        if (android.app.AppGlobals.getPackageManager().getPackageUid(str, 268435456L, android.os.UserHandle.getUserId(callingUid)) != callingUid) {
            throw new java.lang.IllegalArgumentException("Uid " + callingUid + " cannot query restriction state for package " + str);
        }
        return isBackgroundRestrictedNoCheck(callingUid, str);
    }

    @com.android.internal.annotations.VisibleForTesting
    public boolean isBackgroundRestrictedNoCheck(int i, java.lang.String str) {
        return getAppOpsManager().checkOpNoThrow(70, i, str) != 0;
    }

    public void backgroundAllowlistUid(int i) {
        if (android.os.Binder.getCallingUid() != 1000) {
            throw new java.lang.SecurityException("Only the OS may call backgroundAllowlistUid()");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        int length = this.mBackgroundAppIdAllowlist.length;
                        int[] iArr = new int[length + 1];
                        java.lang.System.arraycopy(this.mBackgroundAppIdAllowlist, 0, iArr, 0, length);
                        iArr[length] = android.os.UserHandle.getAppId(i);
                        this.mBackgroundAppIdAllowlist = iArr;
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo applicationInfo, java.lang.String str, boolean z, java.lang.String str2, int i) {
        return addAppLocked(applicationInfo, str, z, false, str2, i);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo applicationInfo, java.lang.String str, boolean z, boolean z2, java.lang.String str2, int i) {
        return addAppLocked(applicationInfo, str, z, z2, false, str2, i);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo applicationInfo, java.lang.String str, boolean z, boolean z2, boolean z3, java.lang.String str2, int i) {
        return addAppLocked(applicationInfo, str, z, false, 0, null, z2, z3, str2, i);
    }

    final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo applicationInfo, java.lang.String str, boolean z, boolean z2, int i, @android.annotation.Nullable java.lang.String str2, boolean z3, boolean z4, java.lang.String str3, int i2) {
        com.android.server.am.ProcessRecord processRecord;
        if (!z) {
            processRecord = getProcessRecordLocked(str != null ? str : applicationInfo.processName, applicationInfo.uid);
        } else {
            processRecord = null;
        }
        if (processRecord == null) {
            processRecord = this.mProcessList.newProcessRecordLocked(applicationInfo, str, z, 0, z2, i, str2, new com.android.server.am.HostingRecord(com.android.server.am.HostingRecord.HOSTING_TYPE_ADDED_APPLICATION, str != null ? str : applicationInfo.processName));
            updateLruProcessLocked(processRecord, false, null);
            updateOomAdjLocked(processRecord, 11);
        }
        this.mUsageStatsService.reportEvent(applicationInfo.packageName, android.os.UserHandle.getUserId(processRecord.uid), 31);
        if (!z2) {
            try {
                this.mPackageManagerInt.setPackageStoppedState(applicationInfo.packageName, false, android.os.UserHandle.getUserId(processRecord.uid));
            } catch (java.lang.IllegalArgumentException e) {
                android.util.Slog.w("ActivityManager", "Failed trying to unstop package " + applicationInfo.packageName + ": " + e);
            }
        }
        if ((applicationInfo.flags & 9) == 9) {
            processRecord.setPersistent(true);
            processRecord.mState.setMaxAdj(com.android.server.am.ProcessList.PERSISTENT_PROC_ADJ);
        }
        if (processRecord.getThread() == null && this.mPersistentStartingProcesses.indexOf(processRecord) < 0) {
            this.mPersistentStartingProcesses.add(processRecord);
            this.mProcessList.startProcessLocked(processRecord, new com.android.server.am.HostingRecord(com.android.server.am.HostingRecord.HOSTING_TYPE_ADDED_APPLICATION, str != null ? str : processRecord.processName), i2, z3, z4, str3);
        }
        return processRecord;
    }

    public void unhandledBack() {
        this.mActivityTaskManager.unhandledBack();
    }

    public android.os.ParcelFileDescriptor openContentUri(java.lang.String str) throws android.os.RemoteException {
        enforceNotIsolatedCaller("openContentUri");
        int callingUserId = android.os.UserHandle.getCallingUserId();
        android.net.Uri parse = android.net.Uri.parse(str);
        java.lang.String authority = parse.getAuthority();
        android.app.ContentProviderHolder contentProviderExternalUnchecked = this.mCpHelper.getContentProviderExternalUnchecked(authority, null, android.os.Binder.getCallingUid(), "*opencontent*", callingUserId);
        if (contentProviderExternalUnchecked == null) {
            android.util.Slog.d("ActivityManager", "Failed to get provider for authority '" + authority + "'");
            return null;
        }
        try {
            int callingUid = android.os.Binder.getCallingUid();
            java.lang.String resolvePackageName = android.app.AppOpsManager.resolvePackageName(callingUid, null);
            com.android.server.pm.pkg.AndroidPackage androidPackage = resolvePackageName != null ? this.mPackageManagerInt.getPackage(resolvePackageName) : this.mPackageManagerInt.getPackage(callingUid);
            if (androidPackage == null) {
                android.util.Log.e("ActivityManager", "Cannot find package for uid: " + callingUid);
                this.mCpHelper.removeContentProviderExternalUnchecked(authority, null, callingUserId);
                return null;
            }
            android.content.pm.ApplicationInfo applicationInfo = this.mPackageManagerInt.getApplicationInfo(androidPackage.getPackageName(), 0L, 1000, 0);
            if (applicationInfo.isVendor() || applicationInfo.isSystemApp() || applicationInfo.isSystemExt() || applicationInfo.isProduct()) {
                android.os.ParcelFileDescriptor openFile = contentProviderExternalUnchecked.provider.openFile(new android.content.AttributionSource(android.os.Binder.getCallingUid(), androidPackage.getPackageName(), null), parse, com.android.server.wm.ActivityTaskManagerService.DUMP_RECENTS_SHORT_CMD, (android.os.ICancellationSignal) null);
                this.mCpHelper.removeContentProviderExternalUnchecked(authority, null, callingUserId);
                return openFile;
            }
            android.util.Log.e("ActivityManager", "openContentUri may only be used by vendor/system/product.");
            this.mCpHelper.removeContentProviderExternalUnchecked(authority, null, callingUserId);
            return null;
        } catch (java.io.FileNotFoundException e) {
            this.mCpHelper.removeContentProviderExternalUnchecked(authority, null, callingUserId);
            return null;
        } catch (java.lang.Throwable th) {
            this.mCpHelper.removeContentProviderExternalUnchecked(authority, null, callingUserId);
            throw th;
        }
    }

    void reportGlobalUsageEvent(int i) {
        int currentUserId = this.mUserController.getCurrentUserId();
        this.mUsageStatsService.reportEvent(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME, currentUserId, i);
        int[] currentProfileIds = this.mUserController.getCurrentProfileIds();
        if (currentProfileIds != null) {
            for (int length = currentProfileIds.length - 1; length >= 0; length--) {
                if (currentProfileIds[length] != currentUserId) {
                    this.mUsageStatsService.reportEvent(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME, currentProfileIds[length], i);
                }
            }
        }
    }

    void reportCurWakefulnessUsageEvent() {
        int i;
        if (this.mWakefulness.get() == 1) {
            i = 15;
        } else {
            i = 16;
        }
        reportGlobalUsageEvent(i);
    }

    void onWakefulnessChanged(int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                boolean z = this.mWakefulness.getAndSet(i) == 1;
                boolean z2 = i == 1;
                if (z != z2) {
                    this.mServices.updateScreenStateLocked(z2);
                    reportCurWakefulnessUsageEvent();
                    this.mActivityTaskManager.onScreenAwakeChanged(z2);
                    this.mOomAdjProfiler.onWakefulnessChanged(i);
                    this.mOomAdjuster.onWakefulnessChanged(i);
                    updateOomAdjLocked(9);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void notifyCleartextNetwork(int i, byte[] bArr) {
        this.mHandler.obtainMessage(49, i, 0, bArr).sendToTarget();
    }

    public boolean shutdown(int i) {
        if (checkCallingPermission("android.permission.SHUTDOWN") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SHUTDOWN");
        }
        boolean shuttingDown = this.mAtmInternal.shuttingDown(this.mBooted, i);
        this.mAppOpsService.shutdown();
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.prepareShutdown();
        }
        this.mBatteryStatsService.shutdown();
        this.mProcessStats.shutdown();
        return shuttingDown;
    }

    public void notifyLockedProfile(int i) {
        this.mAtmInternal.notifyLockedProfile(i);
    }

    public void startConfirmDeviceCredentialIntent(android.content.Intent intent, android.os.Bundle bundle) {
        this.mAtmInternal.startConfirmDeviceCredentialIntent(intent, bundle);
    }

    public void stopAppSwitches() {
        this.mActivityTaskManager.stopAppSwitches();
    }

    public void resumeAppSwitches() {
        this.mActivityTaskManager.resumeAppSwitches();
    }

    public void setDebugApp(java.lang.String str, boolean z, boolean z2) {
        setDebugApp(str, z, z2, false);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setDebugApp(java.lang.String str, boolean z, boolean z2, boolean z3) {
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        if (z2) {
            try {
                android.content.ContentResolver contentResolver = this.mContext.getContentResolver();
                android.provider.Settings.Global.putString(contentResolver, "debug_app", str);
                android.provider.Settings.Global.putInt(contentResolver, "wait_for_debugger", z ? 1 : 0);
            } catch (java.lang.Throwable th) {
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th;
            }
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            if (!z2) {
                try {
                    this.mOrigDebugApp = this.mDebugApp;
                    this.mOrigWaitForDebugger = this.mWaitForDebugger;
                } catch (java.lang.Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            this.mDebugApp = str;
            this.mWaitForDebugger = z;
            this.mSuspendUponWait = z3;
            this.mDebugTransient = z2 ? false : true;
            if (str != null) {
                forceStopPackageLocked(str, -1, false, false, true, true, false, false, -1, "set debug app");
            }
        }
        resetPriorityAfterLockedSection();
        android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
    }

    public void setAgentApp(@android.annotation.NonNull java.lang.String str, @android.annotation.Nullable java.lang.String str2) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.setAgentAppLPf(str, str2);
        }
    }

    void setTrackAllocationApp(android.content.pm.ApplicationInfo applicationInfo, java.lang.String str) {
        enforceDebuggable(applicationInfo);
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mTrackAllocationApp = str;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    void setProfileApp(android.content.pm.ApplicationInfo applicationInfo, java.lang.String str, android.app.ProfilerInfo profilerInfo, android.content.pm.ApplicationInfo applicationInfo2) {
        synchronized (this.mAppProfiler.mProfilerLock) {
            try {
                if (!android.os.Build.IS_DEBUGGABLE) {
                    boolean z = (applicationInfo.flags & 2) != 0;
                    boolean isProfileableByShell = applicationInfo.isProfileableByShell();
                    if (applicationInfo2 != null) {
                        z |= (applicationInfo2.flags & 2) != 0;
                        isProfileableByShell |= applicationInfo2.isProfileableByShell();
                    }
                    if (!z && !isProfileableByShell) {
                        throw new java.lang.SecurityException("Process not debuggable, and not profileable by shell: " + applicationInfo.packageName);
                    }
                }
                this.mAppProfiler.setProfileAppLPf(str, profilerInfo);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    void setNativeDebuggingAppLocked(android.content.pm.ApplicationInfo applicationInfo, java.lang.String str) {
        enforceDebuggable(applicationInfo);
        this.mNativeDebuggingApp = str;
    }

    public void setAlwaysFinish(boolean z) {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            android.provider.Settings.Global.putInt(this.mContext.getContentResolver(), "always_finish_activities", z ? 1 : 0);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    this.mAlwaysFinishActivities = z;
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void setActivityController(android.app.IActivityController iActivityController, boolean z) {
        if (iActivityController != null) {
            android.os.Binder.allowBlocking(iActivityController.asBinder());
        }
        this.mActivityTaskManager.setActivityController(iActivityController, z);
    }

    public void setUserIsMonkey(boolean z) {
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    int callingPid = android.os.Binder.getCallingPid();
                    com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
                    if (processRecord == null) {
                        throw new java.lang.SecurityException("Unknown process: " + callingPid);
                    }
                    if (processRecord.getActiveInstrumentation() == null || processRecord.getActiveInstrumentation().mUiAutomationConnection == null) {
                        throw new java.lang.SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
                    }
                }
                this.mUserIsMonkey = z;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public boolean isUserAMonkey() {
        boolean z;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                z = this.mUserIsMonkey || this.mActivityTaskManager.isControllerAMonkey();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return z;
    }

    public void requestSystemServerHeapDump() {
        com.android.server.am.ProcessRecord processRecord;
        if (!android.os.Build.IS_DEBUGGABLE) {
            android.util.Slog.wtf("ActivityManager", "requestSystemServerHeapDump called on a user build");
            return;
        }
        if (android.os.Binder.getCallingUid() != 1000) {
            throw new java.lang.SecurityException("Only the system process is allowed to request a system heap dump");
        }
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(android.os.Process.myPid());
        }
        if (processRecord == null) {
            android.util.Slog.w("ActivityManager", "system process not in mPidsSelfLocked: " + android.os.Process.myPid());
            return;
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.startHeapDumpLPf(processRecord.mProfile, true);
        }
    }

    public void requestBugReport(int i) {
        requestBugReportWithDescription(null, null, i, 0L);
    }

    public void requestBugReportWithDescription(@android.annotation.Nullable java.lang.String str, @android.annotation.Nullable java.lang.String str2, int i) {
        requestBugReportWithDescription(str, str2, i, 0L);
    }

    public void requestBugReportWithDescription(@android.annotation.Nullable java.lang.String str, @android.annotation.Nullable java.lang.String str2, int i, long j) {
        java.lang.String str3;
        switch (i) {
            case 0:
                str3 = "bugreportfull";
                break;
            case 1:
                str3 = "bugreportplus";
                break;
            case 2:
                str3 = "bugreportremote";
                break;
            case 3:
                str3 = "bugreportwear";
                break;
            case 4:
                str3 = "bugreporttelephony";
                break;
            case 5:
                str3 = "bugreportwifi";
                break;
            case 6:
            default:
                throw new java.lang.IllegalArgumentException("Provided bugreport type is not correct, value: " + i);
            case 7:
                str3 = "bugreportonboarding";
                break;
        }
        android.util.Slog.i("ActivityManager", str3 + " requested by UID " + android.os.Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "requestBugReport");
        if (!android.text.TextUtils.isEmpty(str)) {
            if (str.length() > 100) {
                throw new java.lang.IllegalArgumentException("shareTitle should be less than 100 characters");
            }
            if (!android.text.TextUtils.isEmpty(str2) && str2.length() > 150) {
                throw new java.lang.IllegalArgumentException("shareDescription should be less than 150 characters");
            }
            android.util.Slog.d("ActivityManager", "Bugreport notification title " + str + " description " + str2);
        }
        android.content.Intent intent = new android.content.Intent();
        intent.setAction(INTENT_BUGREPORT_REQUESTED);
        intent.setPackage("com.android.shell");
        intent.putExtra(EXTRA_BUGREPORT_TYPE, i);
        intent.putExtra(EXTRA_BUGREPORT_NONCE, j);
        intent.addFlags(268435456);
        intent.addFlags(16777216);
        if (str != null) {
            intent.putExtra(EXTRA_TITLE, str);
        }
        if (str2 != null) {
            intent.putExtra(EXTRA_DESCRIPTION, str2);
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            if (i == 2) {
                this.mContext.sendBroadcastAsUser(intent, android.os.UserHandle.SYSTEM);
            } else {
                this.mContext.sendBroadcastAsUser(intent, getCurrentUser().getUserHandle());
            }
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        } catch (java.lang.Throwable th) {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    public void requestTelephonyBugReport(java.lang.String str, java.lang.String str2) {
        requestBugReportWithDescription(str, str2, 4);
    }

    public void requestWifiBugReport(java.lang.String str, java.lang.String str2) {
        requestBugReportWithDescription(str, str2, 5);
    }

    public void requestInteractiveBugReport() {
        requestBugReportWithDescription(null, null, 1);
    }

    public void requestInteractiveBugReportWithDescription(java.lang.String str, java.lang.String str2) {
        requestBugReportWithDescription(str, str2, 1);
    }

    public void requestFullBugReport() {
        requestBugReportWithDescription(null, null, 0);
    }

    public void requestRemoteBugReport(long j) {
        requestBugReportWithDescription(null, null, 2, j);
    }

    public boolean launchBugReportHandlerApp() {
        android.content.Context createContextAsUser = this.mContext.createContextAsUser(getCurrentUser().getUserHandle(), 0);
        if (!com.android.server.am.BugReportHandlerUtil.isBugReportHandlerEnabled(createContextAsUser)) {
            return false;
        }
        android.util.Slog.i("ActivityManager", "launchBugReportHandlerApp requested by UID " + android.os.Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "launchBugReportHandlerApp");
        return com.android.server.am.BugReportHandlerUtil.launchBugReportHandlerApp(createContextAsUser);
    }

    public java.util.List<java.lang.String> getBugreportWhitelistedPackages() {
        enforceCallingPermission("android.permission.MANAGE_DEBUGGING", "getBugreportWhitelistedPackages");
        return new java.util.ArrayList(com.android.server.SystemConfig.getInstance().getBugreportWhitelistedPackages());
    }

    public void registerProcessObserver(android.app.IProcessObserver iProcessObserver) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        this.mProcessList.registerProcessObserver(iProcessObserver);
    }

    public void unregisterProcessObserver(android.app.IProcessObserver iProcessObserver) {
        this.mProcessList.unregisterProcessObserver(iProcessObserver);
    }

    public int getUidProcessState(int i, java.lang.String str) {
        int uidProcessStateInnerLOSP;
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), android.os.UserHandle.getUserId(i), false, 2, "getUidProcessState", str);
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                uidProcessStateInnerLOSP = getUidProcessStateInnerLOSP(i);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcessStateInnerLOSP;
    }

    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:11:0x0029 A[Catch: all -> 0x0024, DONT_GENERATE, TRY_LEAVE, TryCatch #0 {all -> 0x0024, blocks: (B:20:0x001b, B:11:0x0029, B:15:0x0033, B:16:0x0037), top: B:19:0x001b, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:15:0x0033 A[Catch: all -> 0x0024, TRY_ENTER, TryCatch #0 {all -> 0x0024, blocks: (B:20:0x001b, B:11:0x0029, B:15:0x0033, B:16:0x0037), top: B:19:0x001b, outer: #1 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int getBindingUidProcessState(int i, java.lang.String str) {
        boolean z;
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.GET_BINDING_UID_IMPORTANCE", "getBindingUidProcessState");
        }
        int callingUid = android.os.Binder.getCallingUid();
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                if (callingUid != i) {
                    try {
                        if (!hasServiceBindingOrProviderUseLocked(callingUid, i)) {
                            z = false;
                            if (!z) {
                                int uidProcessStateInnerLOSP = getUidProcessStateInnerLOSP(i);
                                resetPriorityAfterLockedSection();
                                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                                return uidProcessStateInnerLOSP;
                            }
                            resetPriorityAfterLockedSection();
                            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                            return 20;
                        }
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                z = true;
                if (!z) {
                }
            }
        } catch (java.lang.Throwable th2) {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th2;
        }
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    private int getUidProcessStateInnerLOSP(int i) {
        if (this.mPendingStartActivityUids.isPendingTopUid(i)) {
            return 2;
        }
        return this.mProcessList.getUidProcStateLOSP(i);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    private boolean hasServiceBindingOrProviderUseLocked(final int i, final int i2) {
        if (java.lang.Boolean.TRUE.equals((java.lang.Boolean) this.mProcessList.searchEachLruProcessesLOSP(false, new java.util.function.Function() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda25
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Boolean lambda$hasServiceBindingOrProviderUseLocked$3;
                lambda$hasServiceBindingOrProviderUseLocked$3 = com.android.server.am.ActivityManagerService.lambda$hasServiceBindingOrProviderUseLocked$3(i, i2, (com.android.server.am.ProcessRecord) obj);
                return lambda$hasServiceBindingOrProviderUseLocked$3;
            }
        }))) {
            return true;
        }
        return java.lang.Boolean.TRUE.equals((java.lang.Boolean) this.mProcessList.searchEachLruProcessesLOSP(false, new java.util.function.Function() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda26
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Boolean lambda$hasServiceBindingOrProviderUseLocked$4;
                lambda$hasServiceBindingOrProviderUseLocked$4 = com.android.server.am.ActivityManagerService.lambda$hasServiceBindingOrProviderUseLocked$4(i, i2, (com.android.server.am.ProcessRecord) obj);
                return lambda$hasServiceBindingOrProviderUseLocked$4;
            }
        }));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Boolean lambda$hasServiceBindingOrProviderUseLocked$3(int i, int i2, com.android.server.am.ProcessRecord processRecord) {
        if (processRecord.uid == i) {
            com.android.server.am.ProcessServiceRecord processServiceRecord = processRecord.mServices;
            int size = processServiceRecord.mServices.size();
            for (int i3 = 0; i3 < size; i3++) {
                android.util.ArrayMap<android.os.IBinder, java.util.ArrayList<com.android.server.am.ConnectionRecord>> connections = processServiceRecord.mServices.valueAt(i3).getConnections();
                int size2 = connections.size();
                for (int i4 = 0; i4 < size2; i4++) {
                    java.util.ArrayList<com.android.server.am.ConnectionRecord> valueAt = connections.valueAt(i4);
                    for (int i5 = 0; i5 < valueAt.size(); i5++) {
                        if (valueAt.get(i5).binding.client.uid == i2) {
                            return java.lang.Boolean.TRUE;
                        }
                    }
                }
            }
            return null;
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ java.lang.Boolean lambda$hasServiceBindingOrProviderUseLocked$4(int i, int i2, com.android.server.am.ProcessRecord processRecord) {
        if (processRecord.uid == i) {
            com.android.server.am.ProcessProviderRecord processProviderRecord = processRecord.mProviders;
            for (int numberOfProviders = processProviderRecord.numberOfProviders() - 1; numberOfProviders >= 0; numberOfProviders--) {
                com.android.server.am.ContentProviderRecord providerAt = processProviderRecord.getProviderAt(numberOfProviders);
                for (int size = providerAt.connections.size() - 1; size >= 0; size--) {
                    if (providerAt.connections.get(size).client.uid == i2) {
                        return java.lang.Boolean.TRUE;
                    }
                }
            }
            return null;
        }
        return null;
    }

    public int getUidProcessCapabilities(int i, java.lang.String str) {
        int uidProcessCapabilityLOSP;
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), android.os.UserHandle.getUserId(i), false, 2, "getUidProcessCapabilities", str);
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                uidProcessCapabilityLOSP = this.mProcessList.getUidProcessCapabilityLOSP(i);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcessCapabilityLOSP;
    }

    public void registerUidObserver(android.app.IUidObserver iUidObserver, int i, int i2, java.lang.String str) {
        registerUidObserverForUids(iUidObserver, i, i2, str, null);
    }

    public android.os.IBinder registerUidObserverForUids(android.app.IUidObserver iUidObserver, int i, int i2, java.lang.String str, int[] iArr) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        return this.mUidObserverController.register(iUidObserver, i, i2, str, android.os.Binder.getCallingUid(), iArr);
    }

    public void unregisterUidObserver(android.app.IUidObserver iUidObserver) {
        this.mUidObserverController.unregister(iUidObserver);
    }

    public void addUidToObserver(android.os.IBinder iBinder, java.lang.String str, int i) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        this.mUidObserverController.addUidToObserver(iBinder, i);
    }

    public void removeUidFromObserver(android.os.IBinder iBinder, java.lang.String str, int i) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        this.mUidObserverController.removeUidFromObserver(iBinder, i);
    }

    public boolean isUidActive(int i, java.lang.String str) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "isUidActive");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (isUidActiveLOSP(i)) {
                    resetPriorityAfterProcLockedSection();
                    return true;
                }
                resetPriorityAfterProcLockedSection();
                return this.mInternal.isPendingTopUid(i);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    boolean isUidActiveLOSP(int i) {
        com.android.server.am.UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
        return (uidRecordLOSP == null || uidRecordLOSP.isSetIdle()) ? false : true;
    }

    @android.annotation.RequiresPermission("android.permission.PACKAGE_USAGE_STATS")
    public void registerUidFrozenStateChangedCallback(@android.annotation.NonNull android.app.IUidFrozenStateChangedCallback iUidFrozenStateChangedCallback) {
        com.android.internal.util.Preconditions.checkNotNull(iUidFrozenStateChangedCallback, "callback cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidFrozenStateChangedCallback()");
        synchronized (this.mUidFrozenStateChangedCallbackList) {
            try {
                if (!this.mUidFrozenStateChangedCallbackList.register(iUidFrozenStateChangedCallback)) {
                    android.util.Slog.w("ActivityManager", "Failed to register with RemoteCallbackList!");
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    @android.annotation.RequiresPermission("android.permission.PACKAGE_USAGE_STATS")
    public void unregisterUidFrozenStateChangedCallback(@android.annotation.NonNull android.app.IUidFrozenStateChangedCallback iUidFrozenStateChangedCallback) {
        com.android.internal.util.Preconditions.checkNotNull(iUidFrozenStateChangedCallback, "callback cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "unregisterUidFrozenStateChangedCallback()");
        synchronized (this.mUidFrozenStateChangedCallbackList) {
            this.mUidFrozenStateChangedCallbackList.unregister(iUidFrozenStateChangedCallback);
        }
    }

    @android.annotation.NonNull
    @android.annotation.RequiresPermission("android.permission.PACKAGE_USAGE_STATS")
    public int[] getUidFrozenState(@android.annotation.NonNull int[] iArr) {
        com.android.internal.util.Preconditions.checkNotNull(iArr, "uid array cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidFrozenState()");
        int[] iArr2 = new int[iArr.length];
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            for (int i = 0; i < iArr.length; i++) {
                try {
                    com.android.server.am.UidRecord uidRecord = this.mProcessList.mActiveUids.get(iArr[i]);
                    if (uidRecord != null && uidRecord.areAllProcessesFrozen()) {
                        iArr2[i] = 1;
                    } else {
                        iArr2[i] = 2;
                    }
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterProcLockedSection();
        return iArr2;
    }

    public void reportUidFrozenStateChanged(@android.annotation.NonNull int[] iArr, int[] iArr2) {
        synchronized (this.mUidFrozenStateChangedCallbackList) {
            int beginBroadcast = this.mUidFrozenStateChangedCallbackList.beginBroadcast();
            for (int i = 0; i < beginBroadcast; i++) {
                try {
                    this.mUidFrozenStateChangedCallbackList.getBroadcastItem(i).onUidFrozenStateChanged(iArr, iArr2);
                } catch (android.os.RemoteException e) {
                }
            }
            this.mUidFrozenStateChangedCallbackList.finishBroadcast();
        }
    }

    public void setPersistentVrThread(int i) {
        this.mActivityTaskManager.setPersistentVrThread(i);
    }

    public static boolean scheduleAsRegularPriority(int i, boolean z) {
        try {
            android.os.Process.setThreadScheduler(i, 0, 0);
            return true;
        } catch (java.lang.IllegalArgumentException e) {
            if (!z) {
                android.util.Slog.w("ActivityManager", "Failed to set scheduling policy, thread does not exist:\n" + e);
            }
            return false;
        } catch (java.lang.SecurityException e2) {
            if (!z) {
                android.util.Slog.w("ActivityManager", "Failed to set scheduling policy, not allowed:\n" + e2);
            }
            return false;
        }
    }

    public static boolean scheduleAsFifoPriority(int i, boolean z) {
        try {
            android.os.Process.setThreadScheduler(i, com.android.server.policy.WindowManagerPolicy.COLOR_FADE_LAYER, 1);
            return true;
        } catch (java.lang.IllegalArgumentException e) {
            if (!z) {
                android.util.Slog.w("ActivityManager", "Failed to set scheduling policy, thread does not exist:\n" + e);
                return false;
            }
            return false;
        } catch (java.lang.SecurityException e2) {
            if (!z) {
                android.util.Slog.w("ActivityManager", "Failed to set scheduling policy, not allowed:\n" + e2);
                return false;
            }
            return false;
        }
    }

    public void setRenderThread(int i) {
        com.android.server.am.ProcessRecord processRecord;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                int callingPid = android.os.Binder.getCallingPid();
                if (callingPid == android.os.Process.myPid()) {
                    demoteSystemServerRenderThread(i);
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(callingPid);
                }
                if (processRecord != null && processRecord.getRenderThreadTid() == 0 && i > 0) {
                    if (!android.os.Process.isThreadInProcess(callingPid, i)) {
                        throw new java.lang.IllegalArgumentException("Render thread does not belong to process");
                    }
                    processRecord.setRenderThreadTid(i);
                    if (processRecord.mState.getCurrentSchedulingGroup() == 3) {
                        if (this.mUseFifoUiScheduling) {
                            android.os.Process.setThreadScheduler(processRecord.getRenderThreadTid(), com.android.server.policy.WindowManagerPolicy.COLOR_FADE_LAYER, 1);
                        } else {
                            android.os.Process.setThreadPriority(processRecord.getRenderThreadTid(), -10);
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    private void demoteSystemServerRenderThread(int i) {
        android.os.Process.setThreadPriority(i, 10);
    }

    public boolean isVrModePackageEnabled(android.content.ComponentName componentName) {
        this.mActivityTaskManager.enforceSystemHasVrFeature();
        return ((com.android.server.vr.VrManagerInternal) com.android.server.LocalServices.getService(com.android.server.vr.VrManagerInternal.class)).hasVrPackage(componentName, android.os.UserHandle.getCallingUserId()) == 0;
    }

    public boolean isTopActivityImmersive() {
        return this.mActivityTaskManager.isTopActivityImmersive();
    }

    public boolean isTopOfTask(android.os.IBinder iBinder) {
        return android.app.ActivityClient.getInstance().isTopOfTask(iBinder);
    }

    public void setHasTopUi(boolean z) throws android.os.RemoteException {
        boolean z2;
        if (checkCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW") != 0) {
            java.lang.String str = "Permission Denial: setHasTopUi() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.INTERNAL_SYSTEM_WINDOW";
            android.util.Slog.w("ActivityManager", str);
            throw new java.lang.SecurityException(str);
        }
        int callingPid = android.os.Binder.getCallingPid();
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    synchronized (this.mPidsSelfLocked) {
                        com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
                        if (processRecord == null) {
                            android.util.Slog.w("ActivityManager", "setHasTopUi called on unknown pid: " + callingPid);
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        if (processRecord.mState.hasTopUi() != z) {
                            processRecord.mState.setHasTopUi(z);
                            z2 = true;
                        } else {
                            z2 = false;
                        }
                        if (z2) {
                            updateOomAdjLocked(processRecord, 9);
                        }
                        resetPriorityAfterLockedSection();
                    }
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void enterSafeMode() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mSystemReady) {
                    try {
                        android.app.AppGlobals.getPackageManager().enterSafeMode();
                    } catch (android.os.RemoteException e) {
                    }
                }
                this.mSafeMode = true;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void showSafeModeOverlay() {
        android.view.View inflate = android.view.LayoutInflater.from(this.mContext).inflate(android.R.layout.resolver_profile_tab_button, (android.view.ViewGroup) null);
        android.view.WindowManager.LayoutParams layoutParams = new android.view.WindowManager.LayoutParams();
        layoutParams.type = 2015;
        layoutParams.width = -2;
        layoutParams.height = -2;
        layoutParams.gravity = 8388691;
        layoutParams.format = inflate.getBackground().getOpacity();
        layoutParams.flags = 24;
        layoutParams.privateFlags |= 16;
        ((android.view.WindowManager) this.mContext.getSystemService("window")).addView(inflate, layoutParams);
    }

    public void noteWakeupAlarm(android.content.IIntentSender iIntentSender, android.os.WorkSource workSource, int i, java.lang.String str, java.lang.String str2) {
        int i2;
        int i3;
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (i <= 0 && workSource == null) {
            if (iIntentSender == null || !(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
                return;
            }
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            i2 = pendingIntentRecord.uid == android.os.Binder.getCallingUid() ? 1000 : pendingIntentRecord.uid;
        } else {
            i2 = i;
        }
        this.mBatteryStatsService.noteWakupAlarm(str, i2, workSource, str2);
        int i4 = 0;
        if (workSource != null) {
            java.lang.String packageName = workSource.getPackageName(0);
            int attributionUid = workSource.getAttributionUid();
            if (packageName != null) {
                i2 = attributionUid;
            } else {
                packageName = str;
            }
            if (this.mUsageStatsService != null) {
                i4 = this.mUsageStatsService.getAppStandbyBucket(packageName, android.os.UserHandle.getUserId(i2), android.os.SystemClock.elapsedRealtime());
            }
            com.android.internal.util.FrameworkStatsLog.write(35, workSource, str2, str, i4);
            return;
        }
        if (this.mUsageStatsService == null) {
            i3 = 0;
        } else {
            i3 = this.mUsageStatsService.getAppStandbyBucket(str, android.os.UserHandle.getUserId(i2), android.os.SystemClock.elapsedRealtime());
        }
        com.android.internal.util.FrameworkStatsLog.write_non_chained(35, i2, (java.lang.String) null, str2, str, i3);
    }

    public void noteAlarmStart(android.content.IIntentSender iIntentSender, android.os.WorkSource workSource, int i, java.lang.String str) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (i <= 0 && workSource == null) {
            if (iIntentSender == null || !(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
                return;
            }
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            i = pendingIntentRecord.uid == android.os.Binder.getCallingUid() ? 1000 : pendingIntentRecord.uid;
        }
        this.mBatteryStatsService.noteAlarmStart(str, workSource, i);
    }

    public void noteAlarmFinish(android.content.IIntentSender iIntentSender, android.os.WorkSource workSource, int i, java.lang.String str) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (i <= 0 && workSource == null) {
            if (iIntentSender == null || !(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
                return;
            }
            com.android.server.am.PendingIntentRecord pendingIntentRecord = (com.android.server.am.PendingIntentRecord) iIntentSender;
            i = pendingIntentRecord.uid == android.os.Binder.getCallingUid() ? 1000 : pendingIntentRecord.uid;
        }
        this.mBatteryStatsService.noteAlarmFinish(str, workSource, i);
    }

    public boolean killPids(int[] iArr, final java.lang.String str, boolean z) {
        boolean z2;
        int setAdj;
        if (android.os.Binder.getCallingUid() != 1000) {
            throw new java.lang.SecurityException("killPids only available to the system");
        }
        if (str == null) {
            str = "Unknown";
        }
        final java.util.ArrayList arrayList = new java.util.ArrayList();
        synchronized (this.mPidsSelfLocked) {
            int i = 0;
            for (int i2 : iArr) {
                try {
                    com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(i2);
                    if (processRecord != null && (setAdj = processRecord.mState.getSetAdj()) > i) {
                        i = setAdj;
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            if (i < 999 && i > 900) {
                i = 900;
            }
            if (!z && i < 500) {
                i = 500;
            }
            android.util.Slog.w("ActivityManager", "Killing processes " + str + " at adjustment " + i);
            z2 = false;
            for (int i3 : iArr) {
                com.android.server.am.ProcessRecord processRecord2 = this.mPidsSelfLocked.get(i3);
                if (processRecord2 != null && processRecord2.mState.getSetAdj() >= i && !processRecord2.isKilledByAm()) {
                    arrayList.add(processRecord2);
                    z2 = true;
                }
            }
        }
        if (!arrayList.isEmpty()) {
            this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda24
                @Override // java.lang.Runnable
                public final void run() {
                    com.android.server.am.ActivityManagerService.this.lambda$killPids$5(arrayList, str);
                }
            });
        }
        return z2;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$killPids$5(java.util.ArrayList arrayList, java.lang.String str) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    ((com.android.server.am.ProcessRecord) arrayList.get(i)).killLocked(str, 13, 12, true);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    private void killUid(int i, int i2, int i3, int i4, java.lang.String str) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, i, i2, com.android.server.am.ProcessList.PERSISTENT_PROC_ADJ, false, true, true, true, false, false, i3, i4, str != null ? str : "kill uid");
                        } catch (java.lang.Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void killUid(int i, int i2, java.lang.String str) {
        killUid(i, i2, 13, 11, str);
    }

    public void killUidForPermissionChange(int i, int i2, java.lang.String str) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, i, i2, com.android.server.am.ProcessList.PERSISTENT_PROC_ADJ, false, true, true, true, false, false, 8, 0, str != null ? str : "kill uid");
                        } catch (java.lang.Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean killProcessesBelowForeground(java.lang.String str) {
        if (android.os.Binder.getCallingUid() != 1000) {
            throw new java.lang.SecurityException("killProcessesBelowForeground() only available to system");
        }
        return killProcessesBelowAdj(0, str);
    }

    private boolean killProcessesBelowAdj(int i, java.lang.String str) {
        boolean z;
        if (android.os.Binder.getCallingUid() != 1000) {
            throw new java.lang.SecurityException("killProcessesBelowAdj() only available to system");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        synchronized (this.mPidsSelfLocked) {
                            try {
                                int size = this.mPidsSelfLocked.size();
                                z = false;
                                for (int i2 = 0; i2 < size; i2++) {
                                    this.mPidsSelfLocked.keyAt(i2);
                                    com.android.server.am.ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i2);
                                    if (valueAt != null && valueAt.mState.getSetAdj() > i && !valueAt.isKilledByAm()) {
                                        valueAt.killLocked(str, 8, true);
                                        z = true;
                                    }
                                }
                            } catch (java.lang.Throwable th) {
                                throw th;
                            }
                        }
                    } catch (java.lang.Throwable th2) {
                        resetPriorityAfterProcLockedSection();
                        throw th2;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (java.lang.Throwable th3) {
                resetPriorityAfterLockedSection();
                throw th3;
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    public void killProcessesWhenImperceptible(int[] iArr, java.lang.String str) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.FORCE_STOP_PACKAGES");
        }
        int callingUid = android.os.Binder.getCallingUid();
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            this.mProcessList.killProcessesWhenImperceptible(iArr, str, callingUid);
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void hang(android.os.IBinder iBinder, boolean z) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        android.os.IBinder.DeathRecipient deathRecipient = new android.os.IBinder.DeathRecipient() { // from class: com.android.server.am.ActivityManagerService.11
            @Override // android.os.IBinder.DeathRecipient
            public void binderDied() {
                synchronized (this) {
                    notifyAll();
                }
            }
        };
        try {
            iBinder.linkToDeath(deathRecipient, 0);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    com.android.server.Watchdog.getInstance().setAllowRestart(z);
                    android.util.Slog.i("ActivityManager", "Hanging system process at request of pid " + android.os.Binder.getCallingPid());
                    synchronized (deathRecipient) {
                        while (iBinder.isBinderAlive()) {
                            try {
                                deathRecipient.wait();
                            } catch (java.lang.InterruptedException e) {
                            }
                        }
                    }
                    com.android.server.Watchdog.getInstance().setAllowRestart(true);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } catch (android.os.RemoteException e2) {
            android.util.Slog.w("ActivityManager", "hang: given caller IBinder is already dead.");
        }
    }

    public void restart() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        android.util.Log.i("ActivityManager", "Sending shutdown broadcast...");
        android.content.BroadcastReceiver broadcastReceiver = new android.content.BroadcastReceiver() { // from class: com.android.server.am.ActivityManagerService.12
            @Override // android.content.BroadcastReceiver
            public void onReceive(android.content.Context context, android.content.Intent intent) {
                android.util.Log.i("ActivityManager", "Shutting down activity manager...");
                com.android.server.am.ActivityManagerService.this.shutdown(10000);
                android.util.Log.i("ActivityManager", "Shutdown complete, restarting!");
                android.os.Process.killProcess(android.os.Process.myPid());
                java.lang.System.exit(10);
            }
        };
        android.content.Intent intent = new android.content.Intent("android.intent.action.ACTION_SHUTDOWN");
        intent.addFlags(268435456);
        intent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
        broadcastReceiver.onReceive(this.mContext, intent);
    }

    public void performIdleMaintenance() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                final long uptimeMillis = android.os.SystemClock.uptimeMillis();
                final long j = uptimeMillis - this.mLastIdleTime;
                if (!com.android.server.flags.Flags.disableSystemCompaction()) {
                    this.mOomAdjuster.mCachedAppOptimizer.compactAllSystem();
                }
                final long lowRamTimeSinceIdleLPr = this.mAppProfiler.getLowRamTimeSinceIdleLPr(uptimeMillis);
                this.mLastIdleTime = uptimeMillis;
                this.mAppProfiler.updateLowRamTimestampLPr(uptimeMillis);
                java.lang.StringBuilder sb = new java.lang.StringBuilder(128);
                sb.append("Idle maintenance over ");
                android.util.TimeUtils.formatDuration(j, sb);
                sb.append(" low RAM for ");
                android.util.TimeUtils.formatDuration(lowRamTimeSinceIdleLPr, sb);
                android.util.Slog.i("ActivityManager", sb.toString());
                final boolean z = lowRamTimeSinceIdleLPr > j / 3;
                final long max = java.lang.Math.max((android.os.Process.getTotalMemory() / 1000) / 100, com.android.server.job.controllers.JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
                this.mProcessList.forEachLruProcessesLOSP(false, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda34
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.am.ActivityManagerService.this.lambda$performIdleMaintenance$7(z, max, j, lowRamTimeSinceIdleLPr, uptimeMillis, (com.android.server.am.ProcessRecord) obj);
                    }
                });
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performIdleMaintenance$7(boolean z, long j, long j2, long j3, long j4, final com.android.server.am.ProcessRecord processRecord) {
        final long initialIdlePssOrRss;
        long lastPss;
        long lastSwapPss;
        if (processRecord.getThread() == null) {
            return;
        }
        com.android.server.am.ProcessProfileRecord processProfileRecord = processRecord.mProfile;
        com.android.server.am.ProcessStateRecord processStateRecord = processRecord.mState;
        int setProcState = processStateRecord.getSetProcState();
        if (processStateRecord.isNotCachedSinceIdle()) {
            if (setProcState >= 5 && setProcState <= 10) {
                synchronized (this.mAppProfiler.mProfilerLock) {
                    try {
                        initialIdlePssOrRss = processProfileRecord.getInitialIdlePssOrRss();
                        lastPss = this.mAppProfiler.isProfilingPss() ? processProfileRecord.getLastPss() : processProfileRecord.getLastRss();
                        lastSwapPss = processProfileRecord.getLastSwapPss();
                    } finally {
                    }
                }
                if (z && initialIdlePssOrRss != 0 && lastPss > (3 * initialIdlePssOrRss) / 2 && lastPss > initialIdlePssOrRss + j) {
                    java.lang.StringBuilder sb = new java.lang.StringBuilder(128);
                    sb.append("Kill");
                    sb.append(processRecord.processName);
                    if (this.mAppProfiler.isProfilingPss()) {
                        sb.append(" in idle maint: pss=");
                    } else {
                        sb.append(" in idle maint: rss=");
                    }
                    sb.append(lastPss);
                    if (this.mAppProfiler.isProfilingPss()) {
                        sb.append(", swapPss=");
                        sb.append(lastSwapPss);
                        sb.append(", initialPss=");
                    } else {
                        sb.append(", initialRss=");
                    }
                    sb.append(initialIdlePssOrRss);
                    sb.append(", period=");
                    android.util.TimeUtils.formatDuration(j2, sb);
                    sb.append(", lowRamPeriod=");
                    android.util.TimeUtils.formatDuration(j3, sb);
                    android.util.Slog.wtfQuiet("ActivityManager", sb.toString());
                    final long j5 = lastPss;
                    this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda20
                        @Override // java.lang.Runnable
                        public final void run() {
                            com.android.server.am.ActivityManagerService.this.lambda$performIdleMaintenance$6(processRecord, j5, initialIdlePssOrRss);
                        }
                    });
                    return;
                }
                return;
            }
            return;
        }
        if (setProcState < 14 && setProcState >= 0) {
            processStateRecord.setNotCachedSinceIdle(true);
            synchronized (this.mAppProfiler.mProfilerLock) {
                processProfileRecord.setInitialIdlePssOrRss(0L);
                this.mAppProfiler.updateNextPssTimeLPf(processStateRecord.getSetProcState(), processRecord.mProfile, j4, true);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$performIdleMaintenance$6(com.android.server.am.ProcessRecord processRecord, long j, long j2) {
        java.lang.String str;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (this.mAppProfiler.isProfilingPss()) {
                    str = "idle maint (pss ";
                } else {
                    str = "idle maint (rss " + j + " from " + j2 + ")";
                }
                processRecord.killLocked(str, 13, 6, true);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void sendIdleJobTrigger() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            broadcastIntent(null, new android.content.Intent(ACTION_TRIGGER_IDLE).setPackage(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME).addFlags(1073741824), null, null, 0, null, null, null, -1, null, false, false, -1);
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    private void retrieveSettings() {
        android.content.res.Resources resources;
        android.content.ContentResolver contentResolver = this.mContext.getContentResolver();
        this.mActivityTaskManager.retrieveSettings(contentResolver);
        java.lang.String string = android.provider.Settings.Global.getString(contentResolver, "debug_app");
        boolean z = android.provider.Settings.Global.getInt(contentResolver, "wait_for_debugger", 0) != 0;
        boolean z2 = android.provider.Settings.Global.getInt(contentResolver, "always_finish_activities", 0) != 0;
        this.mHiddenApiBlacklist.registerObserver();
        this.mPlatformCompat.registerContentObserver();
        this.mAppProfiler.retrieveSettings();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mOrigDebugApp = string;
                this.mDebugApp = string;
                this.mOrigWaitForDebugger = z;
                this.mWaitForDebugger = z;
                this.mAlwaysFinishActivities = z2;
                resources = this.mContext.getResources();
                this.mUserController.setInitialConfig(resources.getBoolean(android.R.bool.config_customUserSwitchUi) ? false : true, resources.getInteger(android.R.integer.config_mobile_hotspot_provision_check_period), resources.getBoolean(android.R.bool.config_maskMainBuiltInDisplayCutout));
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        this.mAppErrors.loadAppsNotReportingCrashesFromConfig(resources.getString(android.R.string.condition_provider_service_binding_label));
    }

    /* JADX WARN: Finally extract failed */
    public void systemReady(java.lang.Runnable runnable, @android.annotation.NonNull com.android.server.utils.TimingsTraceAndSlog timingsTraceAndSlog) {
        java.util.ArrayList arrayList;
        timingsTraceAndSlog.traceBegin("PhaseActivityManagerReady");
        this.mSystemServiceManager.preSystemReady();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (this.mSystemReady) {
                    if (runnable != null) {
                        runnable.run();
                    }
                    timingsTraceAndSlog.traceEnd();
                    resetPriorityAfterLockedSection();
                    return;
                }
                timingsTraceAndSlog.traceBegin("controllersReady");
                this.mLocalDeviceIdleController = (com.android.server.DeviceIdleInternal) com.android.server.LocalServices.getService(com.android.server.DeviceIdleInternal.class);
                this.mActivityTaskManager.onSystemReady();
                this.mUserController.onSystemReady();
                this.mAppOpsService.systemReady();
                this.mProcessList.onSystemReady();
                this.mAppRestrictionController.onSystemReady();
                this.mSystemReady = true;
                timingsTraceAndSlog.traceEnd();
                resetPriorityAfterLockedSection();
                try {
                    sTheRealBuildSerial = android.os.IDeviceIdentifiersPolicyService.Stub.asInterface(android.os.ServiceManager.getService("device_identifiers")).getSerial();
                } catch (android.os.RemoteException e) {
                }
                timingsTraceAndSlog.traceBegin("killProcesses");
                synchronized (this.mPidsSelfLocked) {
                    try {
                        arrayList = null;
                        for (int size = this.mPidsSelfLocked.size() - 1; size >= 0; size--) {
                            com.android.server.am.ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(size);
                            if (!isAllowedWhileBooting(valueAt.info)) {
                                if (arrayList == null) {
                                    arrayList = new java.util.ArrayList();
                                }
                                arrayList.add(valueAt);
                            }
                        }
                    } finally {
                    }
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    if (arrayList != null) {
                        try {
                            for (int size2 = arrayList.size() - 1; size2 >= 0; size2 += -1) {
                                com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) arrayList.get(size2);
                                android.util.Slog.i("ActivityManager", "Removing system update proc: " + processRecord);
                                this.mProcessList.removeProcessLocked(processRecord, true, false, 13, 8, "system update done");
                            }
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                    this.mProcessesReady = true;
                }
                resetPriorityAfterLockedSection();
                timingsTraceAndSlog.traceEnd();
                android.util.Slog.i("ActivityManager", "System now ready");
                com.android.server.am.EventLogTags.writeBootProgressAmsReady(android.os.SystemClock.uptimeMillis());
                timingsTraceAndSlog.traceBegin("updateTopComponentForFactoryTest");
                this.mAtmInternal.updateTopComponentForFactoryTest();
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("registerActivityLaunchObserver");
                this.mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(this.mActivityLaunchObserver);
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("watchDeviceProvisioning");
                watchDeviceProvisioning(this.mContext);
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("retrieveSettings");
                retrieveSettings();
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("Ugm.onSystemReady");
                this.mUgmInternal.onSystemReady();
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("updateForceBackgroundCheck");
                android.os.PowerManagerInternal powerManagerInternal = (android.os.PowerManagerInternal) com.android.server.LocalServices.getService(android.os.PowerManagerInternal.class);
                if (powerManagerInternal != null) {
                    powerManagerInternal.registerLowPowerModeObserver(12, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda27
                        @Override // java.util.function.Consumer
                        public final void accept(java.lang.Object obj) {
                            com.android.server.am.ActivityManagerService.this.lambda$systemReady$8((android.os.PowerSaveState) obj);
                        }
                    });
                    updateForceBackgroundCheck(powerManagerInternal.getLowPowerState(12).batterySaverEnabled);
                } else {
                    android.util.Slog.wtf("ActivityManager", "PowerManagerInternal not found.");
                }
                timingsTraceAndSlog.traceEnd();
                if (runnable != null) {
                    runnable.run();
                }
                timingsTraceAndSlog.traceBegin("getCurrentUser");
                int currentUserId = this.mUserController.getCurrentUserId();
                android.util.Slog.i("ActivityManager", "Current user:" + currentUserId);
                if (currentUserId != 0 && !this.mUserController.isSystemUserStarted()) {
                    throw new java.lang.RuntimeException("System user not started while current user is:" + currentUserId);
                }
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("ActivityManagerStartApps");
                this.mBatteryStatsService.onSystemReady();
                this.mBatteryStatsService.noteEvent(32775, java.lang.Integer.toString(currentUserId), currentUserId);
                this.mBatteryStatsService.noteEvent(32776, java.lang.Integer.toString(currentUserId), currentUserId);
                this.mUserController.onSystemUserStarting();
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        timingsTraceAndSlog.traceBegin("startPersistentApps");
                        startPersistentApps(524288);
                        timingsTraceAndSlog.traceEnd();
                        this.mBooting = true;
                        if (android.os.SystemProperties.getBoolean(SYSTEM_USER_HOME_NEEDED, false)) {
                            timingsTraceAndSlog.traceBegin("enableHomeActivity");
                            try {
                                android.app.AppGlobals.getPackageManager().setComponentEnabledSetting(new android.content.ComponentName(this.mContext, (java.lang.Class<?>) com.android.internal.app.SystemUserHomeActivity.class), 1, 0, 0, "am");
                                timingsTraceAndSlog.traceEnd();
                            } catch (android.os.RemoteException e2) {
                                throw e2.rethrowAsRuntimeException();
                            }
                        }
                        boolean z = currentUserId == 0;
                        if (z && !android.os.UserManager.isHeadlessSystemUserMode()) {
                            timingsTraceAndSlog.traceBegin("startHomeOnAllDisplays");
                            this.mAtmInternal.startHomeOnAllDisplays(currentUserId, "systemReady");
                            timingsTraceAndSlog.traceEnd();
                        }
                        com.android.server.am.ActivityManagerService.MainHandler mainHandler = this.mHandler;
                        final com.android.server.wm.ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
                        java.util.Objects.requireNonNull(activityTaskManagerInternal);
                        mainHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda28
                            @Override // java.lang.Runnable
                            public final void run() {
                                com.android.server.wm.ActivityTaskManagerInternal.this.showSystemReadyErrorDialogsIfNeeded();
                            }
                        });
                        if (z) {
                            timingsTraceAndSlog.traceBegin("sendUserStartBroadcast");
                            int callingUid = android.os.Binder.getCallingUid();
                            int callingPid = android.os.Binder.getCallingPid();
                            long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                            try {
                                this.mUserController.sendUserStartedBroadcast(currentUserId, callingUid, callingPid);
                                this.mUserController.sendUserStartingBroadcast(currentUserId, callingUid, callingPid);
                            } finally {
                                try {
                                    timingsTraceAndSlog.traceEnd();
                                } finally {
                                }
                            }
                            timingsTraceAndSlog.traceEnd();
                        } else {
                            android.util.Slog.i("ActivityManager", "Not sending multi-user broadcasts for non-system user " + currentUserId);
                        }
                        timingsTraceAndSlog.traceBegin("resumeTopActivities");
                        this.mAtmInternal.resumeTopActivities(false);
                        timingsTraceAndSlog.traceEnd();
                        if (z) {
                            timingsTraceAndSlog.traceBegin("sendUserSwitchBroadcasts");
                            this.mUserController.sendUserSwitchBroadcasts(-1, currentUserId);
                            timingsTraceAndSlog.traceEnd();
                        }
                        timingsTraceAndSlog.traceBegin("setBinderProxies");
                        com.android.internal.os.BinderInternal.nSetBinderProxyCountWatermarks(6000, BINDER_PROXY_LOW_WATERMARK);
                        com.android.internal.os.BinderInternal.nSetBinderProxyCountEnabled(true);
                        com.android.internal.os.BinderInternal.setBinderProxyCountCallback(new com.android.internal.os.BinderInternal.BinderProxyLimitListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda29
                            public final void onLimitReached(int i) {
                                com.android.server.am.ActivityManagerService.this.lambda$systemReady$9(i);
                            }
                        }, com.android.internal.os.BackgroundThread.getHandler());
                        timingsTraceAndSlog.traceEnd();
                        timingsTraceAndSlog.traceEnd();
                        timingsTraceAndSlog.traceBegin("componentAlias");
                        this.mComponentAliasResolver.onSystemReady(this.mConstants.mEnableComponentAlias, this.mConstants.mComponentAliasOverrides);
                        timingsTraceAndSlog.traceEnd();
                        timingsTraceAndSlog.traceEnd();
                    } catch (java.lang.Throwable th) {
                        throw th;
                    }
                }
                resetPriorityAfterLockedSection();
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$systemReady$8(android.os.PowerSaveState powerSaveState) {
        updateForceBackgroundCheck(powerSaveState.batterySaverEnabled);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$systemReady$9(int i) {
        android.util.Slog.wtf("ActivityManager", "Uid " + i + " sent too many Binders to uid " + android.os.Process.myUid());
        android.os.BinderProxy.dumpProxyDebugInfo();
        com.android.server.criticalevents.CriticalEventLog.getInstance().logExcessiveBinderCalls(i);
        if (i == 1000) {
            android.util.Slog.i("ActivityManager", "Skipping kill (uid is SYSTEM)");
        } else {
            killUid(android.os.UserHandle.getAppId(i), android.os.UserHandle.getUserId(i), 9, 29, "Too many Binders sent to SYSTEM");
            dalvik.system.VMRuntime.getRuntime().requestConcurrentGC();
        }
    }

    private void watchDeviceProvisioning(final android.content.Context context) {
        if (isDeviceProvisioned(context)) {
            android.os.SystemProperties.set(SYSTEM_PROPERTY_DEVICE_PROVISIONED, "1");
        } else {
            context.getContentResolver().registerContentObserver(android.provider.Settings.Global.getUriFor("device_provisioned"), false, new android.database.ContentObserver(new android.os.Handler(android.os.Looper.getMainLooper())) { // from class: com.android.server.am.ActivityManagerService.13
                @Override // android.database.ContentObserver
                public void onChange(boolean z) {
                    if (com.android.server.am.ActivityManagerService.this.isDeviceProvisioned(context)) {
                        android.os.SystemProperties.set(com.android.server.am.ActivityManagerService.SYSTEM_PROPERTY_DEVICE_PROVISIONED, "1");
                        context.getContentResolver().unregisterContentObserver(this);
                    }
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isDeviceProvisioned(android.content.Context context) {
        return android.provider.Settings.Global.getInt(context.getContentResolver(), "device_provisioned", 0) != 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startBroadcastObservers() {
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.start(this.mContext.getContentResolver());
        }
    }

    private void updateForceBackgroundCheck(boolean z) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        if (this.mForceBackgroundCheck != z) {
                            this.mForceBackgroundCheck = z;
                            if (this.mForceBackgroundCheck) {
                                this.mProcessList.doStopUidForIdleUidsLocked();
                            }
                        }
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    void killAppAtUsersRequest(com.android.server.am.ProcessRecord processRecord) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mAppErrors.killAppAtUserRequestLocked(processRecord);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void handleApplicationCrash(android.os.IBinder iBinder, android.app.ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo) {
        java.lang.String str;
        com.android.server.am.ProcessRecord findAppProcess = findAppProcess(iBinder, "Crash");
        if (iBinder == null) {
            str = "system_server";
        } else {
            str = findAppProcess == null ? "unknown" : findAppProcess.processName;
        }
        handleApplicationCrashInner("crash", findAppProcess, str, parcelableCrashInfo);
    }

    /* JADX WARN: Removed duplicated region for block: B:100:0x0156  */
    /* JADX WARN: Removed duplicated region for block: B:102:0x013e  */
    /* JADX WARN: Removed duplicated region for block: B:103:0x0133  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x0128  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x011b  */
    /* JADX WARN: Removed duplicated region for block: B:107:0x0114  */
    /* JADX WARN: Removed duplicated region for block: B:111:0x00db  */
    /* JADX WARN: Removed duplicated region for block: B:112:0x00d1  */
    /* JADX WARN: Removed duplicated region for block: B:113:0x00c2  */
    /* JADX WARN: Removed duplicated region for block: B:116:0x00a0  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x009d  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x00cd  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00d5  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0108  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0118  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0121  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x012c  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x0137  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x014f  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x015a  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x0165  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0170  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x017b  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x0186  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0191  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x019c  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01bf  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x01dd  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x01ed  */
    /* JADX WARN: Removed duplicated region for block: B:84:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0235  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x01f0  */
    /* JADX WARN: Removed duplicated region for block: B:90:0x01c7  */
    /* JADX WARN: Removed duplicated region for block: B:93:0x01a3  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x0198  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x018d  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0182  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0177  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x016c  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x0161  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    void handleApplicationCrashInner(java.lang.String str, com.android.server.am.ProcessRecord processRecord, java.lang.String str2, android.app.ApplicationErrorReport.CrashInfo crashInfo) {
        android.os.incremental.IncrementalMetrics incrementalMetrics;
        boolean equals;
        int processClassEnum;
        int i;
        int i2;
        float f = 1.0f;
        if (processRecord != null && processRecord.info != null && processRecord.info.packageName != null) {
            android.content.pm.IncrementalStatesInfo incrementalStatesInfo = this.mPackageManagerInt.getIncrementalStatesInfo(processRecord.info.packageName, 1000, processRecord.userId);
            if (incrementalStatesInfo != null) {
                f = incrementalStatesInfo.getProgress();
            }
            java.lang.String codePath = processRecord.info.getCodePath();
            if (codePath != null && !codePath.isEmpty() && android.os.incremental.IncrementalManager.isIncrementalPath(codePath)) {
                android.util.Slog.e("ActivityManager", "App crashed on incremental package " + processRecord.info.packageName + " which is " + ((int) (100.0f * f)) + "% loaded.");
                android.os.IBinder service = android.os.ServiceManager.getService("incremental");
                if (service != null) {
                    incrementalMetrics = new android.os.incremental.IncrementalManager(android.os.incremental.IIncrementalService.Stub.asInterface(service)).getMetrics(codePath);
                    equals = str.equals("native_recoverable_crash");
                    com.android.server.am.EventLogTags.writeAmCrash(android.os.Binder.getCallingPid(), android.os.UserHandle.getUserId(android.os.Binder.getCallingUid()), str2, processRecord != null ? -1 : processRecord.info.flags, crashInfo.exceptionClassName, crashInfo.exceptionMessage, crashInfo.throwFileName, crashInfo.throwLineNumber, equals ? 1 : 0);
                    if (str2.equals("system_server")) {
                        processClassEnum = processRecord != null ? processRecord.getProcessClassEnum() : 0;
                    } else {
                        processClassEnum = 3;
                    }
                    int i3 = processRecord == null ? processRecord.uid : -1;
                    int pid = processRecord == null ? processRecord.getPid() : -1;
                    java.lang.String str3 = (processRecord != null || processRecord.info == null) ? "" : processRecord.info.packageName;
                    if (processRecord != null || processRecord.info == null) {
                        i = 0;
                    } else if (processRecord.info.isInstantApp()) {
                        i = 2;
                    } else {
                        i = 1;
                    }
                    if (processRecord != null) {
                        i2 = 0;
                    } else if (processRecord.isInterestingToUserLocked()) {
                        i2 = 2;
                    } else {
                        i2 = 1;
                    }
                    com.android.internal.util.FrameworkStatsLog.write(78, i3, str, str2, pid, str3, i, i2, processClassEnum, incrementalMetrics == null, f, incrementalMetrics == null ? incrementalMetrics.getMillisSinceOldestPendingRead() : -1L, incrementalMetrics == null ? incrementalMetrics.getStorageHealthStatusCode() : -1, incrementalMetrics == null ? incrementalMetrics.getDataLoaderStatusCode() : -1, incrementalMetrics == null && incrementalMetrics.getReadLogsEnabled(), incrementalMetrics == null ? incrementalMetrics.getMillisSinceLastDataLoaderBind() : -1L, incrementalMetrics == null ? incrementalMetrics.getDataLoaderBindDelayMillis() : -1L, incrementalMetrics == null ? incrementalMetrics.getTotalDelayedReads() : -1, incrementalMetrics == null ? incrementalMetrics.getTotalFailedReads() : -1, incrementalMetrics == null ? incrementalMetrics.getLastReadErrorUid() : -1, incrementalMetrics == null ? incrementalMetrics.getMillisSinceLastReadError() : -1L, incrementalMetrics == null ? incrementalMetrics.getLastReadErrorNumber() : 0, incrementalMetrics == null ? incrementalMetrics.getTotalDelayedReadsDurationMillis() : -1L);
                    if (!str.equals("native_crash")) {
                        com.android.server.criticalevents.CriticalEventLog.getInstance().logNativeCrash(processClassEnum, str2, i3, pid);
                    } else if (str.equals("crash")) {
                        com.android.server.criticalevents.CriticalEventLog.getInstance().logJavaCrash(crashInfo.exceptionClassName, processClassEnum, str2, i3, pid);
                    }
                    java.lang.String relaunchReasonToString = com.android.server.wm.ActivityTaskManagerService.relaunchReasonToString(processRecord != null ? processRecord.getWindowProcessController().computeRelaunchReason() : 0);
                    if (crashInfo.crashTag != null) {
                        crashInfo.crashTag = relaunchReasonToString;
                    } else {
                        crashInfo.crashTag += " " + relaunchReasonToString;
                    }
                    addErrorToDropBox(str, processRecord, str2, null, null, null, null, null, null, crashInfo, new java.lang.Float(f), incrementalMetrics, null, null);
                    if (!equals) {
                        this.mAppErrors.sendRecoverableCrashToAppExitInfo(processRecord, crashInfo);
                        return;
                    } else {
                        this.mAppErrors.crashApplication(processRecord, crashInfo);
                        return;
                    }
                }
            }
        }
        incrementalMetrics = null;
        equals = str.equals("native_recoverable_crash");
        com.android.server.am.EventLogTags.writeAmCrash(android.os.Binder.getCallingPid(), android.os.UserHandle.getUserId(android.os.Binder.getCallingUid()), str2, processRecord != null ? -1 : processRecord.info.flags, crashInfo.exceptionClassName, crashInfo.exceptionMessage, crashInfo.throwFileName, crashInfo.throwLineNumber, equals ? 1 : 0);
        if (str2.equals("system_server")) {
        }
        if (processRecord == null) {
        }
        if (processRecord == null) {
        }
        java.lang.String str32 = (processRecord != null || processRecord.info == null) ? "" : processRecord.info.packageName;
        if (processRecord != null) {
        }
        i = 0;
        if (processRecord != null) {
        }
        com.android.internal.util.FrameworkStatsLog.write(78, i3, str, str2, pid, str32, i, i2, processClassEnum, incrementalMetrics == null, f, incrementalMetrics == null ? incrementalMetrics.getMillisSinceOldestPendingRead() : -1L, incrementalMetrics == null ? incrementalMetrics.getStorageHealthStatusCode() : -1, incrementalMetrics == null ? incrementalMetrics.getDataLoaderStatusCode() : -1, incrementalMetrics == null && incrementalMetrics.getReadLogsEnabled(), incrementalMetrics == null ? incrementalMetrics.getMillisSinceLastDataLoaderBind() : -1L, incrementalMetrics == null ? incrementalMetrics.getDataLoaderBindDelayMillis() : -1L, incrementalMetrics == null ? incrementalMetrics.getTotalDelayedReads() : -1, incrementalMetrics == null ? incrementalMetrics.getTotalFailedReads() : -1, incrementalMetrics == null ? incrementalMetrics.getLastReadErrorUid() : -1, incrementalMetrics == null ? incrementalMetrics.getMillisSinceLastReadError() : -1L, incrementalMetrics == null ? incrementalMetrics.getLastReadErrorNumber() : 0, incrementalMetrics == null ? incrementalMetrics.getTotalDelayedReadsDurationMillis() : -1L);
        if (!str.equals("native_crash")) {
        }
        java.lang.String relaunchReasonToString2 = com.android.server.wm.ActivityTaskManagerService.relaunchReasonToString(processRecord != null ? processRecord.getWindowProcessController().computeRelaunchReason() : 0);
        if (crashInfo.crashTag != null) {
        }
        addErrorToDropBox(str, processRecord, str2, null, null, null, null, null, null, crashInfo, new java.lang.Float(f), incrementalMetrics, null, null);
        if (!equals) {
        }
    }

    public void handleApplicationStrictModeViolation(android.os.IBinder iBinder, int i, android.os.StrictMode.ViolationInfo violationInfo) {
        boolean z;
        com.android.server.am.ProcessRecord findAppProcess = findAppProcess(iBinder, "StrictMode");
        if ((67108864 & i) != 0) {
            java.lang.Integer valueOf = java.lang.Integer.valueOf(violationInfo.hashCode());
            synchronized (this.mAlreadyLoggedViolatedStacks) {
                try {
                    if (this.mAlreadyLoggedViolatedStacks.contains(valueOf)) {
                        z = false;
                    } else {
                        if (this.mAlreadyLoggedViolatedStacks.size() >= 5000) {
                            this.mAlreadyLoggedViolatedStacks.clear();
                        }
                        this.mAlreadyLoggedViolatedStacks.add(valueOf);
                        z = true;
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            if (z) {
                logStrictModeViolationToDropBox(findAppProcess, violationInfo);
            }
        }
        if ((i & 536870912) != 0) {
            com.android.server.am.AppErrorResult appErrorResult = new com.android.server.am.AppErrorResult();
            long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
            try {
                android.os.Message obtain = android.os.Message.obtain();
                obtain.what = 26;
                java.util.HashMap hashMap = new java.util.HashMap();
                hashMap.put("result", appErrorResult);
                hashMap.put("app", findAppProcess);
                hashMap.put("info", violationInfo);
                obtain.obj = hashMap;
                this.mUiHandler.sendMessage(obtain);
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                android.util.Slog.w("ActivityManager", "handleApplicationStrictModeViolation; res=" + appErrorResult.get());
            } catch (java.lang.Throwable th2) {
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th2;
            }
        }
    }

    public void registerStrictModeCallback(android.os.IBinder iBinder) {
        final int callingPid = android.os.Binder.getCallingPid();
        this.mStrictModeCallbacks.put(callingPid, android.app.IUnsafeIntentStrictModeCallback.Stub.asInterface(iBinder));
        try {
            iBinder.linkToDeath(new android.os.IBinder.DeathRecipient() { // from class: com.android.server.am.ActivityManagerService.14
                @Override // android.os.IBinder.DeathRecipient
                public void binderDied() {
                    com.android.server.am.ActivityManagerService.this.mStrictModeCallbacks.remove(callingPid);
                }
            }, 0);
        } catch (android.os.RemoteException e) {
            this.mStrictModeCallbacks.remove(callingPid);
        }
    }

    private void logStrictModeViolationToDropBox(com.android.server.am.ProcessRecord processRecord, android.os.StrictMode.ViolationInfo violationInfo) {
        java.lang.String str;
        if (violationInfo == null) {
            return;
        }
        boolean z = processRecord == null || (processRecord.info.flags & 129) != 0;
        if (processRecord != null && processRecord.getPid() == MY_PID) {
            str = "system_server";
        } else {
            str = processRecord == null ? "unknown" : processRecord.processName;
        }
        final android.os.DropBoxManager dropBoxManager = (android.os.DropBoxManager) this.mContext.getSystemService("dropbox");
        final java.lang.String str2 = processClass(processRecord) + "_strictmode";
        if (dropBoxManager == null || !dropBoxManager.isTagEnabled(str2)) {
            return;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder(1024);
        synchronized (sb) {
            try {
                appendDropBoxProcessHeaders(processRecord, str, null, sb);
                sb.append("Build: ");
                sb.append(android.os.Build.FINGERPRINT);
                sb.append("\n");
                sb.append("System-App: ");
                sb.append(z);
                sb.append("\n");
                sb.append("Uptime-Millis: ");
                sb.append(violationInfo.violationUptimeMillis);
                sb.append("\n");
                if (violationInfo.violationNumThisLoop != 0) {
                    sb.append("Loop-Violation-Number: ");
                    sb.append(violationInfo.violationNumThisLoop);
                    sb.append("\n");
                }
                if (violationInfo.numAnimationsRunning != 0) {
                    sb.append("Animations-Running: ");
                    sb.append(violationInfo.numAnimationsRunning);
                    sb.append("\n");
                }
                if (violationInfo.broadcastIntentAction != null) {
                    sb.append("Broadcast-Intent-Action: ");
                    sb.append(violationInfo.broadcastIntentAction);
                    sb.append("\n");
                }
                if (violationInfo.durationMillis != -1) {
                    sb.append("Duration-Millis: ");
                    sb.append(violationInfo.durationMillis);
                    sb.append("\n");
                }
                if (violationInfo.numInstances != -1) {
                    sb.append("Instance-Count: ");
                    sb.append(violationInfo.numInstances);
                    sb.append("\n");
                }
                if (violationInfo.tags != null) {
                    for (java.lang.String str3 : violationInfo.tags) {
                        sb.append("Span-Tag: ");
                        sb.append(str3);
                        sb.append("\n");
                    }
                }
                sb.append("\n");
                sb.append(violationInfo.getStackTrace());
                sb.append("\n");
                if (violationInfo.getViolationDetails() != null) {
                    sb.append(violationInfo.getViolationDetails());
                    sb.append("\n");
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
        final java.lang.String sb2 = sb.toString();
        com.android.server.IoThread.getHandler().post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda19
            @Override // java.lang.Runnable
            public final void run() {
                dropBoxManager.addText(str2, sb2);
            }
        });
    }

    public boolean handleApplicationWtf(@android.annotation.Nullable final android.os.IBinder iBinder, @android.annotation.Nullable final java.lang.String str, boolean z, @android.annotation.NonNull final android.app.ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo, int i) {
        final int callingUid = android.os.Binder.getCallingUid();
        final int callingPid = android.os.Binder.getCallingPid();
        com.android.internal.util.Preconditions.checkNotNull(parcelableCrashInfo);
        if (z || i == android.os.Process.myPid()) {
            this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService.15
                @Override // java.lang.Runnable
                public void run() {
                    com.android.server.am.ActivityManagerService.this.handleApplicationWtfInner(callingUid, callingPid, iBinder, str, parcelableCrashInfo);
                }
            });
            return false;
        }
        com.android.server.am.ProcessRecord handleApplicationWtfInner = handleApplicationWtfInner(callingUid, callingPid, iBinder, str, parcelableCrashInfo);
        boolean z2 = android.os.Build.IS_ENG || android.provider.Settings.Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0;
        boolean z3 = handleApplicationWtfInner == null || handleApplicationWtfInner.isPersistent();
        if (!z2 || z3) {
            return false;
        }
        this.mAppErrors.crashApplication(handleApplicationWtfInner, parcelableCrashInfo);
        return true;
    }

    com.android.server.am.ProcessRecord handleApplicationWtfInner(int i, int i2, @android.annotation.Nullable android.os.IBinder iBinder, @android.annotation.Nullable java.lang.String str, @android.annotation.Nullable android.app.ApplicationErrorReport.CrashInfo crashInfo) {
        java.lang.String str2;
        com.android.server.am.ProcessRecord findAppProcess = findAppProcess(iBinder, "WTF");
        if (iBinder == null) {
            str2 = "system_server";
        } else {
            str2 = findAppProcess == null ? "unknown" : findAppProcess.processName;
        }
        com.android.server.am.EventLogTags.writeAmWtf(android.os.UserHandle.getUserId(i), i2, str2, findAppProcess == null ? -1 : findAppProcess.info.flags, str, crashInfo != null ? crashInfo.exceptionMessage : "unknown");
        com.android.internal.util.FrameworkStatsLog.write(80, i, str, str2, i2, findAppProcess != null ? findAppProcess.getProcessClassEnum() : 0);
        addErrorToDropBox("wtf", findAppProcess, str2, null, null, null, str, null, null, crashInfo, null, null, null, null);
        return findAppProcess;
    }

    public void schedulePendingSystemServerWtfs(final java.util.LinkedList<android.util.Pair<java.lang.String, android.app.ApplicationErrorReport.CrashInfo>> linkedList) {
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda6
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.am.ActivityManagerService.this.lambda$schedulePendingSystemServerWtfs$11(linkedList);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handlePendingSystemServerWtfs, reason: merged with bridge method [inline-methods] */
    public void lambda$schedulePendingSystemServerWtfs$11(java.util.LinkedList<android.util.Pair<java.lang.String, android.app.ApplicationErrorReport.CrashInfo>> linkedList) {
        com.android.server.am.ProcessRecord processRecord;
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(MY_PID);
        }
        android.util.Pair<java.lang.String, android.app.ApplicationErrorReport.CrashInfo> poll = linkedList.poll();
        while (poll != null) {
            addErrorToDropBox("wtf", processRecord, "system_server", null, null, null, (java.lang.String) poll.first, null, null, (android.app.ApplicationErrorReport.CrashInfo) poll.second, null, null, null, null);
            poll = linkedList.poll();
        }
    }

    private com.android.server.am.ProcessRecord findAppProcess(android.os.IBinder iBinder, java.lang.String str) {
        com.android.server.am.ProcessRecord findAppProcessLOSP;
        if (iBinder == null) {
            return null;
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                findAppProcessLOSP = this.mProcessList.findAppProcessLOSP(iBinder, str);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return findAppProcessLOSP;
    }

    void appendDropBoxProcessHeaders(com.android.server.am.ProcessRecord processRecord, java.lang.String str, com.android.server.am.ActivityManagerService.VolatileDropboxEntryStates volatileDropboxEntryStates, final java.lang.StringBuilder sb) {
        sb.append("SystemUptimeMs: ");
        sb.append(android.os.SystemClock.uptimeMillis());
        sb.append("\n");
        if (processRecord == null) {
            sb.append("Process: ");
            sb.append(str);
            sb.append("\n");
            return;
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                sb.append("Process: ");
                sb.append(str);
                sb.append("\n");
                sb.append("PID: ");
                sb.append(processRecord.getPid());
                sb.append("\n");
                sb.append("UID: ");
                sb.append(processRecord.uid);
                sb.append("\n");
                if (processRecord.mOptRecord != null) {
                    sb.append("Frozen: ");
                    sb.append((volatileDropboxEntryStates == null || volatileDropboxEntryStates.isProcessFrozen() == null) ? processRecord.mOptRecord.isFrozen() : volatileDropboxEntryStates.isProcessFrozen().booleanValue());
                    sb.append("\n");
                }
                int i = processRecord.info.flags;
                final android.content.pm.IPackageManager packageManager = android.app.AppGlobals.getPackageManager();
                sb.append("Flags: 0x");
                sb.append(java.lang.Integer.toHexString(i));
                sb.append("\n");
                final int callingUserId = android.os.UserHandle.getCallingUserId();
                processRecord.getPkgList().forEachPackage(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda5
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.am.ActivityManagerService.lambda$appendDropBoxProcessHeaders$12(sb, packageManager, callingUserId, (java.lang.String) obj);
                    }
                });
                if (processRecord.info.isInstantApp()) {
                    sb.append("Instant-App: true\n");
                }
                if (processRecord.isSdkSandbox) {
                    java.lang.String str2 = processRecord.sdkSandboxClientAppPackage;
                    try {
                        android.content.pm.PackageInfo packageInfo = packageManager.getPackageInfo(str2, 1024L, callingUserId);
                        if (packageInfo != null) {
                            appendSdkSandboxClientPackageHeader(sb, packageInfo);
                            appendSdkSandboxLibraryHeaders(sb, packageInfo);
                        } else {
                            android.util.Slog.e("ActivityManager", "PackageInfo is null for SDK sandbox client: " + str2);
                        }
                    } catch (android.os.RemoteException e) {
                        android.util.Slog.e("ActivityManager", "Error getting package info for SDK sandbox client: " + str2, e);
                    }
                    sb.append("SdkSandbox: true\n");
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$appendDropBoxProcessHeaders$12(java.lang.StringBuilder sb, android.content.pm.IPackageManager iPackageManager, int i, java.lang.String str) {
        sb.append("Package: ");
        sb.append(str);
        try {
            android.content.pm.PackageInfo packageInfo = iPackageManager.getPackageInfo(str, 0L, i);
            if (packageInfo != null) {
                sb.append(" v");
                sb.append(packageInfo.getLongVersionCode());
                if (packageInfo.versionName != null) {
                    sb.append(" (");
                    sb.append(packageInfo.versionName);
                    sb.append(")");
                }
            }
        } catch (android.os.RemoteException e) {
            android.util.Slog.e("ActivityManager", "Error getting package info: " + str, e);
        }
        sb.append("\n");
    }

    private void appendSdkSandboxClientPackageHeader(java.lang.StringBuilder sb, android.content.pm.PackageInfo packageInfo) {
        sb.append("SdkSandbox-Client-Package: ");
        sb.append(packageInfo.packageName);
        sb.append(" v");
        sb.append(packageInfo.getLongVersionCode());
        if (packageInfo.versionName != null) {
            sb.append(" (");
            sb.append(packageInfo.versionName);
            sb.append(")");
        }
        sb.append("\n");
    }

    private void appendSdkSandboxLibraryHeaders(java.lang.StringBuilder sb, android.content.pm.PackageInfo packageInfo) {
        java.util.List sharedLibraryInfos = packageInfo.applicationInfo.getSharedLibraryInfos();
        int size = sharedLibraryInfos.size();
        for (int i = 0; i < size; i++) {
            android.content.pm.SharedLibraryInfo sharedLibraryInfo = (android.content.pm.SharedLibraryInfo) sharedLibraryInfos.get(i);
            if (sharedLibraryInfo.isSdk()) {
                sb.append("SdkSandbox-Library: ");
                sb.append(sharedLibraryInfo.getPackageName());
                android.content.pm.VersionedPackage declaringPackage = sharedLibraryInfo.getDeclaringPackage();
                sb.append(" v");
                sb.append(declaringPackage.getLongVersionCode());
                sb.append("\n");
            }
        }
    }

    private static java.lang.String processClass(com.android.server.am.ProcessRecord processRecord) {
        if (processRecord == null || processRecord.getPid() == MY_PID) {
            return "system_server";
        }
        if (processRecord.info.isSystemApp() || processRecord.info.isSystemExt()) {
            return "system_app";
        }
        return "data_app";
    }

    public void initDropboxRateLimiter() {
        this.mDropboxRateLimiter.init();
    }

    public void addErrorToDropBox(java.lang.String str, com.android.server.am.ProcessRecord processRecord, java.lang.String str2, java.lang.String str3, java.lang.String str4, com.android.server.am.ProcessRecord processRecord2, java.lang.String str5, final java.lang.String str6, final java.io.File file, final android.app.ApplicationErrorReport.CrashInfo crashInfo, @android.annotation.Nullable java.lang.Float f, @android.annotation.Nullable android.os.incremental.IncrementalMetrics incrementalMetrics, @android.annotation.Nullable java.util.UUID uuid, @android.annotation.Nullable com.android.server.am.ActivityManagerService.VolatileDropboxEntryStates volatileDropboxEntryStates) {
        try {
            final android.os.DropBoxManager dropBoxManager = (android.os.DropBoxManager) this.mContext.getSystemService(android.os.DropBoxManager.class);
            final java.lang.String str7 = processClass(processRecord) + "_" + str;
            if (dropBoxManager == null || !dropBoxManager.isTagEnabled(str7)) {
                return;
            }
            com.android.server.am.DropboxRateLimiter.RateLimitResult shouldRateLimit = this.mDropboxRateLimiter.shouldRateLimit(str, str2);
            if (shouldRateLimit.shouldRateLimit()) {
                return;
            }
            final java.lang.StringBuilder sb = new java.lang.StringBuilder(1024);
            appendDropBoxProcessHeaders(processRecord, str2, volatileDropboxEntryStates, sb);
            if (processRecord != null) {
                sb.append("Foreground: ");
                sb.append(processRecord.isInterestingToUserLocked() ? "Yes" : "No");
                sb.append("\n");
                if (processRecord.getStartUptime() > 0) {
                    long uptimeMillis = android.os.SystemClock.uptimeMillis() - processRecord.getStartUptime();
                    sb.append("Process-Runtime: ");
                    sb.append(uptimeMillis);
                    sb.append("\n");
                }
            }
            if (str3 != null) {
                sb.append("Activity: ");
                sb.append(str3);
                sb.append("\n");
            }
            if (str4 != null) {
                if (processRecord2 != null && processRecord2.getPid() != processRecord.getPid()) {
                    sb.append("Parent-Process: ");
                    sb.append(processRecord2.processName);
                    sb.append("\n");
                }
                if (!str4.equals(str3)) {
                    sb.append("Parent-Activity: ");
                    sb.append(str4);
                    sb.append("\n");
                }
            }
            if (str5 != null) {
                sb.append("Subject: ");
                sb.append(str5);
                sb.append("\n");
            }
            if (uuid != null) {
                sb.append("ErrorId: ");
                sb.append(uuid.toString());
                sb.append("\n");
            }
            sb.append("Build: ");
            sb.append(android.os.Build.FINGERPRINT);
            sb.append("\n");
            if (android.os.Debug.isDebuggerConnected()) {
                sb.append("Debugger: Connected\n");
            }
            if (crashInfo != null && crashInfo.exceptionHandlerClassName != null && !crashInfo.exceptionHandlerClassName.isEmpty()) {
                sb.append("Crash-Handler: ");
                sb.append(crashInfo.exceptionHandlerClassName);
                sb.append("\n");
            }
            if (crashInfo != null && crashInfo.crashTag != null && !crashInfo.crashTag.isEmpty()) {
                sb.append("Crash-Tag: ");
                sb.append(crashInfo.crashTag);
                sb.append("\n");
            }
            if (f != null) {
                sb.append("Loading-Progress: ");
                sb.append(f.floatValue());
                sb.append("\n");
            }
            if (incrementalMetrics != null) {
                sb.append("Incremental: Yes");
                sb.append("\n");
                long millisSinceOldestPendingRead = incrementalMetrics.getMillisSinceOldestPendingRead();
                if (millisSinceOldestPendingRead > 0) {
                    sb.append("Millis-Since-Oldest-Pending-Read: ");
                    sb.append(millisSinceOldestPendingRead);
                    sb.append("\n");
                }
            }
            sb.append(shouldRateLimit.createHeader());
            sb.append("\n");
            final boolean z = processRecord == null;
            java.lang.Thread thread = new java.lang.Thread("Error dump: " + str7) { // from class: com.android.server.am.ActivityManagerService.16
                @Override // java.lang.Thread, java.lang.Runnable
                public void run() {
                    java.lang.Throwable th;
                    if (str6 != null) {
                        sb.append(str6);
                    }
                    java.lang.String str8 = "logcat_for_" + str7;
                    java.lang.String str9 = "max_error_bytes_for_" + str7;
                    int i = android.os.Build.IS_USER ? 0 : android.provider.Settings.Global.getInt(com.android.server.am.ActivityManagerService.this.mContext.getContentResolver(), str8, 0);
                    int i2 = android.provider.Settings.Global.getInt(com.android.server.am.ActivityManagerService.this.mContext.getContentResolver(), str9, com.android.server.am.ActivityManagerService.DROPBOX_DEFAULT_MAX_SIZE);
                    if (file != null) {
                        java.lang.StringBuilder sb2 = sb;
                        sb2.append(com.android.server.am.ActivityManagerService.DATA_FILE_PATH_HEADER);
                        sb2.append(file.getAbsolutePath());
                        sb2.append('\n');
                        int length = ((i2 - sb.length()) - (i * 100)) - com.android.server.am.ActivityManagerService.DATA_FILE_PATH_FOOTER.length();
                        if (length > 0) {
                            try {
                                sb.append(android.os.FileUtils.readTextFile(file, length, "\n\n[[TRUNCATED]]\n"));
                            } catch (java.io.IOException e) {
                                android.util.Slog.e("ActivityManager", "Error reading " + file, e);
                            }
                        }
                        sb.append(com.android.server.am.ActivityManagerService.DATA_FILE_PATH_FOOTER);
                    }
                    if (crashInfo != null && crashInfo.stackTrace != null) {
                        sb.append(crashInfo.stackTrace);
                    }
                    if (i > 0 && !z) {
                        sb.append("\n");
                        java.io.InputStreamReader inputStreamReader = null;
                        try {
                            try {
                                try {
                                    java.lang.Process start = new java.lang.ProcessBuilder("/system/bin/timeout", "-i", "-s", "SEGV", "10s", "/system/bin/logcat", "-v", "threadtime", "-b", "events", "-b", "system", "-b", "main", "-b", "crash", "-t", java.lang.String.valueOf(i)).redirectErrorStream(true).start();
                                    try {
                                        start.getOutputStream().close();
                                    } catch (java.io.IOException e2) {
                                    }
                                    try {
                                        start.getErrorStream().close();
                                    } catch (java.io.IOException e3) {
                                    }
                                    java.io.InputStreamReader inputStreamReader2 = new java.io.InputStreamReader(start.getInputStream());
                                    try {
                                        char[] cArr = new char[8192];
                                        while (true) {
                                            int read = inputStreamReader2.read(cArr);
                                            if (read <= 0) {
                                                break;
                                            } else {
                                                sb.append(cArr, 0, read);
                                            }
                                        }
                                        inputStreamReader2.close();
                                    } catch (java.io.IOException e4) {
                                        e = e4;
                                        inputStreamReader = inputStreamReader2;
                                        android.util.Slog.e("ActivityManager", "Error running logcat", e);
                                        if (inputStreamReader != null) {
                                            inputStreamReader.close();
                                        }
                                        dropBoxManager.addText(str7, sb.toString());
                                    } catch (java.lang.Throwable th2) {
                                        th = th2;
                                        inputStreamReader = inputStreamReader2;
                                        if (inputStreamReader == null) {
                                            throw th;
                                        }
                                        try {
                                            inputStreamReader.close();
                                            throw th;
                                        } catch (java.io.IOException e5) {
                                            throw th;
                                        }
                                    }
                                } catch (java.lang.Throwable th3) {
                                    th = th3;
                                }
                            } catch (java.io.IOException e6) {
                                e = e6;
                            }
                        } catch (java.io.IOException e7) {
                        }
                    }
                    dropBoxManager.addText(str7, sb.toString());
                }
            };
            if (z) {
                int allowThreadDiskWritesMask = android.os.StrictMode.allowThreadDiskWritesMask();
                try {
                    thread.run();
                    return;
                } finally {
                    android.os.StrictMode.setThreadPolicyMask(allowThreadDiskWritesMask);
                }
            }
            thread.start();
            if (processRecord != null && processRecord.mPid == MY_PID && "crash".equals(str)) {
                try {
                    thread.join(2000L);
                } catch (java.lang.InterruptedException e) {
                }
            }
        } catch (java.lang.Exception e2) {
        }
    }

    public java.util.List<android.app.ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState() {
        enforceNotIsolatedCaller("getProcessesInErrorState");
        final java.util.List<android.app.ActivityManager.ProcessErrorStateInfo>[] listArr = new java.util.List[1];
        final int callingUid = android.os.Binder.getCallingUid();
        final boolean z = android.app.ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        final int userId = android.os.UserHandle.getUserId(callingUid);
        final boolean z2 = android.app.ActivityManager.checkUidPermission("android.permission.DUMP", callingUid) == 0;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(false, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda21
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.am.ActivityManagerService.lambda$getProcessesInErrorState$13(z, userId, z2, callingUid, listArr, (com.android.server.am.ProcessRecord) obj);
                    }
                });
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return listArr[0];
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$getProcessesInErrorState$13(boolean z, int i, boolean z2, int i2, java.util.List[] listArr, com.android.server.am.ProcessRecord processRecord) {
        android.app.ActivityManager.ProcessErrorStateInfo processErrorStateInfo;
        if (!z && processRecord.userId != i) {
            return;
        }
        if (!z2 && processRecord.info.uid != i2) {
            return;
        }
        com.android.server.am.ProcessErrorStateRecord processErrorStateRecord = processRecord.mErrorState;
        boolean isCrashing = processErrorStateRecord.isCrashing();
        boolean isNotResponding = processErrorStateRecord.isNotResponding();
        if (processRecord.getThread() != null) {
            if (isCrashing || isNotResponding) {
                if (isCrashing) {
                    processErrorStateInfo = processErrorStateRecord.getCrashingReport();
                } else if (!isNotResponding) {
                    processErrorStateInfo = null;
                } else {
                    processErrorStateInfo = processErrorStateRecord.getNotRespondingReport();
                }
                if (processErrorStateInfo != null) {
                    if (listArr[0] == null) {
                        listArr[0] = new java.util.ArrayList(1);
                    }
                    listArr[0].add(processErrorStateInfo);
                    return;
                }
                android.util.Slog.w("ActivityManager", "Missing app error report, app = " + processRecord.processName + " crashing = " + isCrashing + " notResponding = " + isNotResponding);
            }
        }
    }

    public java.util.List<android.app.ActivityManager.RunningAppProcessInfo> getRunningAppProcesses() {
        java.util.List<android.app.ActivityManager.RunningAppProcessInfo> runningAppProcessesLOSP;
        enforceNotIsolatedCaller("getRunningAppProcesses");
        int callingUid = android.os.Binder.getCallingUid();
        int uidTargetSdkVersion = this.mPackageManagerInt.getUidTargetSdkVersion(callingUid);
        boolean z = android.app.ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        int userId = android.os.UserHandle.getUserId(callingUid);
        boolean isGetTasksAllowed = this.mAtmInternal.isGetTasksAllowed("getRunningAppProcesses", android.os.Binder.getCallingPid(), callingUid);
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                runningAppProcessesLOSP = this.mProcessList.getRunningAppProcessesLOSP(z, userId, isGetTasksAllowed, callingUid, uidTargetSdkVersion);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return runningAppProcessesLOSP;
    }

    public java.util.List<android.content.pm.ApplicationInfo> getRunningExternalApplications() {
        enforceNotIsolatedCaller("getRunningExternalApplications");
        java.util.List<android.app.ActivityManager.RunningAppProcessInfo> runningAppProcesses = getRunningAppProcesses();
        java.util.ArrayList arrayList = new java.util.ArrayList();
        if (runningAppProcesses != null && runningAppProcesses.size() > 0) {
            java.util.HashSet hashSet = new java.util.HashSet();
            for (android.app.ActivityManager.RunningAppProcessInfo runningAppProcessInfo : runningAppProcesses) {
                if (runningAppProcessInfo.pkgList != null) {
                    for (java.lang.String str : runningAppProcessInfo.pkgList) {
                        hashSet.add(str);
                    }
                }
            }
            android.content.pm.IPackageManager packageManager = android.app.AppGlobals.getPackageManager();
            java.util.Iterator it = hashSet.iterator();
            while (it.hasNext()) {
                try {
                    android.content.pm.ApplicationInfo applicationInfo = packageManager.getApplicationInfo((java.lang.String) it.next(), 0L, android.os.UserHandle.getCallingUserId());
                    if ((applicationInfo.flags & 262144) != 0) {
                        arrayList.add(applicationInfo);
                    }
                } catch (android.os.RemoteException e) {
                }
            }
        }
        return arrayList;
    }

    public android.content.pm.ParceledListSlice<android.app.ApplicationStartInfo> getHistoricalProcessStartReasons(java.lang.String str, int i, int i2) {
        enforceNotIsolatedCaller("getHistoricalProcessStartReasons");
        if (i2 == -1 || i2 == -2) {
            throw new java.lang.IllegalArgumentException("Unsupported userId");
        }
        int callingPid = android.os.Binder.getCallingPid();
        int callingUid = android.os.Binder.getCallingUid();
        this.mUserController.handleIncomingUser(callingPid, callingUid, i2, true, 0, "getHistoricalProcessStartReasons", null);
        java.util.ArrayList<android.app.ApplicationStartInfo> arrayList = new java.util.ArrayList<>();
        if (!android.text.TextUtils.isEmpty(str)) {
            if (enforceDumpPermissionForPackage(str, i2, callingUid, "getHistoricalProcessStartReasons") != -1) {
                this.mProcessList.getAppStartInfoTracker().getStartInfo(str, i2, callingPid, i, arrayList);
            }
        } else {
            this.mProcessList.getAppStartInfoTracker().getStartInfo(str, callingUid, callingPid, i, arrayList);
        }
        return new android.content.pm.ParceledListSlice<>(arrayList);
    }

    public void addApplicationStartInfoCompleteListener(android.app.IApplicationStartInfoCompleteListener iApplicationStartInfoCompleteListener, int i) {
        enforceNotIsolatedCaller("setApplicationStartInfoCompleteListener");
        if (i == -1 || i == -2) {
            throw new java.lang.IllegalArgumentException("Unsupported userId");
        }
        this.mProcessList.getAppStartInfoTracker().addStartInfoCompleteListener(iApplicationStartInfoCompleteListener, android.os.Binder.getCallingUid());
    }

    public void removeApplicationStartInfoCompleteListener(android.app.IApplicationStartInfoCompleteListener iApplicationStartInfoCompleteListener, int i) {
        enforceNotIsolatedCaller("clearApplicationStartInfoCompleteListener");
        if (i == -1 || i == -2) {
            throw new java.lang.IllegalArgumentException("Unsupported userId");
        }
        this.mProcessList.getAppStartInfoTracker().removeStartInfoCompleteListener(iApplicationStartInfoCompleteListener, android.os.Binder.getCallingUid(), true);
    }

    public void addStartInfoTimestamp(int i, long j, int i2) {
        enforceNotIsolatedCaller("addStartInfoTimestamp");
    }

    public android.content.pm.ParceledListSlice<android.app.ApplicationExitInfo> getHistoricalProcessExitReasons(java.lang.String str, int i, int i2, int i3) {
        enforceNotIsolatedCaller("getHistoricalProcessExitReasons");
        if (i3 == -1 || i3 == -2) {
            throw new java.lang.IllegalArgumentException("Unsupported userId");
        }
        int callingPid = android.os.Binder.getCallingPid();
        int callingUid = android.os.Binder.getCallingUid();
        android.os.UserHandle.getCallingUserId();
        this.mUserController.handleIncomingUser(callingPid, callingUid, i3, true, 0, "getHistoricalProcessExitReasons", null);
        com.android.server.os.NativeTombstoneManager nativeTombstoneManager = (com.android.server.os.NativeTombstoneManager) com.android.server.LocalServices.getService(com.android.server.os.NativeTombstoneManager.class);
        java.util.ArrayList<android.app.ApplicationExitInfo> arrayList = new java.util.ArrayList<>();
        if (!android.text.TextUtils.isEmpty(str)) {
            int enforceDumpPermissionForPackage = enforceDumpPermissionForPackage(str, i3, callingUid, "getHistoricalProcessExitReasons");
            if (enforceDumpPermissionForPackage != -1) {
                this.mProcessList.mAppExitInfoTracker.getExitInfo(str, enforceDumpPermissionForPackage, i, i2, arrayList);
                nativeTombstoneManager.collectTombstones(arrayList, enforceDumpPermissionForPackage, i, i2);
            }
        } else {
            this.mProcessList.mAppExitInfoTracker.getExitInfo(str, callingUid, i, i2, arrayList);
            nativeTombstoneManager.collectTombstones(arrayList, callingUid, i, i2);
        }
        return new android.content.pm.ParceledListSlice<>(arrayList);
    }

    public void setProcessStateSummary(@android.annotation.Nullable byte[] bArr) {
        if (bArr != null && bArr.length > 128) {
            throw new java.lang.IllegalArgumentException("Data size is too large");
        }
        this.mProcessList.mAppExitInfoTracker.setProcessStateSummary(android.os.Binder.getCallingUid(), android.os.Binder.getCallingPid(), bArr);
    }

    int enforceDumpPermissionForPackage(java.lang.String str, int i, int i2, java.lang.String str2) {
        try {
            if (android.os.Process.isSdkSandboxUid(i2)) {
                if (getPackageManager().getSdkSandboxPackageName().equals(str)) {
                    return i2;
                }
            }
        } catch (android.os.RemoteException e) {
            android.util.Log.e("ActivityManager", "Could not get SDK sandbox package name");
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            int packageUid = this.mPackageManagerInt.getPackageUid(str, 786432L, i);
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            if (android.os.UserHandle.getAppId(packageUid) != android.os.UserHandle.getAppId(i2)) {
                enforceCallingPermission("android.permission.DUMP", str2);
            }
            return packageUid;
        } catch (java.lang.Throwable th) {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    public void getMyMemoryState(android.app.ActivityManager.RunningAppProcessInfo runningAppProcessInfo) {
        com.android.server.am.ProcessRecord processRecord;
        if (runningAppProcessInfo == null) {
            throw new java.lang.IllegalArgumentException("outState is null");
        }
        enforceNotIsolatedCaller("getMyMemoryState");
        int uidTargetSdkVersion = this.mPackageManagerInt.getUidTargetSdkVersion(android.os.Binder.getCallingUid());
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(android.os.Binder.getCallingPid());
                }
                if (processRecord != null) {
                    this.mProcessList.fillInProcMemInfoLOSP(processRecord, runningAppProcessInfo, uidTargetSdkVersion);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public int getMemoryTrimLevel() {
        int lastMemoryLevelLocked;
        enforceNotIsolatedCaller("getMyMemoryState");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                lastMemoryLevelLocked = this.mAppProfiler.getLastMemoryLevelLocked();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return lastMemoryLevelLocked;
    }

    void setMemFactorOverride(int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (i == this.mAppProfiler.getLastMemoryLevelLocked()) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mAppProfiler.setMemFactorOverrideLocked(i);
                updateOomAdjLocked(16);
                resetPriorityAfterLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    void setServiceRestartBackoffEnabled(@android.annotation.NonNull java.lang.String str, boolean z, @android.annotation.NonNull java.lang.String str2) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.setServiceRestartBackoffEnabledLocked(str, z, str2);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    boolean isServiceRestartBackoffEnabled(@android.annotation.NonNull java.lang.String str) {
        boolean isServiceRestartBackoffEnabledLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                isServiceRestartBackoffEnabledLocked = this.mServices.isServiceRestartBackoffEnabledLocked(str);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return isServiceRestartBackoffEnabledLocked;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public void onShellCommand(java.io.FileDescriptor fileDescriptor, java.io.FileDescriptor fileDescriptor2, java.io.FileDescriptor fileDescriptor3, java.lang.String[] strArr, android.os.ShellCallback shellCallback, android.os.ResultReceiver resultReceiver) {
        int callingUid = android.os.Binder.getCallingUid();
        if (callingUid != 0 && callingUid != 2000) {
            resultReceiver.send(-1, null);
            throw new java.lang.SecurityException("Shell commands are only callable by root or shell");
        }
        new com.android.server.am.ActivityManagerShellCommand(this, false).exec(this, fileDescriptor, fileDescriptor2, fileDescriptor3, strArr, shellCallback, resultReceiver);
    }

    protected void dump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
        com.android.server.utils.PriorityDump.dump(this.mPriorityDumper, fileDescriptor, printWriter, strArr);
    }

    private void dumpEverything(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, int i, boolean z, java.lang.String str, int i2, boolean z2, boolean z3, int i3, boolean z4) {
        com.android.server.am.ActiveServices.ServiceDumper newServiceDumperLocked;
        java.lang.String str2;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mConstants.dump(printWriter);
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        this.mOomAdjuster.dumpCachedAppOptimizerSettings(printWriter);
                    } finally {
                    }
                }
                resetPriorityAfterProcLockedSection();
                this.mOomAdjuster.dumpCacheOomRankerSettings(printWriter);
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                dumpAllowedAssociationsLocked(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                this.mPendingIntentController.dumpPendingIntents(printWriter, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                dumpBroadcastsLocked(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                if (z || str != null) {
                    dumpBroadcastStatsLocked(fileDescriptor, printWriter, strArr, i, z, str);
                    printWriter.println();
                    if (z) {
                        printWriter.println(TICK);
                    }
                }
                this.mCpHelper.dumpProvidersLocked(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                dumpPermissions(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                newServiceDumperLocked = this.mServices.newServiceDumperLocked(fileDescriptor, printWriter, strArr, i, z, str);
                if (!z2) {
                    if (z) {
                        printWriter.println(TICK);
                    }
                    newServiceDumperLocked.dumpLocked();
                }
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
        printWriter.println(TICK);
        com.android.server.utils.AnrTimer.dump(printWriter, false);
        if (z2) {
            if (z) {
                printWriter.println(TICK);
            }
            newServiceDumperLocked.dumpWithClient();
        }
        if (str == null && z4) {
            printWriter.println();
            if (z) {
                printWriter.println(TICK);
            }
            dumpBinderProxies(printWriter, 6000);
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                this.mAtmInternal.dump(com.android.server.wm.ActivityTaskManagerService.DUMP_RECENTS_CMD, fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                this.mAtmInternal.dump(com.android.server.wm.ActivityTaskManagerService.DUMP_LASTANR_CMD, fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                this.mAtmInternal.dump(com.android.server.wm.ActivityTaskManagerService.DUMP_STARTER_CMD, fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                if (str == null) {
                    printWriter.println();
                    if (z) {
                        printWriter.println(TICK);
                    }
                    this.mAtmInternal.dump(com.android.server.wm.ActivityTaskManagerService.DUMP_CONTAINERS_CMD, fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                }
                if (!z3) {
                    printWriter.println();
                    if (z) {
                        printWriter.println(TICK);
                    }
                    this.mAtmInternal.dump(com.android.server.wm.ActivityTaskManagerService.DUMP_ACTIVITIES_CMD, fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                }
                if (this.mAssociations.size() <= 0) {
                    str2 = str;
                } else {
                    printWriter.println();
                    if (z) {
                        printWriter.println(TICK);
                    }
                    str2 = str;
                    dumpAssociationsLocked(fileDescriptor, printWriter, strArr, i, z, z2, str);
                }
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                    this.mProcessList.getAppStartInfoTracker().dumpHistoryProcessStartInfo(printWriter, str2);
                    printWriter.println(TICK);
                    this.mProcessList.mAppExitInfoTracker.dumpHistoryProcessExitInfo(printWriter, str2);
                }
                if (str2 == null) {
                    printWriter.println();
                    if (z) {
                        printWriter.println(TICK);
                    }
                    this.mOomAdjProfiler.dump(printWriter);
                    printWriter.println();
                    if (z) {
                        printWriter.println(TICK);
                    }
                    dumpLmkLocked(printWriter);
                }
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock2) {
                    try {
                        this.mProcessList.dumpProcessesLSP(fileDescriptor, printWriter, strArr, i, z, str, i3);
                    } finally {
                    }
                }
                resetPriorityAfterProcLockedSection();
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                dumpUsers(printWriter);
                printWriter.println();
                if (z) {
                    printWriter.println(TICK);
                }
                this.mComponentAliasResolver.dump(printWriter);
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
    }

    private void dumpAppRestrictionController(java.io.PrintWriter printWriter) {
        printWriter.println(TICK);
        this.mAppRestrictionController.dump(printWriter, "");
    }

    void dumpAppRestrictionController(android.util.proto.ProtoOutputStream protoOutputStream, int i) {
        this.mAppRestrictionController.dumpAsProto(protoOutputStream, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Code restructure failed: missing block: B:105:0x012d, code lost:
    
        if (r34 == false) goto L178;
     */
    /* JADX WARN: Code restructure failed: missing block: B:106:0x012f, code lost:
    
        r4 = new android.util.proto.ProtoOutputStream(r31);
     */
    /* JADX WARN: Code restructure failed: missing block: B:107:0x0135, code lost:
    
        if (r2 >= r12.length) goto L77;
     */
    /* JADX WARN: Code restructure failed: missing block: B:108:0x0137, code lost:
    
        r5 = r12[r2];
     */
    /* JADX WARN: Code restructure failed: missing block: B:109:0x013c, code lost:
    
        r2 = r2 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:110:0x0143, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_ACTIVITIES_CMD.equals(r5) != false) goto L175;
     */
    /* JADX WARN: Code restructure failed: missing block: B:112:0x014b, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_ACTIVITIES_SHORT_CMD.equals(r5) == false) goto L83;
     */
    /* JADX WARN: Code restructure failed: missing block: B:114:0x0155, code lost:
    
        if ("broadcasts".equals(r5) != false) goto L166;
     */
    /* JADX WARN: Code restructure failed: missing block: B:116:0x015d, code lost:
    
        if ("b".equals(r5) == false) goto L88;
     */
    /* JADX WARN: Code restructure failed: missing block: B:118:0x0168, code lost:
    
        if ("provider".equals(r5) == false) goto L100;
     */
    /* JADX WARN: Code restructure failed: missing block: B:120:0x016b, code lost:
    
        if (r2 < r12.length) goto L93;
     */
    /* JADX WARN: Code restructure failed: missing block: B:121:0x016e, code lost:
    
        r1 = com.android.server.am.ActivityManagerService.EMPTY_STRING_ARRAY;
     */
    /* JADX WARN: Code restructure failed: missing block: B:123:0x0186, code lost:
    
        if (r30.mCpHelper.dumpProviderProto(r31, r32, r15, r1) != false) goto L176;
     */
    /* JADX WARN: Code restructure failed: missing block: B:124:0x0188, code lost:
    
        r32.println("No providers match: " + r15);
        r32.println("Use -h for help.");
     */
    /* JADX WARN: Code restructure failed: missing block: B:127:0x0171, code lost:
    
        r15 = r12[r2];
        r2 = r2 + 1;
        r1 = new java.lang.String[r12.length - r2];
     */
    /* JADX WARN: Code restructure failed: missing block: B:128:0x0179, code lost:
    
        if (r12.length <= 2) goto L96;
     */
    /* JADX WARN: Code restructure failed: missing block: B:129:0x017b, code lost:
    
        java.lang.System.arraycopy(r12, r2, r1, 0, r12.length - r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:131:0x01af, code lost:
    
        if (com.android.server.am.HostingRecord.HOSTING_TYPE_SERVICE.equals(r5) == false) goto L103;
     */
    /* JADX WARN: Code restructure failed: missing block: B:132:0x01b1, code lost:
    
        r30.mServices.dumpDebug(r4, 1146756268033L);
     */
    /* JADX WARN: Code restructure failed: missing block: B:134:0x01bf, code lost:
    
        if ("processes".equals(r5) != false) goto L145;
     */
    /* JADX WARN: Code restructure failed: missing block: B:136:0x01c8, code lost:
    
        if ("p".equals(r5) == false) goto L108;
     */
    /* JADX WARN: Code restructure failed: missing block: B:138:0x01d2, code lost:
    
        if ("app-restrictions".equals(r5) == false) goto L127;
     */
    /* JADX WARN: Code restructure failed: missing block: B:139:0x01d6, code lost:
    
        r0 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x01d8, code lost:
    
        if (r0 >= r12.length) goto L598;
     */
    /* JADX WARN: Code restructure failed: missing block: B:143:0x01e2, code lost:
    
        if ("--uid".equals(r12[r0]) == false) goto L122;
     */
    /* JADX WARN: Code restructure failed: missing block: B:144:0x01f6, code lost:
    
        r0 = r0 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:146:0x01e4, code lost:
    
        r0 = r0 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:147:0x01e6, code lost:
    
        if (r0 >= r12.length) goto L121;
     */
    /* JADX WARN: Code restructure failed: missing block: B:148:0x01f3, code lost:
    
        r11 = 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:153:0x01e8, code lost:
    
        r1 = java.lang.Integer.parseInt(r12[r0]);
     */
    /* JADX WARN: Code restructure failed: missing block: B:156:0x01f1, code lost:
    
        r11 = 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:158:0x020b, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:159:0x020e, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:161:0x020f, code lost:
    
        r0 = r4.start(1146756268033L);
        r30.mAtmInternal.writeActivitiesToProto(r4);
        r4.end(r0);
        r0 = r4.start(1146756268034L);
        writeBroadcastsToProtoLocked(r4);
        r4.end(r0);
        r0 = r4.start(1146756268035L);
        r30.mServices.dumpDebug(r4, 1146756268033L);
        r4.end(r0);
        r0 = r4.start(1146756268036L);
        r2 = r30.mProcLock;
        boostPriorityForProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:162:0x0249, code lost:
    
        monitor-enter(r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:164:0x024a, code lost:
    
        r30.mProcessList.writeProcessesToProtoLSP(r4, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:165:0x024f, code lost:
    
        monitor-exit(r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:166:0x0250, code lost:
    
        resetPriorityAfterProcLockedSection();
        r4.end(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:167:0x0256, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:168:0x0257, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:170:0x025d, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:173:0x0262, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:174:0x025b, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:177:0x0267, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:179:0x0269, code lost:
    
        if (r2 >= r12.length) goto L148;
     */
    /* JADX WARN: Code restructure failed: missing block: B:180:0x026b, code lost:
    
        r7 = r12[r2];
     */
    /* JADX WARN: Code restructure failed: missing block: B:181:0x026e, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:182:0x0271, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:184:0x0272, code lost:
    
        r1 = r30.mProcLock;
        boostPriorityForProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:185:0x0277, code lost:
    
        monitor-enter(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:187:0x0278, code lost:
    
        r30.mProcessList.writeProcessesToProtoLSP(r4, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:188:0x027d, code lost:
    
        monitor-exit(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:189:0x027e, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:190:0x0281, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:191:0x0282, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:193:0x0288, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:196:0x028d, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:197:0x0286, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:200:0x0292, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:201:0x0293, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:202:0x0296, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:204:0x0297, code lost:
    
        writeBroadcastsToProtoLocked(r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:205:0x029a, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:206:0x029b, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:208:0x029f, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:210:0x02a1, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:211:0x02a4, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:212:0x02a5, code lost:
    
        r30.mAtmInternal.writeActivitiesToProto(r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:213:0x013a, code lost:
    
        r5 = "";
     */
    /* JADX WARN: Code restructure failed: missing block: B:214:0x02b1, code lost:
    
        r24 = getAppId(r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:215:0x02b7, code lost:
    
        if (r2 >= r12.length) goto L501;
     */
    /* JADX WARN: Code restructure failed: missing block: B:216:0x02b9, code lost:
    
        r5 = r12[r2];
        r4 = r2 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:217:0x02c3, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_ACTIVITIES_CMD.equals(r5) != false) goto L494;
     */
    /* JADX WARN: Code restructure failed: missing block: B:219:0x02cb, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_ACTIVITIES_SHORT_CMD.equals(r5) != false) goto L494;
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x02d4, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_LASTANR_CMD.equals(r5) != false) goto L493;
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x02dd, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_LASTANR_TRACES_CMD.equals(r5) != false) goto L493;
     */
    /* JADX WARN: Code restructure failed: missing block: B:225:0x02e6, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_STARTER_CMD.equals(r5) != false) goto L492;
     */
    /* JADX WARN: Code restructure failed: missing block: B:227:0x02ee, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_CONTAINERS_CMD.equals(r5) != false) goto L492;
     */
    /* JADX WARN: Code restructure failed: missing block: B:229:0x02f7, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_RECENTS_CMD.equals(r5) != false) goto L491;
     */
    /* JADX WARN: Code restructure failed: missing block: B:231:0x0300, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_RECENTS_SHORT_CMD.equals(r5) != false) goto L491;
     */
    /* JADX WARN: Code restructure failed: missing block: B:233:0x0309, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_TOP_RESUMED_ACTIVITY.equals(r5) != false) goto L490;
     */
    /* JADX WARN: Code restructure failed: missing block: B:235:0x0312, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.DUMP_VISIBLE_ACTIVITIES.equals(r5) == false) goto L201;
     */
    /* JADX WARN: Code restructure failed: missing block: B:236:0x0314, code lost:
    
        r2 = r5;
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:237:0x086e, code lost:
    
        r30.mAtmInternal.dump(r2, r31, r32, r33, r11, true, r18, r25, r17);
     */
    /* JADX WARN: Code restructure failed: missing block: B:238:0x0881, code lost:
    
        r4 = r11;
        r7 = r25;
        r11 = r29;
     */
    /* JADX WARN: Code restructure failed: missing block: B:239:0x0886, code lost:
    
        if (r11 != 0) goto L500;
     */
    /* JADX WARN: Code restructure failed: missing block: B:240:0x0888, code lost:
    
        android.os.Binder.restoreCallingIdentity(r22);
     */
    /* JADX WARN: Code restructure failed: missing block: B:241:0x088b, code lost:
    
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:242:0x088c, code lost:
    
        r5 = r4;
        r4 = r12;
     */
    /* JADX WARN: Code restructure failed: missing block: B:243:0x0893, code lost:
    
        if (r21 == false) goto L504;
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x0895, code lost:
    
        dumpBroadcastStatsCheckinLocked(r31, r32, r4, r5, r16, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:245:0x08d9, code lost:
    
        android.os.Binder.restoreCallingIdentity(r22);
     */
    /* JADX WARN: Code restructure failed: missing block: B:246:0x08dc, code lost:
    
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:247:0x08a1, code lost:
    
        if (r18 == false) goto L506;
     */
    /* JADX WARN: Code restructure failed: missing block: B:248:0x08a3, code lost:
    
        dumpEverything(r31, r32, r4, r5, r20, r7, r17, r18, r19, r24, true);
     */
    /* JADX WARN: Code restructure failed: missing block: B:249:0x08d4, code lost:
    
        if (r20 == false) goto L514;
     */
    /* JADX WARN: Code restructure failed: missing block: B:250:0x08d6, code lost:
    
        dumpAppRestrictionController(r32);
     */
    /* JADX WARN: Code restructure failed: missing block: B:251:0x08b8, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:252:0x08bb, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:255:0x08cd, code lost:
    
        dumpEverything(r31, r32, r4, r5, r20, r7, r17, r18, r19, r24, false);
     */
    /* JADX WARN: Code restructure failed: missing block: B:256:0x08d0, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:257:0x08d1, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:259:0x08dd, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:261:0x08df, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:262:0x08e2, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:264:0x0322, code lost:
    
        if ("binder-proxies".equals(r5) == false) goto L207;
     */
    /* JADX WARN: Code restructure failed: missing block: B:266:0x0325, code lost:
    
        if (r4 < r12.length) goto L206;
     */
    /* JADX WARN: Code restructure failed: missing block: B:267:0x0327, code lost:
    
        dumpBinderProxies(r32, 0);
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:268:0x0331, code lost:
    
        r1 = r12[r4];
        r4 = r4 + 1;
        java.lang.System.gc();
        java.lang.System.runFinalization();
        java.lang.System.gc();
        r32.println(com.android.internal.os.BinderInternal.nGetBinderProxyCount(java.lang.Integer.parseInt(r1)));
     */
    /* JADX WARN: Code restructure failed: missing block: B:270:0x0351, code lost:
    
        if ("allowed-associations".equals(r5) == false) goto L223;
     */
    /* JADX WARN: Code restructure failed: missing block: B:272:0x0354, code lost:
    
        if (r4 >= r12.length) goto L212;
     */
    /* JADX WARN: Code restructure failed: missing block: B:273:0x0356, code lost:
    
        r8 = r4 + 1;
        r9 = r12[r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:274:0x035f, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:275:0x0362, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:278:0x036e, code lost:
    
        dumpAllowedAssociationsLocked(r31, r32, r33, r8, true, r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:279:0x0371, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:280:0x0372, code lost:
    
        resetPriorityAfterLockedSection();
        r4 = r8;
        r7 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:282:0x0379, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:284:0x037b, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:285:0x037e, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:286:0x035d, code lost:
    
        r8 = r4;
        r9 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:288:0x0385, code lost:
    
        if ("broadcasts".equals(r5) != false) goto L476;
     */
    /* JADX WARN: Code restructure failed: missing block: B:290:0x038d, code lost:
    
        if ("b".equals(r5) == false) goto L228;
     */
    /* JADX WARN: Code restructure failed: missing block: B:291:0x038f, code lost:
    
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:293:0x0820, code lost:
    
        if (r11 >= r12.length) goto L480;
     */
    /* JADX WARN: Code restructure failed: missing block: B:294:0x0822, code lost:
    
        r7 = r12[r11];
        r11 = r11 + 1;
        r25 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:295:0x0829, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:296:0x082c, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:299:0x0839, code lost:
    
        dumpBroadcastsLocked(r31, r32, r33, r11, true, r25);
     */
    /* JADX WARN: Code restructure failed: missing block: B:300:0x083c, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:301:0x083d, code lost:
    
        resetPriorityAfterLockedSection();
        r4 = r11;
        r7 = r25;
        r11 = r29;
     */
    /* JADX WARN: Code restructure failed: missing block: B:303:0x0846, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:305:0x0848, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:306:0x084b, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:308:0x039c, code lost:
    
        if ("broadcast-stats".equals(r5) == false) goto L247;
     */
    /* JADX WARN: Code restructure failed: missing block: B:310:0x039f, code lost:
    
        if (r4 >= r12.length) goto L233;
     */
    /* JADX WARN: Code restructure failed: missing block: B:311:0x03a1, code lost:
    
        r8 = r4 + 1;
        r9 = r12[r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:312:0x03aa, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:313:0x03ad, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:315:0x03ae, code lost:
    
        if (r21 == false) goto L241;
     */
    /* JADX WARN: Code restructure failed: missing block: B:317:0x03bc, code lost:
    
        dumpBroadcastStatsCheckinLocked(r31, r32, r33, r8, r16, r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:318:0x03d0, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:319:0x03d1, code lost:
    
        resetPriorityAfterLockedSection();
        r4 = r8;
        r7 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:321:0x03c2, code lost:
    
        dumpBroadcastStatsLocked(r31, r32, r33, r8, true, r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:322:0x03c0, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:325:0x03d9, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:326:0x03dc, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:327:0x03a8, code lost:
    
        r8 = r4;
        r9 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:329:0x03e4, code lost:
    
        if ("intents".equals(r5) != false) goto L470;
     */
    /* JADX WARN: Code restructure failed: missing block: B:331:0x03ec, code lost:
    
        if ("i".equals(r5) == false) goto L252;
     */
    /* JADX WARN: Code restructure failed: missing block: B:332:0x03ee, code lost:
    
        r15 = true;
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:334:0x0807, code lost:
    
        if (r11 >= r12.length) goto L474;
     */
    /* JADX WARN: Code restructure failed: missing block: B:335:0x0809, code lost:
    
        r7 = r12[r11];
        r4 = r11 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:336:0x0811, code lost:
    
        r30.mPendingIntentController.dumpPendingIntents(r32, r15, r7);
        r11 = r29;
     */
    /* JADX WARN: Code restructure failed: missing block: B:337:0x080e, code lost:
    
        r4 = r11;
        r7 = r25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:339:0x03fd, code lost:
    
        if ("processes".equals(r5) != false) goto L448;
     */
    /* JADX WARN: Code restructure failed: missing block: B:341:0x0406, code lost:
    
        if ("p".equals(r5) == false) goto L257;
     */
    /* JADX WARN: Code restructure failed: missing block: B:342:0x0408, code lost:
    
        r34 = r4;
        r25 = r7;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:343:0x07bd, code lost:
    
        r11 = r34;
     */
    /* JADX WARN: Code restructure failed: missing block: B:344:0x07c0, code lost:
    
        if (r11 >= r12.length) goto L452;
     */
    /* JADX WARN: Code restructure failed: missing block: B:345:0x07c2, code lost:
    
        r7 = r12[r11];
        r11 = r11 + 1;
        r25 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:346:0x07c9, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:347:0x07cc, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:349:0x07cd, code lost:
    
        r9 = r30.mProcLock;
        boostPriorityForProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:350:0x07d2, code lost:
    
        monitor-enter(r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:352:0x07d3, code lost:
    
        r30.mProcessList.dumpProcessesLSP(r31, r32, r33, r11, true, r25, r24);
     */
    /* JADX WARN: Code restructure failed: missing block: B:353:0x07e4, code lost:
    
        monitor-exit(r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:354:0x07e5, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:355:0x07e8, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:356:0x07e9, code lost:
    
        resetPriorityAfterLockedSection();
        r4 = r11;
        r7 = r25;
        r11 = r29;
     */
    /* JADX WARN: Code restructure failed: missing block: B:358:0x07f5, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:360:0x07f7, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:361:0x07fa, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:362:0x07f3, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:364:0x07fc, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:365:0x07ff, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:367:0x0417, code lost:
    
        if ("oom".equals(r5) != false) goto L438;
     */
    /* JADX WARN: Code restructure failed: missing block: B:369:0x0420, code lost:
    
        if ("o".equals(r5) == false) goto L262;
     */
    /* JADX WARN: Code restructure failed: missing block: B:370:0x0422, code lost:
    
        r34 = r4;
        r25 = r7;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:371:0x0793, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:372:0x0796, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:374:0x0797, code lost:
    
        r30.mProcessList.dumpOomLocked(r31, r32, false, r33, r34, true, r25, true);
     */
    /* JADX WARN: Code restructure failed: missing block: B:375:0x07a9, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:376:0x07aa, code lost:
    
        resetPriorityAfterLockedSection();
        r11 = r34;
     */
    /* JADX WARN: Code restructure failed: missing block: B:378:0x07b1, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:380:0x07b3, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:381:0x07b6, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:383:0x0431, code lost:
    
        if ("lmk".equals(r5) == false) goto L273;
     */
    /* JADX WARN: Code restructure failed: missing block: B:384:0x0433, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:385:0x0436, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:387:0x0437, code lost:
    
        dumpLmkLocked(r32);
     */
    /* JADX WARN: Code restructure failed: missing block: B:388:0x043a, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:389:0x043b, code lost:
    
        resetPriorityAfterLockedSection();
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:391:0x0445, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:393:0x0447, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:394:0x044a, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:396:0x0452, code lost:
    
        if ("lru".equals(r5) == false) goto L284;
     */
    /* JADX WARN: Code restructure failed: missing block: B:397:0x0454, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:398:0x0457, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:400:0x0458, code lost:
    
        r30.mProcessList.dumpLruLocked(r32, r7, null);
     */
    /* JADX WARN: Code restructure failed: missing block: B:401:0x045d, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:402:0x045e, code lost:
    
        resetPriorityAfterLockedSection();
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:404:0x0468, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:406:0x046a, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:407:0x046d, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:409:0x0475, code lost:
    
        if ("permissions".equals(r5) != false) goto L436;
     */
    /* JADX WARN: Code restructure failed: missing block: B:411:0x047e, code lost:
    
        if ("perm".equals(r5) == false) goto L289;
     */
    /* JADX WARN: Code restructure failed: missing block: B:412:0x0480, code lost:
    
        r34 = r4;
        r25 = r7;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:413:0x0779, code lost:
    
        dumpPermissions(r31, r32, r33, r34, true, r25);
        r11 = r34;
     */
    /* JADX WARN: Code restructure failed: missing block: B:415:0x048f, code lost:
    
        if ("provider".equals(r5) == false) goto L302;
     */
    /* JADX WARN: Code restructure failed: missing block: B:417:0x0492, code lost:
    
        if (r4 < r12.length) goto L294;
     */
    /* JADX WARN: Code restructure failed: missing block: B:418:0x0495, code lost:
    
        r5 = com.android.server.am.ActivityManagerService.EMPTY_STRING_ARRAY;
        r8 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:419:0x04ac, code lost:
    
        r25 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:420:0x04bc, code lost:
    
        if (r30.mCpHelper.dumpProvider(r31, r32, r15, r5, 0, r20) != false) goto L301;
     */
    /* JADX WARN: Code restructure failed: missing block: B:421:0x04be, code lost:
    
        r32.println("No providers match: " + r15);
        r32.println("Use -h for help.");
     */
    /* JADX WARN: Code restructure failed: missing block: B:422:0x04d7, code lost:
    
        r4 = r8;
        r7 = r25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:423:0x049a, code lost:
    
        r15 = r12[r4];
        r4 = r4 + 1;
        r1 = new java.lang.String[r12.length - r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:424:0x04a3, code lost:
    
        if (r12.length <= 2) goto L297;
     */
    /* JADX WARN: Code restructure failed: missing block: B:425:0x04a5, code lost:
    
        java.lang.System.arraycopy(r12, r4, r1, 0, r12.length - r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:426:0x04aa, code lost:
    
        r5 = r1;
        r8 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:427:0x04dc, code lost:
    
        r25 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:428:0x04e5, code lost:
    
        if ("providers".equals(r5) != false) goto L426;
     */
    /* JADX WARN: Code restructure failed: missing block: B:430:0x04ee, code lost:
    
        if ("prov".equals(r5) == false) goto L307;
     */
    /* JADX WARN: Code restructure failed: missing block: B:431:0x04f0, code lost:
    
        r34 = r4;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:432:0x0751, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:433:0x0754, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:435:0x0755, code lost:
    
        r30.mCpHelper.dumpProvidersLocked(r31, r32, r33, r34, true, r25);
     */
    /* JADX WARN: Code restructure failed: missing block: B:436:0x0765, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:437:0x0766, code lost:
    
        resetPriorityAfterLockedSection();
        r11 = r34;
     */
    /* JADX WARN: Code restructure failed: missing block: B:439:0x076d, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:441:0x076f, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:442:0x0772, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:444:0x04fd, code lost:
    
        if (com.android.server.am.HostingRecord.HOSTING_TYPE_SERVICE.equals(r5) == false) goto L323;
     */
    /* JADX WARN: Code restructure failed: missing block: B:446:0x0500, code lost:
    
        if (r4 < r12.length) goto L312;
     */
    /* JADX WARN: Code restructure failed: missing block: B:447:0x0503, code lost:
    
        r7 = com.android.server.am.ActivityManagerService.EMPTY_STRING_ARRAY;
        r26 = r4;
        r9 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:448:0x051e, code lost:
    
        if (r10 != (-1)) goto L318;
     */
    /* JADX WARN: Code restructure failed: missing block: B:449:0x0520, code lost:
    
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:451:0x0537, code lost:
    
        if (r30.mServices.dumpService(r31, r32, r9, r5, r7, 0, r20) != false) goto L322;
     */
    /* JADX WARN: Code restructure failed: missing block: B:452:0x0539, code lost:
    
        r32.println("No services match: " + r9);
        r32.println("Use -h for help.");
     */
    /* JADX WARN: Code restructure failed: missing block: B:453:0x0552, code lost:
    
        r7 = r25;
        r4 = r26;
     */
    /* JADX WARN: Code restructure failed: missing block: B:454:0x0522, code lost:
    
        r5 = new int[]{r10};
     */
    /* JADX WARN: Code restructure failed: missing block: B:455:0x050a, code lost:
    
        r2 = r12[r4];
        r4 = r4 + 1;
        r5 = new java.lang.String[r12.length - r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:456:0x0513, code lost:
    
        if (r12.length <= 2) goto L315;
     */
    /* JADX WARN: Code restructure failed: missing block: B:457:0x0515, code lost:
    
        java.lang.System.arraycopy(r12, r4, r5, 0, r12.length - r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:458:0x051a, code lost:
    
        r9 = r2;
        r26 = r4;
        r7 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:460:0x055f, code lost:
    
        if (com.android.server.pm.Settings.ATTR_PACKAGE.equals(r5) == false) goto L333;
     */
    /* JADX WARN: Code restructure failed: missing block: B:462:0x0562, code lost:
    
        if (r4 < r12.length) goto L328;
     */
    /* JADX WARN: Code restructure failed: missing block: B:463:0x0564, code lost:
    
        r32.println("package: no package name specified");
        r32.println("Use -h for help.");
        r6 = 0;
        r7 = r25;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:464:0x0587, code lost:
    
        r4 = r11;
        r11 = r6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:465:0x0574, code lost:
    
        r7 = r12[r4];
        r4 = r4 + 1;
        r1 = new java.lang.String[r12.length - r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:466:0x057d, code lost:
    
        if (r12.length <= 2) goto L331;
     */
    /* JADX WARN: Code restructure failed: missing block: B:467:0x057f, code lost:
    
        java.lang.System.arraycopy(r12, r4, r1, 0, r12.length - r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:468:0x0584, code lost:
    
        r12 = r1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:470:0x0591, code lost:
    
        if ("associations".equals(r5) != false) goto L415;
     */
    /* JADX WARN: Code restructure failed: missing block: B:472:0x0599, code lost:
    
        if ("as".equals(r5) == false) goto L338;
     */
    /* JADX WARN: Code restructure failed: missing block: B:473:0x059b, code lost:
    
        r34 = r4;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:474:0x0729, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:475:0x072c, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:478:0x073c, code lost:
    
        dumpAssociationsLocked(r31, r32, r33, r34, true, r18, r25);
     */
    /* JADX WARN: Code restructure failed: missing block: B:479:0x073f, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:480:0x0740, code lost:
    
        resetPriorityAfterLockedSection();
        r11 = r34;
     */
    /* JADX WARN: Code restructure failed: missing block: B:482:0x0747, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:484:0x0749, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:485:0x074c, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:487:0x05a8, code lost:
    
        if ("settings".equals(r5) == false) goto L357;
     */
    /* JADX WARN: Code restructure failed: missing block: B:488:0x05aa, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:489:0x05ad, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:491:0x05ae, code lost:
    
        r30.mConstants.dump(r32);
     */
    /* JADX WARN: Code restructure failed: missing block: B:492:0x05b3, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:493:0x05b4, code lost:
    
        resetPriorityAfterLockedSection();
        r1 = r30.mProcLock;
        boostPriorityForProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:494:0x05bc, code lost:
    
        monitor-enter(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:496:0x05bd, code lost:
    
        r30.mOomAdjuster.dumpCachedAppOptimizerSettings(r32);
        r30.mOomAdjuster.dumpCacheOomRankerSettings(r32);
     */
    /* JADX WARN: Code restructure failed: missing block: B:497:0x05c7, code lost:
    
        monitor-exit(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:498:0x05c8, code lost:
    
        resetPriorityAfterProcLockedSection();
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:500:0x05d0, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:502:0x05d2, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:503:0x05d5, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:505:0x05d6, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:507:0x05d8, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:508:0x05db, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:510:0x05e3, code lost:
    
        if ("timers".equals(r5) == false) goto L360;
     */
    /* JADX WARN: Code restructure failed: missing block: B:511:0x05e5, code lost:
    
        com.android.server.utils.AnrTimer.dump(r32, true);
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:513:0x05f4, code lost:
    
        if ("services".equals(r5) != false) goto L395;
     */
    /* JADX WARN: Code restructure failed: missing block: B:515:0x05fd, code lost:
    
        if ("s".equals(r5) == false) goto L365;
     */
    /* JADX WARN: Code restructure failed: missing block: B:516:0x05ff, code lost:
    
        r34 = r4;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:517:0x06d7, code lost:
    
        if (r18 == false) goto L406;
     */
    /* JADX WARN: Code restructure failed: missing block: B:518:0x06d9, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:519:0x06dc, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:521:0x06dd, code lost:
    
        r1 = r30.mServices.newServiceDumperLocked(r31, r32, r33, r34, true, r25);
     */
    /* JADX WARN: Code restructure failed: missing block: B:522:0x06ee, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:523:0x06ef, code lost:
    
        resetPriorityAfterLockedSection();
        r1.dumpWithClient();
        r11 = r34;
     */
    /* JADX WARN: Code restructure failed: missing block: B:525:0x06f9, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:527:0x06fb, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:528:0x06fe, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:529:0x06ff, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:530:0x0702, code lost:
    
        monitor-enter(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:532:0x0703, code lost:
    
        r30.mServices.newServiceDumperLocked(r31, r32, r33, r34, true, r25).dumpLocked();
     */
    /* JADX WARN: Code restructure failed: missing block: B:533:0x0717, code lost:
    
        monitor-exit(r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:534:0x0718, code lost:
    
        resetPriorityAfterLockedSection();
        r11 = r34;
     */
    /* JADX WARN: Code restructure failed: missing block: B:536:0x071f, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:538:0x0721, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:539:0x0724, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:541:0x060c, code lost:
    
        if ("locks".equals(r5) == false) goto L368;
     */
    /* JADX WARN: Code restructure failed: missing block: B:542:0x060e, code lost:
    
        com.android.server.LockGuard.dump(r31, r32, r33);
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:544:0x061d, code lost:
    
        if (com.android.server.voiceinteraction.DatabaseHelper.SoundModelContract.KEY_USERS.equals(r5) == false) goto L371;
     */
    /* JADX WARN: Code restructure failed: missing block: B:545:0x061f, code lost:
    
        dumpUsers(r32);
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:547:0x062e, code lost:
    
        if ("start-info".equals(r5) == false) goto L378;
     */
    /* JADX WARN: Code restructure failed: missing block: B:549:0x0631, code lost:
    
        if (r4 >= r12.length) goto L376;
     */
    /* JADX WARN: Code restructure failed: missing block: B:550:0x0633, code lost:
    
        r7 = r12[r4];
        r4 = r4 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:551:0x063a, code lost:
    
        r30.mProcessList.getAppStartInfoTracker().dumpHistoryProcessStartInfo(r32, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:552:0x0638, code lost:
    
        r7 = r25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:554:0x064b, code lost:
    
        if ("exit-info".equals(r5) == false) goto L385;
     */
    /* JADX WARN: Code restructure failed: missing block: B:556:0x064e, code lost:
    
        if (r4 >= r12.length) goto L383;
     */
    /* JADX WARN: Code restructure failed: missing block: B:557:0x0650, code lost:
    
        r7 = r12[r4];
        r4 = r4 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:558:0x0657, code lost:
    
        r30.mProcessList.mAppExitInfoTracker.dumpHistoryProcessExitInfo(r32, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:559:0x0655, code lost:
    
        r7 = r25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:561:0x0666, code lost:
    
        if ("component-alias".equals(r5) == false) goto L388;
     */
    /* JADX WARN: Code restructure failed: missing block: B:562:0x0668, code lost:
    
        r30.mComponentAliasResolver.dump(r32);
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:563:0x0672, code lost:
    
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:564:0x0690, code lost:
    
        if (r30.mAtmInternal.dumpActivity(r31, r32, r5, r33, r4, r20, r8, r9, r17, r10) != false) goto L394;
     */
    /* JADX WARN: Code restructure failed: missing block: B:566:0x06aa, code lost:
    
        if (new com.android.server.am.ActivityManagerShellCommand(r30, true).exec(r30, (java.io.FileDescriptor) null, r31, (java.io.FileDescriptor) null, r33, (android.os.ShellCallback) null, new android.os.ResultReceiver(null)) >= 0) goto L393;
     */
    /* JADX WARN: Code restructure failed: missing block: B:567:0x06ac, code lost:
    
        r32.println("Bad activity command, or no activities match: " + r5);
        r32.println("Use -h for help.");
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:568:0x06cb, code lost:
    
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:569:0x06cf, code lost:
    
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:570:0x06d3, code lost:
    
        r34 = r4;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:571:0x0725, code lost:
    
        r34 = r4;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:572:0x074d, code lost:
    
        r34 = r4;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:573:0x0773, code lost:
    
        r34 = r4;
        r25 = r7;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:574:0x078d, code lost:
    
        r34 = r4;
        r25 = r7;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:575:0x07b7, code lost:
    
        r34 = r4;
        r25 = r7;
        r29 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:576:0x0800, code lost:
    
        r15 = true;
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:577:0x081a, code lost:
    
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:578:0x084c, code lost:
    
        r2 = r5;
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:579:0x0853, code lost:
    
        r2 = r5;
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:580:0x085a, code lost:
    
        r2 = r5;
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:581:0x0861, code lost:
    
        r2 = r5;
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:582:0x0868, code lost:
    
        r2 = r5;
        r25 = r7;
        r29 = 0;
        r11 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:583:0x088f, code lost:
    
        r5 = r2;
        r4 = r12;
     */
    /* JADX WARN: Multi-variable type inference failed */
    @dalvik.annotation.optimization.NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void doDump(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, boolean z) {
        int i;
        int i2;
        long clearCallingIdentity;
        android.util.proto.ProtoOutputStream protoOutputStream;
        java.lang.String str;
        java.lang.String[] strArr2 = strArr;
        if (!com.android.internal.util.DumpUtils.checkDumpAndUsageStatsPermission(this.mContext, "ActivityManager", printWriter)) {
            return;
        }
        i = -1;
        java.lang.String str2 = null;
        i2 = 0;
        int i3 = -1;
        int i4 = -1;
        int i5 = 0;
        boolean z2 = false;
        boolean z3 = false;
        boolean z4 = false;
        boolean z5 = false;
        boolean z6 = false;
        boolean z7 = false;
        boolean z8 = false;
        java.lang.String str3 = null;
        while (true) {
            int i6 = 1;
            if (i5 >= strArr2.length || (str = strArr2[i5]) == null || str.length() <= 0 || str.charAt(0) != '-') {
                break;
            }
            i5++;
            if ("-a".equals(str)) {
                z7 = true;
            } else if ("-c".equals(str)) {
                z5 = true;
            } else if ("-v".equals(str)) {
                z2 = true;
            } else if ("-f".equals(str)) {
                z3 = true;
            } else if ("-p".equals(str)) {
                if (i5 < strArr2.length) {
                    str3 = strArr2[i5];
                    i5++;
                    z5 = true;
                } else {
                    printWriter.println("Error: -p option requires package argument");
                    return;
                }
            } else if ("--checkin".equals(str)) {
                z4 = true;
                z8 = true;
            } else if ("-C".equals(str)) {
                z8 = true;
            } else if ("--normal-priority".equals(str)) {
                z6 = true;
            } else if ("--user".equals(str)) {
                if (i5 < strArr2.length) {
                    int parseUserArg = android.os.UserHandle.parseUserArg(strArr2[i5]);
                    if (parseUserArg == -2) {
                        parseUserArg = this.mUserController.getCurrentUserId();
                    }
                    i3 = parseUserArg;
                    i5++;
                } else {
                    printWriter.println("Error: --user option requires user id argument");
                    return;
                }
            } else if ("-d".equals(str)) {
                if (i5 < strArr2.length) {
                    int parseInt = java.lang.Integer.parseInt(strArr2[i5]);
                    if (parseInt == -1) {
                        printWriter.println("Error: -d cannot be used with INVALID_DISPLAY");
                        return;
                    } else {
                        i5++;
                        i4 = parseInt;
                        z5 = true;
                    }
                } else {
                    printWriter.println("Error: -d option requires display argument");
                    return;
                }
            } else {
                if ("-h".equals(str)) {
                    com.android.server.am.ActivityManagerShellCommand.dumpHelp(printWriter, true);
                    return;
                }
                printWriter.println("Unknown argument: " + str + "; use -h for help");
                return;
            }
        }
        if (i2 != 0) {
            printWriter.println("Invalid --uid argument");
            printWriter.println("Use -h for help.");
        } else {
            dumpAppRestrictionController(protoOutputStream, i);
        }
        protoOutputStream.flush();
        android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
    }

    /* JADX WARN: Removed duplicated region for block: B:58:0x018e  */
    /* JADX WARN: Removed duplicated region for block: B:61:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:8:0x002c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    void dumpAssociationsLocked(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, int i, boolean z, boolean z2, java.lang.String str) {
        int i2;
        int size;
        int i3;
        boolean z3;
        android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association> arrayMap;
        int i4;
        android.util.ArrayMap<android.content.ComponentName, android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>>> arrayMap2;
        android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>> sparseArray;
        int i5;
        com.android.server.am.ActivityManagerService activityManagerService = this;
        printWriter.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
        int i6 = 0;
        if (str != null) {
            try {
                i2 = android.app.AppGlobals.getPackageManager().getPackageUid(str, 4194304L, 0);
            } catch (android.os.RemoteException e) {
            }
            long uptimeMillis = android.os.SystemClock.uptimeMillis();
            size = activityManagerService.mAssociations.size();
            i3 = 0;
            z3 = false;
            while (i3 < size) {
                android.util.ArrayMap<android.content.ComponentName, android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>>> valueAt = activityManagerService.mAssociations.valueAt(i3);
                int size2 = valueAt.size();
                int i7 = i6;
                while (i7 < size2) {
                    android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>> valueAt2 = valueAt.valueAt(i7);
                    int size3 = valueAt2.size();
                    int i8 = i6;
                    while (i8 < size3) {
                        android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association> valueAt3 = valueAt2.valueAt(i8);
                        int size4 = valueAt3.size();
                        int i9 = size;
                        int i10 = 0;
                        while (i10 < size4) {
                            int i11 = size4;
                            com.android.server.am.ActivityManagerService.Association valueAt4 = valueAt3.valueAt(i10);
                            if (str == null) {
                                arrayMap = valueAt3;
                            } else {
                                arrayMap = valueAt3;
                                if (!valueAt4.mTargetComponent.getPackageName().equals(str) && android.os.UserHandle.getAppId(valueAt4.mSourceUid) != i2) {
                                    i4 = i2;
                                    arrayMap2 = valueAt;
                                    sparseArray = valueAt2;
                                    i5 = size3;
                                    i10++;
                                    size4 = i11;
                                    valueAt3 = arrayMap;
                                    valueAt = arrayMap2;
                                    valueAt2 = sparseArray;
                                    i2 = i4;
                                    size3 = i5;
                                }
                            }
                            printWriter.print("  ");
                            printWriter.print(valueAt4.mTargetProcess);
                            printWriter.print(com.android.server.slice.SliceClientPermissions.SliceAuthority.DELIMITER);
                            i4 = i2;
                            android.os.UserHandle.formatUid(printWriter, valueAt4.mTargetUid);
                            printWriter.print(" <- ");
                            printWriter.print(valueAt4.mSourceProcess);
                            printWriter.print(com.android.server.slice.SliceClientPermissions.SliceAuthority.DELIMITER);
                            android.os.UserHandle.formatUid(printWriter, valueAt4.mSourceUid);
                            printWriter.println();
                            printWriter.print("    via ");
                            printWriter.print(valueAt4.mTargetComponent.flattenToShortString());
                            printWriter.println();
                            printWriter.print("    ");
                            arrayMap2 = valueAt;
                            long j = valueAt4.mTime;
                            if (valueAt4.mNesting <= 0) {
                                sparseArray = valueAt2;
                                i5 = size3;
                            } else {
                                sparseArray = valueAt2;
                                i5 = size3;
                                j += uptimeMillis - valueAt4.mStartTime;
                            }
                            android.util.TimeUtils.formatDuration(j, printWriter);
                            printWriter.print(" (");
                            printWriter.print(valueAt4.mCount);
                            printWriter.print(" times)");
                            printWriter.print("  ");
                            for (int i12 = 0; i12 < valueAt4.mStateTimes.length; i12++) {
                                long j2 = valueAt4.mStateTimes[i12];
                                if (valueAt4.mLastState - 0 == i12) {
                                    j2 += uptimeMillis - valueAt4.mLastStateUptime;
                                }
                                if (j2 != 0) {
                                    printWriter.print(" ");
                                    printWriter.print(com.android.server.am.ProcessList.makeProcStateString(i12 + 0));
                                    printWriter.print("=");
                                    android.util.TimeUtils.formatDuration(j2, printWriter);
                                    if (valueAt4.mLastState - 0 == i12) {
                                        printWriter.print(com.android.server.am.SettingsToPropertiesMapper.NAMESPACE_REBOOT_STAGING_DELIMITER);
                                    }
                                }
                            }
                            printWriter.println();
                            if (valueAt4.mNesting > 0) {
                                printWriter.print("    Currently active: ");
                                android.util.TimeUtils.formatDuration(uptimeMillis - valueAt4.mStartTime, printWriter);
                                printWriter.println();
                            }
                            z3 = true;
                            i10++;
                            size4 = i11;
                            valueAt3 = arrayMap;
                            valueAt = arrayMap2;
                            valueAt2 = sparseArray;
                            i2 = i4;
                            size3 = i5;
                        }
                        i8++;
                        size = i9;
                        i6 = 0;
                        i2 = i2;
                        valueAt = valueAt;
                    }
                    i7++;
                    valueAt = valueAt;
                }
                i3++;
                activityManagerService = this;
            }
            if (z3) {
                printWriter.println("  (nothing)");
                return;
            }
            return;
        }
        i2 = 0;
        long uptimeMillis2 = android.os.SystemClock.uptimeMillis();
        size = activityManagerService.mAssociations.size();
        i3 = 0;
        z3 = false;
        while (i3 < size) {
        }
        if (z3) {
        }
    }

    int getAppId(java.lang.String str) {
        if (str != null) {
            try {
                return android.os.UserHandle.getAppId(this.mContext.getPackageManager().getApplicationInfo(str, 0).uid);
            } catch (android.content.pm.PackageManager.NameNotFoundException e) {
                e.printStackTrace();
                return -1;
            }
        }
        return -1;
    }

    void dumpBinderProxyInterfaceCounts(java.io.PrintWriter printWriter, java.lang.String str) {
        android.os.BinderProxy.InterfaceCount[] sortedInterfaceCounts = android.os.BinderProxy.getSortedInterfaceCounts(50);
        printWriter.println(str);
        int i = 0;
        while (i < sortedInterfaceCounts.length) {
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            sb.append("    #");
            int i2 = i + 1;
            sb.append(i2);
            sb.append(": ");
            sb.append(sortedInterfaceCounts[i]);
            printWriter.println(sb.toString());
            i = i2;
        }
    }

    boolean dumpBinderProxiesCounts(java.io.PrintWriter printWriter, java.lang.String str) {
        android.util.SparseIntArray nGetBinderProxyPerUidCounts = com.android.internal.os.BinderInternal.nGetBinderProxyPerUidCounts();
        if (nGetBinderProxyPerUidCounts == null) {
            return false;
        }
        printWriter.println(str);
        for (int i = 0; i < nGetBinderProxyPerUidCounts.size(); i++) {
            int keyAt = nGetBinderProxyPerUidCounts.keyAt(i);
            int valueAt = nGetBinderProxyPerUidCounts.valueAt(i);
            printWriter.print("    UID ");
            printWriter.print(keyAt);
            printWriter.print(", binder count = ");
            printWriter.print(valueAt);
            printWriter.print(", package(s)= ");
            java.lang.String[] packagesForUid = this.mContext.getPackageManager().getPackagesForUid(keyAt);
            if (packagesForUid != null) {
                for (java.lang.String str2 : packagesForUid) {
                    printWriter.print(str2);
                    printWriter.print("; ");
                }
            } else {
                printWriter.print("NO PACKAGE NAME FOUND");
            }
            printWriter.println();
        }
        return true;
    }

    void dumpBinderProxies(java.io.PrintWriter printWriter, int i) {
        printWriter.println("ACTIVITY MANAGER BINDER PROXY STATE (dumpsys activity binder-proxies)");
        int proxyCount = android.os.BinderProxy.getProxyCount();
        if (proxyCount >= i) {
            dumpBinderProxyInterfaceCounts(printWriter, "Top proxy interface names held by SYSTEM");
        } else {
            printWriter.print("Not dumping proxy interface counts because size (" + java.lang.Integer.toString(proxyCount) + ") looks reasonable");
            printWriter.println();
        }
        dumpBinderProxiesCounts(printWriter, "  Counts of Binder Proxies held by SYSTEM");
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    boolean dumpActiveInstruments(java.io.PrintWriter printWriter, java.lang.String str, boolean z) {
        int size = this.mActiveInstrumentation.size();
        if (size > 0) {
            boolean z2 = false;
            for (int i = 0; i < size; i++) {
                com.android.server.am.ActiveInstrumentation activeInstrumentation = this.mActiveInstrumentation.get(i);
                if (str == null || activeInstrumentation.mClass.getPackageName().equals(str) || activeInstrumentation.mTargetInfo.packageName.equals(str)) {
                    if (!z2) {
                        if (z) {
                            printWriter.println();
                        }
                        printWriter.println("  Active instrumentation:");
                        z = true;
                        z2 = true;
                    }
                    printWriter.print("    Instrumentation #");
                    printWriter.print(i);
                    printWriter.print(": ");
                    printWriter.println(activeInstrumentation);
                    activeInstrumentation.dump(printWriter, "      ");
                }
            }
        }
        return z;
    }

    @com.android.internal.annotations.GuardedBy({"this", "mProcLock"})
    @dalvik.annotation.optimization.NeverCompile
    void dumpOtherProcessesInfoLSP(java.io.FileDescriptor fileDescriptor, final java.io.PrintWriter printWriter, boolean z, java.lang.String str, int i, int i2, boolean z2) {
        boolean z3;
        boolean dumpMemWatchProcessesLPf;
        boolean z4 = false;
        boolean z5 = true;
        if (z || str != null) {
            android.util.SparseArray sparseArray = new android.util.SparseArray();
            synchronized (this.mPidsSelfLocked) {
                try {
                    int size = this.mPidsSelfLocked.size();
                    z3 = z2;
                    boolean z6 = false;
                    for (int i3 = 0; i3 < size; i3++) {
                        com.android.server.am.ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i3);
                        sparseArray.put(valueAt.getPid(), valueAt);
                        if (str == null || valueAt.getPkgList().containsKey(str)) {
                            if (!z6) {
                                if (z3) {
                                    printWriter.println();
                                }
                                printWriter.println("  PID mappings:");
                                z3 = true;
                                z6 = true;
                            }
                            printWriter.print("    PID #");
                            printWriter.print(this.mPidsSelfLocked.keyAt(i3));
                            printWriter.print(": ");
                            printWriter.println(this.mPidsSelfLocked.valueAt(i3));
                        }
                    }
                } finally {
                }
            }
            synchronized (sActiveProcessInfoSelfLocked) {
                try {
                    int size2 = sActiveProcessInfoSelfLocked.size();
                    boolean z7 = false;
                    for (int i4 = 0; i4 < size2; i4++) {
                        android.content.pm.ProcessInfo valueAt2 = sActiveProcessInfoSelfLocked.valueAt(i4);
                        com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) sparseArray.get(sActiveProcessInfoSelfLocked.keyAt(i4));
                        if (processRecord == null || str == null || processRecord.getPkgList().containsKey(str)) {
                            if (!z7) {
                                if (z3) {
                                    printWriter.println();
                                }
                                printWriter.println("  Active process infos:");
                                z3 = true;
                                z7 = true;
                            }
                            printWriter.print("    Pinfo PID #");
                            printWriter.print(sActiveProcessInfoSelfLocked.keyAt(i4));
                            printWriter.println(":");
                            printWriter.print("      name=");
                            printWriter.println(valueAt2.name);
                            if (valueAt2.deniedPermissions != null) {
                                for (int i5 = 0; i5 < valueAt2.deniedPermissions.size(); i5++) {
                                    printWriter.print("      deny: ");
                                    printWriter.println((java.lang.String) valueAt2.deniedPermissions.valueAt(i5));
                                }
                            }
                        }
                    }
                } finally {
                }
            }
        } else {
            z3 = z2;
        }
        if (z) {
            this.mPhantomProcessList.dump(printWriter, "  ");
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                try {
                    int size3 = this.mImportantProcesses.size();
                    boolean z8 = false;
                    for (int i6 = 0; i6 < size3; i6++) {
                        com.android.server.am.ProcessRecord processRecord2 = this.mPidsSelfLocked.get(this.mImportantProcesses.valueAt(i6).pid);
                        if (str == null || (processRecord2 != null && processRecord2.getPkgList().containsKey(str))) {
                            if (!z8) {
                                if (z3) {
                                    printWriter.println();
                                }
                                printWriter.println("  Foreground Processes:");
                                z3 = true;
                                z8 = true;
                            }
                            printWriter.print("    PID #");
                            printWriter.print(this.mImportantProcesses.keyAt(i6));
                            printWriter.print(": ");
                            printWriter.println(this.mImportantProcesses.valueAt(i6));
                        }
                    }
                } finally {
                }
            }
        }
        if (this.mPersistentStartingProcesses.size() > 0) {
            if (z3) {
                printWriter.println();
            }
            printWriter.println("  Persisent processes that are starting:");
            dumpProcessList(printWriter, this, this.mPersistentStartingProcesses, "    ", "Starting Norm", "Restarting PERS", str);
            z3 = true;
        }
        if (this.mProcessList.mRemovedProcesses.size() > 0) {
            if (z3) {
                printWriter.println();
            }
            printWriter.println("  Processes that are being removed:");
            dumpProcessList(printWriter, this, this.mProcessList.mRemovedProcesses, "    ", "Removed Norm", "Removed PERS", str);
            z3 = true;
        }
        if (this.mProcessesOnHold.size() > 0) {
            if (z3) {
                printWriter.println();
            }
            printWriter.println("  Processes that are on old until the system is ready:");
            dumpProcessList(printWriter, this, this.mProcessesOnHold, "    ", "OnHold Norm", "OnHold PERS", str);
            z3 = true;
        }
        boolean dumpForProcesses = this.mAtmInternal.dumpForProcesses(fileDescriptor, printWriter, z, str, i, this.mAppErrors.dumpLPr(fileDescriptor, printWriter, z3, str), this.mAppProfiler.getTestPssMode(), this.mWakefulness.get());
        if (z && this.mProcessList.mPendingStarts.size() > 0) {
            if (dumpForProcesses) {
                printWriter.println();
            }
            printWriter.println("  mPendingStarts: ");
            int size4 = this.mProcessList.mPendingStarts.size();
            for (int i7 = 0; i7 < size4; i7++) {
                printWriter.println("    " + this.mProcessList.mPendingStarts.keyAt(i7) + ": " + this.mProcessList.mPendingStarts.valueAt(i7));
            }
        } else {
            z5 = dumpForProcesses;
        }
        if (z) {
            this.mUidObserverController.dump(printWriter, str);
            printWriter.println("  mDeviceIdleAllowlist=" + java.util.Arrays.toString(this.mDeviceIdleAllowlist));
            printWriter.println("  mDeviceIdleExceptIdleAllowlist=" + java.util.Arrays.toString(this.mDeviceIdleExceptIdleAllowlist));
            printWriter.println("  mDeviceIdleTempAllowlist=" + java.util.Arrays.toString(this.mDeviceIdleTempAllowlist));
            if (this.mPendingTempAllowlist.size() > 0) {
                printWriter.println("  mPendingTempAllowlist:");
                int size5 = this.mPendingTempAllowlist.size();
                for (int i8 = 0; i8 < size5; i8++) {
                    com.android.server.am.ActivityManagerService.PendingTempAllowlist valueAt3 = this.mPendingTempAllowlist.valueAt(i8);
                    printWriter.print("    ");
                    android.os.UserHandle.formatUid(printWriter, valueAt3.targetUid);
                    printWriter.print(": ");
                    android.util.TimeUtils.formatDuration(valueAt3.duration, printWriter);
                    printWriter.print(" ");
                    printWriter.println(valueAt3.tag);
                    printWriter.print(" ");
                    printWriter.print(valueAt3.type);
                    printWriter.print(" ");
                    printWriter.print(valueAt3.reasonCode);
                    printWriter.print(" ");
                    printWriter.print(valueAt3.callingUid);
                }
            }
            printWriter.println("  mFgsStartTempAllowList:");
            final long currentTimeMillis = java.lang.System.currentTimeMillis();
            final long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
            this.mFgsStartTempAllowList.forEach(new java.util.function.BiConsumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda17
                @Override // java.util.function.BiConsumer
                public final void accept(java.lang.Object obj, java.lang.Object obj2) {
                    com.android.server.am.ActivityManagerService.lambda$dumpOtherProcessesInfoLSP$14(printWriter, currentTimeMillis, elapsedRealtime, (java.lang.Integer) obj, (android.util.Pair) obj2);
                }
            });
            if (!this.mProcessList.mAppsInBackgroundRestricted.isEmpty()) {
                printWriter.println("  Processes that are in background restricted:");
                int size6 = this.mProcessList.mAppsInBackgroundRestricted.size();
                for (int i9 = 0; i9 < size6; i9++) {
                    printWriter.println(java.lang.String.format("%s #%2d: %s", "    ", java.lang.Integer.valueOf(i9), this.mProcessList.mAppsInBackgroundRestricted.valueAt(i9).toString()));
                }
            }
        }
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(this.mDebugApp) || str.equals(this.mOrigDebugApp))) {
            if (z5) {
                printWriter.println();
                z5 = false;
            }
            printWriter.println("  mDebugApp=" + this.mDebugApp + "/orig=" + this.mOrigDebugApp + " mDebugTransient=" + this.mDebugTransient + " mOrigWaitForDebugger=" + this.mOrigWaitForDebugger);
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            dumpMemWatchProcessesLPf = this.mAppProfiler.dumpMemWatchProcessesLPf(printWriter, z5);
        }
        if (this.mTrackAllocationApp != null && (str == null || str.equals(this.mTrackAllocationApp))) {
            if (!dumpMemWatchProcessesLPf) {
                z4 = dumpMemWatchProcessesLPf;
            } else {
                printWriter.println();
            }
            printWriter.println("  mTrackAllocationApp=" + this.mTrackAllocationApp);
            dumpMemWatchProcessesLPf = z4;
        }
        boolean dumpProfileDataLocked = this.mAppProfiler.dumpProfileDataLocked(printWriter, str, dumpMemWatchProcessesLPf);
        if (this.mNativeDebuggingApp != null && (str == null || str.equals(this.mNativeDebuggingApp))) {
            if (dumpProfileDataLocked) {
                printWriter.println();
            }
            printWriter.println("  mNativeDebuggingApp=" + this.mNativeDebuggingApp);
        }
        if (str == null) {
            if (this.mAlwaysFinishActivities) {
                printWriter.println("  mAlwaysFinishActivities=" + this.mAlwaysFinishActivities);
            }
            if (z) {
                printWriter.println("  Total persistent processes: " + i2);
                printWriter.println("  mProcessesReady=" + this.mProcessesReady + " mSystemReady=" + this.mSystemReady + " mBooted=" + this.mBooted + " mFactoryTest=" + this.mFactoryTest);
                java.lang.StringBuilder sb = new java.lang.StringBuilder();
                sb.append("  mBooting=");
                sb.append(this.mBooting);
                sb.append(" mCallFinishBooting=");
                sb.append(this.mCallFinishBooting);
                sb.append(" mBootAnimationComplete=");
                sb.append(this.mBootAnimationComplete);
                printWriter.println(sb.toString());
                printWriter.print("  mLastPowerCheckUptime=");
                android.util.TimeUtils.formatDuration(this.mLastPowerCheckUptime, printWriter);
                printWriter.println("");
                this.mOomAdjuster.dumpSequenceNumbersLocked(printWriter);
                this.mOomAdjuster.dumpProcCountsLocked(printWriter);
                this.mAppProfiler.dumpMemoryLevelsLocked(printWriter);
                long uptimeMillis = android.os.SystemClock.uptimeMillis();
                printWriter.print("  mLastIdleTime=");
                android.util.TimeUtils.formatDuration(uptimeMillis, this.mLastIdleTime, printWriter);
                printWriter.print(" mLowRamSinceLastIdle=");
                android.util.TimeUtils.formatDuration(this.mAppProfiler.getLowRamTimeSinceIdleLPr(uptimeMillis), printWriter);
                printWriter.println();
                printWriter.println();
                printWriter.println("  ServiceManager statistics:");
                android.os.ServiceManager.sStatLogger.dump(printWriter, "    ");
                printWriter.println();
            }
        }
        printWriter.println("  mForceBackgroundCheck=" + this.mForceBackgroundCheck);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpOtherProcessesInfoLSP$14(java.io.PrintWriter printWriter, long j, long j2, java.lang.Integer num, android.util.Pair pair) {
        printWriter.print("    " + android.os.UserHandle.formatUid(num.intValue()) + ": ");
        ((com.android.server.am.ActivityManagerService.FgsTempAllowListItem) pair.second).dump(printWriter);
        printWriter.print(" expiration=");
        android.util.TimeUtils.dumpTimeWithDelta(printWriter, (j - j2) + ((java.lang.Long) pair.first).longValue(), j);
        printWriter.println();
    }

    private void dumpUsers(java.io.PrintWriter printWriter) {
        printWriter.println("ACTIVITY MANAGER USERS (dumpsys activity users)");
        this.mUserController.dump(printWriter);
    }

    @com.android.internal.annotations.GuardedBy({"this", "mProcLock"})
    void writeOtherProcessesInfoToProtoLSP(android.util.proto.ProtoOutputStream protoOutputStream, java.lang.String str, int i, int i2) {
        int size = this.mActiveInstrumentation.size();
        for (int i3 = 0; i3 < size; i3++) {
            com.android.server.am.ActiveInstrumentation activeInstrumentation = this.mActiveInstrumentation.get(i3);
            if (str == null || activeInstrumentation.mClass.getPackageName().equals(str) || activeInstrumentation.mTargetInfo.packageName.equals(str)) {
                activeInstrumentation.dumpDebug(protoOutputStream, 2246267895811L);
            }
        }
        this.mUidObserverController.dumpValidateUidsProto(protoOutputStream, str, i, 2246267895813L);
        if (str != null) {
            synchronized (this.mPidsSelfLocked) {
                try {
                    int size2 = this.mPidsSelfLocked.size();
                    for (int i4 = 0; i4 < size2; i4++) {
                        com.android.server.am.ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i4);
                        if (valueAt.getPkgList().containsKey(str)) {
                            valueAt.dumpDebug(protoOutputStream, 2246267895815L);
                        }
                    }
                } finally {
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                try {
                    int size3 = this.mImportantProcesses.size();
                    for (int i5 = 0; i5 < size3; i5++) {
                        com.android.server.am.ActivityManagerService.ImportanceToken valueAt2 = this.mImportantProcesses.valueAt(i5);
                        com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(valueAt2.pid);
                        if (str == null || (processRecord != null && processRecord.getPkgList().containsKey(str))) {
                            valueAt2.dumpDebug(protoOutputStream, 2246267895816L);
                        }
                    }
                } finally {
                }
            }
        }
        int size4 = this.mPersistentStartingProcesses.size();
        for (int i6 = 0; i6 < size4; i6++) {
            com.android.server.am.ProcessRecord processRecord2 = this.mPersistentStartingProcesses.get(i6);
            if (str == null || str.equals(processRecord2.info.packageName)) {
                processRecord2.dumpDebug(protoOutputStream, 2246267895817L);
            }
        }
        int size5 = this.mProcessList.mRemovedProcesses.size();
        for (int i7 = 0; i7 < size5; i7++) {
            com.android.server.am.ProcessRecord processRecord3 = this.mProcessList.mRemovedProcesses.get(i7);
            if (str == null || str.equals(processRecord3.info.packageName)) {
                processRecord3.dumpDebug(protoOutputStream, 2246267895818L);
            }
        }
        int size6 = this.mProcessesOnHold.size();
        for (int i8 = 0; i8 < size6; i8++) {
            com.android.server.am.ProcessRecord processRecord4 = this.mProcessesOnHold.get(i8);
            if (str == null || str.equals(processRecord4.info.packageName)) {
                processRecord4.dumpDebug(protoOutputStream, 2246267895819L);
            }
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.writeProcessesToGcToProto(protoOutputStream, 2246267895820L, str);
        }
        this.mAppErrors.dumpDebugLPr(protoOutputStream, 1146756268045L, str);
        this.mAtmInternal.writeProcessesToProto(protoOutputStream, str, this.mWakefulness.get(), this.mAppProfiler.getTestPssMode());
        if (str == null) {
            this.mUserController.dumpDebug(protoOutputStream, 1146756268046L);
        }
        this.mUidObserverController.dumpDebug(protoOutputStream, str);
        for (int i9 : this.mDeviceIdleAllowlist) {
            protoOutputStream.write(2220498092056L, i9);
        }
        for (int i10 : this.mDeviceIdleTempAllowlist) {
            protoOutputStream.write(2220498092057L, i10);
        }
        if (this.mPendingTempAllowlist.size() > 0) {
            int size7 = this.mPendingTempAllowlist.size();
            for (int i11 = 0; i11 < size7; i11++) {
                this.mPendingTempAllowlist.valueAt(i11).dumpDebug(protoOutputStream, 2246267895834L);
            }
        }
        if ((this.mDebugApp != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(this.mDebugApp) || str.equals(this.mOrigDebugApp))) {
            long start = protoOutputStream.start(1146756268062L);
            protoOutputStream.write(1138166333441L, this.mDebugApp);
            protoOutputStream.write(1138166333442L, this.mOrigDebugApp);
            protoOutputStream.write(1133871366147L, this.mDebugTransient);
            protoOutputStream.write(1133871366148L, this.mOrigWaitForDebugger);
            protoOutputStream.end(start);
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.writeMemWatchProcessToProtoLPf(protoOutputStream);
        }
        if (this.mTrackAllocationApp != null && (str == null || str.equals(this.mTrackAllocationApp))) {
            protoOutputStream.write(1138166333473L, this.mTrackAllocationApp);
        }
        this.mAppProfiler.writeProfileDataToProtoLocked(protoOutputStream, str);
        if (str == null || str.equals(this.mNativeDebuggingApp)) {
            protoOutputStream.write(1138166333475L, this.mNativeDebuggingApp);
        }
        if (str == null) {
            protoOutputStream.write(1133871366180L, this.mAlwaysFinishActivities);
            protoOutputStream.write(1120986464294L, i2);
            protoOutputStream.write(1133871366183L, this.mProcessesReady);
            protoOutputStream.write(1133871366184L, this.mSystemReady);
            protoOutputStream.write(1133871366185L, this.mBooted);
            protoOutputStream.write(1120986464298L, this.mFactoryTest);
            protoOutputStream.write(1133871366187L, this.mBooting);
            protoOutputStream.write(1133871366188L, this.mCallFinishBooting);
            protoOutputStream.write(1133871366189L, this.mBootAnimationComplete);
            protoOutputStream.write(1112396529710L, this.mLastPowerCheckUptime);
            this.mOomAdjuster.dumpProcessListVariablesLocked(protoOutputStream);
            this.mAppProfiler.writeMemoryLevelsToProtoLocked(protoOutputStream);
            long uptimeMillis = android.os.SystemClock.uptimeMillis();
            android.util.proto.ProtoUtils.toDuration(protoOutputStream, 1146756268090L, this.mLastIdleTime, uptimeMillis);
            protoOutputStream.write(1112396529723L, this.mAppProfiler.getLowRamTimeSinceIdleLPr(uptimeMillis));
        }
    }

    private boolean reportLmkKillAtOrBelow(java.io.PrintWriter printWriter, int i) {
        java.lang.Integer lmkdKillCount = com.android.server.am.ProcessList.getLmkdKillCount(0, i);
        if (lmkdKillCount == null) {
            return false;
        }
        printWriter.println("    kills at or below oom_adj " + i + ": " + lmkdKillCount);
        return true;
    }

    boolean dumpLmkLocked(java.io.PrintWriter printWriter) {
        printWriter.println("ACTIVITY MANAGER LMK KILLS (dumpsys activity lmk)");
        java.lang.Integer lmkdKillCount = com.android.server.am.ProcessList.getLmkdKillCount(1001, 1001);
        if (lmkdKillCount == null) {
            return false;
        }
        printWriter.println("  Total number of kills: " + lmkdKillCount);
        return reportLmkKillAtOrBelow(printWriter, 999) && reportLmkKillAtOrBelow(printWriter, com.android.server.am.ProcessList.CACHED_APP_MIN_ADJ) && reportLmkKillAtOrBelow(printWriter, com.android.server.am.ProcessList.SERVICE_B_ADJ) && reportLmkKillAtOrBelow(printWriter, com.android.server.am.ProcessList.PREVIOUS_APP_ADJ) && reportLmkKillAtOrBelow(printWriter, 600) && reportLmkKillAtOrBelow(printWriter, 500) && reportLmkKillAtOrBelow(printWriter, 400) && reportLmkKillAtOrBelow(printWriter, 300) && reportLmkKillAtOrBelow(printWriter, 250) && reportLmkKillAtOrBelow(printWriter, 200) && reportLmkKillAtOrBelow(printWriter, 100) && reportLmkKillAtOrBelow(printWriter, 0);
    }

    public static class ItemMatcher {
        boolean all = true;
        java.util.ArrayList<android.content.ComponentName> components;
        java.util.ArrayList<java.lang.Integer> objects;
        java.util.ArrayList<java.lang.String> strings;

        public void build(java.lang.String str) {
            android.content.ComponentName unflattenFromString = android.content.ComponentName.unflattenFromString(str);
            if (unflattenFromString != null) {
                if (this.components == null) {
                    this.components = new java.util.ArrayList<>();
                }
                this.components.add(unflattenFromString);
                this.all = false;
                return;
            }
            try {
                int parseInt = java.lang.Integer.parseInt(str, 16);
                if (this.objects == null) {
                    this.objects = new java.util.ArrayList<>();
                }
                this.objects.add(java.lang.Integer.valueOf(parseInt));
                this.all = false;
            } catch (java.lang.RuntimeException e) {
                if (this.strings == null) {
                    this.strings = new java.util.ArrayList<>();
                }
                this.strings.add(str);
                this.all = false;
            }
        }

        public int build(java.lang.String[] strArr, int i) {
            while (i < strArr.length) {
                java.lang.String str = strArr[i];
                if ("--".equals(str)) {
                    return i + 1;
                }
                build(str);
                i++;
            }
            return i;
        }

        public boolean match(java.lang.Object obj, android.content.ComponentName componentName) {
            if (this.all) {
                return true;
            }
            if (this.components != null) {
                for (int i = 0; i < this.components.size(); i++) {
                    if (this.components.get(i).equals(componentName)) {
                        return true;
                    }
                }
            }
            if (this.objects != null) {
                for (int i2 = 0; i2 < this.objects.size(); i2++) {
                    if (java.lang.System.identityHashCode(obj) == this.objects.get(i2).intValue()) {
                        return true;
                    }
                }
            }
            if (this.strings != null) {
                java.lang.String flattenToString = componentName.flattenToString();
                for (int i3 = 0; i3 < this.strings.size(); i3++) {
                    if (flattenToString.contains(this.strings.get(i3))) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    void writeBroadcastsToProtoLocked(android.util.proto.ProtoOutputStream protoOutputStream) {
        if (this.mRegisteredReceivers.size() > 0) {
            java.util.Iterator<com.android.server.am.ReceiverList> it = this.mRegisteredReceivers.values().iterator();
            while (it.hasNext()) {
                it.next().dumpDebug(protoOutputStream, 2246267895809L);
            }
        }
        this.mReceiverResolver.dumpDebug(protoOutputStream, 1146756268034L);
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.dumpDebug(protoOutputStream, 2246267895811L);
        }
        synchronized (this.mStickyBroadcasts) {
            int i = 0;
            while (true) {
                try {
                    long j = 1138166333441L;
                    if (i < this.mStickyBroadcasts.size()) {
                        long start = protoOutputStream.start(2246267895812L);
                        protoOutputStream.write(1120986464257L, this.mStickyBroadcasts.keyAt(i));
                        for (java.util.Map.Entry<java.lang.String, java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast>> entry : this.mStickyBroadcasts.valueAt(i).entrySet()) {
                            long start2 = protoOutputStream.start(2246267895810L);
                            protoOutputStream.write(j, entry.getKey());
                            java.util.Iterator<com.android.server.am.ActivityManagerService.StickyBroadcast> it2 = entry.getValue().iterator();
                            while (it2.hasNext()) {
                                it2.next().intent.dumpDebug(protoOutputStream, 2246267895810L, false, true, true, false);
                                start2 = start2;
                                start = start;
                            }
                            protoOutputStream.end(start2);
                            start = start;
                            j = 1138166333441L;
                        }
                        protoOutputStream.end(start);
                        i++;
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }
        long start3 = protoOutputStream.start(1146756268037L);
        protoOutputStream.write(1138166333441L, this.mHandler.toString());
        this.mHandler.getLooper().dumpDebug(protoOutputStream, 1146756268034L);
        protoOutputStream.end(start3);
    }

    void dumpAllowedAssociationsLocked(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, int i, boolean z, java.lang.String str) {
        printWriter.println("ACTIVITY MANAGER ALLOWED ASSOCIATION STATE (dumpsys activity allowed-associations)");
        boolean z2 = false;
        if (this.mAllowedAssociations != null) {
            boolean z3 = false;
            for (int i2 = 0; i2 < this.mAllowedAssociations.size(); i2++) {
                java.lang.String keyAt = this.mAllowedAssociations.keyAt(i2);
                android.util.ArraySet<java.lang.String> allowedPackageAssociations = this.mAllowedAssociations.valueAt(i2).getAllowedPackageAssociations();
                if (!z3) {
                    printWriter.println("  Allowed associations (by restricted package):");
                    z3 = true;
                }
                printWriter.print("  * ");
                printWriter.print(keyAt);
                printWriter.println(":");
                for (int i3 = 0; i3 < allowedPackageAssociations.size(); i3++) {
                    if (str == null || keyAt.equals(str) || allowedPackageAssociations.valueAt(i3).equals(str)) {
                        printWriter.print("      Allow: ");
                        printWriter.println(allowedPackageAssociations.valueAt(i3));
                    }
                }
                if (this.mAllowedAssociations.valueAt(i2).isDebuggable()) {
                    printWriter.println("      (debuggable)");
                }
            }
            z2 = z3;
        }
        if (!z2) {
            printWriter.println("  (No association restrictions)");
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:16:0x004c  */
    @dalvik.annotation.optimization.NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    void dumpBroadcastsLocked(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, int i, boolean z, java.lang.String str) {
        boolean z2;
        boolean z3;
        java.lang.String str2;
        int i2;
        boolean z4;
        boolean z5;
        boolean z6;
        java.lang.String str3;
        boolean z7;
        boolean z8;
        boolean z9;
        java.lang.String str4 = str;
        if (!"history".equals(str4)) {
            z2 = z;
            z3 = false;
        } else {
            if (i < strArr.length && "-s".equals(strArr[i])) {
                z9 = false;
            } else {
                z9 = z;
            }
            z2 = z9;
            str4 = null;
            z3 = true;
        }
        if (!"receivers".equals(str4)) {
            str2 = str4;
            i2 = -1;
            z4 = false;
        } else if (i + 2 > strArr.length) {
            str2 = null;
            i2 = -1;
            z4 = true;
        } else {
            i2 = -1;
            int i3 = i;
            while (i3 < strArr.length) {
                java.lang.String str5 = strArr[i3];
                switch (str5.hashCode()) {
                    case 43014832:
                        if (str5.equals("--uid")) {
                            z8 = false;
                            break;
                        }
                    default:
                        z8 = -1;
                        break;
                }
                switch (z8) {
                    case false:
                        int i4 = i3 + 1;
                        i2 = getIntArg(printWriter, strArr, i4, -1);
                        if (i2 != -1) {
                            i3 = i4 + 1;
                        } else {
                            return;
                        }
                    default:
                        printWriter.printf("Invalid argument at index %d: %s\n", java.lang.Integer.valueOf(i3), str5);
                        return;
                }
                while (i3 < strArr.length) {
                }
            }
            str2 = null;
            z4 = true;
        }
        printWriter.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
        if (!z3 && z2) {
            if (this.mRegisteredReceivers.size() > 0) {
                boolean z10 = false;
                boolean z11 = false;
                boolean z12 = false;
                for (com.android.server.am.ReceiverList receiverList : this.mRegisteredReceivers.values()) {
                    if (str2 == null || (receiverList.app != null && str2.equals(receiverList.app.info.packageName))) {
                        if (i2 == -1 || i2 == receiverList.app.uid) {
                            if (!z12) {
                                printWriter.println("  Registered Receivers:");
                                z10 = true;
                                z11 = true;
                                z12 = true;
                            }
                            printWriter.print("  * ");
                            printWriter.println(receiverList);
                            receiverList.dump(printWriter, "    ");
                        }
                    }
                }
                z5 = z10;
                z6 = z11;
            } else {
                if (z4) {
                    printWriter.println("  (no registered receivers)");
                }
                z5 = false;
                z6 = false;
            }
            if (!z4) {
                if (this.mReceiverResolver.dump(printWriter, z5 ? "\n  Receiver Resolver Table:" : "  Receiver Resolver Table:", "    ", str2, false, false)) {
                    z5 = true;
                    z6 = true;
                }
            }
        } else {
            z5 = false;
            z6 = false;
        }
        if (z4) {
            str3 = str2;
        } else {
            com.android.server.am.BroadcastQueue[] broadcastQueueArr = this.mBroadcastQueues;
            int length = broadcastQueueArr.length;
            boolean z13 = z5;
            boolean z14 = z6;
            int i5 = 0;
            while (i5 < length) {
                z13 = broadcastQueueArr[i5].dumpLocked(fileDescriptor, printWriter, strArr, i, true, true, z2, str2, z13);
                z14 |= z13;
                i5++;
                length = length;
                broadcastQueueArr = broadcastQueueArr;
                str2 = str2;
            }
            str3 = str2;
            z6 = z14;
        }
        synchronized (this.mStickyBroadcasts) {
            if (!z3 && !z4) {
                try {
                    if (this.mStickyBroadcasts != null && str3 == null) {
                        int i6 = 0;
                        while (i6 < this.mStickyBroadcasts.size()) {
                            printWriter.println();
                            printWriter.print("  Sticky broadcasts for user ");
                            printWriter.print(this.mStickyBroadcasts.keyAt(i6));
                            printWriter.println(":");
                            java.lang.StringBuilder sb = new java.lang.StringBuilder(128);
                            for (java.util.Map.Entry<java.lang.String, java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast>> entry : this.mStickyBroadcasts.valueAt(i6).entrySet()) {
                                printWriter.print("  * Sticky action ");
                                printWriter.print(entry.getKey());
                                if (z2) {
                                    printWriter.println(":");
                                    java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast> value = entry.getValue();
                                    int size = value.size();
                                    int i7 = 0;
                                    while (i7 < size) {
                                        android.content.Intent intent = value.get(i7).intent;
                                        boolean z15 = value.get(i7).deferUntilActive;
                                        sb.setLength(0);
                                        sb.append("    Intent: ");
                                        int i8 = i7;
                                        intent.toShortString(sb, false, true, false, false);
                                        printWriter.print(sb);
                                        if (z15) {
                                            printWriter.print(" [D]");
                                        }
                                        printWriter.println();
                                        printWriter.print("      originalCallingUid: ");
                                        printWriter.println(value.get(i8).originalCallingUid);
                                        printWriter.println();
                                        java.lang.Object extras = intent.getExtras();
                                        if (extras != null) {
                                            printWriter.print("      extras: ");
                                            printWriter.println(extras);
                                        }
                                        i7 = i8 + 1;
                                    }
                                } else {
                                    printWriter.println("");
                                }
                            }
                            i6++;
                            z6 = true;
                        }
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }
        if (!z3 && !z4 && z2) {
            printWriter.println();
            for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
                printWriter.println("  Queue " + broadcastQueue.toString() + ": " + broadcastQueue.describeStateLocked());
            }
            printWriter.println("  mHandler:");
            this.mHandler.dump(new android.util.PrintWriterPrinter(printWriter), "    ");
            z7 = true;
        } else {
            z7 = z6;
        }
        if (!z7) {
            printWriter.println("  (nothing)");
        }
    }

    @dalvik.annotation.optimization.NeverCompile
    void dumpBroadcastStatsLocked(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, int i, boolean z, java.lang.String str) {
        if (this.mCurBroadcastStats == null) {
            return;
        }
        printWriter.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
        long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
        if (this.mLastBroadcastStats != null) {
            printWriter.print("  Last stats (from ");
            android.util.TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, elapsedRealtime, printWriter);
            printWriter.print(" to ");
            android.util.TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, elapsedRealtime, printWriter);
            printWriter.print(", ");
            android.util.TimeUtils.formatDuration(this.mLastBroadcastStats.mEndUptime - this.mLastBroadcastStats.mStartUptime, printWriter);
            printWriter.println(" uptime):");
            if (!this.mLastBroadcastStats.dumpStats(printWriter, "    ", str)) {
                printWriter.println("    (nothing)");
            }
            printWriter.println();
        }
        printWriter.print("  Current stats (from ");
        android.util.TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, elapsedRealtime, printWriter);
        printWriter.print(" to now, ");
        android.util.TimeUtils.formatDuration(android.os.SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, printWriter);
        printWriter.println(" uptime):");
        if (!this.mCurBroadcastStats.dumpStats(printWriter, "    ", str)) {
            printWriter.println("    (nothing)");
        }
    }

    @dalvik.annotation.optimization.NeverCompile
    void dumpBroadcastStatsCheckinLocked(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, int i, boolean z, java.lang.String str) {
        if (this.mCurBroadcastStats == null) {
            return;
        }
        if (this.mLastBroadcastStats != null) {
            this.mLastBroadcastStats.dumpCheckinStats(printWriter, str);
            if (z) {
                this.mLastBroadcastStats = null;
                return;
            }
        }
        this.mCurBroadcastStats.dumpCheckinStats(printWriter, str);
        if (z) {
            this.mCurBroadcastStats = null;
        }
    }

    void dumpPermissions(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr, int i, boolean z, java.lang.String str) {
        printWriter.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
        this.mUgmInternal.dump(printWriter, z, str);
    }

    private static int dumpProcessList(java.io.PrintWriter printWriter, com.android.server.am.ActivityManagerService activityManagerService, java.util.List list, java.lang.String str, java.lang.String str2, java.lang.String str3, java.lang.String str4) {
        int i = 0;
        for (int size = list.size() - 1; size >= 0; size--) {
            com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) list.get(size);
            if (str4 == null || str4.equals(processRecord.info.packageName)) {
                printWriter.println(java.lang.String.format("%s%s #%2d: %s", str, processRecord.isPersistent() ? str3 : str2, java.lang.Integer.valueOf(size), processRecord.toString()));
                if (processRecord.isPersistent()) {
                    i++;
                }
            }
        }
        return i;
    }

    java.util.ArrayList<com.android.server.am.ProcessRecord> collectProcesses(java.io.PrintWriter printWriter, int i, boolean z, java.lang.String[] strArr) {
        java.util.ArrayList<com.android.server.am.ProcessRecord> collectProcessesLOSP;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                collectProcessesLOSP = this.mProcessList.collectProcessesLOSP(i, z, strArr);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return collectProcessesLOSP;
    }

    final void dumpGraphicsHardwareUsage(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
        java.util.ArrayList<com.android.server.am.ProcessRecord> collectProcesses = collectProcesses(printWriter, 0, false, strArr);
        if (collectProcesses == null) {
            printWriter.println("No process found for: " + strArr[0]);
            return;
        }
        long uptimeMillis = android.os.SystemClock.uptimeMillis();
        long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
        printWriter.println("Applications Graphics Acceleration Info:");
        printWriter.println("Uptime: " + uptimeMillis + " Realtime: " + elapsedRealtime);
        for (int size = collectProcesses.size() + (-1); size >= 0; size--) {
            com.android.server.am.ProcessRecord processRecord = collectProcesses.get(size);
            int pid = processRecord.getPid();
            android.app.IApplicationThread thread = processRecord.getThread();
            if (thread != null) {
                printWriter.println("\n** Graphics info for pid " + pid + " [" + processRecord.processName + "] **");
                printWriter.flush();
                try {
                    com.android.internal.os.TransferPipe transferPipe = new com.android.internal.os.TransferPipe();
                    try {
                        thread.dumpGfxInfo(transferPipe.getWriteFd(), strArr);
                        transferPipe.go(fileDescriptor);
                        transferPipe.kill();
                    } catch (java.lang.Throwable th) {
                        transferPipe.kill();
                        throw th;
                    }
                } catch (android.os.RemoteException e) {
                    printWriter.println("Got a RemoteException while dumping the app " + processRecord);
                    printWriter.flush();
                } catch (java.io.IOException e2) {
                    printWriter.println("Failure while dumping the app: " + processRecord);
                    printWriter.flush();
                }
            }
        }
    }

    final void dumpBinderCacheContents(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
        java.util.ArrayList<com.android.server.am.ProcessRecord> collectProcesses = collectProcesses(printWriter, 0, false, strArr);
        if (collectProcesses == null) {
            printWriter.println("No process found for: " + strArr[0]);
            return;
        }
        printWriter.println("Per-process Binder Cache Contents");
        for (int size = collectProcesses.size() - 1; size >= 0; size--) {
            com.android.server.am.ProcessRecord processRecord = collectProcesses.get(size);
            int pid = processRecord.getPid();
            android.app.IApplicationThread thread = processRecord.getThread();
            if (thread != null) {
                printWriter.println("\n\n** Cache info for pid " + pid + " [" + processRecord.processName + "] **");
                printWriter.flush();
                try {
                } catch (android.os.RemoteException e) {
                    printWriter.println("Got a RemoteException while dumping the app " + processRecord);
                    printWriter.flush();
                } catch (java.io.IOException e2) {
                    printWriter.println("Failure while dumping the app " + processRecord);
                    printWriter.flush();
                }
                if (pid == android.os.Process.myPid()) {
                    android.os.ParcelFileDescriptor fromFd = android.os.ParcelFileDescriptor.fromFd(fileDescriptor.getInt$());
                    try {
                        thread.dumpCacheInfo(fromFd, strArr);
                        if (fromFd != null) {
                            fromFd.close();
                        }
                    } catch (java.lang.Throwable th) {
                        if (fromFd != null) {
                            try {
                                fromFd.close();
                            } catch (java.lang.Throwable th2) {
                                th.addSuppressed(th2);
                            }
                        }
                        throw th;
                    }
                } else {
                    com.android.internal.os.TransferPipe transferPipe = new com.android.internal.os.TransferPipe();
                    try {
                        thread.dumpCacheInfo(transferPipe.getWriteFd(), strArr);
                        transferPipe.go(fileDescriptor);
                    } finally {
                        transferPipe.kill();
                    }
                }
            }
        }
    }

    final void dumpDbInfo(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strArr) {
        com.android.internal.os.TransferPipe transferPipe;
        java.util.ArrayList<com.android.server.am.ProcessRecord> collectProcesses = collectProcesses(printWriter, 0, false, strArr);
        if (collectProcesses == null) {
            printWriter.println("No process found for: " + strArr[0]);
            return;
        }
        printWriter.println("Applications Database Info:");
        for (int size = collectProcesses.size() - 1; size >= 0; size--) {
            com.android.server.am.ProcessRecord processRecord = collectProcesses.get(size);
            int pid = processRecord.getPid();
            android.app.IApplicationThread thread = processRecord.getThread();
            if (thread != null) {
                printWriter.println("\n** Database info for pid " + pid + " [" + processRecord.processName + "] **");
                printWriter.flush();
                try {
                    transferPipe = new com.android.internal.os.TransferPipe();
                } catch (android.os.RemoteException e) {
                    printWriter.println("Got a RemoteException while dumping the app " + processRecord);
                    printWriter.flush();
                } catch (java.io.IOException e2) {
                    printWriter.println("Failure while dumping the app: " + processRecord);
                    printWriter.flush();
                }
                try {
                    thread.dumpDbInfo(transferPipe.getWriteFd(), strArr);
                    transferPipe.go(fileDescriptor);
                    transferPipe.kill();
                } catch (java.lang.Throwable th) {
                    transferPipe.kill();
                    throw th;
                }
            }
        }
    }

    static final class MemItem {
        final boolean hasActivities;
        final int id;
        final boolean isProc;
        final java.lang.String label;
        final long mPrivateDirty;
        final long mRss;
        final long pss;
        final java.lang.String shortLabel;
        java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem> subitems;
        final long swapPss;
        final int userId;

        MemItem(java.lang.String str, java.lang.String str2, long j, long j2, long j3, long j4, int i, int i2, boolean z) {
            this.isProc = true;
            this.label = str;
            this.shortLabel = str2;
            this.pss = j;
            this.swapPss = j2;
            this.mRss = j3;
            this.mPrivateDirty = j4;
            this.id = i;
            this.userId = i2;
            this.hasActivities = z;
        }

        MemItem(java.lang.String str, java.lang.String str2, long j, long j2, long j3, long j4, int i) {
            this.isProc = false;
            this.label = str;
            this.shortLabel = str2;
            this.pss = j;
            this.swapPss = j2;
            this.mRss = j3;
            this.mPrivateDirty = j4;
            this.id = i;
            this.userId = 0;
            this.hasActivities = false;
        }
    }

    private static void sortMemItems(java.util.List<com.android.server.am.ActivityManagerService.MemItem> list, final boolean z) {
        java.util.Collections.sort(list, new java.util.Comparator<com.android.server.am.ActivityManagerService.MemItem>() { // from class: com.android.server.am.ActivityManagerService.17
            @Override // java.util.Comparator
            public int compare(com.android.server.am.ActivityManagerService.MemItem memItem, com.android.server.am.ActivityManagerService.MemItem memItem2) {
                long j = z ? memItem.pss : memItem.mRss;
                long j2 = z ? memItem2.pss : memItem2.mRss;
                if (j < j2) {
                    return 1;
                }
                if (j > j2) {
                    return -1;
                }
                return 0;
            }
        });
    }

    static final void dumpMemItems(java.io.PrintWriter printWriter, java.lang.String str, java.lang.String str2, java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem> arrayList, boolean z, boolean z2, boolean z3, boolean z4, boolean z5) {
        if (z && !z2) {
            sortMemItems(arrayList, z3);
        }
        for (int i = 0; i < arrayList.size(); i++) {
            com.android.server.am.ActivityManagerService.MemItem memItem = arrayList.get(i);
            if (!z2) {
                printWriter.printf("%s%s: %s%s\n", str, stringifyKBSize(z3 ? memItem.pss : memItem.mRss), memItem.label, memItem.userId != 0 ? " (user " + memItem.userId + ")" : "");
                if (z3 && z4) {
                    printWriter.printf("(%s in swap%s", stringifyKBSize(memItem.swapPss), z5 ? ", " : ")");
                }
                if (z5) {
                    printWriter.printf("%s%s private dirty)", z4 ? "" : "(", stringifyKBSize(memItem.mPrivateDirty));
                }
                printWriter.printf("\n", new java.lang.Object[0]);
            } else {
                if (memItem.isProc) {
                    printWriter.print("proc,");
                    printWriter.print(str2);
                    printWriter.print(",");
                    printWriter.print(memItem.shortLabel);
                    printWriter.print(",");
                    printWriter.print(memItem.id);
                    printWriter.print(",");
                    printWriter.print(z3 ? memItem.pss : memItem.mRss);
                    printWriter.print(",");
                    printWriter.print(z4 ? java.lang.Long.valueOf(memItem.swapPss) : "N/A");
                    printWriter.println(memItem.hasActivities ? ",a" : ",e");
                } else {
                    printWriter.print(str2);
                    printWriter.print(",");
                    printWriter.print(memItem.shortLabel);
                    printWriter.print(",");
                    printWriter.print(z3 ? memItem.pss : memItem.mRss);
                    printWriter.print(",");
                    printWriter.println(z4 ? java.lang.Long.valueOf(memItem.swapPss) : "N/A");
                }
            }
            if (memItem.subitems != null) {
                dumpMemItems(printWriter, str + "    ", memItem.shortLabel, memItem.subitems, true, z2, z3, z4, z5);
            }
        }
    }

    static final void dumpMemItems(android.util.proto.ProtoOutputStream protoOutputStream, long j, java.lang.String str, java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem> arrayList, boolean z, boolean z2, boolean z3) {
        if (z) {
            sortMemItems(arrayList, z2);
        }
        for (int i = 0; i < arrayList.size(); i++) {
            com.android.server.am.ActivityManagerService.MemItem memItem = arrayList.get(i);
            long start = protoOutputStream.start(j);
            protoOutputStream.write(1138166333441L, str);
            protoOutputStream.write(1138166333442L, memItem.shortLabel);
            protoOutputStream.write(1133871366148L, memItem.isProc);
            protoOutputStream.write(1120986464259L, memItem.id);
            protoOutputStream.write(1133871366149L, memItem.hasActivities);
            protoOutputStream.write(1112396529670L, memItem.pss);
            protoOutputStream.write(1112396529673L, memItem.mRss);
            if (z3) {
                protoOutputStream.write(1112396529671L, memItem.swapPss);
            }
            if (memItem.subitems != null) {
                dumpMemItems(protoOutputStream, 2246267895816L, memItem.shortLabel, memItem.subitems, true, z2, z3);
            }
            protoOutputStream.end(start);
        }
    }

    static final void appendMemBucket(java.lang.StringBuilder sb, long j, java.lang.String str, boolean z) {
        int lastIndexOf = str.lastIndexOf(46);
        int i = 0;
        int i2 = lastIndexOf >= 0 ? lastIndexOf + 1 : 0;
        int length = str.length();
        while (true) {
            if (i >= DUMP_MEM_BUCKETS.length) {
                sb.append(j / 1024);
                sb.append(z ? "MB." : "MB ");
                sb.append((java.lang.CharSequence) str, i2, length);
                return;
            } else if (DUMP_MEM_BUCKETS[i] < j) {
                i++;
            } else {
                sb.append(DUMP_MEM_BUCKETS[i] / 1024);
                sb.append(z ? "MB." : "MB ");
                sb.append((java.lang.CharSequence) str, i2, length);
                return;
            }
        }
    }

    private final void dumpApplicationMemoryUsageHeader(java.io.PrintWriter printWriter, long j, long j2, boolean z, boolean z2) {
        if (z2) {
            printWriter.print("version,");
            printWriter.println(1);
        }
        if (z || z2) {
            printWriter.print("time,");
            printWriter.print(j);
            printWriter.print(",");
            printWriter.println(j2);
            return;
        }
        printWriter.println("Applications Memory Usage (in Kilobytes):");
        printWriter.println("Uptime: " + j + " Realtime: " + j2);
    }

    static final long[] getKsmInfo() {
        int[] iArr = {8224};
        long[] jArr = {0};
        android.os.Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", iArr, null, jArr, null);
        long j = (jArr[0] * com.android.server.am.ProcessList.PAGE_SIZE) / 1024;
        android.os.Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", iArr, null, jArr, null);
        long j2 = (jArr[0] * com.android.server.am.ProcessList.PAGE_SIZE) / 1024;
        jArr[0] = 0;
        android.os.Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", iArr, null, jArr, null);
        long j3 = (jArr[0] * com.android.server.am.ProcessList.PAGE_SIZE) / 1024;
        jArr[0] = 0;
        android.os.Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", iArr, null, jArr, null);
        return new long[]{j, j2, j3, (jArr[0] * com.android.server.am.ProcessList.PAGE_SIZE) / 1024};
    }

    static java.lang.String stringifySize(long j, int i) {
        java.util.Locale locale = java.util.Locale.US;
        switch (i) {
            case 1:
                return java.lang.String.format(locale, "%,13d", java.lang.Long.valueOf(j));
            case 1024:
                return java.lang.String.format(locale, "%,9dK", java.lang.Long.valueOf(j / 1024));
            case 1048576:
                return java.lang.String.format(locale, "%,5dM", java.lang.Long.valueOf((j / 1024) / 1024));
            case 1073741824:
                return java.lang.String.format(locale, "%,1dG", java.lang.Long.valueOf(((j / 1024) / 1024) / 1024));
            default:
                throw new java.lang.IllegalArgumentException("Invalid size order");
        }
    }

    static java.lang.String stringifyKBSize(long j) {
        return stringifySize(j * 1024, 1024);
    }

    @dalvik.annotation.optimization.NeverCompile
    final void dumpApplicationMemoryUsage(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String str, java.lang.String[] strArr, boolean z, java.io.PrintWriter printWriter2, boolean z2) {
        java.lang.String str2;
        com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions = new com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions();
        memoryUsageDumpOptions.dumpDetails = false;
        memoryUsageDumpOptions.dumpFullDetails = false;
        memoryUsageDumpOptions.dumpDalvik = false;
        memoryUsageDumpOptions.dumpSummaryOnly = false;
        memoryUsageDumpOptions.dumpUnreachable = false;
        memoryUsageDumpOptions.oomOnly = false;
        memoryUsageDumpOptions.isCompact = false;
        memoryUsageDumpOptions.localOnly = false;
        memoryUsageDumpOptions.packages = false;
        memoryUsageDumpOptions.isCheckinRequest = false;
        memoryUsageDumpOptions.dumpSwapPss = false;
        memoryUsageDumpOptions.dumpProto = z2;
        memoryUsageDumpOptions.mDumpPrivateDirty = false;
        memoryUsageDumpOptions.mDumpAllocatorStats = false;
        int i = 0;
        while (i < strArr.length && (str2 = strArr[i]) != null && str2.length() > 0 && str2.charAt(0) == '-') {
            i++;
            if ("-a".equals(str2)) {
                memoryUsageDumpOptions.dumpDetails = true;
                memoryUsageDumpOptions.dumpFullDetails = true;
                memoryUsageDumpOptions.dumpDalvik = true;
                memoryUsageDumpOptions.dumpSwapPss = true;
            } else if ("-d".equals(str2)) {
                memoryUsageDumpOptions.dumpDalvik = true;
            } else if ("-c".equals(str2)) {
                memoryUsageDumpOptions.isCompact = true;
            } else if ("-s".equals(str2)) {
                memoryUsageDumpOptions.dumpDetails = true;
                memoryUsageDumpOptions.dumpSummaryOnly = true;
            } else if ("-S".equals(str2)) {
                memoryUsageDumpOptions.dumpSwapPss = true;
            } else if ("-p".equals(str2)) {
                memoryUsageDumpOptions.mDumpPrivateDirty = true;
            } else if ("--unreachable".equals(str2)) {
                memoryUsageDumpOptions.dumpUnreachable = true;
            } else if ("--oom".equals(str2)) {
                memoryUsageDumpOptions.oomOnly = true;
            } else if ("--local".equals(str2)) {
                memoryUsageDumpOptions.localOnly = true;
            } else if ("--package".equals(str2)) {
                memoryUsageDumpOptions.packages = true;
            } else if ("--checkin".equals(str2)) {
                memoryUsageDumpOptions.isCheckinRequest = true;
            } else if ("--proto".equals(str2)) {
                memoryUsageDumpOptions.dumpProto = true;
            } else if ("--logstats".equals(str2)) {
                memoryUsageDumpOptions.mDumpAllocatorStats = true;
            } else {
                if ("-h".equals(str2)) {
                    printWriter.println("meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]");
                    printWriter.println("  -a: include all available information for each process.");
                    printWriter.println("  -d: include dalvik details.");
                    printWriter.println("  -c: dump in a compact machine-parseable representation.");
                    printWriter.println("  -s: dump only summary of application memory usage.");
                    printWriter.println("  -S: dump also SwapPss.");
                    printWriter.println("  -p: dump also private dirty memory usage.");
                    printWriter.println("  --oom: only show processes organized by oom adj.");
                    printWriter.println("  --local: only collect details locally, don't call process.");
                    printWriter.println("  --package: interpret process arg as package, dumping all");
                    printWriter.println("             processes that have loaded that package.");
                    printWriter.println("  --checkin: dump data for a checkin");
                    printWriter.println("  --proto: dump data to proto");
                    printWriter.println("If [process] is specified it can be the name or ");
                    printWriter.println("pid of a specific process to dump.");
                    return;
                }
                printWriter.println("Unknown argument: " + str2 + "; use -h for help");
            }
        }
        java.lang.String[] strArr2 = new java.lang.String[strArr.length - i];
        java.lang.System.arraycopy(strArr, i, strArr2, 0, strArr.length - i);
        java.util.ArrayList<com.android.server.am.ProcessRecord> collectProcesses = collectProcesses(printWriter, i, memoryUsageDumpOptions.packages, strArr);
        if (memoryUsageDumpOptions.dumpProto) {
            dumpApplicationMemoryUsage(fileDescriptor, memoryUsageDumpOptions, strArr2, z, collectProcesses);
        } else {
            dumpApplicationMemoryUsage(fileDescriptor, printWriter, str, memoryUsageDumpOptions, strArr2, z, collectProcesses, printWriter2);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:114:0x0315  */
    /* JADX WARN: Removed duplicated region for block: B:121:0x0473 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:228:0x0432  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x010d  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0110 A[SYNTHETIC] */
    @dalvik.annotation.optimization.NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void dumpApplicationMemoryUsage(java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String str, final com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions, final java.lang.String[] strArr, final boolean z, java.util.ArrayList<com.android.server.am.ProcessRecord> arrayList, java.io.PrintWriter printWriter2) {
        java.io.PrintWriter printWriter3;
        int i;
        int i2;
        android.app.IApplicationThread thread;
        int i3;
        int pid;
        java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem>[] arrayListArr;
        int setAdjWithServices;
        boolean hasActivities;
        android.util.SparseArray sparseArray;
        long[] jArr;
        long[] jArr2;
        long[] jArr3;
        long[] jArr4;
        int i4;
        long[] jArr5;
        java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem>[] arrayListArr2;
        long[] jArr6;
        long[] jArr7;
        long[] jArr8;
        java.util.ArrayList arrayList2;
        boolean z2;
        long[] jArr9;
        int i5;
        long j;
        long j2;
        long j3;
        long j4;
        boolean z3;
        boolean z4;
        long[] jArr10;
        android.os.Debug.MemoryInfo memoryInfo;
        int i6;
        com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions2;
        int i7;
        char c;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock;
        android.os.Debug.MemoryInfo memoryInfo2;
        com.android.internal.os.TransferPipe transferPipe;
        final int i8;
        android.os.Debug.MemoryInfo memoryInfo3;
        long[] jArr11;
        long[] jArr12;
        com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions3;
        java.util.ArrayList arrayList3;
        com.android.server.am.ActivityManagerService activityManagerService = this;
        java.io.PrintWriter printWriter4 = printWriter;
        com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions4 = memoryUsageDumpOptions;
        java.util.ArrayList<com.android.server.am.ProcessRecord> arrayList4 = arrayList;
        long uptimeMillis = android.os.SystemClock.uptimeMillis();
        long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
        long[] jArr13 = new long[3];
        if (arrayList4 == null) {
            java.lang.String str2 = "N/A";
            if (strArr.length > 0) {
                java.lang.String str3 = strArr[0];
                if (str3.charAt(0) != '-') {
                    final java.util.ArrayList arrayList5 = new java.util.ArrayList();
                    updateCpuStatsNow();
                    try {
                        i8 = java.lang.Integer.parseInt(strArr[0]);
                    } catch (java.lang.NumberFormatException e) {
                        i8 = -1;
                    }
                    activityManagerService.mAppProfiler.forAllCpuStats(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda8
                        @Override // java.util.function.Consumer
                        public final void accept(java.lang.Object obj) {
                            com.android.server.am.ActivityManagerService.lambda$dumpApplicationMemoryUsage$15(i8, strArr, arrayList5, (com.android.internal.os.ProcessCpuTracker.Stats) obj);
                        }
                    });
                    if (arrayList5.size() > 0) {
                        long[] jArr14 = null;
                        dumpApplicationMemoryUsageHeader(printWriter, uptimeMillis, elapsedRealtime, memoryUsageDumpOptions4.isCheckinRequest, memoryUsageDumpOptions4.isCompact);
                        int size = arrayList5.size() - 1;
                        android.os.Debug.MemoryInfo memoryInfo4 = null;
                        while (size >= 0) {
                            com.android.internal.os.ProcessCpuTracker.Stats stats = (com.android.internal.os.ProcessCpuTracker.Stats) arrayList5.get(size);
                            int i9 = stats.pid;
                            android.os.Debug.MemoryInfo memoryInfo5 = memoryInfo4 == null ? new android.os.Debug.MemoryInfo() : memoryInfo4;
                            if (memoryUsageDumpOptions4.dumpDetails || !(z || memoryUsageDumpOptions4.oomOnly)) {
                                if (!android.os.Debug.getMemoryInfo(i9, memoryInfo5)) {
                                    memoryInfo3 = memoryInfo5;
                                    jArr11 = jArr14;
                                    jArr12 = jArr13;
                                    memoryUsageDumpOptions3 = memoryUsageDumpOptions4;
                                    arrayList3 = arrayList5;
                                }
                                if (!memoryUsageDumpOptions4.isCheckinRequest && memoryUsageDumpOptions4.dumpDetails) {
                                    printWriter4.println("\n** MEMINFO in pid " + i9 + " [" + stats.baseName + "] **");
                                }
                                jArr11 = jArr14;
                                arrayList3 = arrayList5;
                                jArr12 = jArr13;
                                memoryInfo3 = memoryInfo5;
                                android.app.ActivityThread.dumpMemInfoTable(printWriter, memoryInfo5, memoryUsageDumpOptions4.isCheckinRequest, memoryUsageDumpOptions4.dumpFullDetails, memoryUsageDumpOptions4.dumpDalvik, memoryUsageDumpOptions4.dumpSummaryOnly, i9, stats.baseName, 0L, 0L, 0L, 0L, 0L, 0L);
                                memoryUsageDumpOptions3 = memoryUsageDumpOptions;
                                if (!memoryUsageDumpOptions3.isCheckinRequest) {
                                    printWriter.println();
                                }
                            } else {
                                long pss = android.os.Debug.getPss(i9, jArr13, jArr14);
                                if (pss == 0) {
                                    memoryInfo3 = memoryInfo5;
                                    jArr11 = jArr14;
                                    jArr12 = jArr13;
                                    memoryUsageDumpOptions3 = memoryUsageDumpOptions4;
                                    arrayList3 = arrayList5;
                                } else {
                                    memoryInfo5.nativePss = (int) pss;
                                    memoryInfo5.nativePrivateDirty = (int) jArr13[0];
                                    memoryInfo5.nativeRss = (int) jArr13[2];
                                    if (!memoryUsageDumpOptions4.isCheckinRequest) {
                                        printWriter4.println("\n** MEMINFO in pid " + i9 + " [" + stats.baseName + "] **");
                                    }
                                    jArr11 = jArr14;
                                    arrayList3 = arrayList5;
                                    jArr12 = jArr13;
                                    memoryInfo3 = memoryInfo5;
                                    android.app.ActivityThread.dumpMemInfoTable(printWriter, memoryInfo5, memoryUsageDumpOptions4.isCheckinRequest, memoryUsageDumpOptions4.dumpFullDetails, memoryUsageDumpOptions4.dumpDalvik, memoryUsageDumpOptions4.dumpSummaryOnly, i9, stats.baseName, 0L, 0L, 0L, 0L, 0L, 0L);
                                    memoryUsageDumpOptions3 = memoryUsageDumpOptions;
                                    if (!memoryUsageDumpOptions3.isCheckinRequest) {
                                    }
                                }
                            }
                            size--;
                            memoryUsageDumpOptions4 = memoryUsageDumpOptions3;
                            memoryInfo4 = memoryInfo3;
                            jArr14 = jArr11;
                            arrayList5 = arrayList3;
                            jArr13 = jArr12;
                            printWriter4 = printWriter;
                        }
                        return;
                    }
                }
                str2 = str3;
            }
            printWriter.println("No process found for: " + str2);
            return;
        }
        android.os.Debug.MemoryInfo memoryInfo6 = null;
        long[] jArr15 = jArr13;
        com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions5 = memoryUsageDumpOptions4;
        java.io.PrintWriter printWriter5 = printWriter4;
        if (!z && !memoryUsageDumpOptions5.oomOnly && (arrayList.size() == 1 || memoryUsageDumpOptions5.isCheckinRequest || memoryUsageDumpOptions5.packages)) {
            memoryUsageDumpOptions5.dumpDetails = true;
        }
        int size2 = arrayList.size();
        boolean z5 = (memoryUsageDumpOptions5.isCheckinRequest || size2 <= 1 || memoryUsageDumpOptions5.packages) ? false : true;
        if (z5) {
            updateCpuStatsNow();
        }
        dumpApplicationMemoryUsageHeader(printWriter, uptimeMillis, elapsedRealtime, memoryUsageDumpOptions5.isCheckinRequest, memoryUsageDumpOptions5.isCompact);
        java.util.ArrayList arrayList6 = new java.util.ArrayList();
        android.util.SparseArray sparseArray2 = new android.util.SparseArray();
        final long[] jArr16 = new long[19];
        long[] jArr17 = memoryUsageDumpOptions5.dumpDalvik ? new long[15] : libcore.util.EmptyArray.LONG;
        long[] jArr18 = memoryUsageDumpOptions5.dumpDalvik ? new long[15] : libcore.util.EmptyArray.LONG;
        long[] jArr19 = memoryUsageDumpOptions5.dumpDalvik ? new long[15] : libcore.util.EmptyArray.LONG;
        long[] jArr20 = memoryUsageDumpOptions5.dumpDalvik ? new long[15] : libcore.util.EmptyArray.LONG;
        long[] jArr21 = new long[17];
        final long[] jArr22 = jArr19;
        final long[] jArr23 = new long[17];
        final long[] jArr24 = new long[17];
        final long[] jArr25 = new long[17];
        long[] jArr26 = new long[4];
        int length = DUMP_MEM_OOM_LABEL.length;
        final long[] jArr27 = new long[length];
        long[] jArr28 = new long[DUMP_MEM_OOM_LABEL.length];
        long[] jArr29 = new long[DUMP_MEM_OOM_LABEL.length];
        long[] jArr30 = new long[DUMP_MEM_OOM_LABEL.length];
        java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem>[] arrayListArr3 = new java.util.ArrayList[DUMP_MEM_OOM_LABEL.length];
        long j5 = 0;
        int i10 = size2 - 1;
        boolean z6 = false;
        while (true) {
            final long[] jArr31 = jArr20;
            if (i10 < 0) {
                boolean z7 = z6;
                final android.util.SparseArray sparseArray3 = sparseArray2;
                final long[] jArr32 = jArr17;
                final long[] jArr33 = jArr18;
                final long[] jArr34 = jArr26;
                final java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem>[] arrayListArr4 = arrayListArr3;
                final long[] jArr35 = jArr21;
                int i11 = length;
                final long[] jArr36 = jArr30;
                final long[] jArr37 = jArr29;
                final long[] jArr38 = jArr28;
                final long[] jArr39 = jArr15;
                final java.util.ArrayList arrayList7 = arrayList6;
                if (z5) {
                    final android.os.Debug.MemoryInfo[] memoryInfoArr = new android.os.Debug.MemoryInfo[1];
                    this.mAppProfiler.forAllCpuStats(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda9
                        @Override // java.util.function.Consumer
                        public final void accept(java.lang.Object obj) {
                            com.android.server.am.ActivityManagerService.lambda$dumpApplicationMemoryUsage$16(sparseArray3, memoryInfoArr, z, memoryUsageDumpOptions, jArr39, jArr34, jArr16, arrayList7, jArr32, jArr33, jArr22, jArr31, jArr35, jArr23, jArr24, jArr25, jArr27, jArr38, arrayListArr4, jArr37, jArr36, (com.android.internal.os.ProcessCpuTracker.Stats) obj);
                        }
                    });
                    java.util.ArrayList arrayList8 = new java.util.ArrayList();
                    arrayList8.add(new com.android.server.am.ActivityManagerService.MemItem("Native", "Native", jArr16[0], jArr16[1], jArr16[2], jArr16[3], -1));
                    arrayList8.add(new com.android.server.am.ActivityManagerService.MemItem("Dalvik", "Dalvik", jArr16[4], jArr16[5], jArr16[6], jArr16[7], -2));
                    arrayList8.add(new com.android.server.am.ActivityManagerService.MemItem("Unknown", "Unknown", jArr16[8], jArr16[9], jArr16[10], jArr16[11], -3));
                    for (int i12 = 0; i12 < 17; i12++) {
                        java.lang.String otherLabel = android.os.Debug.MemoryInfo.getOtherLabel(i12);
                        arrayList8.add(new com.android.server.am.ActivityManagerService.MemItem(otherLabel, otherLabel, jArr35[i12], jArr23[i12], jArr24[i12], jArr25[i12], i12));
                    }
                    if (jArr32.length > 0) {
                        java.util.Iterator it = arrayList8.iterator();
                        while (it.hasNext()) {
                            com.android.server.am.ActivityManagerService.MemItem memItem = (com.android.server.am.ActivityManagerService.MemItem) it.next();
                            if (memItem.id == -2) {
                                i = 0;
                                i2 = 3;
                            } else if (memItem.id == 0) {
                                i = 4;
                                i2 = 9;
                            } else if (memItem.id == 10) {
                                i = 10;
                                i2 = 12;
                            } else if (memItem.id == 12) {
                                i2 = 14;
                                i = 13;
                            }
                            memItem.subitems = new java.util.ArrayList<>();
                            while (i <= i2) {
                                java.lang.String otherLabel2 = android.os.Debug.MemoryInfo.getOtherLabel(i + 17);
                                memItem.subitems.add(new com.android.server.am.ActivityManagerService.MemItem(otherLabel2, otherLabel2, jArr32[i], jArr33[i], jArr22[i], jArr31[i], i));
                                i++;
                            }
                        }
                    }
                    java.util.ArrayList arrayList9 = new java.util.ArrayList();
                    for (int i13 = 0; i13 < i11; i13++) {
                        if (jArr27[i13] != 0) {
                            java.lang.String str4 = memoryUsageDumpOptions.isCompact ? DUMP_MEM_OOM_COMPACT_LABEL[i13] : DUMP_MEM_OOM_LABEL[i13];
                            com.android.server.am.ActivityManagerService.MemItem memItem2 = new com.android.server.am.ActivityManagerService.MemItem(str4, str4, jArr27[i13], jArr38[i13], jArr37[i13], jArr36[i13], DUMP_MEM_OOM_ADJ[i13]);
                            memItem2.subitems = arrayListArr4[i13];
                            arrayList9.add(memItem2);
                        }
                    }
                    if (!memoryUsageDumpOptions.isCompact) {
                        printWriter.println();
                    }
                    if (z || memoryUsageDumpOptions.oomOnly || memoryUsageDumpOptions.isCompact) {
                        printWriter3 = printWriter;
                    } else {
                        printWriter.println();
                        printWriter3 = printWriter;
                        printWriter3.println("Total RSS by process:");
                        dumpMemItems(printWriter, "  ", "proc", arrayList7, true, memoryUsageDumpOptions.isCompact, false, false, false);
                        printWriter.println();
                    }
                    if (!memoryUsageDumpOptions.isCompact) {
                        printWriter3.println("Total RSS by OOM adjustment:");
                    }
                    dumpMemItems(printWriter, "  ", "oom", arrayList9, false, memoryUsageDumpOptions.isCompact, false, false, false);
                    if (!z && !memoryUsageDumpOptions.oomOnly) {
                        java.io.PrintWriter printWriter6 = printWriter2 != null ? printWriter2 : printWriter3;
                        if (!memoryUsageDumpOptions.isCompact) {
                            printWriter6.println();
                            printWriter6.println("Total RSS by category:");
                        }
                        dumpMemItems(printWriter6, "  ", "cat", arrayList8, true, memoryUsageDumpOptions.isCompact, false, false, false);
                    }
                    memoryUsageDumpOptions.dumpSwapPss = memoryUsageDumpOptions.dumpSwapPss && z7 && jArr16[13] != 0;
                    if (!z && !memoryUsageDumpOptions.oomOnly && !memoryUsageDumpOptions.isCompact) {
                        printWriter.println();
                        printWriter3.println("Total PSS by process:");
                        dumpMemItems(printWriter, "  ", "proc", arrayList7, true, memoryUsageDumpOptions.isCompact, true, memoryUsageDumpOptions.dumpSwapPss, memoryUsageDumpOptions.mDumpPrivateDirty);
                        printWriter.println();
                    }
                    if (!memoryUsageDumpOptions.isCompact) {
                        printWriter3.println("Total PSS by OOM adjustment:");
                    }
                    dumpMemItems(printWriter, "  ", "oom", arrayList9, false, memoryUsageDumpOptions.isCompact, true, memoryUsageDumpOptions.dumpSwapPss, memoryUsageDumpOptions.mDumpPrivateDirty);
                    if (!z && !memoryUsageDumpOptions.oomOnly) {
                        java.io.PrintWriter printWriter7 = printWriter2 != null ? printWriter2 : printWriter3;
                        if (!memoryUsageDumpOptions.isCompact) {
                            printWriter7.println();
                            printWriter7.println("Total PSS by category:");
                        }
                        dumpMemItems(printWriter7, "  ", "cat", arrayList8, true, memoryUsageDumpOptions.isCompact, true, memoryUsageDumpOptions.dumpSwapPss, memoryUsageDumpOptions.mDumpPrivateDirty);
                    }
                    if (!memoryUsageDumpOptions.isCompact) {
                        printWriter.println();
                    }
                    com.android.internal.util.MemInfoReader memInfoReader = new com.android.internal.util.MemInfoReader();
                    memInfoReader.readMemInfo();
                    if (jArr16[16] > 0) {
                        synchronized (this.mProcessStats.mLock) {
                            long cachedSizeKb = memInfoReader.getCachedSizeKb();
                            long freeSizeKb = memInfoReader.getFreeSizeKb();
                            long zramTotalSizeKb = memInfoReader.getZramTotalSizeKb();
                            long kernelUsedSizeKb = memInfoReader.getKernelUsedSizeKb();
                            com.android.server.am.EventLogTags.writeAmMeminfo(cachedSizeKb * 1024, freeSizeKb * 1024, zramTotalSizeKb * 1024, kernelUsedSizeKb * 1024, jArr16[16] * 1024);
                            this.mProcessStats.addSysMemUsageLocked(cachedSizeKb, freeSizeKb, zramTotalSizeKb, kernelUsedSizeKb, jArr16[16]);
                        }
                    }
                    if (!z) {
                        if (memoryUsageDumpOptions.isCompact) {
                            printWriter3.print("ram,");
                            printWriter3.print(memInfoReader.getTotalSizeKb());
                            printWriter3.print(",");
                            printWriter3.print(j5 + memInfoReader.getCachedSizeKb() + memInfoReader.getFreeSizeKb());
                            printWriter3.print(",");
                            printWriter3.println(jArr16[12] - j5);
                        } else {
                            printWriter3.print("Total RAM: ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getTotalSizeKb()));
                            printWriter3.print(" (status ");
                            this.mAppProfiler.dumpLastMemoryLevelLocked(printWriter3);
                            printWriter3.print(" Free RAM: ");
                            printWriter3.print(stringifyKBSize(j5 + memInfoReader.getCachedSizeKb() + memInfoReader.getFreeSizeKb()));
                            printWriter3.print(" (");
                            printWriter3.print(stringifyKBSize(j5));
                            printWriter3.print(" cached pss + ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getCachedSizeKb()));
                            printWriter3.print(" cached kernel + ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getFreeSizeKb()));
                            printWriter3.println(" free)");
                        }
                    }
                    long kernelUsedSizeKb2 = memInfoReader.getKernelUsedSizeKb();
                    long ionHeapsSizeKb = android.os.Debug.getIonHeapsSizeKb();
                    long ionPoolsSizeKb = android.os.Debug.getIonPoolsSizeKb();
                    long dmabufMappedSizeKb = android.os.Debug.getDmabufMappedSizeKb();
                    if (ionHeapsSizeKb < 0 || ionPoolsSizeKb < 0) {
                        long dmabufTotalExportedKb = android.os.Debug.getDmabufTotalExportedKb();
                        if (dmabufTotalExportedKb >= 0) {
                            long j6 = dmabufTotalExportedKb - dmabufMappedSizeKb;
                            printWriter3.print("DMA-BUF: ");
                            printWriter3.print(stringifyKBSize(dmabufTotalExportedKb));
                            printWriter3.print(" (");
                            printWriter3.print(stringifyKBSize(dmabufMappedSizeKb));
                            printWriter3.print(" mapped + ");
                            printWriter3.print(stringifyKBSize(j6));
                            printWriter3.println(" unmapped)");
                            kernelUsedSizeKb2 += j6;
                            jArr16[12] = jArr16[12] - jArr16[17];
                            jArr16[12] = jArr16[12] + dmabufMappedSizeKb;
                        }
                        long dmabufHeapTotalExportedKb = android.os.Debug.getDmabufHeapTotalExportedKb();
                        if (dmabufHeapTotalExportedKb >= 0) {
                            printWriter3.print("DMA-BUF Heaps: ");
                            printWriter3.println(stringifyKBSize(dmabufHeapTotalExportedKb));
                        }
                        long dmabufHeapPoolsSizeKb = android.os.Debug.getDmabufHeapPoolsSizeKb();
                        if (dmabufHeapPoolsSizeKb >= 0) {
                            printWriter3.print("DMA-BUF Heaps pool: ");
                            printWriter3.println(stringifyKBSize(dmabufHeapPoolsSizeKb));
                        }
                    } else {
                        long j7 = ionHeapsSizeKb - dmabufMappedSizeKb;
                        printWriter3.print("      ION: ");
                        printWriter3.print(stringifyKBSize(ionHeapsSizeKb + ionPoolsSizeKb));
                        printWriter3.print(" (");
                        printWriter3.print(stringifyKBSize(dmabufMappedSizeKb));
                        printWriter3.print(" mapped + ");
                        printWriter3.print(stringifyKBSize(j7));
                        printWriter3.print(" unmapped + ");
                        printWriter3.print(stringifyKBSize(ionPoolsSizeKb));
                        printWriter3.println(" pools)");
                        kernelUsedSizeKb2 += j7;
                        jArr16[12] = jArr16[12] - jArr16[17];
                        jArr16[12] = jArr16[12] + dmabufMappedSizeKb;
                    }
                    long gpuTotalUsageKb = android.os.Debug.getGpuTotalUsageKb();
                    if (gpuTotalUsageKb >= 0) {
                        long gpuPrivateMemoryKb = android.os.Debug.getGpuPrivateMemoryKb();
                        if (gpuPrivateMemoryKb >= 0) {
                            printWriter3.print("      GPU: ");
                            printWriter3.print(stringifyKBSize(gpuTotalUsageKb));
                            printWriter3.print(" (");
                            printWriter3.print(stringifyKBSize(gpuTotalUsageKb - gpuPrivateMemoryKb));
                            printWriter3.print(" dmabuf + ");
                            printWriter3.print(stringifyKBSize(gpuPrivateMemoryKb));
                            printWriter3.println(" private)");
                            jArr16[12] = jArr16[12] - jArr16[18];
                            kernelUsedSizeKb2 += gpuPrivateMemoryKb;
                        } else {
                            printWriter3.print("      GPU: ");
                            printWriter3.println(stringifyKBSize(gpuTotalUsageKb));
                        }
                    }
                    long totalSizeKb = ((((memInfoReader.getTotalSizeKb() - (jArr16[12] - jArr16[13])) - memInfoReader.getFreeSizeKb()) - memInfoReader.getCachedSizeKb()) - kernelUsedSizeKb2) - memInfoReader.getZramTotalSizeKb();
                    if (memoryUsageDumpOptions.isCompact) {
                        printWriter3.print("lostram,");
                        printWriter3.println(totalSizeKb);
                    } else {
                        printWriter3.print(" Used RAM: ");
                        printWriter3.print(stringifyKBSize((jArr16[12] - j5) + kernelUsedSizeKb2));
                        printWriter3.print(" (");
                        printWriter3.print(stringifyKBSize(jArr16[12] - j5));
                        printWriter3.print(" used pss + ");
                        printWriter3.print(stringifyKBSize(kernelUsedSizeKb2));
                        printWriter3.print(" kernel)\n");
                        printWriter3.print(" Lost RAM: ");
                        printWriter3.println(stringifyKBSize(totalSizeKb));
                    }
                    if (z) {
                        return;
                    }
                    if (memInfoReader.getZramTotalSizeKb() != 0) {
                        if (memoryUsageDumpOptions.isCompact) {
                            printWriter3.print("zram,");
                            printWriter3.print(memInfoReader.getZramTotalSizeKb());
                            printWriter3.print(",");
                            printWriter3.print(memInfoReader.getSwapTotalSizeKb());
                            printWriter3.print(",");
                            printWriter3.println(memInfoReader.getSwapFreeSizeKb());
                        } else {
                            printWriter3.print("     ZRAM: ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getZramTotalSizeKb()));
                            printWriter3.print(" physical used for ");
                            printWriter3.print(stringifyKBSize(memInfoReader.getSwapTotalSizeKb() - memInfoReader.getSwapFreeSizeKb()));
                            printWriter3.print(" in swap (");
                            printWriter3.print(stringifyKBSize(memInfoReader.getSwapTotalSizeKb()));
                            printWriter3.println(" total swap)");
                        }
                    }
                    long[] ksmInfo = getKsmInfo();
                    if (memoryUsageDumpOptions.isCompact) {
                        printWriter3.print("ksm,");
                        printWriter3.print(ksmInfo[1]);
                        printWriter3.print(",");
                        printWriter3.print(ksmInfo[0]);
                        printWriter3.print(",");
                        printWriter3.print(ksmInfo[2]);
                        printWriter3.print(",");
                        printWriter3.println(ksmInfo[3]);
                        printWriter3.print("tuning,");
                        printWriter3.print(android.app.ActivityManager.staticGetMemoryClass());
                        printWriter3.print(',');
                        printWriter3.print(android.app.ActivityManager.staticGetLargeMemoryClass());
                        printWriter3.print(',');
                        printWriter3.print(this.mProcessList.getMemLevel(999) / 1024);
                        if (android.app.ActivityManager.isLowRamDeviceStatic()) {
                            printWriter3.print(",low-ram");
                        }
                        if (android.app.ActivityManager.isHighEndGfx()) {
                            printWriter3.print(",high-end-gfx");
                        }
                        printWriter.println();
                        return;
                    }
                    if (ksmInfo[1] != 0 || ksmInfo[0] != 0 || ksmInfo[2] != 0 || ksmInfo[3] != 0) {
                        printWriter3.print("      KSM: ");
                        printWriter3.print(stringifyKBSize(ksmInfo[1]));
                        printWriter3.print(" saved from shared ");
                        printWriter3.print(stringifyKBSize(ksmInfo[0]));
                        printWriter3.print("           ");
                        printWriter3.print(stringifyKBSize(ksmInfo[2]));
                        printWriter3.print(" unshared; ");
                        printWriter3.print(stringifyKBSize(ksmInfo[3]));
                        printWriter3.println(" volatile");
                    }
                    printWriter3.print("   Tuning: ");
                    printWriter3.print(android.app.ActivityManager.staticGetMemoryClass());
                    printWriter3.print(" (large ");
                    printWriter3.print(android.app.ActivityManager.staticGetLargeMemoryClass());
                    printWriter3.print("), oom ");
                    printWriter3.print(stringifySize(this.mProcessList.getMemLevel(999), 1024));
                    printWriter3.print(", restore limit ");
                    printWriter3.print(stringifyKBSize(this.mProcessList.getCachedRestoreThresholdKb()));
                    if (android.app.ActivityManager.isLowRamDeviceStatic()) {
                        printWriter3.print(" (low-ram)");
                    }
                    if (android.app.ActivityManager.isHighEndGfx()) {
                        printWriter3.print(" (high-end-gfx)");
                    }
                    printWriter.println();
                    return;
                }
                return;
            }
            com.android.server.am.ProcessRecord processRecord = arrayList4.get(i10);
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock2 = activityManagerService.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock2) {
                try {
                    thread = processRecord.getThread();
                    i3 = i10;
                    pid = processRecord.getPid();
                    arrayListArr = arrayListArr3;
                    setAdjWithServices = processRecord.mState.getSetAdjWithServices();
                    hasActivities = processRecord.hasActivities();
                } finally {
                    resetPriorityAfterProcLockedSection();
                }
            }
            resetPriorityAfterProcLockedSection();
            if (thread != null) {
                android.os.Debug.MemoryInfo memoryInfo7 = memoryInfo6 == null ? new android.os.Debug.MemoryInfo() : memoryInfo6;
                if (memoryUsageDumpOptions5.dumpDetails) {
                    z2 = z6;
                    jArr9 = jArr15;
                    arrayList2 = arrayList6;
                } else if (z || memoryUsageDumpOptions5.oomOnly) {
                    long currentThreadTimeMillis = android.os.SystemClock.currentThreadTimeMillis();
                    z2 = z6;
                    jArr9 = jArr15;
                    arrayList2 = arrayList6;
                    long pss2 = android.os.Debug.getPss(pid, jArr9, jArr26);
                    if (pss2 == 0) {
                        sparseArray = sparseArray2;
                        jArr = jArr17;
                        jArr2 = jArr18;
                        jArr3 = jArr26;
                        memoryInfo6 = memoryInfo7;
                        jArr4 = jArr21;
                        i4 = length;
                        jArr5 = jArr30;
                        arrayListArr2 = arrayListArr;
                        z6 = z2;
                        jArr6 = jArr29;
                        jArr7 = jArr28;
                        jArr8 = jArr9;
                    } else {
                        memoryInfo7.dalvikPss = (int) pss2;
                        long currentThreadTimeMillis2 = android.os.SystemClock.currentThreadTimeMillis();
                        memoryInfo7.dalvikPrivateDirty = (int) jArr9[0];
                        memoryInfo7.dalvikRss = (int) jArr9[2];
                        j3 = currentThreadTimeMillis;
                        j2 = jArr26[1];
                        j = jArr26[2];
                        z3 = z2;
                        i5 = 3;
                        j4 = currentThreadTimeMillis2;
                        if (memoryUsageDumpOptions5.isCheckinRequest && memoryUsageDumpOptions5.dumpDetails) {
                            java.lang.StringBuilder sb = new java.lang.StringBuilder();
                            z4 = z3;
                            sb.append("\n** MEMINFO in pid ");
                            sb.append(pid);
                            sb.append(" [");
                            sb.append(processRecord.processName);
                            sb.append("] **");
                            printWriter5.println(sb.toString());
                        } else {
                            z4 = z3;
                        }
                        if (memoryUsageDumpOptions5.dumpDetails) {
                            sparseArray = sparseArray2;
                            jArr10 = jArr17;
                            jArr2 = jArr18;
                            jArr3 = jArr26;
                            memoryInfo = memoryInfo7;
                            jArr4 = jArr21;
                            i6 = length;
                            memoryUsageDumpOptions2 = memoryUsageDumpOptions5;
                            jArr5 = jArr30;
                            arrayListArr2 = arrayListArr;
                            i7 = setAdjWithServices;
                            c = 3;
                            jArr6 = jArr29;
                            jArr7 = jArr28;
                            jArr8 = jArr9;
                        } else if (memoryUsageDumpOptions5.localOnly) {
                            jArr4 = jArr21;
                            jArr3 = jArr26;
                            c = 3;
                            i6 = length;
                            memoryUsageDumpOptions2 = memoryUsageDumpOptions5;
                            memoryInfo = memoryInfo7;
                            jArr2 = jArr18;
                            jArr5 = jArr30;
                            arrayListArr2 = arrayListArr;
                            i7 = setAdjWithServices;
                            jArr6 = jArr29;
                            jArr7 = jArr28;
                            jArr8 = jArr9;
                            android.app.ActivityThread.dumpMemInfoTable(printWriter, memoryInfo, memoryUsageDumpOptions5.isCheckinRequest, memoryUsageDumpOptions5.dumpFullDetails, memoryUsageDumpOptions5.dumpDalvik, memoryUsageDumpOptions5.dumpSummaryOnly, pid, processRecord.processName, 0L, 0L, 0L, 0L, 0L, 0L);
                            if (memoryUsageDumpOptions2.isCheckinRequest) {
                                printWriter.println();
                                sparseArray = sparseArray2;
                                jArr10 = jArr17;
                            } else {
                                sparseArray = sparseArray2;
                                jArr10 = jArr17;
                            }
                        } else {
                            jArr2 = jArr18;
                            jArr3 = jArr26;
                            memoryInfo = memoryInfo7;
                            jArr4 = jArr21;
                            java.io.PrintWriter printWriter8 = printWriter5;
                            i6 = length;
                            memoryUsageDumpOptions2 = memoryUsageDumpOptions5;
                            jArr5 = jArr30;
                            arrayListArr2 = arrayListArr;
                            i7 = setAdjWithServices;
                            c = 3;
                            jArr6 = jArr29;
                            jArr7 = jArr28;
                            jArr8 = jArr9;
                            printWriter.flush();
                            try {
                                com.android.internal.os.TransferPipe transferPipe2 = new com.android.internal.os.TransferPipe();
                                try {
                                    jArr10 = jArr17;
                                    try {
                                        sparseArray = sparseArray2;
                                        transferPipe = transferPipe2;
                                    } catch (java.lang.Throwable th) {
                                        th = th;
                                        sparseArray = sparseArray2;
                                        transferPipe = transferPipe2;
                                    }
                                } catch (java.lang.Throwable th2) {
                                    th = th2;
                                    sparseArray = sparseArray2;
                                    jArr10 = jArr17;
                                    transferPipe = transferPipe2;
                                }
                                try {
                                    thread.dumpMemInfo(transferPipe2.getWriteFd(), memoryInfo, memoryUsageDumpOptions2.isCheckinRequest, memoryUsageDumpOptions2.dumpFullDetails, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, memoryUsageDumpOptions2.dumpUnreachable, memoryUsageDumpOptions2.mDumpAllocatorStats, strArr);
                                } catch (java.lang.Throwable th3) {
                                    th = th3;
                                    transferPipe.kill();
                                    throw th;
                                }
                            } catch (android.os.RemoteException e2) {
                                e = e2;
                                sparseArray = sparseArray2;
                                jArr10 = jArr17;
                            } catch (java.io.IOException e3) {
                                e = e3;
                                sparseArray = sparseArray2;
                                jArr10 = jArr17;
                            }
                            try {
                                transferPipe.go(fileDescriptor, memoryUsageDumpOptions2.dumpUnreachable ? 30000L : 5000L);
                                try {
                                    transferPipe.kill();
                                } catch (android.os.RemoteException e4) {
                                    e = e4;
                                    if (!memoryUsageDumpOptions2.isCheckinRequest) {
                                        printWriter8.println("Got RemoteException! " + e);
                                        printWriter.flush();
                                    }
                                    long totalPss = memoryInfo.getTotalPss();
                                    long totalUss = memoryInfo.getTotalUss();
                                    long totalRss = memoryInfo.getTotalRss();
                                    long totalSwappedOutPss = memoryInfo.getTotalSwappedOutPss();
                                    long totalPrivateDirty = memoryInfo.getTotalPrivateDirty();
                                    activityManagerGlobalLock = activityManagerService.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerGlobalLock) {
                                    }
                                } catch (java.io.IOException e5) {
                                    e = e5;
                                    if (!memoryUsageDumpOptions2.isCheckinRequest) {
                                        printWriter8.println("Got IoException! " + e);
                                        printWriter.flush();
                                    }
                                    long totalPss2 = memoryInfo.getTotalPss();
                                    long totalUss2 = memoryInfo.getTotalUss();
                                    long totalRss2 = memoryInfo.getTotalRss();
                                    long totalSwappedOutPss2 = memoryInfo.getTotalSwappedOutPss();
                                    long totalPrivateDirty2 = memoryInfo.getTotalPrivateDirty();
                                    activityManagerGlobalLock = activityManagerService.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerGlobalLock) {
                                    }
                                }
                            } catch (java.lang.Throwable th4) {
                                th = th4;
                                transferPipe.kill();
                                throw th;
                            }
                        }
                        long totalPss22 = memoryInfo.getTotalPss();
                        long totalUss22 = memoryInfo.getTotalUss();
                        long totalRss22 = memoryInfo.getTotalRss();
                        long totalSwappedOutPss22 = memoryInfo.getTotalSwappedOutPss();
                        long totalPrivateDirty22 = memoryInfo.getTotalPrivateDirty();
                        activityManagerGlobalLock = activityManagerService.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerGlobalLock) {
                            try {
                                if (processRecord.getThread() != null && i7 == processRecord.mState.getSetAdjWithServices()) {
                                    processRecord.mProfile.addPss(totalPss22, totalUss22, totalRss22, true, i5, j4 - j3);
                                }
                            } catch (java.lang.Throwable th5) {
                                throw th5;
                            }
                        }
                        resetPriorityAfterProcLockedSection();
                        if (memoryUsageDumpOptions2.isCheckinRequest) {
                            i4 = i6;
                            memoryInfo2 = memoryInfo;
                            jArr = jArr10;
                        } else {
                            jArr16[12] = jArr16[12] + totalPss22;
                            jArr16[13] = jArr16[13] + totalSwappedOutPss22;
                            jArr16[14] = jArr16[14] + totalRss22;
                            jArr16[15] = jArr16[15] + totalPrivateDirty22;
                            jArr16[17] = jArr16[17] + j2;
                            jArr16[18] = jArr16[18] + j;
                            java.lang.StringBuilder sb2 = new java.lang.StringBuilder();
                            sb2.append(processRecord.processName);
                            sb2.append(" (pid ");
                            sb2.append(pid);
                            sb2.append(hasActivities ? " / activities)" : ")");
                            com.android.server.am.ActivityManagerService.MemItem memItem3 = new com.android.server.am.ActivityManagerService.MemItem(sb2.toString(), processRecord.processName, totalPss22, totalSwappedOutPss22, totalRss22, totalPrivateDirty22, pid, processRecord.userId, hasActivities);
                            arrayList2.add(memItem3);
                            sparseArray.put(pid, memItem3);
                            memoryInfo2 = memoryInfo;
                            jArr16[0] = jArr16[0] + memoryInfo2.nativePss;
                            jArr16[1] = jArr16[1] + memoryInfo2.nativeSwappedOutPss;
                            jArr16[2] = jArr16[2] + memoryInfo2.nativeRss;
                            jArr16[c] = jArr16[c] + memoryInfo2.nativePrivateDirty;
                            jArr16[4] = jArr16[4] + memoryInfo2.dalvikPss;
                            jArr16[5] = jArr16[5] + memoryInfo2.dalvikSwappedOutPss;
                            jArr16[6] = jArr16[6] + memoryInfo2.dalvikRss;
                            jArr16[7] = jArr16[7] + memoryInfo2.dalvikPrivateDirty;
                            int i14 = 0;
                            while (true) {
                                jArr = jArr10;
                                if (i14 >= jArr.length) {
                                    break;
                                }
                                int i15 = i14 + 17;
                                jArr[i14] = jArr[i14] + memoryInfo2.getOtherPss(i15);
                                jArr2[i14] = jArr2[i14] + memoryInfo2.getOtherSwappedOutPss(i15);
                                jArr31[i14] = jArr31[i14] + memoryInfo2.getOtherPrivateDirty(i15);
                                jArr22[i14] = jArr22[i14] + memoryInfo2.getOtherRss(i15);
                                i14++;
                                jArr10 = jArr;
                                totalPrivateDirty22 = totalPrivateDirty22;
                            }
                            long j8 = totalPrivateDirty22;
                            jArr16[8] = jArr16[8] + memoryInfo2.otherPss;
                            jArr16[10] = jArr16[10] + memoryInfo2.otherRss;
                            jArr16[9] = jArr16[9] + memoryInfo2.otherSwappedOutPss;
                            jArr16[11] = jArr16[11] + memoryInfo2.otherPrivateDirty;
                            for (int i16 = 0; i16 < 17; i16++) {
                                long otherPss = memoryInfo2.getOtherPss(i16);
                                jArr4[i16] = jArr4[i16] + otherPss;
                                jArr16[8] = jArr16[8] - otherPss;
                                long otherSwappedOutPss = memoryInfo2.getOtherSwappedOutPss(i16);
                                jArr23[i16] = jArr23[i16] + otherSwappedOutPss;
                                jArr16[9] = jArr16[9] - otherSwappedOutPss;
                                long otherPrivateDirty = memoryInfo2.getOtherPrivateDirty(i16);
                                jArr25[i16] = jArr25[i16] + otherPrivateDirty;
                                jArr16[11] = jArr16[11] - otherPrivateDirty;
                                long otherRss = memoryInfo2.getOtherRss(i16);
                                jArr24[i16] = jArr24[i16] + otherRss;
                                jArr16[10] = jArr16[10] - otherRss;
                            }
                            if (i7 >= 900) {
                                j5 += totalPss22;
                            }
                            int i17 = 0;
                            while (true) {
                                i4 = i6;
                                if (i17 >= i4) {
                                    break;
                                }
                                if (i17 == i4 - 1 || (i7 >= DUMP_MEM_OOM_ADJ[i17] && i7 < DUMP_MEM_OOM_ADJ[i17 + 1])) {
                                    break;
                                }
                                i17++;
                                i6 = i4;
                            }
                            jArr27[i17] = jArr27[i17] + totalPss22;
                            jArr7[i17] = jArr7[i17] + totalSwappedOutPss22;
                            jArr5[i17] = jArr5[i17] + j8;
                            if (arrayListArr2[i17] == null) {
                                arrayListArr2[i17] = new java.util.ArrayList<>();
                            }
                            arrayListArr2[i17].add(memItem3);
                            jArr6[i17] = jArr6[i17] + totalRss22;
                        }
                        memoryInfo6 = memoryInfo2;
                        z6 = z4;
                    }
                } else {
                    z2 = z6;
                    jArr9 = jArr15;
                    arrayList2 = arrayList6;
                }
                long currentThreadTimeMillis3 = android.os.SystemClock.currentThreadTimeMillis();
                if (android.os.Debug.getMemoryInfo(pid, memoryInfo7)) {
                    long currentThreadTimeMillis4 = android.os.SystemClock.currentThreadTimeMillis();
                    boolean z8 = memoryInfo7.hasSwappedOutPss;
                    long otherPrivate = memoryInfo7.getOtherPrivate(14);
                    j = memoryInfo7.getOtherPrivate(15);
                    j3 = currentThreadTimeMillis3;
                    j4 = currentThreadTimeMillis4;
                    z3 = z8;
                    j2 = otherPrivate;
                    i5 = 4;
                    if (memoryUsageDumpOptions5.isCheckinRequest) {
                    }
                    z4 = z3;
                    if (memoryUsageDumpOptions5.dumpDetails) {
                    }
                    long totalPss222 = memoryInfo.getTotalPss();
                    long totalUss222 = memoryInfo.getTotalUss();
                    long totalRss222 = memoryInfo.getTotalRss();
                    long totalSwappedOutPss222 = memoryInfo.getTotalSwappedOutPss();
                    long totalPrivateDirty222 = memoryInfo.getTotalPrivateDirty();
                    activityManagerGlobalLock = activityManagerService.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                    }
                }
                sparseArray = sparseArray2;
                jArr = jArr17;
                jArr2 = jArr18;
                jArr3 = jArr26;
                memoryInfo6 = memoryInfo7;
                jArr4 = jArr21;
                i4 = length;
                jArr5 = jArr30;
                arrayListArr2 = arrayListArr;
                z6 = z2;
                jArr6 = jArr29;
                jArr7 = jArr28;
                jArr8 = jArr9;
            } else {
                sparseArray = sparseArray2;
                jArr = jArr17;
                jArr2 = jArr18;
                jArr3 = jArr26;
                jArr4 = jArr21;
                i4 = length;
                jArr5 = jArr30;
                arrayListArr2 = arrayListArr;
                jArr6 = jArr29;
                jArr7 = jArr28;
                jArr8 = jArr15;
                arrayList2 = arrayList6;
            }
            printWriter5 = printWriter;
            memoryUsageDumpOptions5 = memoryUsageDumpOptions;
            arrayList4 = arrayList;
            length = i4;
            jArr17 = jArr;
            jArr20 = jArr31;
            jArr21 = jArr4;
            jArr26 = jArr3;
            arrayListArr3 = arrayListArr2;
            jArr18 = jArr2;
            sparseArray2 = sparseArray;
            activityManagerService = this;
            i10 = i3 - 1;
            arrayList6 = arrayList2;
            jArr15 = jArr8;
            jArr28 = jArr7;
            jArr29 = jArr6;
            jArr30 = jArr5;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$15(int i, java.lang.String[] strArr, java.util.ArrayList arrayList, com.android.internal.os.ProcessCpuTracker.Stats stats) {
        if (stats.pid == i || (stats.baseName != null && stats.baseName.equals(strArr[0]))) {
            arrayList.add(stats);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$16(android.util.SparseArray sparseArray, android.os.Debug.MemoryInfo[] memoryInfoArr, boolean z, com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions, long[] jArr, long[] jArr2, long[] jArr3, java.util.ArrayList arrayList, long[] jArr4, long[] jArr5, long[] jArr6, long[] jArr7, long[] jArr8, long[] jArr9, long[] jArr10, long[] jArr11, long[] jArr12, long[] jArr13, java.util.ArrayList[] arrayListArr, long[] jArr14, long[] jArr15, com.android.internal.os.ProcessCpuTracker.Stats stats) {
        long j;
        long j2;
        if (stats.vsize > 0 && sparseArray.indexOfKey(stats.pid) < 0) {
            if (memoryInfoArr[0] == null) {
                memoryInfoArr[0] = new android.os.Debug.MemoryInfo();
            }
            android.os.Debug.MemoryInfo memoryInfo = memoryInfoArr[0];
            if (z || memoryUsageDumpOptions.oomOnly) {
                long pss = android.os.Debug.getPss(stats.pid, jArr, jArr2);
                if (pss == 0) {
                    return;
                }
                memoryInfo.nativePss = (int) pss;
                memoryInfo.nativePrivateDirty = (int) jArr[0];
                memoryInfo.nativeRss = (int) jArr[2];
                j = jArr2[1];
                j2 = jArr2[2];
            } else {
                if (!android.os.Debug.getMemoryInfo(stats.pid, memoryInfo)) {
                    return;
                }
                j = memoryInfo.getOtherPrivate(14);
                j2 = memoryInfo.getOtherPrivate(15);
            }
            long totalPss = memoryInfo.getTotalPss();
            long totalSwappedOutPss = memoryInfo.getTotalSwappedOutPss();
            long totalRss = memoryInfo.getTotalRss();
            long totalPrivateDirty = memoryInfo.getTotalPrivateDirty();
            jArr3[12] = jArr3[12] + totalPss;
            jArr3[13] = jArr3[13] + totalSwappedOutPss;
            jArr3[14] = jArr3[14] + totalRss;
            jArr3[16] = jArr3[16] + totalPss;
            jArr3[17] = jArr3[17] + j;
            jArr3[18] = jArr3[18] + j2;
            com.android.server.am.ActivityManagerService.MemItem memItem = new com.android.server.am.ActivityManagerService.MemItem(stats.name + " (pid " + stats.pid + ")", stats.name, totalPss, memoryInfo.getSummaryTotalSwapPss(), totalRss, totalPrivateDirty, stats.pid, android.os.UserHandle.getUserId(stats.uid), false);
            arrayList.add(memItem);
            jArr3[0] = jArr3[0] + ((long) memoryInfo.nativePss);
            jArr3[1] = jArr3[1] + ((long) memoryInfo.nativeSwappedOutPss);
            jArr3[2] = jArr3[2] + ((long) memoryInfo.nativeRss);
            jArr3[3] = jArr3[3] + ((long) memoryInfo.nativePrivateDirty);
            jArr3[4] = jArr3[4] + memoryInfo.dalvikPss;
            jArr3[5] = jArr3[5] + memoryInfo.dalvikSwappedOutPss;
            jArr3[6] = jArr3[6] + memoryInfo.dalvikRss;
            jArr3[7] = jArr3[7] + memoryInfo.dalvikPrivateDirty;
            for (int i = 0; i < jArr4.length; i++) {
                int i2 = i + 17;
                jArr4[i] = jArr4[i] + memoryInfo.getOtherPss(i2);
                jArr5[i] = jArr5[i] + memoryInfo.getOtherSwappedOutPss(i2);
                jArr6[i] = jArr6[i] + memoryInfo.getOtherRss(i2);
                jArr7[i] = jArr7[i] + memoryInfo.getOtherPrivateDirty(i2);
            }
            jArr3[8] = jArr3[8] + memoryInfo.otherPss;
            jArr3[9] = jArr3[9] + memoryInfo.otherSwappedOutPss;
            jArr3[10] = jArr3[10] + memoryInfo.otherRss;
            jArr3[11] = jArr3[11] + memoryInfo.otherPrivateDirty;
            for (int i3 = 0; i3 < 17; i3++) {
                long otherPss = memoryInfo.getOtherPss(i3);
                jArr8[i3] = jArr8[i3] + otherPss;
                jArr3[8] = jArr3[8] - otherPss;
                long otherSwappedOutPss = memoryInfo.getOtherSwappedOutPss(i3);
                jArr9[i3] = jArr9[i3] + otherSwappedOutPss;
                jArr3[9] = jArr3[9] - otherSwappedOutPss;
                long otherRss = memoryInfo.getOtherRss(i3);
                jArr10[i3] = jArr10[i3] + otherRss;
                jArr3[10] = jArr3[10] - otherRss;
                long otherPrivateDirty = memoryInfo.getOtherPrivateDirty(i3);
                jArr11[i3] = jArr11[i3] + otherPrivateDirty;
                jArr3[11] = jArr3[11] - otherPrivateDirty;
            }
            jArr12[0] = jArr12[0] + totalPss;
            jArr13[0] = jArr13[0] + totalSwappedOutPss;
            if (arrayListArr[0] == null) {
                arrayListArr[0] = new java.util.ArrayList();
            }
            arrayListArr[0].add(memItem);
            jArr14[0] = jArr14[0] + totalRss;
            jArr15[0] = jArr15[0] + totalPrivateDirty;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:101:0x0437 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:188:0x03f8  */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0297  */
    @dalvik.annotation.optimization.NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void dumpApplicationMemoryUsage(java.io.FileDescriptor fileDescriptor, final com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions, final java.lang.String[] strArr, final boolean z, java.util.ArrayList<com.android.server.am.ProcessRecord> arrayList) {
        android.util.proto.ProtoOutputStream protoOutputStream;
        char c;
        com.android.server.am.ActivityManagerService activityManagerService;
        long j;
        int i;
        int i2;
        android.app.IApplicationThread thread;
        int pid;
        long[] jArr;
        int setAdjWithServices;
        boolean hasActivities;
        int i3;
        long[] jArr2;
        int i4;
        int i5;
        long j2;
        long j3;
        boolean z2;
        android.os.Debug.MemoryInfo memoryInfo;
        android.util.SparseArray sparseArray;
        java.util.ArrayList arrayList2;
        int i6;
        int i7;
        long[] jArr3;
        int i8;
        long[] jArr4;
        android.util.proto.ProtoOutputStream protoOutputStream2;
        long[] jArr5;
        long[] jArr6;
        int i9;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock;
        android.util.proto.ProtoOutputStream protoOutputStream3;
        int i10;
        android.os.Debug.MemoryInfo memoryInfo2;
        long[] jArr7;
        com.android.internal.os.ByteTransferPipe byteTransferPipe;
        final int i11;
        java.util.ArrayList<com.android.server.am.ProcessRecord> arrayList3 = arrayList;
        long uptimeMillis = android.os.SystemClock.uptimeMillis();
        long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
        long[] jArr8 = new long[3];
        if (arrayList3 == null) {
            if (strArr.length > 0 && strArr[0].charAt(0) != '-') {
                final java.util.ArrayList arrayList4 = new java.util.ArrayList();
                updateCpuStatsNow();
                try {
                    i11 = java.lang.Integer.parseInt(strArr[0]);
                } catch (java.lang.NumberFormatException e) {
                    i11 = -1;
                }
                this.mAppProfiler.forAllCpuStats(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda31
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.am.ActivityManagerService.lambda$dumpApplicationMemoryUsage$17(i11, strArr, arrayList4, (com.android.internal.os.ProcessCpuTracker.Stats) obj);
                    }
                });
                if (arrayList4.size() > 0) {
                    android.util.proto.ProtoOutputStream protoOutputStream4 = new android.util.proto.ProtoOutputStream(fileDescriptor);
                    protoOutputStream4.write(1112396529665L, uptimeMillis);
                    protoOutputStream4.write(1112396529666L, elapsedRealtime);
                    android.os.Debug.MemoryInfo memoryInfo3 = null;
                    for (int size = arrayList4.size() - 1; size >= 0; size--) {
                        com.android.internal.os.ProcessCpuTracker.Stats stats = (com.android.internal.os.ProcessCpuTracker.Stats) arrayList4.get(size);
                        int i12 = stats.pid;
                        if (memoryInfo3 == null) {
                            memoryInfo3 = new android.os.Debug.MemoryInfo();
                        }
                        if (memoryUsageDumpOptions.dumpDetails || !(z || memoryUsageDumpOptions.oomOnly)) {
                            if (!android.os.Debug.getMemoryInfo(i12, memoryInfo3)) {
                            }
                            long start = protoOutputStream4.start(2246267895811L);
                            protoOutputStream4.write(1120986464257L, i12);
                            protoOutputStream4.write(1138166333442L, stats.baseName);
                            android.app.ActivityThread.dumpMemInfoTable(protoOutputStream4, memoryInfo3, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                            protoOutputStream4.end(start);
                        } else {
                            long pss = android.os.Debug.getPss(i12, jArr8, null);
                            if (pss != 0) {
                                memoryInfo3.nativePss = (int) pss;
                                memoryInfo3.nativePrivateDirty = (int) jArr8[0];
                                memoryInfo3.nativeRss = (int) jArr8[2];
                                long start2 = protoOutputStream4.start(2246267895811L);
                                protoOutputStream4.write(1120986464257L, i12);
                                protoOutputStream4.write(1138166333442L, stats.baseName);
                                android.app.ActivityThread.dumpMemInfoTable(protoOutputStream4, memoryInfo3, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                                protoOutputStream4.end(start2);
                            }
                        }
                    }
                    protoOutputStream4.flush();
                    return;
                }
            }
            android.util.Log.d("ActivityManager", "No process found for: " + strArr[0]);
            return;
        }
        com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions2 = memoryUsageDumpOptions;
        if (!z && !memoryUsageDumpOptions2.oomOnly && (arrayList.size() == 1 || memoryUsageDumpOptions2.isCheckinRequest || memoryUsageDumpOptions2.packages)) {
            memoryUsageDumpOptions2.dumpDetails = true;
        }
        int size2 = arrayList.size();
        boolean z3 = size2 > 1 && !memoryUsageDumpOptions2.packages;
        if (z3) {
            updateCpuStatsNow();
        }
        android.util.proto.ProtoOutputStream protoOutputStream5 = new android.util.proto.ProtoOutputStream(fileDescriptor);
        protoOutputStream5.write(1112396529665L, uptimeMillis);
        protoOutputStream5.write(1112396529666L, elapsedRealtime);
        java.util.ArrayList arrayList5 = new java.util.ArrayList();
        android.util.SparseArray sparseArray2 = new android.util.SparseArray();
        long[] jArr9 = new long[19];
        long[] jArr10 = memoryUsageDumpOptions2.dumpDalvik ? new long[15] : libcore.util.EmptyArray.LONG;
        long[] jArr11 = memoryUsageDumpOptions2.dumpDalvik ? new long[15] : libcore.util.EmptyArray.LONG;
        long[] jArr12 = memoryUsageDumpOptions2.dumpDalvik ? new long[15] : libcore.util.EmptyArray.LONG;
        long[] jArr13 = new long[17];
        final long[] jArr14 = new long[17];
        long[] jArr15 = new long[17];
        int length = DUMP_MEM_OOM_LABEL.length;
        long[] jArr16 = new long[length];
        final long[] jArr17 = new long[DUMP_MEM_OOM_LABEL.length];
        final long[] jArr18 = new long[DUMP_MEM_OOM_LABEL.length];
        java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem>[] arrayListArr = new java.util.ArrayList[DUMP_MEM_OOM_LABEL.length];
        boolean z4 = z3;
        long j4 = 0;
        android.os.Debug.MemoryInfo memoryInfo4 = null;
        int i13 = size2 - 1;
        boolean z5 = false;
        while (true) {
            final long[] jArr19 = jArr16;
            if (i13 < 0) {
                final java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem>[] arrayListArr2 = arrayListArr;
                final long[] jArr20 = jArr13;
                int i14 = length;
                final long[] jArr21 = jArr10;
                final long[] jArr22 = jArr9;
                android.util.proto.ProtoOutputStream protoOutputStream6 = protoOutputStream5;
                final android.util.SparseArray sparseArray3 = sparseArray2;
                final java.util.ArrayList arrayList6 = arrayList5;
                final long[] jArr23 = jArr8;
                final long[] jArr24 = jArr15;
                long j5 = j4;
                if (z4) {
                    final android.os.Debug.MemoryInfo[] memoryInfoArr = new android.os.Debug.MemoryInfo[1];
                    boolean z6 = z5;
                    final long[] jArr25 = jArr11;
                    final long[] jArr26 = jArr12;
                    int i15 = i14;
                    this.mAppProfiler.forAllCpuStats(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda32
                        @Override // java.util.function.Consumer
                        public final void accept(java.lang.Object obj) {
                            com.android.server.am.ActivityManagerService.lambda$dumpApplicationMemoryUsage$18(sparseArray3, memoryInfoArr, z, memoryUsageDumpOptions, jArr23, jArr22, arrayList6, jArr21, jArr25, jArr26, jArr20, jArr14, jArr24, jArr19, jArr17, arrayListArr2, jArr18, (com.android.internal.os.ProcessCpuTracker.Stats) obj);
                        }
                    });
                    java.util.ArrayList arrayList7 = new java.util.ArrayList();
                    arrayList7.add(new com.android.server.am.ActivityManagerService.MemItem("Native", "Native", jArr22[0], jArr22[1], jArr22[2], 0L, -1));
                    arrayList7.add(new com.android.server.am.ActivityManagerService.MemItem("Dalvik", "Dalvik", jArr22[4], jArr22[5], jArr22[6], 0L, -2));
                    arrayList7.add(new com.android.server.am.ActivityManagerService.MemItem("Unknown", "Unknown", jArr22[8], jArr22[9], jArr22[10], 0L, -3));
                    for (int i16 = 0; i16 < 17; i16++) {
                        java.lang.String otherLabel = android.os.Debug.MemoryInfo.getOtherLabel(i16);
                        arrayList7.add(new com.android.server.am.ActivityManagerService.MemItem(otherLabel, otherLabel, jArr20[i16], jArr14[i16], jArr24[i16], 0L, i16));
                    }
                    if (jArr21.length > 0) {
                        java.util.Iterator it = arrayList7.iterator();
                        while (it.hasNext()) {
                            com.android.server.am.ActivityManagerService.MemItem memItem = (com.android.server.am.ActivityManagerService.MemItem) it.next();
                            if (memItem.id == -2) {
                                i = 3;
                                i2 = 0;
                            } else if (memItem.id == 0) {
                                i = 9;
                                i2 = 4;
                            } else if (memItem.id == 10) {
                                i2 = 10;
                                i = 12;
                            } else if (memItem.id == 12) {
                                i = 14;
                                i2 = 13;
                            }
                            memItem.subitems = new java.util.ArrayList<>();
                            while (i2 <= i) {
                                java.lang.String otherLabel2 = android.os.Debug.MemoryInfo.getOtherLabel(i2 + 17);
                                memItem.subitems.add(new com.android.server.am.ActivityManagerService.MemItem(otherLabel2, otherLabel2, jArr21[i2], jArr11[i2], jArr12[i2], 0L, i2));
                                i2++;
                            }
                        }
                        c = '\f';
                    } else {
                        c = '\f';
                    }
                    java.util.ArrayList arrayList8 = new java.util.ArrayList();
                    int i17 = 0;
                    while (true) {
                        int i18 = i15;
                        if (i17 >= i18) {
                            break;
                        }
                        if (jArr19[i17] != 0) {
                            java.lang.String str = memoryUsageDumpOptions.isCompact ? DUMP_MEM_OOM_COMPACT_LABEL[i17] : DUMP_MEM_OOM_LABEL[i17];
                            com.android.server.am.ActivityManagerService.MemItem memItem2 = new com.android.server.am.ActivityManagerService.MemItem(str, str, jArr19[i17], jArr17[i17], jArr18[i17], 0L, DUMP_MEM_OOM_ADJ[i17]);
                            memItem2.subitems = arrayListArr2[i17];
                            arrayList8.add(memItem2);
                        }
                        i17++;
                        i15 = i18;
                    }
                    if (!memoryUsageDumpOptions.oomOnly) {
                        dumpMemItems(protoOutputStream6, 2246267895837L, "proc", arrayList6, true, false, false);
                    }
                    dumpMemItems(protoOutputStream6, 2246267895838L, "oom", arrayList8, false, false, false);
                    if (!z && !memoryUsageDumpOptions.oomOnly) {
                        dumpMemItems(protoOutputStream6, 2246267895839L, "cat", arrayList7, true, false, false);
                    }
                    memoryUsageDumpOptions.dumpSwapPss = memoryUsageDumpOptions.dumpSwapPss && z6 && jArr22[13] != 0;
                    if (!memoryUsageDumpOptions.oomOnly) {
                        dumpMemItems(protoOutputStream6, 2246267895813L, "proc", arrayList6, true, true, memoryUsageDumpOptions.dumpSwapPss);
                    }
                    dumpMemItems(protoOutputStream6, 2246267895814L, "oom", arrayList8, false, true, memoryUsageDumpOptions.dumpSwapPss);
                    if (!z && !memoryUsageDumpOptions.oomOnly) {
                        dumpMemItems(protoOutputStream6, 2246267895815L, "cat", arrayList7, true, true, memoryUsageDumpOptions.dumpSwapPss);
                    }
                    com.android.internal.util.MemInfoReader memInfoReader = new com.android.internal.util.MemInfoReader();
                    memInfoReader.readMemInfo();
                    if (jArr22[16] > 0) {
                        activityManagerService = this;
                        synchronized (activityManagerService.mProcessStats.mLock) {
                            long cachedSizeKb = memInfoReader.getCachedSizeKb();
                            long freeSizeKb = memInfoReader.getFreeSizeKb();
                            long zramTotalSizeKb = memInfoReader.getZramTotalSizeKb();
                            long kernelUsedSizeKb = memInfoReader.getKernelUsedSizeKb();
                            com.android.server.am.EventLogTags.writeAmMeminfo(cachedSizeKb * 1024, freeSizeKb * 1024, zramTotalSizeKb * 1024, kernelUsedSizeKb * 1024, jArr22[16] * 1024);
                            activityManagerService.mProcessStats.addSysMemUsageLocked(cachedSizeKb, freeSizeKb, zramTotalSizeKb, kernelUsedSizeKb, jArr22[16]);
                        }
                    } else {
                        activityManagerService = this;
                    }
                    if (z) {
                        protoOutputStream = protoOutputStream6;
                        j = j5;
                    } else {
                        protoOutputStream = protoOutputStream6;
                        protoOutputStream.write(1112396529672L, memInfoReader.getTotalSizeKb());
                        protoOutputStream.write(1159641169929L, activityManagerService.mAppProfiler.getLastMemoryLevelLocked());
                        j = j5;
                        protoOutputStream.write(1112396529674L, j);
                        protoOutputStream.write(1112396529675L, memInfoReader.getCachedSizeKb());
                        protoOutputStream.write(1112396529676L, memInfoReader.getFreeSizeKb());
                    }
                    long totalSizeKb = ((((memInfoReader.getTotalSizeKb() - (jArr22[c] - jArr22[13])) - memInfoReader.getFreeSizeKb()) - memInfoReader.getCachedSizeKb()) - memInfoReader.getKernelUsedSizeKb()) - memInfoReader.getZramTotalSizeKb();
                    protoOutputStream.write(1112396529677L, jArr22[c] - j);
                    protoOutputStream.write(1112396529678L, memInfoReader.getKernelUsedSizeKb());
                    protoOutputStream.write(1112396529679L, totalSizeKb);
                    if (!z) {
                        if (memInfoReader.getZramTotalSizeKb() != 0) {
                            protoOutputStream.write(1112396529680L, memInfoReader.getZramTotalSizeKb());
                            protoOutputStream.write(1112396529681L, memInfoReader.getSwapTotalSizeKb() - memInfoReader.getSwapFreeSizeKb());
                            protoOutputStream.write(1112396529682L, memInfoReader.getSwapTotalSizeKb());
                        }
                        long[] ksmInfo = getKsmInfo();
                        protoOutputStream.write(1112396529683L, ksmInfo[1]);
                        protoOutputStream.write(1112396529684L, ksmInfo[0]);
                        protoOutputStream.write(1112396529685L, ksmInfo[2]);
                        protoOutputStream.write(1112396529686L, ksmInfo[3]);
                        protoOutputStream.write(1120986464279L, android.app.ActivityManager.staticGetMemoryClass());
                        protoOutputStream.write(1120986464280L, android.app.ActivityManager.staticGetLargeMemoryClass());
                        protoOutputStream.write(1112396529689L, activityManagerService.mProcessList.getMemLevel(999) / 1024);
                        protoOutputStream.write(1112396529690L, activityManagerService.mProcessList.getCachedRestoreThresholdKb());
                        protoOutputStream.write(1133871366171L, android.app.ActivityManager.isLowRamDeviceStatic());
                        protoOutputStream.write(1133871366172L, android.app.ActivityManager.isHighEndGfx());
                    }
                } else {
                    protoOutputStream = protoOutputStream6;
                }
                protoOutputStream.flush();
                return;
            }
            com.android.server.am.ProcessRecord processRecord = arrayList3.get(i13);
            java.util.ArrayList<com.android.server.am.ActivityManagerService.MemItem>[] arrayListArr3 = arrayListArr;
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock2) {
                try {
                    thread = processRecord.getThread();
                    pid = processRecord.getPid();
                    jArr = jArr13;
                    setAdjWithServices = processRecord.mState.getSetAdjWithServices();
                    hasActivities = processRecord.hasActivities();
                } finally {
                    resetPriorityAfterProcLockedSection();
                }
            }
            resetPriorityAfterProcLockedSection();
            if (thread == null) {
                i10 = length;
                jArr7 = jArr10;
                jArr4 = jArr9;
                sparseArray = sparseArray2;
                arrayList2 = arrayList5;
                jArr6 = jArr8;
                jArr5 = jArr15;
                i7 = i13;
                memoryInfo2 = memoryInfo4;
                protoOutputStream3 = protoOutputStream5;
            } else {
                android.os.Debug.MemoryInfo memoryInfo5 = memoryInfo4 == null ? new android.os.Debug.MemoryInfo() : memoryInfo4;
                if (memoryUsageDumpOptions2.dumpDetails) {
                    i3 = length;
                    jArr2 = jArr10;
                    i4 = 0;
                } else if (z || memoryUsageDumpOptions2.oomOnly) {
                    long currentThreadTimeMillis = android.os.SystemClock.currentThreadTimeMillis();
                    i3 = length;
                    jArr2 = jArr10;
                    long pss2 = android.os.Debug.getPss(pid, jArr8, null);
                    if (pss2 == 0) {
                        protoOutputStream3 = protoOutputStream5;
                        sparseArray = sparseArray2;
                        arrayList2 = arrayList5;
                        jArr6 = jArr8;
                        i7 = i13;
                        jArr7 = jArr2;
                        i10 = i3;
                        jArr4 = jArr9;
                        jArr5 = jArr15;
                        memoryInfo2 = memoryInfo5;
                    } else {
                        memoryInfo5.dalvikPss = (int) pss2;
                        long currentThreadTimeMillis2 = android.os.SystemClock.currentThreadTimeMillis();
                        i4 = 0;
                        memoryInfo5.dalvikPrivateDirty = (int) jArr8[0];
                        memoryInfo5.dalvikRss = (int) jArr8[2];
                        z2 = z5;
                        j2 = currentThreadTimeMillis;
                        j3 = currentThreadTimeMillis2;
                        i5 = 3;
                        if (memoryUsageDumpOptions2.dumpDetails) {
                            memoryInfo = memoryInfo5;
                            sparseArray = sparseArray2;
                            arrayList2 = arrayList5;
                            i6 = pid;
                            i7 = i13;
                            jArr3 = jArr2;
                            i8 = i3;
                            jArr4 = jArr9;
                            protoOutputStream2 = protoOutputStream5;
                            jArr5 = jArr15;
                            jArr6 = jArr8;
                            i9 = setAdjWithServices;
                        } else if (memoryUsageDumpOptions2.localOnly) {
                            long start3 = protoOutputStream5.start(2246267895812L);
                            long start4 = protoOutputStream5.start(1146756268033L);
                            protoOutputStream5.write(1120986464257L, pid);
                            protoOutputStream5.write(1138166333442L, processRecord.processName);
                            android.app.ActivityThread.dumpMemInfoTable(protoOutputStream5, memoryInfo5, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                            protoOutputStream5.end(start4);
                            protoOutputStream5.end(start3);
                            memoryInfo = memoryInfo5;
                            i7 = i13;
                            jArr3 = jArr2;
                            i8 = i3;
                            jArr4 = jArr9;
                            arrayList2 = arrayList5;
                            sparseArray = sparseArray2;
                            i6 = pid;
                            jArr5 = jArr15;
                            protoOutputStream2 = protoOutputStream5;
                            jArr6 = jArr8;
                            i9 = setAdjWithServices;
                        } else {
                            long[] jArr27 = jArr9;
                            android.util.SparseArray sparseArray4 = sparseArray2;
                            java.util.ArrayList arrayList9 = arrayList5;
                            try {
                                byteTransferPipe = new com.android.internal.os.ByteTransferPipe();
                                try {
                                    memoryInfo = memoryInfo5;
                                    jArr6 = jArr8;
                                    i9 = setAdjWithServices;
                                    i7 = i13;
                                    i8 = i3;
                                    jArr5 = jArr15;
                                    jArr3 = jArr2;
                                    jArr4 = jArr27;
                                    i6 = pid;
                                    protoOutputStream2 = protoOutputStream5;
                                    sparseArray = sparseArray4;
                                    arrayList2 = arrayList9;
                                } catch (java.lang.Throwable th) {
                                    th = th;
                                    memoryInfo = memoryInfo5;
                                    i7 = i13;
                                    jArr3 = jArr2;
                                    i8 = i3;
                                    jArr4 = jArr27;
                                    arrayList2 = arrayList9;
                                    sparseArray = sparseArray4;
                                    i6 = pid;
                                    jArr5 = jArr15;
                                    protoOutputStream2 = protoOutputStream5;
                                    jArr6 = jArr8;
                                    i9 = setAdjWithServices;
                                }
                            } catch (android.os.RemoteException e2) {
                                e = e2;
                                memoryInfo = memoryInfo5;
                                i7 = i13;
                                jArr3 = jArr2;
                                i8 = i3;
                                jArr4 = jArr27;
                                arrayList2 = arrayList9;
                                sparseArray = sparseArray4;
                                i6 = pid;
                                jArr5 = jArr15;
                                protoOutputStream2 = protoOutputStream5;
                                jArr6 = jArr8;
                                i9 = setAdjWithServices;
                            } catch (java.io.IOException e3) {
                                e = e3;
                                memoryInfo = memoryInfo5;
                                i7 = i13;
                                jArr3 = jArr2;
                                i8 = i3;
                                jArr4 = jArr27;
                                arrayList2 = arrayList9;
                                sparseArray = sparseArray4;
                                i6 = pid;
                                jArr5 = jArr15;
                                protoOutputStream2 = protoOutputStream5;
                                jArr6 = jArr8;
                                i9 = setAdjWithServices;
                            }
                            try {
                                thread.dumpMemInfoProto(byteTransferPipe.getWriteFd(), memoryInfo, memoryUsageDumpOptions2.dumpFullDetails, memoryUsageDumpOptions2.dumpDalvik, memoryUsageDumpOptions2.dumpSummaryOnly, memoryUsageDumpOptions2.dumpUnreachable, strArr);
                                protoOutputStream2.write(2246267895812L, byteTransferPipe.get());
                                try {
                                    byteTransferPipe.kill();
                                } catch (android.os.RemoteException e4) {
                                    e = e4;
                                    android.util.Log.e("ActivityManager", "Got RemoteException!", e);
                                    long totalPss = memoryInfo.getTotalPss();
                                    long totalUss = memoryInfo.getTotalUss();
                                    long totalRss = memoryInfo.getTotalRss();
                                    long totalSwappedOutPss = memoryInfo.getTotalSwappedOutPss();
                                    activityManagerGlobalLock = this.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerGlobalLock) {
                                    }
                                } catch (java.io.IOException e5) {
                                    e = e5;
                                    android.util.Log.e("ActivityManager", "Got IOException!", e);
                                    long totalPss2 = memoryInfo.getTotalPss();
                                    long totalUss2 = memoryInfo.getTotalUss();
                                    long totalRss2 = memoryInfo.getTotalRss();
                                    long totalSwappedOutPss2 = memoryInfo.getTotalSwappedOutPss();
                                    activityManagerGlobalLock = this.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerGlobalLock) {
                                    }
                                }
                            } catch (java.lang.Throwable th2) {
                                th = th2;
                                byteTransferPipe.kill();
                                throw th;
                            }
                        }
                        long totalPss22 = memoryInfo.getTotalPss();
                        long totalUss22 = memoryInfo.getTotalUss();
                        long totalRss22 = memoryInfo.getTotalRss();
                        long totalSwappedOutPss22 = memoryInfo.getTotalSwappedOutPss();
                        activityManagerGlobalLock = this.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerGlobalLock) {
                            try {
                                if (processRecord.getThread() != null && i9 == processRecord.mState.getSetAdjWithServices()) {
                                    processRecord.mProfile.addPss(totalPss22, totalUss22, totalRss22, true, i5, j3 - j2);
                                }
                            } catch (java.lang.Throwable th3) {
                                throw th3;
                            }
                        }
                        resetPriorityAfterProcLockedSection();
                        if (memoryUsageDumpOptions2.isCheckinRequest) {
                            protoOutputStream3 = protoOutputStream2;
                            i10 = i8;
                            memoryInfo2 = memoryInfo;
                            jArr7 = jArr3;
                            j4 = j4;
                        } else {
                            jArr4[12] = jArr4[12] + totalPss22;
                            jArr4[13] = jArr4[13] + totalSwappedOutPss22;
                            jArr4[14] = jArr4[14] + totalRss22;
                            java.lang.StringBuilder sb = new java.lang.StringBuilder();
                            sb.append(processRecord.processName);
                            sb.append(" (pid ");
                            int i19 = i6;
                            sb.append(i19);
                            sb.append(hasActivities ? " / activities)" : ")");
                            com.android.server.am.ActivityManagerService.MemItem memItem3 = new com.android.server.am.ActivityManagerService.MemItem(sb.toString(), processRecord.processName, totalPss22, totalSwappedOutPss22, totalRss22, 0L, i19, processRecord.userId, hasActivities);
                            arrayList2.add(memItem3);
                            sparseArray.put(i19, memItem3);
                            protoOutputStream3 = protoOutputStream2;
                            memoryInfo2 = memoryInfo;
                            jArr4[i4] = jArr4[i4] + memoryInfo2.nativePss;
                            jArr4[1] = jArr4[1] + memoryInfo2.nativeSwappedOutPss;
                            jArr4[2] = jArr4[2] + memoryInfo2.nativeRss;
                            jArr4[4] = jArr4[4] + memoryInfo2.dalvikPss;
                            jArr4[5] = jArr4[5] + memoryInfo2.dalvikSwappedOutPss;
                            jArr4[6] = jArr4[6] + memoryInfo2.dalvikRss;
                            int i20 = i4;
                            while (true) {
                                jArr7 = jArr3;
                                if (i20 >= jArr7.length) {
                                    break;
                                }
                                int i21 = i20 + 17;
                                jArr7[i20] = jArr7[i20] + memoryInfo2.getOtherPss(i21);
                                jArr11[i20] = jArr11[i20] + memoryInfo2.getOtherSwappedOutPss(i21);
                                jArr12[i20] = jArr12[i20] + memoryInfo2.getOtherRss(i21);
                                i20++;
                                jArr3 = jArr7;
                                totalRss22 = totalRss22;
                            }
                            long j6 = totalRss22;
                            jArr4[8] = jArr4[8] + memoryInfo2.otherPss;
                            jArr4[10] = jArr4[10] + memoryInfo2.otherRss;
                            jArr4[9] = jArr4[9] + memoryInfo2.otherSwappedOutPss;
                            for (int i22 = i4; i22 < 17; i22++) {
                                long otherPss = memoryInfo2.getOtherPss(i22);
                                jArr[i22] = jArr[i22] + otherPss;
                                jArr4[8] = jArr4[8] - otherPss;
                                long otherSwappedOutPss = memoryInfo2.getOtherSwappedOutPss(i22);
                                jArr14[i22] = jArr14[i22] + otherSwappedOutPss;
                                jArr4[9] = jArr4[9] - otherSwappedOutPss;
                                long otherRss = memoryInfo2.getOtherRss(i22);
                                jArr5[i22] = jArr5[i22] + otherRss;
                                jArr4[10] = jArr4[10] - otherRss;
                            }
                            if (i9 >= 900) {
                                j4 += totalPss22;
                            }
                            int i23 = i4;
                            while (true) {
                                i10 = i8;
                                if (i23 >= i10) {
                                    break;
                                }
                                if (i23 == i10 - 1 || (i9 >= DUMP_MEM_OOM_ADJ[i23] && i9 < DUMP_MEM_OOM_ADJ[i23 + 1])) {
                                    break;
                                }
                                i23++;
                                i8 = i10;
                            }
                            jArr19[i23] = jArr19[i23] + totalPss22;
                            jArr17[i23] = jArr17[i23] + totalSwappedOutPss22;
                            if (arrayListArr3[i23] == null) {
                                arrayListArr3[i23] = new java.util.ArrayList<>();
                            }
                            arrayListArr3[i23].add(memItem3);
                            jArr18[i23] = jArr18[i23] + j6;
                        }
                        z5 = z2;
                    }
                } else {
                    i3 = length;
                    jArr2 = jArr10;
                    i4 = 0;
                }
                long currentThreadTimeMillis3 = android.os.SystemClock.currentThreadTimeMillis();
                if (android.os.Debug.getMemoryInfo(pid, memoryInfo5)) {
                    long currentThreadTimeMillis4 = android.os.SystemClock.currentThreadTimeMillis();
                    z2 = memoryInfo5.hasSwappedOutPss;
                    j3 = currentThreadTimeMillis4;
                    j2 = currentThreadTimeMillis3;
                    i5 = 4;
                    if (memoryUsageDumpOptions2.dumpDetails) {
                    }
                    long totalPss222 = memoryInfo.getTotalPss();
                    long totalUss222 = memoryInfo.getTotalUss();
                    long totalRss222 = memoryInfo.getTotalRss();
                    long totalSwappedOutPss222 = memoryInfo.getTotalSwappedOutPss();
                    activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                    }
                }
                protoOutputStream3 = protoOutputStream5;
                sparseArray = sparseArray2;
                arrayList2 = arrayList5;
                jArr6 = jArr8;
                i7 = i13;
                jArr7 = jArr2;
                i10 = i3;
                jArr4 = jArr9;
                jArr5 = jArr15;
                memoryInfo2 = memoryInfo5;
            }
            i13 = i7 - 1;
            length = i10;
            jArr10 = jArr7;
            jArr9 = jArr4;
            protoOutputStream5 = protoOutputStream3;
            jArr16 = jArr19;
            arrayListArr = arrayListArr3;
            jArr13 = jArr;
            jArr8 = jArr6;
            sparseArray2 = sparseArray;
            arrayList5 = arrayList2;
            memoryUsageDumpOptions2 = memoryUsageDumpOptions;
            arrayList3 = arrayList;
            memoryInfo4 = memoryInfo2;
            jArr15 = jArr5;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$17(int i, java.lang.String[] strArr, java.util.ArrayList arrayList, com.android.internal.os.ProcessCpuTracker.Stats stats) {
        if (stats.pid == i || (stats.baseName != null && stats.baseName.equals(strArr[0]))) {
            arrayList.add(stats);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$18(android.util.SparseArray sparseArray, android.os.Debug.MemoryInfo[] memoryInfoArr, boolean z, com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions memoryUsageDumpOptions, long[] jArr, long[] jArr2, java.util.ArrayList arrayList, long[] jArr3, long[] jArr4, long[] jArr5, long[] jArr6, long[] jArr7, long[] jArr8, long[] jArr9, long[] jArr10, java.util.ArrayList[] arrayListArr, long[] jArr11, com.android.internal.os.ProcessCpuTracker.Stats stats) {
        if (stats.vsize > 0 && sparseArray.indexOfKey(stats.pid) < 0) {
            if (memoryInfoArr[0] == null) {
                memoryInfoArr[0] = new android.os.Debug.MemoryInfo();
            }
            android.os.Debug.MemoryInfo memoryInfo = memoryInfoArr[0];
            if (z || memoryUsageDumpOptions.oomOnly) {
                long pss = android.os.Debug.getPss(stats.pid, jArr, null);
                if (pss == 0) {
                    return;
                }
                memoryInfo.nativePss = (int) pss;
                memoryInfo.nativePrivateDirty = (int) jArr[0];
                memoryInfo.nativeRss = (int) jArr[2];
            } else if (!android.os.Debug.getMemoryInfo(stats.pid, memoryInfo)) {
                return;
            }
            long totalPss = memoryInfo.getTotalPss();
            long totalSwappedOutPss = memoryInfo.getTotalSwappedOutPss();
            long totalRss = memoryInfo.getTotalRss();
            jArr2[12] = jArr2[12] + totalPss;
            jArr2[13] = jArr2[13] + totalSwappedOutPss;
            jArr2[14] = jArr2[14] + totalRss;
            jArr2[16] = jArr2[16] + totalPss;
            com.android.server.am.ActivityManagerService.MemItem memItem = new com.android.server.am.ActivityManagerService.MemItem(stats.name + " (pid " + stats.pid + ")", stats.name, totalPss, memoryInfo.getSummaryTotalSwapPss(), totalRss, 0L, stats.pid, android.os.UserHandle.getUserId(stats.uid), false);
            arrayList.add(memItem);
            jArr2[0] = jArr2[0] + ((long) memoryInfo.nativePss);
            jArr2[1] = jArr2[1] + ((long) memoryInfo.nativeSwappedOutPss);
            jArr2[2] = jArr2[2] + ((long) memoryInfo.nativeRss);
            jArr2[4] = jArr2[4] + ((long) memoryInfo.dalvikPss);
            jArr2[5] = jArr2[5] + memoryInfo.dalvikSwappedOutPss;
            jArr2[6] = jArr2[6] + memoryInfo.dalvikRss;
            for (int i = 0; i < jArr3.length; i++) {
                int i2 = i + 17;
                jArr3[i] = jArr3[i] + memoryInfo.getOtherPss(i2);
                jArr4[i] = jArr4[i] + memoryInfo.getOtherSwappedOutPss(i2);
                jArr5[i] = jArr5[i] + memoryInfo.getOtherRss(i2);
            }
            jArr2[8] = jArr2[8] + memoryInfo.otherPss;
            jArr2[9] = jArr2[9] + memoryInfo.otherSwappedOutPss;
            jArr2[10] = jArr2[10] + memoryInfo.otherRss;
            for (int i3 = 0; i3 < 17; i3++) {
                long otherPss = memoryInfo.getOtherPss(i3);
                jArr6[i3] = jArr6[i3] + otherPss;
                jArr2[8] = jArr2[8] - otherPss;
                long otherSwappedOutPss = memoryInfo.getOtherSwappedOutPss(i3);
                jArr7[i3] = jArr7[i3] + otherSwappedOutPss;
                jArr2[9] = jArr2[9] - otherSwappedOutPss;
                long otherRss = memoryInfo.getOtherRss(i3);
                jArr8[i3] = jArr8[i3] + otherRss;
                jArr2[10] = jArr2[10] - otherRss;
            }
            jArr9[0] = jArr9[0] + totalPss;
            jArr10[0] = jArr10[0] + totalSwappedOutPss;
            if (arrayListArr[0] == null) {
                arrayListArr[0] = new java.util.ArrayList();
            }
            arrayListArr[0].add(memItem);
            jArr11[0] = jArr11[0] + totalRss;
        }
    }

    static void appendBasicMemEntry(java.lang.StringBuilder sb, int i, int i2, long j, long j2, java.lang.String str) {
        sb.append("  ");
        sb.append(com.android.server.am.ProcessList.makeOomAdjString(i, false));
        sb.append(' ');
        sb.append(com.android.server.am.ProcessList.makeProcStateString(i2));
        sb.append(' ');
        com.android.server.am.ProcessList.appendRamKb(sb, j);
        sb.append(": ");
        sb.append(str);
        if (j2 > 0) {
            sb.append(" (");
            sb.append(stringifyKBSize(j2));
            sb.append(" memtrack)");
        }
    }

    static void appendMemInfo(java.lang.StringBuilder sb, com.android.server.am.ProcessMemInfo processMemInfo) {
        appendBasicMemEntry(sb, processMemInfo.oomAdj, processMemInfo.procState, processMemInfo.pss, processMemInfo.memtrack, processMemInfo.name);
        sb.append(" (pid ");
        sb.append(processMemInfo.pid);
        sb.append(") ");
        sb.append(processMemInfo.adjType);
        sb.append('\n');
        if (processMemInfo.adjReason != null) {
            sb.append("                      ");
            sb.append(processMemInfo.adjReason);
            sb.append('\n');
        }
    }

    private static boolean scanArgs(java.lang.String[] strArr, java.lang.String str) {
        if (strArr != null) {
            for (java.lang.String str2 : strArr) {
                if (str.equals(str2)) {
                    return true;
                }
            }
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:16:0x005e  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0076  */
    /* JADX WARN: Removed duplicated region for block: B:22:0x0075 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void filterNonExportedComponents(final android.content.Intent intent, int i, final int i2, java.util.List list, com.android.server.compat.PlatformCompat platformCompat, java.lang.String str, java.lang.String str2) {
        boolean isChangeEnabledByUid;
        if (list == null || intent.getPackage() != null || intent.getComponent() != null || android.app.ActivityManager.canAccessUnexportedComponents(i)) {
            return;
        }
        final android.app.IUnsafeIntentStrictModeCallback iUnsafeIntentStrictModeCallback = this.mStrictModeCallbacks.get(i2);
        for (int size = list.size() - 1; size >= 0; size--) {
            if (list.get(size) instanceof android.content.pm.ResolveInfo) {
                android.content.pm.ResolveInfo resolveInfo = (android.content.pm.ResolveInfo) list.get(size);
                if (resolveInfo.getComponentInfo().exported) {
                    continue;
                } else {
                    resolveInfo.getComponentInfo().getComponentName().flattenToShortString();
                    if (iUnsafeIntentStrictModeCallback != null) {
                        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda14
                            @Override // java.lang.Runnable
                            public final void run() {
                                com.android.server.am.ActivityManagerService.this.lambda$filterNonExportedComponents$19(iUnsafeIntentStrictModeCallback, intent, i2);
                            }
                        });
                    }
                    isChangeEnabledByUid = platformCompat.isChangeEnabledByUid(IMPLICIT_INTENTS_ONLY_MATCH_EXPORTED_COMPONENTS, i);
                    com.android.server.am.ActivityManagerUtils.logUnsafeIntentEvent(2, i, intent, str2, isChangeEnabledByUid);
                    if (isChangeEnabledByUid) {
                        return;
                    }
                    list.remove(size);
                }
            } else {
                if (list.get(size) instanceof com.android.server.am.BroadcastFilter) {
                    if (((com.android.server.am.BroadcastFilter) list.get(size)).exported) {
                        continue;
                    }
                    if (iUnsafeIntentStrictModeCallback != null) {
                    }
                    isChangeEnabledByUid = platformCompat.isChangeEnabledByUid(IMPLICIT_INTENTS_ONLY_MATCH_EXPORTED_COMPONENTS, i);
                    com.android.server.am.ActivityManagerUtils.logUnsafeIntentEvent(2, i, intent, str2, isChangeEnabledByUid);
                    if (isChangeEnabledByUid) {
                    }
                } else {
                    continue;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$filterNonExportedComponents$19(android.app.IUnsafeIntentStrictModeCallback iUnsafeIntentStrictModeCallback, android.content.Intent intent, int i) {
        try {
            iUnsafeIntentStrictModeCallback.onImplicitIntentMatchedInternalComponent(intent.cloneFilter());
        } catch (android.os.RemoteException e) {
            this.mStrictModeCallbacks.remove(i);
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final boolean cleanUpApplicationRecordLocked(final com.android.server.am.ProcessRecord processRecord, int i, boolean z, boolean z2, int i2, boolean z3, boolean z4) {
        boolean onCleanupApplicationRecordLSP;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            if (i2 >= 0) {
                try {
                    removeLruProcessLocked(processRecord);
                    com.android.server.am.ProcessList.remove(i);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            onCleanupApplicationRecordLSP = processRecord.onCleanupApplicationRecordLSP(this.mProcessStats, z2, z4 || processRecord.isolated);
            this.mOomAdjuster.mCachedAppOptimizer.onCleanupApplicationRecordLocked(processRecord);
        }
        resetPriorityAfterProcLockedSection();
        this.mAppProfiler.onCleanupApplicationRecordLocked(processRecord);
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.onApplicationCleanupLocked(processRecord);
        }
        clearProcessForegroundLocked(processRecord);
        this.mServices.killServicesLocked(processRecord, z2);
        this.mPhantomProcessList.onAppDied(i);
        com.android.server.am.BackupRecord backupRecord = this.mBackupTargets.get(processRecord.userId);
        if (backupRecord != null && i == backupRecord.app.getPid()) {
            this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService.18
                @Override // java.lang.Runnable
                public void run() {
                    try {
                        android.app.backup.IBackupManager.Stub.asInterface(android.os.ServiceManager.getService(com.android.server.am.HostingRecord.HOSTING_TYPE_BACKUP)).agentDisconnectedForUser(processRecord.userId, processRecord.info.packageName);
                    } catch (android.os.RemoteException e) {
                    }
                }
            });
        }
        this.mProcessList.scheduleDispatchProcessDiedLocked(i, processRecord.info.uid);
        boolean handlePrecedingAppDiedLocked = this.mProcessList.handlePrecedingAppDiedLocked(processRecord);
        com.android.server.am.ProcessRecord processRecord2 = processRecord.mPredecessor;
        if (processRecord2 != null) {
            processRecord2.mSuccessor = null;
            processRecord2.mSuccessorStartRunnable = null;
            processRecord.mPredecessor = null;
        }
        if (z) {
            return false;
        }
        if (!processRecord.isPersistent() || processRecord.isolated) {
            if (!z3) {
                this.mProcessList.removeProcessNameLocked(processRecord.processName, processRecord.uid, processRecord);
            }
            this.mAtmInternal.clearHeavyWeightProcessIfEquals(processRecord.getWindowProcessController());
        } else if (!processRecord.isRemoved() && this.mPersistentStartingProcesses.indexOf(processRecord) < 0) {
            this.mPersistentStartingProcesses.add(processRecord);
            onCleanupApplicationRecordLSP = true;
        }
        this.mProcessesOnHold.remove(processRecord);
        this.mAtmInternal.onCleanUpApplicationRecord(processRecord.getWindowProcessController());
        this.mProcessList.noteProcessDiedLocked(processRecord);
        if (onCleanupApplicationRecordLSP && handlePrecedingAppDiedLocked && !processRecord.isolated) {
            if (i2 < 0) {
                com.android.server.am.ProcessList.remove(i);
            }
            this.mHandler.removeMessages(57, processRecord);
            this.mProcessList.addProcessNameLocked(processRecord);
            processRecord.setPendingStart(false);
            this.mProcessList.startProcessLocked(processRecord, new com.android.server.am.HostingRecord(com.android.server.am.HostingRecord.HOSTING_TYPE_RESTART, processRecord.processName), 0);
            return true;
        }
        if (i > 0 && i != MY_PID) {
            removePidLocked(i, processRecord);
            this.mHandler.removeMessages(20, processRecord);
            this.mBatteryStatsService.noteProcessFinish(processRecord.processName, processRecord.info.uid);
            if (processRecord.isolated) {
                this.mBatteryStatsService.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
            }
            processRecord.setPid(0);
        }
        return false;
    }

    public java.util.List<android.app.ActivityManager.RunningServiceInfo> getServices(int i, int i2) {
        java.util.List<android.app.ActivityManager.RunningServiceInfo> runningServiceInfoLocked;
        enforceNotIsolatedCaller("getServices");
        int callingUid = android.os.Binder.getCallingUid();
        boolean z = android.app.ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = this.mAtmInternal.isGetTasksAllowed("getServices", android.os.Binder.getCallingPid(), callingUid);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                runningServiceInfoLocked = this.mServices.getRunningServiceInfoLocked(i, i2, callingUid, isGetTasksAllowed, z);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceInfoLocked;
    }

    public android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName componentName) {
        android.app.PendingIntent runningServiceControlPanelLocked;
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        int callingUid = android.os.Binder.getCallingUid();
        int userId = android.os.UserHandle.getUserId(callingUid);
        if (componentName == null || getPackageManagerInternal().filterAppAccess(componentName.getPackageName(), callingUid, userId)) {
            return null;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                runningServiceControlPanelLocked = this.mServices.getRunningServiceControlPanelLocked(componentName);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceControlPanelLocked;
    }

    public void logFgsApiBegin(int i, int i2, int i3) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiBegin");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.logFgsApiBeginLocked(i, i2, i3);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void logFgsApiEnd(int i, int i2, int i3) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiEnd");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.logFgsApiEndLocked(i, i2, i3);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void logFgsApiStateChanged(int i, int i2, int i3, int i4) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiEvent");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.logFgsApiStateChangedLocked(i, i3, i4, i2);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public android.content.ComponentName startService(android.app.IApplicationThread iApplicationThread, android.content.Intent intent, java.lang.String str, boolean z, java.lang.String str2, java.lang.String str3, int i) throws android.os.TransactionTooLargeException {
        return startService(iApplicationThread, intent, str, z, str2, str3, i, false, -1, null, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public android.content.ComponentName startService(android.app.IApplicationThread iApplicationThread, android.content.Intent intent, java.lang.String str, boolean z, java.lang.String str2, java.lang.String str3, int i, boolean z2, int i2, java.lang.String str4, java.lang.String str5) throws android.os.TransactionTooLargeException {
        enforceNotIsolatedCaller("startService");
        enforceAllowedToStartOrBindServiceIfSdkSandbox(intent);
        if (intent != null) {
            if (intent.hasFileDescriptors()) {
                throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
            }
            intent.removeExtendedFlags(1);
        }
        if (str2 == null) {
            throw new java.lang.IllegalArgumentException("callingPackage cannot be null");
        }
        if (z2 && str5 == null) {
            throw new java.lang.IllegalArgumentException("No instance name provided for SDK sandbox process");
        }
        validateServiceInstanceName(str5);
        int callingPid = android.os.Binder.getCallingPid();
        int callingUid = android.os.Binder.getCallingUid();
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            if (android.os.Trace.isTagEnabled(64L)) {
                android.os.Trace.traceBegin(64L, "startService: intent=" + intent + ", caller=" + str2 + ", fgRequired=" + z);
            }
            boostPriorityForLockedSection();
            try {
                try {
                    synchronized (this) {
                        try {
                            android.content.ComponentName startServiceLocked = this.mServices.startServiceLocked(iApplicationThread, intent, str, callingPid, callingUid, z, str2, str3, i, z2, i2, str4, str5);
                            resetPriorityAfterLockedSection();
                            android.os.Trace.traceEnd(64L);
                            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                            return startServiceLocked;
                        } catch (java.lang.Throwable th) {
                            th = th;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (java.lang.Throwable th2) {
                    th = th2;
                }
            } catch (java.lang.Throwable th3) {
                th = th3;
                android.os.Trace.traceEnd(64L);
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th;
            }
        } catch (java.lang.Throwable th4) {
            th = th4;
        }
    }

    private void validateServiceInstanceName(java.lang.String str) {
        if (str != null && !str.matches("[a-zA-Z0-9_.]+")) {
            throw new java.lang.IllegalArgumentException("Illegal instanceName");
        }
    }

    public int stopService(android.app.IApplicationThread iApplicationThread, android.content.Intent intent, java.lang.String str, int i) {
        return stopService(iApplicationThread, intent, str, i, false, -1, null, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int stopService(android.app.IApplicationThread iApplicationThread, android.content.Intent intent, java.lang.String str, int i, boolean z, int i2, java.lang.String str2, java.lang.String str3) {
        int stopServiceLocked;
        enforceNotIsolatedCaller("stopService");
        if (intent != null && intent.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
        }
        try {
            if (android.os.Trace.isTagEnabled(64L)) {
                android.os.Trace.traceBegin(64L, "stopService: " + intent);
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    stopServiceLocked = this.mServices.stopServiceLocked(iApplicationThread, intent, str, i, z, i2, str2, str3);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            android.os.Trace.traceEnd(64L);
            return stopServiceLocked;
        } catch (java.lang.Throwable th2) {
            android.os.Trace.traceEnd(64L);
            throw th2;
        }
    }

    public android.os.IBinder peekService(android.content.Intent intent, java.lang.String str, java.lang.String str2) {
        android.os.IBinder peekServiceLocked;
        enforceNotIsolatedCaller("peekService");
        if (intent != null && intent.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
        }
        if (str2 == null) {
            throw new java.lang.IllegalArgumentException("callingPackage cannot be null");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                peekServiceLocked = this.mServices.peekServiceLocked(intent, str, str2);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return peekServiceLocked;
    }

    public boolean stopServiceToken(android.content.ComponentName componentName, android.os.IBinder iBinder, int i) {
        boolean stopServiceTokenLocked;
        java.lang.String str;
        try {
            if (android.os.Trace.isTagEnabled(64L)) {
                java.lang.StringBuilder sb = new java.lang.StringBuilder();
                sb.append("stopServiceToken: ");
                if (componentName != null) {
                    str = componentName.toShortString();
                } else {
                    str = "from " + android.os.Binder.getCallingPid();
                }
                sb.append(str);
                android.os.Trace.traceBegin(64L, sb.toString());
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    stopServiceTokenLocked = this.mServices.stopServiceTokenLocked(componentName, iBinder, i);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            android.os.Trace.traceEnd(64L);
            return stopServiceTokenLocked;
        } catch (java.lang.Throwable th2) {
            android.os.Trace.traceEnd(64L);
            throw th2;
        }
    }

    public void setServiceForeground(android.content.ComponentName componentName, android.os.IBinder iBinder, int i, android.app.Notification notification, int i2, int i3) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.setServiceForegroundLocked(componentName, iBinder, i, notification, i2, i3);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getForegroundServiceType(android.content.ComponentName componentName, android.os.IBinder iBinder) {
        int foregroundServiceTypeLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                foregroundServiceTypeLocked = this.mServices.getForegroundServiceTypeLocked(componentName, iBinder);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return foregroundServiceTypeLocked;
    }

    public boolean shouldServiceTimeOut(android.content.ComponentName componentName, android.os.IBinder iBinder) {
        boolean shouldServiceTimeOutLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                shouldServiceTimeOutLocked = this.mServices.shouldServiceTimeOutLocked(componentName, iBinder);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return shouldServiceTimeOutLocked;
    }

    public boolean hasServiceTimeLimitExceeded(android.content.ComponentName componentName, android.os.IBinder iBinder) {
        boolean hasServiceTimedOutLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                hasServiceTimedOutLocked = this.mServices.hasServiceTimedOutLocked(componentName, iBinder);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return hasServiceTimedOutLocked;
    }

    public int handleIncomingUser(int i, int i2, int i3, boolean z, boolean z2, java.lang.String str, java.lang.String str2) {
        return this.mUserController.handleIncomingUser(i, i2, i3, z, z2 ? 2 : 0, str, str2);
    }

    boolean isSingleton(java.lang.String str, android.content.pm.ApplicationInfo applicationInfo, java.lang.String str2, int i) {
        if (android.os.UserHandle.getAppId(applicationInfo.uid) >= 10000) {
            if ((i & 1073741824) != 0) {
                if (android.app.ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", applicationInfo.uid) == 0) {
                    return true;
                }
                java.lang.String str3 = "Permission Denial: Component " + new android.content.ComponentName(applicationInfo.packageName, str2).flattenToShortString() + " requests FLAG_SINGLE_USER, but app does not hold android.permission.INTERACT_ACROSS_USERS";
                android.util.Slog.w("ActivityManager", str3);
                throw new java.lang.SecurityException(str3);
            }
        } else {
            if ("system".equals(str)) {
                return true;
            }
            if ((i & 1073741824) != 0) {
                return android.os.UserHandle.isSameApp(applicationInfo.uid, 1001) || (applicationInfo.flags & 8) != 0;
            }
        }
        return false;
    }

    boolean isSystemUserOnly(int i) {
        return android.multiuser.Flags.enableSystemUserOnlyForServicesAndProviders() && (i & 536870912) != 0;
    }

    boolean isValidSingletonCall(int i, int i2) {
        int appId = android.os.UserHandle.getAppId(i2);
        return android.os.UserHandle.isSameApp(i, i2) || appId == 1000 || appId == 1001 || android.app.ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", i2) == 0;
    }

    public int bindService(android.app.IApplicationThread iApplicationThread, android.os.IBinder iBinder, android.content.Intent intent, java.lang.String str, android.app.IServiceConnection iServiceConnection, long j, java.lang.String str2, int i) throws android.os.TransactionTooLargeException {
        return bindServiceInstance(iApplicationThread, iBinder, intent, str, iServiceConnection, j, null, str2, i);
    }

    public int bindServiceInstance(android.app.IApplicationThread iApplicationThread, android.os.IBinder iBinder, android.content.Intent intent, java.lang.String str, android.app.IServiceConnection iServiceConnection, long j, java.lang.String str2, java.lang.String str3, int i) throws android.os.TransactionTooLargeException {
        return bindServiceInstance(iApplicationThread, iBinder, intent, str, iServiceConnection, j, str2, false, -1, null, null, str3, i);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int bindServiceInstance(android.app.IApplicationThread iApplicationThread, android.os.IBinder iBinder, android.content.Intent intent, java.lang.String str, android.app.IServiceConnection iServiceConnection, long j, java.lang.String str2, boolean z, int i, java.lang.String str3, android.app.IApplicationThread iApplicationThread2, java.lang.String str4, int i2) throws android.os.TransactionTooLargeException {
        long j2;
        enforceNotIsolatedCaller("bindService");
        enforceAllowedToStartOrBindServiceIfSdkSandbox(intent);
        if (intent != null) {
            if (intent.hasFileDescriptors()) {
                throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
            }
            intent.removeExtendedFlags(1);
        }
        if (str4 == null) {
            throw new java.lang.IllegalArgumentException("callingPackage cannot be null");
        }
        if (z && str2 == null) {
            throw new java.lang.IllegalArgumentException("No instance name provided for isolated process");
        }
        validateServiceInstanceName(str2);
        try {
            if (android.os.Trace.isTagEnabled(64L)) {
                android.content.ComponentName component = intent.getComponent();
                java.lang.StringBuilder sb = new java.lang.StringBuilder();
                sb.append("bindService:");
                sb.append(component != null ? component.toShortString() : intent.getAction());
                android.os.Trace.traceBegin(64L, sb.toString());
            }
            boostPriorityForLockedSection();
            try {
                synchronized (this) {
                    try {
                        int bindServiceLocked = this.mServices.bindServiceLocked(iApplicationThread, iBinder, intent, str, iServiceConnection, j, str2, z, i, str3, iApplicationThread2, str4, i2);
                        resetPriorityAfterLockedSection();
                        android.os.Trace.traceEnd(64L);
                        return bindServiceLocked;
                    } catch (java.lang.Throwable th) {
                        th = th;
                        j2 = 64;
                        try {
                            resetPriorityAfterLockedSection();
                            throw th;
                        } catch (java.lang.Throwable th2) {
                            th = th2;
                            android.os.Trace.traceEnd(j2);
                            throw th;
                        }
                    }
                }
            } catch (java.lang.Throwable th3) {
                th = th3;
            }
        } catch (java.lang.Throwable th4) {
            th = th4;
            j2 = 64;
        }
    }

    public void updateServiceGroup(android.app.IServiceConnection iServiceConnection, int i, int i2) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.updateServiceGroupLocked(iServiceConnection, i, i2);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean unbindService(android.app.IServiceConnection iServiceConnection) {
        boolean unbindServiceLocked;
        try {
            if (android.os.Trace.isTagEnabled(64L)) {
                android.os.Trace.traceBegin(64L, "unbindService");
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    unbindServiceLocked = this.mServices.unbindServiceLocked(iServiceConnection);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            android.os.Trace.traceEnd(64L);
            return unbindServiceLocked;
        } catch (java.lang.Throwable th) {
            android.os.Trace.traceEnd(64L);
            throw th;
        }
    }

    public void publishService(android.os.IBinder iBinder, android.content.Intent intent, android.os.IBinder iBinder2) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!(iBinder instanceof com.android.server.am.ServiceRecord)) {
                    throw new java.lang.IllegalArgumentException("Invalid service token");
                }
                this.mServices.publishServiceLocked((com.android.server.am.ServiceRecord) iBinder, intent, iBinder2);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void unbindFinished(android.os.IBinder iBinder, android.content.Intent intent, boolean z) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.unbindFinishedLocked((com.android.server.am.ServiceRecord) iBinder, intent, z);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void serviceDoneExecuting(android.os.IBinder iBinder, int i, int i2, int i3, android.content.Intent intent) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!(iBinder instanceof com.android.server.am.ServiceRecord)) {
                    android.util.Slog.e("ActivityManager", "serviceDoneExecuting: Invalid service token=" + iBinder);
                    throw new java.lang.IllegalArgumentException("Invalid service token");
                }
                this.mServices.serviceDoneExecutingLocked((com.android.server.am.ServiceRecord) iBinder, i, i2, i3, false, intent);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean bindBackupAgent(java.lang.String str, int i, int i2, int i3) {
        android.content.pm.ApplicationInfo applicationInfo;
        android.content.ComponentName componentName;
        android.content.pm.ApplicationInfo applicationInfo2;
        boolean z;
        boolean z2;
        com.android.server.am.ProcessRecord processRecord;
        boolean z3;
        int i4;
        long elapsedRealtimeNanos = android.os.SystemClock.elapsedRealtimeNanos();
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "bindBackupAgent");
        int i5 = com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME.equals(str) || getPackageManagerInternal().getSystemUiServiceComponent().getPackageName().equals(str) ? 0 : i2;
        android.content.pm.IPackageManager packageManager = android.app.AppGlobals.getPackageManager();
        try {
            applicationInfo = packageManager.getApplicationInfo(str, 1024L, i5);
        } catch (android.os.RemoteException e) {
            applicationInfo = null;
        }
        if (applicationInfo == null) {
            android.util.Slog.w("ActivityManager", "Unable to bind backup agent for " + str);
            return false;
        }
        if (applicationInfo.backupAgentName != null) {
            android.content.ComponentName componentName2 = new android.content.ComponentName(applicationInfo.packageName, applicationInfo.backupAgentName);
            try {
                i4 = packageManager.getComponentEnabledSetting(componentName2, i5);
            } catch (android.os.RemoteException e2) {
                i4 = 0;
            }
            switch (i4) {
                case 2:
                case 3:
                case 4:
                    android.util.Slog.w("ActivityManager", "Unable to bind backup agent for " + componentName2 + ", the backup agent component is disabled.");
                    return false;
            }
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                try {
                    this.mPackageManagerInt.setPackageStoppedState(applicationInfo.packageName, false, android.os.UserHandle.getUserId(applicationInfo.uid));
                } catch (java.lang.IllegalArgumentException e3) {
                    android.util.Slog.w("ActivityManager", "Failed trying to unstop package " + applicationInfo.packageName + ": " + e3);
                }
                com.android.server.am.BackupRecord backupRecord = new com.android.server.am.BackupRecord(applicationInfo, i, i2, i3);
                if (i == 0 || i == 2) {
                    componentName = new android.content.ComponentName(applicationInfo.packageName, applicationInfo.backupAgentName);
                } else {
                    componentName = new android.content.ComponentName(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME, "FullBackupAgent");
                }
                com.android.server.am.ProcessRecord processRecordLocked = getProcessRecordLocked(applicationInfo.processName, applicationInfo.uid);
                boolean z4 = processRecordLocked != null;
                if (z4) {
                    applicationInfo2 = applicationInfo;
                    z = false;
                    z2 = true;
                    processRecord = processRecordLocked;
                } else {
                    applicationInfo2 = applicationInfo;
                    z = false;
                    z2 = true;
                    processRecord = startProcessLocked(applicationInfo.processName, applicationInfo, false, 0, new com.android.server.am.HostingRecord(com.android.server.am.HostingRecord.HOSTING_TYPE_BACKUP, componentName), 4, false, false);
                }
                if (processRecord == null) {
                    android.util.Slog.e("ActivityManager", "Unable to start backup agent process " + backupRecord);
                    resetPriorityAfterLockedSection();
                    return z;
                }
                this.mProcessList.getAppStartInfoTracker().handleProcessBackupStart(elapsedRealtimeNanos, processRecord, backupRecord, !z4 ? z2 : z);
                android.content.pm.ApplicationInfo applicationInfo3 = applicationInfo2;
                if (android.os.UserHandle.isApp(applicationInfo3.uid) && i == z2) {
                    processRecord.setInFullBackup(z2);
                }
                backupRecord.app = processRecord;
                com.android.server.am.BackupRecord backupRecord2 = this.mBackupTargets.get(i2);
                int i6 = backupRecord2 != null ? backupRecord2.appInfo.uid : -1;
                int i7 = processRecord.isInFullBackup() ? backupRecord.appInfo.uid : -1;
                this.mBackupTargets.put(i2, backupRecord);
                processRecord.mProfile.addHostingComponentType(4);
                updateOomAdjLocked(processRecord, 15);
                android.app.IApplicationThread thread = processRecord.getThread();
                if (thread == null) {
                    z3 = z2;
                } else {
                    z3 = z2;
                    try {
                        thread.scheduleCreateBackupAgent(applicationInfo3, i, i2, i3);
                    } catch (android.os.RemoteException e4) {
                    }
                }
                resetPriorityAfterLockedSection();
                com.android.server.job.JobSchedulerInternal jobSchedulerInternal = (com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class);
                if (i6 != -1) {
                    jobSchedulerInternal.removeBackingUpUid(i6);
                }
                if (i7 != -1) {
                    jobSchedulerInternal.addBackingUpUid(i7);
                }
                return z3;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void clearPendingBackup(int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                int indexOfKey = this.mBackupTargets.indexOfKey(i);
                if (indexOfKey >= 0) {
                    com.android.server.am.BackupRecord valueAt = this.mBackupTargets.valueAt(indexOfKey);
                    if (valueAt != null && valueAt.app != null) {
                        valueAt.app.mProfile.clearHostingComponentType(4);
                    }
                    this.mBackupTargets.removeAt(indexOfKey);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        ((com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class)).clearAllBackingUpUids();
    }

    public void backupAgentCreated(java.lang.String str, android.os.IBinder iBinder, int i) {
        int callingUid = android.os.Binder.getCallingUid();
        enforceCallingPackage(str, callingUid);
        int handleIncomingUser = this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), callingUid, i, false, 2, "backupAgentCreated", null);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.BackupRecord backupRecord = this.mBackupTargets.get(handleIncomingUser);
                if (!str.equals(backupRecord == null ? null : backupRecord.appInfo.packageName)) {
                    android.util.Slog.e("ActivityManager", "Backup agent created for " + str + " but not requested!");
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    try {
                        android.app.backup.IBackupManager.Stub.asInterface(android.os.ServiceManager.getService(com.android.server.am.HostingRecord.HOSTING_TYPE_BACKUP)).agentConnectedForUser(handleIncomingUser, str, iBinder);
                    } catch (android.os.RemoteException e) {
                    } catch (java.lang.Exception e2) {
                        android.util.Slog.w("ActivityManager", "Exception trying to deliver BackupAgent binding: ");
                        e2.printStackTrace();
                    }
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void unbindBackupAgent(android.content.pm.ApplicationInfo applicationInfo) {
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "unbindBackupAgent");
        if (applicationInfo == null) {
            android.util.Slog.w("ActivityManager", "unbind backup agent for null app");
            return;
        }
        int userId = android.os.UserHandle.getUserId(applicationInfo.uid);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.BackupRecord backupRecord = this.mBackupTargets.get(userId);
                java.lang.String str = backupRecord == null ? null : backupRecord.appInfo.packageName;
                try {
                    if (str == null) {
                        android.util.Slog.w("ActivityManager", "Unbinding backup agent with no active backup");
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    if (!str.equals(applicationInfo.packageName)) {
                        android.util.Slog.e("ActivityManager", "Unbind of " + applicationInfo + " but is not the current backup target");
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    com.android.server.am.ProcessRecord processRecord = backupRecord.app;
                    updateOomAdjLocked(processRecord, 15);
                    processRecord.setInFullBackup(false);
                    processRecord.mProfile.clearHostingComponentType(4);
                    int i = backupRecord.appInfo.uid;
                    android.app.IApplicationThread thread = processRecord.getThread();
                    if (thread != null) {
                        try {
                            thread.scheduleDestroyBackupAgent(applicationInfo, userId);
                        } catch (java.lang.Exception e) {
                            android.util.Slog.e("ActivityManager", "Exception when unbinding backup agent:");
                            e.printStackTrace();
                        }
                    }
                    resetPriorityAfterLockedSection();
                    if (i != -1) {
                        ((com.android.server.job.JobSchedulerInternal) com.android.server.LocalServices.getService(com.android.server.job.JobSchedulerInternal.class)).removeBackingUpUid(i);
                    }
                } finally {
                    this.mBackupTargets.delete(userId);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    private boolean isInstantApp(com.android.server.am.ProcessRecord processRecord, @android.annotation.Nullable java.lang.String str, int i) {
        if (android.os.UserHandle.getAppId(i) < 10000) {
            return false;
        }
        if (processRecord != null) {
            return processRecord.info.isInstantApp();
        }
        android.content.pm.IPackageManager packageManager = android.app.AppGlobals.getPackageManager();
        if (str == null) {
            try {
                java.lang.String[] packagesForUid = packageManager.getPackagesForUid(i);
                if (packagesForUid == null || packagesForUid.length == 0) {
                    throw new java.lang.IllegalArgumentException("Unable to determine caller package name");
                }
                str = packagesForUid[0];
            } catch (android.os.RemoteException e) {
                android.util.Slog.e("ActivityManager", "Error looking up if " + str + " is an instant app.", e);
                return true;
            }
        }
        this.mAppOpsService.checkPackage(i, str);
        return packageManager.isInstantApp(str, android.os.UserHandle.getUserId(i));
    }

    @java.lang.Deprecated
    public android.content.Intent registerReceiver(android.app.IApplicationThread iApplicationThread, java.lang.String str, android.content.IIntentReceiver iIntentReceiver, android.content.IntentFilter intentFilter, java.lang.String str2, int i, int i2) {
        return registerReceiverWithFeature(iApplicationThread, str, null, null, iIntentReceiver, intentFilter, str2, i, i2);
    }

    /* JADX WARN: Code restructure failed: missing block: B:51:0x010b, code lost:
    
        r60.setPriority(1000);
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread iApplicationThread, java.lang.String str, java.lang.String str2, java.lang.String str3, android.content.IIntentReceiver iIntentReceiver, android.content.IntentFilter intentFilter, java.lang.String str4, int i, int i2) {
        java.util.ArrayList arrayList;
        java.util.Iterator<java.lang.String> it;
        boolean z;
        java.util.ArrayList arrayList2;
        java.util.ArrayList arrayList3;
        int i3;
        android.content.Intent intent;
        android.content.Intent intent2;
        int i4;
        android.content.IntentFilter intentFilter2;
        java.lang.String str5;
        java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast> arrayList4;
        java.util.ArrayList arrayList5;
        int i5 = i2;
        enforceNotIsolatedCaller("registerReceiver");
        int i6 = i5 & 1;
        boolean z2 = i6 != 0;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                com.android.server.am.ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    android.util.Slog.w("ActivityManager", "registerReceiverWithFeature: no app for " + iApplicationThread);
                    resetPriorityAfterProcLockedSection();
                    return null;
                }
                if (recordForAppLOSP.info.uid != 1000 && !recordForAppLOSP.getPkgList().containsKey(str) && !com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME.equals(str)) {
                    throw new java.lang.SecurityException("Given caller package " + str + " is not running in process " + recordForAppLOSP);
                }
                int i7 = recordForAppLOSP.info.uid;
                int pid = recordForAppLOSP.getPid();
                boolean isInstantApp = isInstantApp(recordForAppLOSP, str, i7);
                resetPriorityAfterProcLockedSection();
                int handleIncomingUser = this.mUserController.handleIncomingUser(pid, i7, i, true, 2, "registerReceiver", str);
                if (android.os.UserHandle.isCore(i7)) {
                    int priority = intentFilter.getPriority();
                    if (!(priority >= 1000 || priority <= -1000)) {
                        int countActions = intentFilter.countActions();
                        for (int i8 = 0; i8 < countActions; i8++) {
                            java.lang.String action = intentFilter.getAction(i8);
                            if (!action.startsWith("android.intent.action.USER_") && !action.startsWith("android.intent.action.PACKAGE_") && !action.startsWith("android.intent.action.UID_") && !action.startsWith("android.intent.action.EXTERNAL_") && !action.startsWith("android.bluetooth.") && !action.equals("android.intent.action.ACTION_SHUTDOWN")) {
                            }
                        }
                    }
                }
                java.util.Iterator<java.lang.String> actionsIterator = intentFilter.actionsIterator();
                if (actionsIterator != null) {
                    arrayList = null;
                    it = actionsIterator;
                } else {
                    java.util.ArrayList arrayList6 = new java.util.ArrayList(1);
                    arrayList = null;
                    arrayList6.add(null);
                    it = arrayList6.iterator();
                }
                int[] iArr = {-1, android.os.UserHandle.getUserId(i7)};
                synchronized (this.mStickyBroadcasts) {
                    z = true;
                    arrayList2 = arrayList;
                    while (it.hasNext()) {
                        try {
                            java.lang.String next = it.next();
                            java.util.ArrayList arrayList7 = arrayList2;
                            for (int i9 = 0; i9 < 2; i9++) {
                                android.util.ArrayMap<java.lang.String, java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast>> arrayMap = this.mStickyBroadcasts.get(iArr[i9]);
                                if (arrayMap != null && (arrayList4 = arrayMap.get(next)) != null) {
                                    if (arrayList7 != null) {
                                        arrayList5 = arrayList7;
                                    } else {
                                        arrayList5 = new java.util.ArrayList();
                                    }
                                    arrayList5.addAll(arrayList4);
                                    arrayList7 = arrayList5;
                                }
                            }
                            if (z) {
                                try {
                                    z &= android.app.AppGlobals.getPackageManager().isProtectedBroadcast(next);
                                } catch (android.os.RemoteException e) {
                                    android.util.Slog.w("ActivityManager", "Remote exception", e);
                                    z = false;
                                }
                            }
                            arrayList2 = arrayList7;
                        } finally {
                        }
                    }
                }
                if (android.os.Process.isSdkSandboxUid(android.os.Binder.getCallingUid())) {
                    com.android.server.sdksandbox.SdkSandboxManagerLocal sdkSandboxManagerLocal = (com.android.server.sdksandbox.SdkSandboxManagerLocal) com.android.server.LocalManagerRegistry.getManager(com.android.server.sdksandbox.SdkSandboxManagerLocal.class);
                    if (sdkSandboxManagerLocal == null) {
                        throw new java.lang.IllegalStateException("SdkSandboxManagerLocal not found when checking whether SDK sandbox uid can register to broadcast receivers.");
                    }
                    if (!sdkSandboxManagerLocal.canRegisterBroadcastReceiver(intentFilter, i5, z)) {
                        throw new java.lang.SecurityException("SDK sandbox not allowed to register receiver with the given IntentFilter: " + intentFilter.toLongString());
                    }
                }
                boolean z3 = (i5 & 6) != 0;
                if ((i5 & 2) != 0 && (i5 & 4) != 0) {
                    throw new java.lang.IllegalArgumentException("Receiver can't specify both RECEIVER_EXPORTED and RECEIVER_NOT_EXPORTEDflag");
                }
                boolean isChangeEnabled = android.app.compat.CompatChanges.isChangeEnabled(DYNAMIC_RECEIVER_EXPLICIT_EXPORT_REQUIRED, i7);
                if (((i6 == 0 || (i5 & 4) == 0) ? false : true) && isChangeEnabled) {
                    throw new java.lang.IllegalArgumentException("Receiver can't specify both RECEIVER_VISIBLE_TO_INSTANT_APPS and RECEIVER_NOT_EXPORTED flag");
                }
                if (!z) {
                    if (iIntentReceiver == null && !z3) {
                        i5 |= 2;
                    } else {
                        if (isChangeEnabled && !z3) {
                            throw new java.lang.SecurityException(str + ": One of RECEIVER_EXPORTED or RECEIVER_NOT_EXPORTED should be specified when a receiver isn't being registered exclusively for system broadcasts");
                        }
                        if (!isChangeEnabled && (i5 & 4) == 0) {
                            i5 |= 2;
                        }
                    }
                } else if ((i5 & 4) == 0) {
                    i5 |= 2;
                }
                boolean z4 = (i5 & 2) != 0;
                if (arrayList2 == null) {
                    arrayList3 = null;
                } else {
                    android.content.ContentResolver contentResolver = this.mContext.getContentResolver();
                    int size = arrayList2.size();
                    java.util.ArrayList arrayList8 = null;
                    for (int i10 = 0; i10 < size; i10++) {
                        com.android.server.am.ActivityManagerService.StickyBroadcast stickyBroadcast = (com.android.server.am.ActivityManagerService.StickyBroadcast) arrayList2.get(i10);
                        android.content.Intent intent3 = stickyBroadcast.intent;
                        if ((!isInstantApp || (intent3.getFlags() & 2097152) != 0) && intentFilter.match(contentResolver, intent3, true, "ActivityManager") >= 0) {
                            if (arrayList8 == null) {
                                arrayList8 = new java.util.ArrayList();
                            }
                            arrayList8.add(stickyBroadcast);
                        }
                    }
                    arrayList3 = arrayList8;
                }
                if (arrayList3 != null) {
                    i3 = 0;
                    intent = ((com.android.server.am.ActivityManagerService.StickyBroadcast) arrayList3.get(0)).intent;
                } else {
                    i3 = 0;
                    intent = null;
                }
                if (iIntentReceiver == null) {
                    return intent;
                }
                if (pid != android.os.Process.myPid() && (intentFilter.hasAction("com.android.server.net.action.SNOOZE_WARNING") || intentFilter.hasAction("com.android.server.net.action.SNOOZE_RAPID"))) {
                    android.util.EventLog.writeEvent(1397638484, "177931370", java.lang.Integer.valueOf(i7), "");
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        android.app.IApplicationThread thread = recordForAppLOSP.getThread();
                        if (thread == null) {
                            intent2 = null;
                        } else {
                            if (thread.asBinder() == iApplicationThread.asBinder()) {
                                com.android.server.am.ReceiverList receiverList = this.mRegisteredReceivers.get(iIntentReceiver.asBinder());
                                if (receiverList == null) {
                                    i4 = i3;
                                    intentFilter2 = intentFilter;
                                    str5 = str;
                                    com.android.server.am.ReceiverList receiverList2 = new com.android.server.am.ReceiverList(this, recordForAppLOSP, pid, i7, handleIncomingUser, iIntentReceiver);
                                    if (receiverList2.app != null) {
                                        int numberOfReceivers = receiverList2.app.mReceivers.numberOfReceivers();
                                        if (numberOfReceivers >= 1000) {
                                            throw new java.lang.IllegalStateException("Too many receivers, total of " + numberOfReceivers + ", registered for pid: " + receiverList2.pid + ", callerPackage: " + str5);
                                        }
                                        receiverList2.app.mReceivers.addReceiver(receiverList2);
                                    } else {
                                        try {
                                            iIntentReceiver.asBinder().linkToDeath(receiverList2, i4);
                                            receiverList2.linkedToDeath = true;
                                        } catch (android.os.RemoteException e2) {
                                            resetPriorityAfterLockedSection();
                                            return intent;
                                        }
                                    }
                                    this.mRegisteredReceivers.put(iIntentReceiver.asBinder(), receiverList2);
                                    receiverList = receiverList2;
                                } else {
                                    i4 = i3;
                                    intentFilter2 = intentFilter;
                                    str5 = str;
                                    if (receiverList.uid != i7) {
                                        throw new java.lang.IllegalArgumentException("Receiver requested to register for uid " + i7 + " was previously registered for uid " + receiverList.uid + " callerPackage is " + str5);
                                    }
                                    if (receiverList.pid != pid) {
                                        throw new java.lang.IllegalArgumentException("Receiver requested to register for pid " + pid + " was previously registered for pid " + receiverList.pid + " callerPackage is " + str5);
                                    }
                                    if (receiverList.userId != handleIncomingUser) {
                                        throw new java.lang.IllegalArgumentException("Receiver requested to register for user " + handleIncomingUser + " was previously registered for user " + receiverList.userId + " callerPackage is " + str5);
                                    }
                                }
                                java.lang.String str6 = str5;
                                android.content.IntentFilter intentFilter3 = intentFilter2;
                                com.android.server.am.BroadcastFilter broadcastFilter = new com.android.server.am.BroadcastFilter(intentFilter, receiverList, str, str2, str3, str4, i7, handleIncomingUser, isInstantApp, z2, z4);
                                if (receiverList.containsFilter(intentFilter3)) {
                                    android.util.Slog.w("ActivityManager", "Receiver with filter " + intentFilter3 + " already registered for pid " + receiverList.pid + ", callerPackage is " + str6);
                                } else {
                                    receiverList.add(broadcastFilter);
                                    if (!broadcastFilter.debugCheck()) {
                                        android.util.Slog.w("ActivityManager", "==> For Dynamic broadcast");
                                    }
                                    this.mReceiverResolver.addFilter(getPackageManagerInternal().snapshot(), broadcastFilter);
                                }
                                if (arrayList3 != null) {
                                    java.util.ArrayList arrayList9 = new java.util.ArrayList();
                                    arrayList9.add(broadcastFilter);
                                    int size2 = arrayList3.size();
                                    android.content.Intent intent4 = null;
                                    for (int i11 = i4; i11 < size2; i11++) {
                                        com.android.server.am.ActivityManagerService.StickyBroadcast stickyBroadcast2 = (com.android.server.am.ActivityManagerService.StickyBroadcast) arrayList3.get(i11);
                                        int i12 = ((com.android.server.am.ActivityManagerService.StickyBroadcast) arrayList3.get(i11)).originalCallingUid;
                                        if (intent4 == null && (z4 || i12 == i7 || android.app.ActivityManager.canAccessUnexportedComponents(i12))) {
                                            intent4 = stickyBroadcast2.intent;
                                        }
                                        com.android.server.am.BroadcastQueue broadcastQueueForIntent = broadcastQueueForIntent(stickyBroadcast2.intent);
                                        broadcastQueueForIntent.enqueueBroadcastLocked(new com.android.server.am.BroadcastRecord(broadcastQueueForIntent, stickyBroadcast2.intent, null, null, null, -1, -1, false, null, null, null, null, -1, android.app.BroadcastOptions.makeWithDeferUntilActive(stickyBroadcast2.deferUntilActive), arrayList9, null, null, 0, null, null, false, true, true, -1, i12, android.app.BackgroundStartPrivileges.NONE, false, null, stickyBroadcast2.originalCallingAppProcessState));
                                    }
                                    intent = intent4;
                                }
                                resetPriorityAfterLockedSection();
                                return intent;
                            }
                            intent2 = null;
                        }
                        resetPriorityAfterLockedSection();
                        return intent2;
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public void unregisterReceiver(android.content.IIntentReceiver iIntentReceiver) {
        boolean z;
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    com.android.server.am.ReceiverList receiverList = this.mRegisteredReceivers.get(iIntentReceiver.asBinder());
                    if (receiverList != null) {
                        com.android.server.am.BroadcastRecord broadcastRecord = receiverList.curBroadcast;
                        z = broadcastRecord != null && broadcastRecord.queue.finishReceiverLocked(receiverList.app, broadcastRecord.resultCode, broadcastRecord.resultData, broadcastRecord.resultExtras, broadcastRecord.resultAbort, false);
                        if (receiverList.app != null) {
                            receiverList.app.mReceivers.removeReceiver(receiverList);
                        }
                        removeReceiverLocked(receiverList);
                        if (receiverList.linkedToDeath) {
                            receiverList.linkedToDeath = false;
                            receiverList.receiver.asBinder().unlinkToDeath(receiverList, 0);
                        }
                    } else {
                        z = false;
                    }
                    if (!z) {
                        resetPriorityAfterLockedSection();
                    } else {
                        trimApplicationsLocked(false, 2);
                        resetPriorityAfterLockedSection();
                    }
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    void removeReceiverLocked(com.android.server.am.ReceiverList receiverList) {
        this.mRegisteredReceivers.remove(receiverList.receiver.asBinder());
        for (int size = receiverList.size() - 1; size >= 0; size--) {
            this.mReceiverResolver.removeFilter(receiverList.get(size));
        }
    }

    private final void sendPackageBroadcastLocked(int i, java.lang.String[] strArr, int i2) {
        this.mProcessList.sendPackageBroadcastLocked(i, strArr, i2);
    }

    private java.util.List<android.content.pm.ResolveInfo> collectReceiverComponents(android.content.Intent intent, java.lang.String str, int i, int[] iArr, int[] iArr2) {
        java.util.List<android.content.pm.ResolveInfo> list;
        java.util.List<android.content.pm.ResolveInfo> list2;
        java.util.List<android.content.pm.ResolveInfo> list3 = null;
        boolean z = false;
        java.util.HashSet hashSet = null;
        for (int i2 : iArr) {
            if (i != 2000 || !this.mUserController.hasUserRestriction("no_debugging_features", i2)) {
                java.util.List<android.content.pm.ResolveInfo> queryIntentReceivers = this.mPackageManagerInt.queryIntentReceivers(intent, str, 268436480L, i, i2, true);
                if (i2 != 0 && queryIntentReceivers != null) {
                    int i3 = 0;
                    while (i3 < queryIntentReceivers.size()) {
                        if ((queryIntentReceivers.get(i3).activityInfo.flags & 536870912) != 0) {
                            queryIntentReceivers.remove(i3);
                            i3--;
                        }
                        i3++;
                    }
                }
                if (queryIntentReceivers == null) {
                    list = queryIntentReceivers;
                } else {
                    int size = queryIntentReceivers.size() - 1;
                    while (size >= 0) {
                        int i4 = size;
                        java.util.List<android.content.pm.ResolveInfo> list4 = queryIntentReceivers;
                        com.android.server.am.ComponentAliasResolver.Resolution<android.content.pm.ResolveInfo> resolveReceiver = this.mComponentAliasResolver.resolveReceiver(intent, queryIntentReceivers.get(size), str, 268436480L, i2, i, true);
                        if (resolveReceiver == null) {
                            list4.remove(i4);
                        } else if (resolveReceiver.isAlias()) {
                            list4.set(i4, resolveReceiver.getTarget());
                        }
                        size = i4 - 1;
                        queryIntentReceivers = list4;
                    }
                    list = queryIntentReceivers;
                }
                if (list != null && list.size() == 0) {
                    list2 = null;
                } else {
                    list2 = list;
                }
                if (list3 == null) {
                    list3 = list2;
                } else if (list2 != null) {
                    if (!z) {
                        for (int i5 = 0; i5 < list3.size(); i5++) {
                            android.content.pm.ResolveInfo resolveInfo = list3.get(i5);
                            if ((resolveInfo.activityInfo.flags & 1073741824) != 0) {
                                android.content.ComponentName componentName = new android.content.ComponentName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name);
                                if (hashSet == null) {
                                    hashSet = new java.util.HashSet();
                                }
                                hashSet.add(componentName);
                            }
                        }
                        z = true;
                    }
                    for (int i6 = 0; i6 < list2.size(); i6++) {
                        android.content.pm.ResolveInfo resolveInfo2 = list2.get(i6);
                        if ((resolveInfo2.activityInfo.flags & 1073741824) != 0) {
                            android.content.ComponentName componentName2 = new android.content.ComponentName(resolveInfo2.activityInfo.packageName, resolveInfo2.activityInfo.name);
                            if (hashSet == null) {
                                hashSet = new java.util.HashSet();
                            }
                            if (!hashSet.contains(componentName2)) {
                                hashSet.add(componentName2);
                                list3.add(resolveInfo2);
                            }
                        } else {
                            list3.add(resolveInfo2);
                        }
                    }
                }
            }
        }
        if (list3 != null && iArr2 != null) {
            for (int size2 = list3.size() - 1; size2 >= 0; size2--) {
                int appId = android.os.UserHandle.getAppId(list3.get(size2).activityInfo.applicationInfo.uid);
                if (appId >= 10000 && java.util.Arrays.binarySearch(iArr2, appId) < 0) {
                    list3.remove(size2);
                }
            }
        }
        return list3;
    }

    private void checkBroadcastFromSystem(android.content.Intent intent, com.android.server.am.ProcessRecord processRecord, java.lang.String str, int i, boolean z, java.util.List list) {
        if ((intent.getFlags() & 4194304) != 0) {
            return;
        }
        java.lang.String action = intent.getAction();
        if (z || "android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(action) || "com.android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(action) || "android.intent.action.MEDIA_BUTTON".equals(action) || "android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(action) || "com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(action) || "android.intent.action.MASTER_CLEAR".equals(action) || "android.intent.action.FACTORY_RESET".equals(action) || "android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action) || "com.android.omadm.service.CONFIGURATION_UPDATE".equals(action) || "android.text.style.SUGGESTION_PICKED".equals(action) || "android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION".equals(action) || "android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION".equals(action)) {
            return;
        }
        if (intent.getPackage() != null || intent.getComponent() != null) {
            if (list == null || list.size() == 0) {
                return;
            }
            boolean z2 = true;
            int size = list.size() - 1;
            while (true) {
                if (size < 0) {
                    break;
                }
                java.lang.Object obj = list.get(size);
                if (obj instanceof android.content.pm.ResolveInfo) {
                    android.content.pm.ResolveInfo resolveInfo = (android.content.pm.ResolveInfo) obj;
                    if (resolveInfo.activityInfo.exported && resolveInfo.activityInfo.permission == null) {
                        z2 = false;
                        break;
                    }
                    size--;
                } else {
                    com.android.server.am.BroadcastFilter broadcastFilter = (com.android.server.am.BroadcastFilter) obj;
                    if (broadcastFilter.exported && broadcastFilter.requiredPermission == null) {
                        z2 = false;
                        break;
                    }
                    size--;
                }
            }
            if (z2) {
                return;
            }
        }
        if (processRecord != null) {
            android.util.Log.wtf("ActivityManager", "Sending non-protected broadcast " + action + " from system " + processRecord.toShortString() + " pkg " + str, new java.lang.Throwable());
            return;
        }
        android.util.Log.wtf("ActivityManager", "Sending non-protected broadcast " + action + " from system uid " + android.os.UserHandle.formatUid(i) + " pkg " + str, new java.lang.Throwable());
    }

    void enforceBroadcastOptionPermissionsInternal(@android.annotation.Nullable android.os.Bundle bundle, int i) {
        enforceBroadcastOptionPermissionsInternal(android.app.BroadcastOptions.fromBundleNullable(bundle), i);
    }

    void enforceBroadcastOptionPermissionsInternal(@android.annotation.Nullable android.app.BroadcastOptions broadcastOptions, int i) {
        if (broadcastOptions != null && i != 1000) {
            if (broadcastOptions.isAlarmBroadcast()) {
                throw new java.lang.SecurityException("Non-system callers may not flag broadcasts as alarm");
            }
            if (broadcastOptions.isInteractive()) {
                enforceCallingPermission("android.permission.BROADCAST_OPTION_INTERACTIVE", "setInteractive");
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final int broadcastIntentLocked(com.android.server.am.ProcessRecord processRecord, java.lang.String str, java.lang.String str2, android.content.Intent intent, java.lang.String str3, android.content.IIntentReceiver iIntentReceiver, int i, java.lang.String str4, android.os.Bundle bundle, java.lang.String[] strArr, java.lang.String[] strArr2, java.lang.String[] strArr3, int i2, android.os.Bundle bundle2, boolean z, boolean z2, int i3, int i4, int i5, int i6, int i7) {
        return broadcastIntentLocked(processRecord, str, str2, intent, str3, null, iIntentReceiver, i, str4, bundle, strArr, strArr2, strArr3, i2, bundle2, z, z2, i3, i4, i5, i6, i7, android.app.BackgroundStartPrivileges.NONE, null, null);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final int broadcastIntentLocked(com.android.server.am.ProcessRecord processRecord, java.lang.String str, @android.annotation.Nullable java.lang.String str2, android.content.Intent intent, java.lang.String str3, com.android.server.am.ProcessRecord processRecord2, android.content.IIntentReceiver iIntentReceiver, int i, java.lang.String str4, android.os.Bundle bundle, java.lang.String[] strArr, java.lang.String[] strArr2, java.lang.String[] strArr3, int i2, android.os.Bundle bundle2, boolean z, boolean z2, int i3, int i4, int i5, int i6, int i7, android.app.BackgroundStartPrivileges backgroundStartPrivileges, @android.annotation.Nullable int[] iArr, @android.annotation.Nullable java.util.function.BiFunction<java.lang.Integer, android.os.Bundle, android.os.Bundle> biFunction) {
        int traceBegin = com.android.server.am.BroadcastQueue.traceBegin("broadcastIntentLockedTraced");
        int broadcastIntentLockedTraced = broadcastIntentLockedTraced(processRecord, str, str2, intent, str3, processRecord2, iIntentReceiver, i, str4, bundle, strArr, strArr2, strArr3, i2, android.app.BroadcastOptions.fromBundleNullable(bundle2), z, z2, i3, i4, i5, i6, i7, backgroundStartPrivileges, iArr, biFunction);
        com.android.server.am.BroadcastQueue.traceEnd(traceBegin);
        return broadcastIntentLockedTraced;
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:106:0x03e4  */
    /* JADX WARN: Removed duplicated region for block: B:120:0x0a0d  */
    /* JADX WARN: Removed duplicated region for block: B:127:0x0a44  */
    /* JADX WARN: Removed duplicated region for block: B:159:0x0b9d  */
    /* JADX WARN: Removed duplicated region for block: B:162:0x0bbe  */
    /* JADX WARN: Removed duplicated region for block: B:165:0x0bda  */
    /* JADX WARN: Removed duplicated region for block: B:193:0x0c59  */
    /* JADX WARN: Removed duplicated region for block: B:205:0x0c89  */
    /* JADX WARN: Removed duplicated region for block: B:214:0x0cf8  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x00c4  */
    /* JADX WARN: Removed duplicated region for block: B:262:0x0dc7  */
    /* JADX WARN: Removed duplicated region for block: B:269:0x0de1  */
    /* JADX WARN: Removed duplicated region for block: B:291:0x0dc1  */
    /* JADX WARN: Removed duplicated region for block: B:293:0x0c8e  */
    /* JADX WARN: Removed duplicated region for block: B:295:0x0c40  */
    /* JADX WARN: Removed duplicated region for block: B:296:0x0bd0  */
    /* JADX WARN: Removed duplicated region for block: B:297:0x0ba6  */
    /* JADX WARN: Removed duplicated region for block: B:321:0x0b96  */
    /* JADX WARN: Removed duplicated region for block: B:35:0x0104  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x0126  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x01db  */
    /* JADX WARN: Removed duplicated region for block: B:554:0x0a32  */
    /* JADX WARN: Removed duplicated region for block: B:556:0x032a  */
    /* JADX WARN: Removed duplicated region for block: B:569:0x0304  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x031c  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x032f  */
    /* JADX WARN: Type inference failed for: r10v4, types: [java.util.List] */
    /* JADX WARN: Type inference failed for: r5v26 */
    /* JADX WARN: Type inference failed for: r5v27, types: [int] */
    /* JADX WARN: Type inference failed for: r5v77 */
    @com.android.internal.annotations.GuardedBy({"this"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    final int broadcastIntentLockedTraced(com.android.server.am.ProcessRecord processRecord, java.lang.String str, @android.annotation.Nullable java.lang.String str2, android.content.Intent intent, java.lang.String str3, com.android.server.am.ProcessRecord processRecord2, android.content.IIntentReceiver iIntentReceiver, int i, java.lang.String str4, android.os.Bundle bundle, java.lang.String[] strArr, java.lang.String[] strArr2, java.lang.String[] strArr3, int i2, android.app.BroadcastOptions broadcastOptions, boolean z, boolean z2, int i3, int i4, int i5, int i6, int i7, android.app.BackgroundStartPrivileges backgroundStartPrivileges, @android.annotation.Nullable int[] iArr, @android.annotation.Nullable java.util.function.BiFunction<java.lang.Integer, android.os.Bundle, android.os.Bundle> biFunction) {
        com.android.server.am.ProcessRecord processRecord3;
        android.content.Intent intent2;
        boolean isInstantApp;
        int[] iArr2;
        int handleIncomingUser;
        android.content.Intent intent3;
        int i8;
        java.lang.String action;
        int i9;
        long j;
        int i10;
        android.app.BackgroundStartPrivileges backgroundStartPrivileges2;
        boolean z3;
        android.content.Intent intent4;
        boolean z4;
        int i11;
        int i12;
        int i13;
        boolean z5;
        int i14;
        int[] iArr3;
        int i15;
        java.util.List<android.content.pm.ResolveInfo> list;
        int i16;
        java.util.List<com.android.server.am.BroadcastFilter> list2;
        ?? r10;
        int size;
        android.content.Intent intent5;
        java.util.ArrayList arrayList;
        int i17;
        java.lang.String[] strArr4;
        java.lang.String schemeSpecificPart;
        int size2;
        int[] iArr4;
        int i18;
        java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast> arrayList2;
        char c;
        java.lang.String str5;
        int i19;
        boolean z6;
        java.lang.String str6;
        char c2;
        java.lang.String schemeSpecificPart2;
        int i20;
        boolean z7;
        boolean z8;
        int i21;
        android.content.Intent intent6;
        int i22;
        int i23;
        android.content.pm.ApplicationInfo applicationInfo;
        java.lang.String schemeSpecificPart3;
        java.lang.String str7;
        long j2;
        java.lang.String schemeSpecificPart4;
        java.lang.String str8;
        int uidFromIntent;
        com.android.server.am.UidRecord uidRecordLOSP;
        android.app.BackgroundStartPrivileges backgroundStartPrivileges3;
        com.android.server.am.BroadcastLoopers.addMyLooper();
        if (android.os.Process.isSdkSandboxUid(i5)) {
            com.android.server.sdksandbox.SdkSandboxManagerLocal sdkSandboxManagerLocal = (com.android.server.sdksandbox.SdkSandboxManagerLocal) com.android.server.LocalManagerRegistry.getManager(com.android.server.sdksandbox.SdkSandboxManagerLocal.class);
            if (sdkSandboxManagerLocal == null) {
                throw new java.lang.IllegalStateException("SdkSandboxManagerLocal not found when sending a broadcast from an SDK sandbox uid.");
            }
            if (!sdkSandboxManagerLocal.canSendBroadcast(intent)) {
                throw new java.lang.SecurityException("Intent " + intent.getAction() + " may not be broadcast from an SDK sandbox uid. Given caller package " + str + " (pid=" + i3 + ", realCallingUid=" + i5 + ", callingUid= " + i4 + ")");
            }
        }
        try {
            if (iIntentReceiver != null && processRecord2 == null) {
                if (!(iIntentReceiver.asBinder() instanceof android.os.BinderProxy)) {
                    processRecord3 = getProcessRecordLocked("system", 1000);
                    intent2 = new android.content.Intent(intent);
                    isInstantApp = isInstantApp(processRecord, str, i4);
                    if (isInstantApp) {
                        intent2.setFlags(intent2.getFlags() & (-2097153));
                    }
                    if (i7 != -1 && iArr != null) {
                        android.util.Slog.e("ActivityManager", "broadcastAllowList only applies when sending to individual users. Assuming restrictive whitelist.");
                        iArr2 = new int[0];
                    } else {
                        iArr2 = iArr;
                    }
                    intent2.addFlags(16);
                    if (!this.mProcessesReady && (intent2.getFlags() & 33554432) == 0) {
                        intent2.addFlags(1073741824);
                    }
                    if (iIntentReceiver != null && !z) {
                        if (!this.mEnableModernQueue) {
                            android.util.Slog.w("ActivityManager", "Broadcast " + intent2 + " not ordered but result callback requested!");
                        }
                        if (!android.os.UserHandle.isCore(i4)) {
                            java.lang.String str9 = "Unauthorized unordered resultTo broadcast " + intent2 + " sent from uid " + i4;
                            android.util.Slog.w("ActivityManager", str9);
                            throw new java.lang.SecurityException(str9);
                        }
                    }
                    int i24 = -1;
                    int[] iArr5 = iArr2;
                    handleIncomingUser = this.mUserController.handleIncomingUser(i3, i4, i7, true, 0, "broadcast", str);
                    if (handleIncomingUser != -1 || this.mUserController.isUserOrItsParentRunning(handleIncomingUser)) {
                        intent3 = intent2;
                        i8 = i4;
                    } else {
                        i8 = i4;
                        if (i8 == 1000 && (intent2.getFlags() & 33554432) != 0) {
                            intent3 = intent2;
                        } else if ("android.intent.action.ACTION_SHUTDOWN".equals(intent2.getAction())) {
                            intent3 = intent2;
                        } else {
                            android.util.Slog.w("ActivityManager", "Skipping broadcast of " + intent2 + ": user " + handleIncomingUser + " and its parent (if any) are stopped");
                            scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent2, handleIncomingUser, broadcastOptions, i4, str);
                            return -2;
                        }
                    }
                    action = intent3.getAction();
                    if (broadcastOptions != null) {
                        i9 = i3;
                        j = 0;
                        i10 = i6;
                        backgroundStartPrivileges2 = backgroundStartPrivileges;
                    } else {
                        if (broadcastOptions.getTemporaryAppAllowlistDuration() <= 0) {
                            i9 = i3;
                            i10 = i6;
                        } else {
                            i10 = i6;
                            if (checkComponentPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", i10, i5, -1, true) == 0) {
                                i9 = i3;
                            } else if (checkComponentPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i10, i5, -1, true) == 0) {
                                i9 = i3;
                            } else {
                                if (checkComponentPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", i10, i5, -1, true) != 0) {
                                    java.lang.String str10 = "Permission Denial: " + intent3.getAction() + " broadcast from " + str + " (pid=" + i3 + ", uid=" + i8 + ") requires android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST or android.permission.START_ACTIVITIES_FROM_BACKGROUND or android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND";
                                    android.util.Slog.w("ActivityManager", str10);
                                    throw new java.lang.SecurityException(str10);
                                }
                                i9 = i3;
                            }
                        }
                        if (broadcastOptions.isDontSendToRestrictedApps() && !isUidActiveLOSP(i8) && isBackgroundRestrictedNoCheck(i8, str)) {
                            android.util.Slog.i("ActivityManager", "Not sending broadcast " + action + " - app " + str + " has background restrictions");
                            return -96;
                        }
                        if (!broadcastOptions.allowsBackgroundActivityStarts()) {
                            backgroundStartPrivileges3 = backgroundStartPrivileges;
                        } else {
                            if (checkComponentPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i10, i5, -1, true) != 0) {
                                java.lang.String str11 = "Permission Denial: " + intent3.getAction() + " broadcast from " + str + " (pid=" + i9 + ", uid=" + i8 + ") requires android.permission.START_ACTIVITIES_FROM_BACKGROUND";
                                android.util.Slog.w("ActivityManager", str11);
                                throw new java.lang.SecurityException(str11);
                            }
                            backgroundStartPrivileges3 = android.app.BackgroundStartPrivileges.ALLOW_BAL;
                        }
                        j = 0;
                        if (broadcastOptions.getIdForResponseEvent() > 0) {
                            enforcePermission("android.permission.ACCESS_BROADCAST_RESPONSE_STATS", i9, i8, "recordResponseEventWhileInBackground");
                        }
                        backgroundStartPrivileges2 = backgroundStartPrivileges3;
                    }
                    boolean isProtectedBroadcast = android.app.AppGlobals.getPackageManager().isProtectedBroadcast(action);
                    switch (android.os.UserHandle.getAppId(i4)) {
                        case 0:
                        case 1000:
                        case 1001:
                        case 1002:
                        case com.android.server.usb.descriptors.UsbTerminalTypes.TERMINAL_BIDIR_SKRPHONE /* 1027 */:
                        case 1068:
                        case 1073:
                            z3 = true;
                            break;
                        default:
                            z3 = processRecord != null && processRecord.isPersistent();
                            break;
                    }
                    if (!z3) {
                        if (isProtectedBroadcast) {
                            java.lang.String str12 = "Permission Denial: not allowed to send broadcast " + action + " from pid=" + i9 + ", uid=" + i8;
                            android.util.Slog.w("ActivityManager", str12);
                            throw new java.lang.SecurityException(str12);
                        }
                        if ("android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action)) {
                            if (str == null) {
                                java.lang.String str13 = "Permission Denial: not allowed to send broadcast " + action + " from unknown caller.";
                                android.util.Slog.w("ActivityManager", str13);
                                throw new java.lang.SecurityException(str13);
                            }
                            if (intent3.getComponent() != null) {
                                if (!intent3.getComponent().getPackageName().equals(str)) {
                                    java.lang.String str14 = "Permission Denial: not allowed to send broadcast " + action + " to " + intent3.getComponent().getPackageName() + " from " + str;
                                    android.util.Slog.w("ActivityManager", str14);
                                    throw new java.lang.SecurityException(str14);
                                }
                            } else {
                                intent3.setPackage(str);
                            }
                        }
                    }
                    if (action != null) {
                        intent4 = intent3;
                        z4 = false;
                        i11 = 1073741824;
                        i12 = i9;
                        i13 = handleIncomingUser;
                        z5 = false;
                    } else {
                        if (getBackgroundLaunchBroadcasts().contains(action)) {
                            intent3.addFlags(16777216);
                        }
                        switch (action.hashCode()) {
                            case -2098526293:
                                if (action.equals("android.hardware.action.NEW_VIDEO")) {
                                    c = 16;
                                    break;
                                }
                                c = 65535;
                                break;
                            case -1749672628:
                                if (action.equals("android.intent.action.UID_REMOVED")) {
                                    c = 1;
                                    break;
                                }
                                c = 65535;
                                break;
                            case -1403934493:
                                if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                    c = 4;
                                    break;
                                }
                                c = 65535;
                                break;
                            case -1338021860:
                                if (action.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                    c = 5;
                                    break;
                                }
                                c = 65535;
                                break;
                            case -1001645458:
                                if (action.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                                    c = 6;
                                    break;
                                }
                                c = 65535;
                                break;
                            case -810471698:
                                if (action.equals("android.intent.action.PACKAGE_REPLACED")) {
                                    c = '\b';
                                    break;
                                }
                                c = 65535;
                                break;
                            case -403228793:
                                if (action.equals("android.intent.action.CLOSE_SYSTEM_DIALOGS")) {
                                    c = 20;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 172491798:
                                if (action.equals("android.intent.action.PACKAGE_CHANGED")) {
                                    c = 3;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 183904262:
                                if (action.equals("android.intent.action.PROXY_CHANGE")) {
                                    c = 14;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 267468725:
                                if (action.equals("android.intent.action.PACKAGE_DATA_CLEARED")) {
                                    c = '\n';
                                    break;
                                }
                                c = 65535;
                                break;
                            case 502473491:
                                if (action.equals("android.intent.action.TIMEZONE_CHANGED")) {
                                    c = 11;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 505380757:
                                if (action.equals("android.intent.action.TIME_SET")) {
                                    c = '\f';
                                    break;
                                }
                                c = 65535;
                                break;
                            case 525384130:
                                if (action.equals("android.intent.action.PACKAGE_REMOVED")) {
                                    c = 2;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 555021408:
                                if (action.equals("com.android.launcher.action.INSTALL_SHORTCUT")) {
                                    c = 18;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 789737439:
                                if (action.equals("android.intent.action.PRE_BOOT_COMPLETED")) {
                                    c = 19;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 852070077:
                                if (action.equals("android.intent.action.MEDIA_SCANNER_SCAN_FILE")) {
                                    c = 0;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 920338478:
                                if (action.equals("android.hardware.action.NEW_PICTURE")) {
                                    c = 15;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 1290767157:
                                if (action.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                    c = 7;
                                    break;
                                }
                                c = 65535;
                                break;
                            case 1544582882:
                                if (action.equals("android.intent.action.PACKAGE_ADDED")) {
                                    c = '\t';
                                    break;
                                }
                                c = 65535;
                                break;
                            case 1664215986:
                                if (action.equals("android.net.action.CLEAR_DNS_CACHE")) {
                                    c = '\r';
                                    break;
                                }
                                c = 65535;
                                break;
                            case 1862858502:
                                if (action.equals("android.security.action.TRUST_STORE_CHANGED")) {
                                    c = 17;
                                    break;
                                }
                                c = 65535;
                                break;
                            default:
                                c = 65535;
                                break;
                        }
                        switch (c) {
                            case 0:
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                i24 = -1;
                                z4 = false;
                                i11 = 1073741824;
                                i12 = i9;
                                com.android.server.pm.UserManagerInternal userManagerInternal = (com.android.server.pm.UserManagerInternal) com.android.server.LocalServices.getService(com.android.server.pm.UserManagerInternal.class);
                                android.content.pm.UserInfo userInfo = userManagerInternal.getUserInfo(i19);
                                if (userInfo != null && userInfo.isCloneProfile()) {
                                    i13 = userManagerInternal.getProfileParentId(i19);
                                    z6 = false;
                                    str8 = str5;
                                    if ((!"android.intent.action.PACKAGE_ADDED".equals(str8) || "android.intent.action.PACKAGE_REMOVED".equals(str8) || "android.intent.action.PACKAGE_REPLACED".equals(str8)) && (uidFromIntent = getUidFromIntent(intent4)) != i24 && (uidRecordLOSP = this.mProcessList.getUidRecordLOSP(uidFromIntent)) != null) {
                                        uidRecordLOSP.updateHasInternetPermission();
                                    }
                                    z5 = z6;
                                    break;
                                }
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                z4 = false;
                                i11 = 1073741824;
                                if (checkComponentPermission("android.permission.BROADCAST_PACKAGE_REMOVED", i9, i8, -1, true) == 0) {
                                    switch (action.hashCode()) {
                                        case -1749672628:
                                            str6 = action;
                                            if (str6.equals("android.intent.action.UID_REMOVED")) {
                                                c2 = 0;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case -1403934493:
                                            str6 = action;
                                            if (str6.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                                c2 = 1;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case -1338021860:
                                            str6 = action;
                                            if (str6.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                                c2 = 2;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case -1001645458:
                                            str6 = action;
                                            if (str6.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                                                c2 = 5;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case 172491798:
                                            str6 = action;
                                            if (str6.equals("android.intent.action.PACKAGE_CHANGED")) {
                                                c2 = 4;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case 525384130:
                                            str6 = action;
                                            if (str6.equals("android.intent.action.PACKAGE_REMOVED")) {
                                                c2 = 3;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        case 1290767157:
                                            str6 = action;
                                            if (str6.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                                c2 = 6;
                                                break;
                                            }
                                            c2 = 65535;
                                            break;
                                        default:
                                            str6 = action;
                                            c2 = 65535;
                                            break;
                                    }
                                    switch (c2) {
                                        case 0:
                                            str5 = str6;
                                            intent4 = intent3;
                                            i19 = handleIncomingUser;
                                            i24 = -1;
                                            int uidFromIntent2 = getUidFromIntent(intent4);
                                            if (uidFromIntent2 < 0) {
                                                z4 = false;
                                                break;
                                            } else {
                                                this.mBatteryStatsService.removeUid(uidFromIntent2);
                                                z4 = false;
                                                if (intent4.getBooleanExtra("android.intent.extra.REPLACING", false)) {
                                                    this.mAppOpsService.resetAllModes(android.os.UserHandle.getUserId(uidFromIntent2), intent4.getStringExtra("android.intent.extra.PACKAGE_NAME"));
                                                    break;
                                                } else {
                                                    this.mAppOpsService.uidRemoved(uidFromIntent2);
                                                    break;
                                                }
                                            }
                                        case 1:
                                            str5 = str6;
                                            int i25 = handleIncomingUser;
                                            android.content.Intent intent7 = intent3;
                                            java.lang.String[] stringArrayExtra = intent7.getStringArrayExtra("android.intent.extra.changed_package_list");
                                            if (stringArrayExtra == null || stringArrayExtra.length <= 0) {
                                                i19 = i25;
                                                i24 = -1;
                                                intent4 = intent7;
                                                z4 = false;
                                                break;
                                            } else {
                                                int i26 = 0;
                                                while (i26 < stringArrayExtra.length) {
                                                    int i27 = i25;
                                                    forceStopPackageLocked(stringArrayExtra[i26], -1, false, true, true, false, false, false, i27, "storage unmount");
                                                    i26++;
                                                    i25 = i27;
                                                    intent7 = intent7;
                                                }
                                                int i28 = i25;
                                                intent4 = intent7;
                                                i24 = -1;
                                                this.mAtmInternal.cleanupRecentTasksForUser(-1);
                                                i19 = i28;
                                                sendPackageBroadcastLocked(1, stringArrayExtra, i19);
                                                z4 = false;
                                                break;
                                            }
                                        case 2:
                                            str5 = str6;
                                            this.mAtmInternal.cleanupRecentTasksForUser(-1);
                                            i19 = handleIncomingUser;
                                            i24 = -1;
                                            intent4 = intent3;
                                            z4 = false;
                                            break;
                                        case 3:
                                        case 4:
                                            android.net.Uri data = intent3.getData();
                                            if (data == null || (schemeSpecificPart2 = data.getSchemeSpecificPart()) == null) {
                                                str5 = str6;
                                                i19 = handleIncomingUser;
                                                i24 = -1;
                                                intent4 = intent3;
                                                z4 = false;
                                                break;
                                            } else {
                                                boolean equals = "android.intent.action.PACKAGE_REMOVED".equals(str6);
                                                boolean booleanExtra = intent3.getBooleanExtra("android.intent.extra.REPLACING", false);
                                                boolean z9 = !intent3.getBooleanExtra("android.intent.extra.DONT_KILL_APP", false);
                                                boolean z10 = equals && !booleanExtra;
                                                if (equals) {
                                                    if (z9) {
                                                        str5 = str6;
                                                        forceStopPackageLocked(schemeSpecificPart2, android.os.UserHandle.getAppId(intent3.getIntExtra("android.intent.extra.UID", -1)), false, true, true, false, z10, false, handleIncomingUser, "pkg removed");
                                                        getPackageManagerInternal().onPackageProcessKilledForUninstall(schemeSpecificPart2);
                                                        i20 = handleIncomingUser;
                                                        intent6 = intent3;
                                                        i21 = -1;
                                                    } else {
                                                        str5 = str6;
                                                        intent6 = intent3;
                                                        i21 = -1;
                                                        i20 = handleIncomingUser;
                                                        forceStopAppZygoteLocked(schemeSpecificPart2, android.os.UserHandle.getAppId(intent6.getIntExtra("android.intent.extra.UID", -1)), i20);
                                                    }
                                                    if (z9) {
                                                        i23 = 0;
                                                    } else {
                                                        i23 = 2;
                                                    }
                                                    sendPackageBroadcastLocked(i23, new java.lang.String[]{schemeSpecificPart2}, i20);
                                                    if (!z10) {
                                                        z8 = true;
                                                        z7 = false;
                                                    } else {
                                                        z8 = true;
                                                        z7 = false;
                                                        this.mUgmInternal.removeUriPermissionsForPackage(schemeSpecificPart2, i20, true, false);
                                                        this.mAtmInternal.removeRecentTasksByPackageName(schemeSpecificPart2, i20);
                                                        this.mServices.forceStopPackageLocked(schemeSpecificPart2, i20);
                                                        this.mAtmInternal.onPackageUninstalled(schemeSpecificPart2, i20);
                                                        this.mBatteryStatsService.notePackageUninstalled(schemeSpecificPart2);
                                                    }
                                                } else {
                                                    str5 = str6;
                                                    i20 = handleIncomingUser;
                                                    z7 = false;
                                                    z8 = true;
                                                    i21 = -1;
                                                    intent6 = intent3;
                                                    if (z9) {
                                                        if (booleanExtra) {
                                                            i22 = 16;
                                                        } else {
                                                            i22 = 15;
                                                        }
                                                        int intExtra = intent6.getIntExtra("android.intent.extra.UID", -1);
                                                        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                                                        boostPriorityForProcLockedSection();
                                                        synchronized (activityManagerGlobalLock) {
                                                            try {
                                                                this.mProcessList.killPackageProcessesLSP(schemeSpecificPart2, android.os.UserHandle.getAppId(intExtra), i20, com.android.server.am.ProcessList.INVALID_ADJ, i22, 0, "change " + schemeSpecificPart2);
                                                            } catch (java.lang.Throwable th) {
                                                                resetPriorityAfterProcLockedSection();
                                                                throw th;
                                                            }
                                                        }
                                                        resetPriorityAfterProcLockedSection();
                                                    }
                                                    cleanupDisabledPackageComponentsLocked(schemeSpecificPart2, i20, intent6.getStringArrayExtra("android.intent.extra.changed_component_name_list"));
                                                    this.mServices.schedulePendingServiceStartLocked(schemeSpecificPart2, i20);
                                                }
                                                i19 = i20;
                                                i24 = i21;
                                                intent4 = intent6;
                                                z4 = z7;
                                                break;
                                            }
                                            break;
                                        case 5:
                                        case 6:
                                            boolean equals2 = "android.intent.action.PACKAGES_SUSPENDED".equals(intent3.getAction());
                                            java.lang.String[] stringArrayExtra2 = intent3.getStringArrayExtra("android.intent.extra.changed_package_list");
                                            this.mAtmInternal.onPackagesSuspendedChanged(stringArrayExtra2, equals2, intent3.getIntExtra("android.intent.extra.user_handle", com.android.server.am.ProcessList.INVALID_ADJ));
                                            boolean booleanExtra2 = intent3.getBooleanExtra("android.intent.extra.quarantined", false);
                                            if (!equals2 || !booleanExtra2 || stringArrayExtra2 == null) {
                                                str5 = str6;
                                                intent4 = intent3;
                                                i19 = handleIncomingUser;
                                                i24 = -1;
                                                z4 = false;
                                                break;
                                            } else {
                                                for (java.lang.String str15 : stringArrayExtra2) {
                                                    forceStopPackage(str15, handleIncomingUser, 1, "quarantined");
                                                }
                                                str5 = str6;
                                                intent4 = intent3;
                                                i19 = handleIncomingUser;
                                                i24 = -1;
                                                z4 = false;
                                                break;
                                            }
                                        default:
                                            str5 = str6;
                                            intent4 = intent3;
                                            i19 = handleIncomingUser;
                                            i24 = -1;
                                            break;
                                    }
                                    i12 = i3;
                                    i8 = i4;
                                    i13 = i19;
                                    z6 = z4;
                                    str8 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    z5 = z6;
                                    break;
                                } else {
                                    java.lang.String str16 = "Permission Denial: " + intent3.getAction() + " broadcast from " + str + " (pid=" + i3 + ", uid=" + i4 + ") requires android.permission.BROADCAST_PACKAGE_REMOVED";
                                    android.util.Slog.w("ActivityManager", str16);
                                    throw new java.lang.SecurityException(str16);
                                }
                                break;
                            case '\b':
                                i11 = 1073741824;
                                android.net.Uri data2 = intent3.getData();
                                if (data2 != null) {
                                    java.lang.String schemeSpecificPart5 = data2.getSchemeSpecificPart();
                                    if (schemeSpecificPart5 == null) {
                                        z4 = false;
                                    } else {
                                        try {
                                            applicationInfo = android.app.AppGlobals.getPackageManager().getApplicationInfo(schemeSpecificPart5, 1024L, handleIncomingUser);
                                        } catch (android.os.RemoteException e) {
                                            applicationInfo = null;
                                        }
                                        if (applicationInfo == null) {
                                            android.util.Slog.w("ActivityManager", "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg: ssp=" + schemeSpecificPart5 + " data=" + data2);
                                            scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent3, handleIncomingUser, broadcastOptions, i4, str);
                                            return 0;
                                        }
                                        z4 = false;
                                        updateAssociationForApp(applicationInfo);
                                        this.mAtmInternal.onPackageReplaced(applicationInfo);
                                        this.mServices.updateServiceApplicationInfoLocked(applicationInfo);
                                        sendPackageBroadcastLocked(3, new java.lang.String[]{schemeSpecificPart5}, handleIncomingUser);
                                        str5 = action;
                                        intent4 = intent3;
                                        i19 = handleIncomingUser;
                                        i24 = -1;
                                        i12 = i9;
                                        i13 = i19;
                                        z6 = z4;
                                        str8 = str5;
                                        if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                        }
                                        uidRecordLOSP.updateHasInternetPermission();
                                        z5 = z6;
                                        break;
                                    }
                                } else {
                                    z4 = false;
                                }
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                i24 = -1;
                                i12 = i9;
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case '\t':
                                android.net.Uri data3 = intent3.getData();
                                if (data3 == null || (schemeSpecificPart3 = data3.getSchemeSpecificPart()) == null) {
                                    str5 = action;
                                    intent4 = intent3;
                                    i19 = handleIncomingUser;
                                    i24 = -1;
                                    z4 = false;
                                    i11 = 1073741824;
                                    i12 = i9;
                                } else {
                                    this.mAtmInternal.onPackageAdded(schemeSpecificPart3, intent3.getBooleanExtra("android.intent.extra.REPLACING", false));
                                    try {
                                        android.content.pm.ApplicationInfo applicationInfo2 = android.app.AppGlobals.getPackageManager().getApplicationInfo(schemeSpecificPart3, 1024L, 0);
                                        com.android.server.am.BatteryStatsService batteryStatsService = this.mBatteryStatsService;
                                        if (applicationInfo2 != null) {
                                            str7 = action;
                                            try {
                                                j2 = applicationInfo2.longVersionCode;
                                            } catch (android.os.RemoteException e2) {
                                            }
                                        } else {
                                            str7 = action;
                                            j2 = j;
                                        }
                                        batteryStatsService.notePackageInstalled(schemeSpecificPart3, j2);
                                    } catch (android.os.RemoteException e3) {
                                        str7 = action;
                                    }
                                    str5 = str7;
                                    intent4 = intent3;
                                    i19 = handleIncomingUser;
                                    i24 = -1;
                                    z4 = false;
                                    i11 = 1073741824;
                                    i12 = i9;
                                }
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case '\n':
                                android.net.Uri data4 = intent3.getData();
                                if (data4 == null || (schemeSpecificPart4 = data4.getSchemeSpecificPart()) == null) {
                                    i11 = 1073741824;
                                    str5 = action;
                                    intent4 = intent3;
                                    i19 = handleIncomingUser;
                                    z4 = false;
                                    i24 = -1;
                                    i12 = i9;
                                } else {
                                    this.mAtmInternal.onPackageDataCleared(schemeSpecificPart4, handleIncomingUser);
                                    i11 = 1073741824;
                                    str5 = action;
                                    intent4 = intent3;
                                    i19 = handleIncomingUser;
                                    z4 = false;
                                    i24 = -1;
                                    i12 = i9;
                                }
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case 11:
                                this.mHandler.sendEmptyMessage(13);
                                i11 = 1073741824;
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                z4 = false;
                                i24 = -1;
                                i12 = i9;
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case '\f':
                                int intExtra2 = intent3.getIntExtra("android.intent.extra.TIME_PREF_24_HOUR_FORMAT", -1);
                                if (intExtra2 != -1) {
                                    this.mHandler.sendMessage(this.mHandler.obtainMessage(41, intExtra2, 0));
                                }
                                this.mBatteryStatsService.noteCurrentTimeChanged();
                                i11 = 1073741824;
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                z4 = false;
                                i24 = -1;
                                i12 = i9;
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case '\r':
                                this.mHandler.sendEmptyMessage(28);
                                i11 = 1073741824;
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                z4 = false;
                                i24 = -1;
                                i12 = i9;
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case 14:
                                this.mHandler.sendMessage(this.mHandler.obtainMessage(29));
                                i11 = 1073741824;
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                z4 = false;
                                i24 = -1;
                                i12 = i9;
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case 15:
                            case 16:
                                intent3.addFlags(1073741824);
                                i11 = 1073741824;
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                z4 = false;
                                i24 = -1;
                                i12 = i9;
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case 17:
                                this.mHandler.sendEmptyMessage(63);
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                z4 = false;
                                i24 = -1;
                                i11 = 1073741824;
                                i12 = i9;
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case 18:
                                android.util.Log.w("ActivityManager", "Broadcast " + action + " no longer supported. It will not be delivered.");
                                scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent3, handleIncomingUser, broadcastOptions, i4, str);
                                return 0;
                            case 19:
                                str5 = action;
                                intent4 = intent3;
                                i13 = handleIncomingUser;
                                z4 = false;
                                z6 = true;
                                i24 = -1;
                                i11 = 1073741824;
                                i12 = i9;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                            case 20:
                                if (this.mAtmInternal.checkCanCloseSystemDialogs(i9, i8, str)) {
                                    str5 = action;
                                    intent4 = intent3;
                                    i19 = handleIncomingUser;
                                    z4 = false;
                                    i24 = -1;
                                    i11 = 1073741824;
                                    i12 = i9;
                                    i13 = i19;
                                    z6 = z4;
                                    str8 = str5;
                                    if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                    }
                                    uidRecordLOSP.updateHasInternetPermission();
                                    z5 = z6;
                                    break;
                                } else {
                                    scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent3, handleIncomingUser, broadcastOptions, i4, str);
                                    return 0;
                                }
                            default:
                                str5 = action;
                                intent4 = intent3;
                                i19 = handleIncomingUser;
                                i24 = -1;
                                z4 = false;
                                i11 = 1073741824;
                                i12 = i9;
                                i13 = i19;
                                z6 = z4;
                                str8 = str5;
                                if (!"android.intent.action.PACKAGE_ADDED".equals(str8)) {
                                }
                                uidRecordLOSP.updateHasInternetPermission();
                                z5 = z6;
                                break;
                        }
                    }
                    int realProcessStateLocked = getRealProcessStateLocked(processRecord, i6);
                    if (z2) {
                        if (checkPermission("android.permission.BROADCAST_STICKY", i12, i8) != 0) {
                            java.lang.String str17 = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + i12 + ", uid=" + i8 + " requires android.permission.BROADCAST_STICKY";
                            android.util.Slog.w("ActivityManager", str17);
                            throw new java.lang.SecurityException(str17);
                        }
                        if (strArr != null && strArr.length > 0) {
                            android.util.Slog.w("ActivityManager", "Can't broadcast sticky intent " + intent4 + " and enforce permissions " + java.util.Arrays.toString(strArr));
                            scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent4, i13, broadcastOptions, i4, str);
                            return i24;
                        }
                        if (intent4.getComponent() != null) {
                            throw new java.lang.SecurityException("Sticky broadcasts can't target a specific component");
                        }
                        synchronized (this.mStickyBroadcasts) {
                            if (i13 != i24) {
                                try {
                                    android.util.ArrayMap<java.lang.String, java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast>> arrayMap = this.mStickyBroadcasts.get(i24);
                                    if (arrayMap != null && (arrayList2 = arrayMap.get(intent4.getAction())) != null) {
                                        int size3 = arrayList2.size();
                                        for (?? r5 = z4; r5 < size3; r5++) {
                                            if (intent4.filterEquals(arrayList2.get(r5).intent)) {
                                                throw new java.lang.IllegalArgumentException("Sticky broadcast " + intent4 + " for user " + i13 + " conflicts with existing global broadcast");
                                            }
                                        }
                                    }
                                } finally {
                                }
                            }
                            android.util.ArrayMap<java.lang.String, java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast>> arrayMap2 = this.mStickyBroadcasts.get(i13);
                            if (arrayMap2 == null) {
                                arrayMap2 = new android.util.ArrayMap<>();
                                this.mStickyBroadcasts.put(i13, arrayMap2);
                            }
                            java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast> arrayList3 = arrayMap2.get(intent4.getAction());
                            if (arrayList3 == null) {
                                arrayList3 = new java.util.ArrayList<>();
                                arrayMap2.put(intent4.getAction(), arrayList3);
                            }
                            boolean calculateDeferUntilActive = com.android.server.am.BroadcastRecord.calculateDeferUntilActive(i8, broadcastOptions, iIntentReceiver, z, com.android.server.am.BroadcastRecord.calculateUrgent(intent4, broadcastOptions));
                            int size4 = arrayList3.size();
                            int i29 = 0;
                            while (true) {
                                if (i29 < size4) {
                                    if (!intent4.filterEquals(arrayList3.get(i29).intent)) {
                                        i29++;
                                    } else {
                                        arrayList3.set(i29, com.android.server.am.ActivityManagerService.StickyBroadcast.create(new android.content.Intent(intent4), calculateDeferUntilActive, i8, realProcessStateLocked));
                                    }
                                }
                            }
                            if (i29 >= size4) {
                                arrayList3.add(com.android.server.am.ActivityManagerService.StickyBroadcast.create(new android.content.Intent(intent4), calculateDeferUntilActive, i8, realProcessStateLocked));
                            }
                        }
                    }
                    if (i13 != -1) {
                        iArr3 = this.mUserController.getStartedUserArray();
                        i14 = 0;
                    } else {
                        i14 = 0;
                        iArr3 = new int[]{i13};
                    }
                    int traceBegin = com.android.server.am.BroadcastQueue.traceBegin("queryReceivers");
                    if ((intent4.getFlags() & i11) == 0) {
                        i15 = realProcessStateLocked;
                        list = null;
                    } else {
                        i15 = realProcessStateLocked;
                        list = collectReceiverComponents(intent4, str3, i4, iArr3, iArr5);
                    }
                    if (intent4.getComponent() == null) {
                        i16 = i14;
                        list2 = null;
                    } else {
                        com.android.server.pm.snapshot.PackageDataSnapshot snapshot = getPackageManagerInternal().snapshot();
                        if (i13 != -1 || i8 != 2000) {
                            i16 = i14;
                            list2 = this.mReceiverResolver.queryIntent(snapshot, intent4, str3, false, i13);
                        } else {
                            int i30 = i14;
                            java.util.List<com.android.server.am.BroadcastFilter> list3 = null;
                            while (i30 < iArr3.length) {
                                if (this.mUserController.hasUserRestriction("no_debugging_features", iArr3[i30])) {
                                    iArr4 = iArr3;
                                    i18 = 0;
                                } else {
                                    iArr4 = iArr3;
                                    i18 = 0;
                                    java.util.List<com.android.server.am.BroadcastFilter> queryIntent = this.mReceiverResolver.queryIntent(snapshot, intent4, str3, false, iArr3[i30]);
                                    if (list3 == null) {
                                        list3 = queryIntent;
                                    } else if (queryIntent != null) {
                                        list3.addAll(queryIntent);
                                    }
                                }
                                i30++;
                                iArr3 = iArr4;
                                i14 = i18;
                            }
                            i16 = i14;
                            list2 = list3;
                        }
                    }
                    com.android.server.am.BroadcastQueue.traceEnd(traceBegin);
                    intent4.getFlags();
                    if (list2 != null && iArr5 != null) {
                        for (size2 = list2.size() - 1; size2 >= 0; size2--) {
                            int appId = android.os.UserHandle.getAppId(list2.get(size2).owningUid);
                            if (appId >= 10000 && java.util.Arrays.binarySearch(iArr5, appId) < 0) {
                                list2.remove(size2);
                            }
                        }
                    }
                    r10 = list;
                    filterNonExportedComponents(intent4, i4, i3, list2, this.mPlatformCompat, str, str3);
                    size = list2 == null ? list2.size() : i16;
                    if (!z || size <= 0 || this.mEnableModernQueue) {
                        intent5 = intent4;
                    } else {
                        if (z3) {
                            checkBroadcastFromSystem(intent4, processRecord, str, i4, isProtectedBroadcast, list2);
                        }
                        com.android.server.am.BroadcastQueue broadcastQueueForIntent = broadcastQueueForIntent(intent4);
                        intent5 = intent4;
                        broadcastQueueForIntent.enqueueBroadcastLocked(new com.android.server.am.BroadcastRecord(broadcastQueueForIntent, intent5, processRecord, str, str2, i3, i4, isInstantApp, str3, strArr, strArr2, strArr3, i2, broadcastOptions, list2, processRecord3, iIntentReceiver, i, str4, bundle, z, z2, false, i13, backgroundStartPrivileges2, z5, biFunction, i15));
                        list2 = null;
                        size = i16;
                    }
                    if (r10 != 0) {
                        arrayList = r10;
                        i17 = i16;
                    } else {
                        if ("android.intent.action.PACKAGE_ADDED".equals(intent5.getAction()) || "android.intent.action.PACKAGE_RESTARTED".equals(intent5.getAction()) || "android.intent.action.PACKAGE_DATA_CLEARED".equals(intent5.getAction())) {
                            android.net.Uri data5 = intent5.getData();
                            if (data5 != null && (schemeSpecificPart = data5.getSchemeSpecificPart()) != null) {
                                java.lang.String[] strArr5 = new java.lang.String[1];
                                strArr5[i16] = schemeSpecificPart;
                                strArr4 = strArr5;
                            } else {
                                strArr4 = null;
                            }
                        } else {
                            strArr4 = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE".equals(intent5.getAction()) ? intent5.getStringArrayExtra("android.intent.extra.changed_package_list") : null;
                        }
                        if (strArr4 != null && strArr4.length > 0) {
                            int length = strArr4.length;
                            for (int i31 = i16; i31 < length; i31++) {
                                java.lang.String str18 = strArr4[i31];
                                if (str18 != null) {
                                    int size5 = r10.size();
                                    int i32 = i16;
                                    while (i32 < size5) {
                                        if (((android.content.pm.ResolveInfo) r10.get(i32)).activityInfo.packageName.equals(str18)) {
                                            r10.remove(i32);
                                            i32--;
                                            size5--;
                                        }
                                        i32++;
                                    }
                                }
                            }
                        }
                        int size6 = r10.size();
                        android.content.pm.ResolveInfo resolveInfo = null;
                        com.android.server.am.BroadcastFilter broadcastFilter = null;
                        int i33 = i16;
                        i17 = i33;
                        while (i33 < size6 && i17 < size) {
                            if (resolveInfo == null) {
                                resolveInfo = (android.content.pm.ResolveInfo) r10.get(i33);
                            }
                            if (broadcastFilter == null) {
                                broadcastFilter = list2.get(i17);
                            }
                            if (broadcastFilter.getPriority() >= resolveInfo.priority) {
                                r10.add(i33, broadcastFilter);
                                i17++;
                                i33++;
                                size6++;
                                broadcastFilter = null;
                            } else {
                                i33++;
                                resolveInfo = null;
                            }
                        }
                        arrayList = r10;
                    }
                    while (i17 < size) {
                        if (arrayList == null) {
                            arrayList = new java.util.ArrayList();
                        }
                        java.util.ArrayList arrayList4 = arrayList;
                        arrayList4.add(list2.get(i17));
                        i17++;
                        arrayList = arrayList4;
                    }
                    if (z3) {
                        checkBroadcastFromSystem(intent5, processRecord, str, i4, isProtectedBroadcast, arrayList);
                    }
                    if ((arrayList == null && arrayList.size() > 0) || iIntentReceiver != null) {
                        com.android.server.am.BroadcastQueue broadcastQueueForIntent2 = broadcastQueueForIntent(intent5);
                        filterNonExportedComponents(intent5, i4, i3, arrayList, this.mPlatformCompat, str, str3);
                        broadcastQueueForIntent2.enqueueBroadcastLocked(new com.android.server.am.BroadcastRecord(broadcastQueueForIntent2, intent5, processRecord, str, str2, i3, i4, isInstantApp, str3, strArr, strArr2, strArr3, i2, broadcastOptions, arrayList, processRecord3, iIntentReceiver, i, str4, bundle, z, z2, false, i13, backgroundStartPrivileges2, z5, biFunction, i15));
                    } else if (intent5.getComponent() == null && intent5.getPackage() == null && (intent5.getFlags() & i11) == 0) {
                        addBroadcastStatLocked(intent5.getAction(), str, 0, 0, 0L);
                    }
                    return i16;
                }
                android.util.Slog.wtf("ActivityManager", "Sending broadcast " + intent.getAction() + " with resultTo requires resultToApp", new java.lang.Throwable());
            }
            boolean isProtectedBroadcast2 = android.app.AppGlobals.getPackageManager().isProtectedBroadcast(action);
            switch (android.os.UserHandle.getAppId(i4)) {
                case 0:
                case 1000:
                case 1001:
                case 1002:
                case com.android.server.usb.descriptors.UsbTerminalTypes.TERMINAL_BIDIR_SKRPHONE /* 1027 */:
                case 1068:
                case 1073:
                    break;
            }
            if (!z3) {
            }
            if (action != null) {
            }
            int realProcessStateLocked2 = getRealProcessStateLocked(processRecord, i6);
            if (z2) {
            }
            if (i13 != -1) {
            }
            int traceBegin2 = com.android.server.am.BroadcastQueue.traceBegin("queryReceivers");
            if ((intent4.getFlags() & i11) == 0) {
            }
            if (intent4.getComponent() == null) {
            }
            com.android.server.am.BroadcastQueue.traceEnd(traceBegin2);
            intent4.getFlags();
            if (list2 != null) {
                while (size2 >= 0) {
                }
            }
            r10 = list;
            filterNonExportedComponents(intent4, i4, i3, list2, this.mPlatformCompat, str, str3);
            if (list2 == null) {
            }
            if (!z) {
            }
            intent5 = intent4;
            if (r10 != 0) {
            }
            while (i17 < size) {
            }
            if (z3) {
            }
            if (arrayList == null) {
            }
            if (intent5.getComponent() == null) {
                addBroadcastStatLocked(intent5.getAction(), str, 0, 0, 0L);
            }
            return i16;
        } catch (android.os.RemoteException e4) {
            android.util.Slog.w("ActivityManager", "Remote exception", e4);
            scheduleCanceledResultTo(processRecord3, iIntentReceiver, intent3, handleIncomingUser, broadcastOptions, i4, str);
            return 0;
        }
        processRecord3 = processRecord2;
        intent2 = new android.content.Intent(intent);
        isInstantApp = isInstantApp(processRecord, str, i4);
        if (isInstantApp) {
        }
        if (i7 != -1) {
        }
        iArr2 = iArr;
        intent2.addFlags(16);
        if (!this.mProcessesReady) {
            intent2.addFlags(1073741824);
        }
        if (iIntentReceiver != null) {
            if (!this.mEnableModernQueue) {
            }
            if (!android.os.UserHandle.isCore(i4)) {
            }
        }
        int i242 = -1;
        int[] iArr52 = iArr2;
        handleIncomingUser = this.mUserController.handleIncomingUser(i3, i4, i7, true, 0, "broadcast", str);
        if (handleIncomingUser != -1) {
        }
        intent3 = intent2;
        i8 = i4;
        action = intent3.getAction();
        if (broadcastOptions != null) {
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:14:0x0027  */
    /* JADX WARN: Removed duplicated region for block: B:16:0x002e  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0031  */
    /* JADX WARN: Removed duplicated region for block: B:25:0x002a  */
    @com.android.internal.annotations.GuardedBy({"this"})
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void scheduleCanceledResultTo(com.android.server.am.ProcessRecord processRecord, android.content.IIntentReceiver iIntentReceiver, android.content.Intent intent, int i, android.app.BroadcastOptions broadcastOptions, int i2, java.lang.String str) {
        boolean z;
        if (iIntentReceiver == null) {
            return;
        }
        android.app.IApplicationThread onewayThread = processRecord != null ? processRecord.getOnewayThread() : null;
        if (onewayThread != null) {
            if (broadcastOptions != null) {
                try {
                    if (broadcastOptions.isShareIdentityEnabled()) {
                        z = true;
                        onewayThread.scheduleRegisteredReceiver(iIntentReceiver, intent, 0, (java.lang.String) null, (android.os.Bundle) null, false, false, true, i, processRecord.mState.getReportedProcState(), !z ? i2 : -1, !z ? str : null);
                    }
                } catch (android.os.RemoteException e) {
                    processRecord.killLocked("Can't schedule resultTo", 13, 26, true);
                    android.util.Slog.d("ActivityManager", "Failed to schedule result of " + intent + " via " + processRecord + ": " + e);
                    return;
                }
            }
            z = false;
            onewayThread.scheduleRegisteredReceiver(iIntentReceiver, intent, 0, (java.lang.String) null, (android.os.Bundle) null, false, false, true, i, processRecord.mState.getReportedProcState(), !z ? i2 : -1, !z ? str : null);
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    private int getRealProcessStateLocked(com.android.server.am.ProcessRecord processRecord, int i) {
        if (processRecord == null) {
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(i);
            }
        }
        if (processRecord != null && processRecord.getThread() != null && !processRecord.isKilled()) {
            return processRecord.mState.getCurProcState();
        }
        return 20;
    }

    @com.android.internal.annotations.VisibleForTesting
    java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast> getStickyBroadcastsForTest(java.lang.String str, int i) {
        synchronized (this.mStickyBroadcasts) {
            try {
                android.util.ArrayMap<java.lang.String, java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast>> arrayMap = this.mStickyBroadcasts.get(i);
                if (arrayMap == null) {
                    return null;
                }
                return arrayMap.get(str);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    private int getUidFromIntent(android.content.Intent intent) {
        if (intent == null) {
            return -1;
        }
        android.os.Bundle extras = intent.getExtras();
        if (!intent.hasExtra("android.intent.extra.UID")) {
            return -1;
        }
        return extras.getInt("android.intent.extra.UID");
    }

    final void rotateBroadcastStatsIfNeededLocked() {
        long elapsedRealtime = android.os.SystemClock.elapsedRealtime();
        if (this.mCurBroadcastStats == null || this.mCurBroadcastStats.mStartRealtime + 86400000 < elapsedRealtime) {
            this.mLastBroadcastStats = this.mCurBroadcastStats;
            if (this.mLastBroadcastStats != null) {
                this.mLastBroadcastStats.mEndRealtime = android.os.SystemClock.elapsedRealtime();
                this.mLastBroadcastStats.mEndUptime = android.os.SystemClock.uptimeMillis();
            }
            this.mCurBroadcastStats = new com.android.server.am.BroadcastStats();
        }
    }

    final void addBroadcastStatLocked(java.lang.String str, java.lang.String str2, int i, int i2, long j) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBroadcast(str, str2, i, i2, j);
    }

    final void addBackgroundCheckViolationLocked(java.lang.String str, java.lang.String str2) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBackgroundCheckViolation(str, str2);
    }

    final void notifyBroadcastFinishedLocked(@android.annotation.NonNull com.android.server.am.BroadcastRecord broadcastRecord) {
        android.content.pm.ApplicationInfo applicationInfo = broadcastRecord.callerApp != null ? broadcastRecord.callerApp.info : null;
        java.lang.String str = applicationInfo != null ? applicationInfo.packageName : broadcastRecord.callerPackage;
        if (str != null) {
            this.mHandler.obtainMessage(74, broadcastRecord.callingUid, 0, str).sendToTarget();
        }
    }

    final android.content.Intent verifyBroadcastLocked(android.content.Intent intent) {
        if (intent != null) {
            if (intent.hasFileDescriptors()) {
                throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
            }
            intent.removeExtendedFlags(1);
        }
        int flags = intent.getFlags();
        if (!this.mProcessesReady && (67108864 & flags) == 0 && (1073741824 & flags) == 0) {
            android.util.Slog.e("ActivityManager", "Attempt to launch receivers of broadcast intent " + intent + " before boot completion");
            throw new java.lang.IllegalStateException("Cannot broadcast before boot completed");
        }
        if ((33554432 & flags) != 0) {
            throw new java.lang.IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
        }
        if ((flags & 4194304) != 0) {
            switch (android.os.Binder.getCallingUid()) {
                default:
                    android.util.Slog.w("ActivityManager", "Removing FLAG_RECEIVER_FROM_SHELL because caller is UID " + android.os.Binder.getCallingUid());
                    intent.removeFlags(4194304);
                case 0:
                case 2000:
                    return intent;
            }
        }
        return intent;
    }

    @java.lang.Deprecated
    public final int broadcastIntent(android.app.IApplicationThread iApplicationThread, android.content.Intent intent, java.lang.String str, android.content.IIntentReceiver iIntentReceiver, int i, java.lang.String str2, android.os.Bundle bundle, java.lang.String[] strArr, int i2, android.os.Bundle bundle2, boolean z, boolean z2, int i3) {
        return broadcastIntentWithFeature(iApplicationThread, null, intent, str, iIntentReceiver, i, str2, bundle, strArr, null, null, i2, bundle2, z, z2, i3);
    }

    public final int broadcastIntentWithFeature(android.app.IApplicationThread iApplicationThread, java.lang.String str, android.content.Intent intent, java.lang.String str2, android.content.IIntentReceiver iIntentReceiver, int i, java.lang.String str3, android.os.Bundle bundle, java.lang.String[] strArr, java.lang.String[] strArr2, java.lang.String[] strArr3, int i2, android.os.Bundle bundle2, boolean z, boolean z2, int i3) {
        java.lang.String str4;
        int broadcastIntentLocked;
        enforceNotIsolatedCaller("broadcastIntent");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                android.content.Intent verifyBroadcastLocked = verifyBroadcastLocked(intent);
                com.android.server.am.ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                int callingPid = android.os.Binder.getCallingPid();
                int callingUid = android.os.Binder.getCallingUid();
                enforceBroadcastOptionPermissionsInternal(bundle2, callingUid);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                if (recordForAppLOSP == null) {
                    str4 = null;
                } else {
                    try {
                        str4 = recordForAppLOSP.info.packageName;
                    } catch (java.lang.Throwable th) {
                        android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                        throw th;
                    }
                }
                broadcastIntentLocked = broadcastIntentLocked(recordForAppLOSP, str4, str, verifyBroadcastLocked, str2, recordForAppLOSP, iIntentReceiver, i, str3, bundle, strArr, strArr2, strArr3, i2, bundle2, z, z2, callingPid, callingUid, callingUid, callingPid, i3, android.app.BackgroundStartPrivileges.NONE, null, null);
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return broadcastIntentLocked;
    }

    int broadcastIntentInPackage(java.lang.String str, @android.annotation.Nullable java.lang.String str2, int i, int i2, int i3, android.content.Intent intent, java.lang.String str3, com.android.server.am.ProcessRecord processRecord, android.content.IIntentReceiver iIntentReceiver, int i4, java.lang.String str4, android.os.Bundle bundle, java.lang.String str5, android.os.Bundle bundle2, boolean z, boolean z2, int i5, android.app.BackgroundStartPrivileges backgroundStartPrivileges, @android.annotation.Nullable int[] iArr) {
        int broadcastIntentLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                android.content.Intent verifyBroadcastLocked = verifyBroadcastLocked(intent);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    broadcastIntentLocked = broadcastIntentLocked(null, str, str2, verifyBroadcastLocked, str3, processRecord, iIntentReceiver, i4, str4, bundle, str5 == null ? null : new java.lang.String[]{str5}, null, null, -1, bundle2, z, z2, -1, i, i2, i3, i5, backgroundStartPrivileges, iArr, null);
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                } catch (java.lang.Throwable th) {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return broadcastIntentLocked;
    }

    public final void unbroadcastIntent(android.app.IApplicationThread iApplicationThread, android.content.Intent intent, int i) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), i, true, 0, "removeStickyBroadcast", null);
        if (checkCallingPermission("android.permission.BROADCAST_STICKY") != 0) {
            java.lang.String str = "Permission Denial: unbroadcastIntent() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.BROADCAST_STICKY";
            android.util.Slog.w("ActivityManager", str);
            throw new java.lang.SecurityException(str);
        }
        synchronized (this.mStickyBroadcasts) {
            try {
                android.util.ArrayMap<java.lang.String, java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast>> arrayMap = this.mStickyBroadcasts.get(handleIncomingUser);
                if (arrayMap != null) {
                    java.util.ArrayList<com.android.server.am.ActivityManagerService.StickyBroadcast> arrayList = arrayMap.get(intent.getAction());
                    if (arrayList != null) {
                        int size = arrayList.size();
                        int i2 = 0;
                        while (true) {
                            if (i2 >= size) {
                                break;
                            }
                            if (!intent.filterEquals(arrayList.get(i2).intent)) {
                                i2++;
                            } else {
                                arrayList.remove(i2);
                                break;
                            }
                        }
                        if (arrayList.size() <= 0) {
                            arrayMap.remove(intent.getAction());
                        }
                    }
                    if (arrayMap.size() <= 0) {
                        this.mStickyBroadcasts.remove(handleIncomingUser);
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    void backgroundServicesFinishedLocked(int i) {
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.backgroundServicesFinishedLocked(i);
        }
    }

    public void finishReceiver(android.os.IBinder iBinder, int i, java.lang.String str, android.os.Bundle bundle, boolean z, int i2) {
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Bundle");
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    com.android.server.am.ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iBinder);
                    if (recordForAppLOSP != null) {
                        broadcastQueueForFlags(i2).finishReceiverLocked(recordForAppLOSP, i, str, bundle, z, true);
                        trimApplicationsLocked(false, 2);
                        resetPriorityAfterLockedSection();
                    } else {
                        android.util.Slog.w("ActivityManager", "finishReceiver: no app for " + iBinder);
                        resetPriorityAfterLockedSection();
                    }
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:127:0x0260  */
    /* JADX WARN: Removed duplicated region for block: B:128:0x0253  */
    /* JADX WARN: Removed duplicated region for block: B:141:0x00b4 A[Catch: all -> 0x006b, TRY_ENTER, TryCatch #5 {all -> 0x006b, blocks: (B:15:0x004c, B:18:0x0052, B:19:0x0066, B:22:0x0072, B:24:0x007c, B:25:0x0092, B:29:0x009e, B:32:0x00aa, B:33:0x00af, B:37:0x00d6, B:41:0x00e6, B:44:0x00ec, B:46:0x00f0, B:47:0x0118, B:48:0x015d, B:49:0x015e, B:56:0x016c, B:59:0x0173, B:60:0x01b4, B:61:0x01b5, B:63:0x01bb, B:67:0x01c5, B:72:0x01da, B:74:0x01de, B:77:0x01e5, B:78:0x01ff, B:82:0x0204, B:84:0x0211, B:86:0x0239, B:89:0x0254, B:92:0x0261, B:93:0x026e, B:101:0x02ff, B:103:0x0306, B:104:0x0316, B:106:0x031b, B:107:0x031e, B:123:0x0325, B:124:0x0328, B:129:0x021a, B:131:0x0224, B:132:0x022a, B:133:0x01d3, B:141:0x00b4, B:143:0x00ba, B:144:0x00d0), top: B:14:0x004c }] */
    /* JADX WARN: Removed duplicated region for block: B:31:0x00a8  */
    /* JADX WARN: Removed duplicated region for block: B:74:0x01de A[Catch: all -> 0x006b, TryCatch #5 {all -> 0x006b, blocks: (B:15:0x004c, B:18:0x0052, B:19:0x0066, B:22:0x0072, B:24:0x007c, B:25:0x0092, B:29:0x009e, B:32:0x00aa, B:33:0x00af, B:37:0x00d6, B:41:0x00e6, B:44:0x00ec, B:46:0x00f0, B:47:0x0118, B:48:0x015d, B:49:0x015e, B:56:0x016c, B:59:0x0173, B:60:0x01b4, B:61:0x01b5, B:63:0x01bb, B:67:0x01c5, B:72:0x01da, B:74:0x01de, B:77:0x01e5, B:78:0x01ff, B:82:0x0204, B:84:0x0211, B:86:0x0239, B:89:0x0254, B:92:0x0261, B:93:0x026e, B:101:0x02ff, B:103:0x0306, B:104:0x0316, B:106:0x031b, B:107:0x031e, B:123:0x0325, B:124:0x0328, B:129:0x021a, B:131:0x0224, B:132:0x022a, B:133:0x01d3, B:141:0x00b4, B:143:0x00ba, B:144:0x00d0), top: B:14:0x004c }] */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0204 A[Catch: all -> 0x006b, TRY_ENTER, TryCatch #5 {all -> 0x006b, blocks: (B:15:0x004c, B:18:0x0052, B:19:0x0066, B:22:0x0072, B:24:0x007c, B:25:0x0092, B:29:0x009e, B:32:0x00aa, B:33:0x00af, B:37:0x00d6, B:41:0x00e6, B:44:0x00ec, B:46:0x00f0, B:47:0x0118, B:48:0x015d, B:49:0x015e, B:56:0x016c, B:59:0x0173, B:60:0x01b4, B:61:0x01b5, B:63:0x01bb, B:67:0x01c5, B:72:0x01da, B:74:0x01de, B:77:0x01e5, B:78:0x01ff, B:82:0x0204, B:84:0x0211, B:86:0x0239, B:89:0x0254, B:92:0x0261, B:93:0x026e, B:101:0x02ff, B:103:0x0306, B:104:0x0316, B:106:0x031b, B:107:0x031e, B:123:0x0325, B:124:0x0328, B:129:0x021a, B:131:0x0224, B:132:0x022a, B:133:0x01d3, B:141:0x00b4, B:143:0x00ba, B:144:0x00d0), top: B:14:0x004c }] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0251  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x025e  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x026f A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r0v27, types: [com.android.server.appop.AppOpsService] */
    /* JADX WARN: Type inference failed for: r14v1 */
    /* JADX WARN: Type inference failed for: r14v2, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r14v3 */
    /* JADX WARN: Type inference failed for: r6v10, types: [com.android.server.am.ActivityManagerGlobalLock] */
    /* JADX WARN: Type inference failed for: r6v11 */
    /* JADX WARN: Type inference failed for: r6v14 */
    /* JADX WARN: Type inference failed for: r6v29 */
    /* JADX WARN: Type inference failed for: r6v30 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String str, int i, android.os.Bundle bundle, android.app.IInstrumentationWatcher iInstrumentationWatcher, android.app.IUiAutomationConnection iUiAutomationConnection, int i2, java.lang.String str2) {
        android.content.pm.ApplicationInfo applicationInfo;
        android.content.pm.ApplicationInfo applicationInfo2;
        android.content.pm.InstrumentationInfo instrumentationInfo;
        int i3;
        boolean z;
        java.lang.String str3;
        ?? r6;
        java.lang.Object obj;
        com.android.server.am.ActiveInstrumentation activeInstrumentation;
        android.content.pm.ApplicationInfo applicationInfo3;
        boolean z2;
        int i4;
        ?? r14;
        com.android.server.am.ProcessRecord addAppLocked;
        android.content.pm.ApplicationInfo applicationInfo4;
        android.content.pm.InstrumentationInfo instrumentationInfoAsUser;
        enforceNotIsolatedCaller("startInstrumentation");
        int callingUid = android.os.Binder.getCallingUid();
        int callingPid = android.os.Binder.getCallingPid();
        int handleIncomingUser = this.mUserController.handleIncomingUser(callingPid, callingUid, i2, false, 2, "startInstrumentation", null);
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Bundle");
        }
        android.content.pm.IPackageManager packageManager = android.app.AppGlobals.getPackageManager();
        boostPriorityForLockedSection();
        synchronized (this) {
            boolean z3 = (i & 8) != 0;
            android.content.pm.InstrumentationInfo instrumentationInfo2 = null;
            try {
                try {
                    instrumentationInfoAsUser = packageManager.getInstrumentationInfoAsUser(componentName, 1024, handleIncomingUser);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (android.os.RemoteException e) {
                applicationInfo = null;
            }
            try {
            } catch (android.os.RemoteException e2) {
                applicationInfo = null;
                instrumentationInfo2 = instrumentationInfoAsUser;
                applicationInfo2 = applicationInfo;
                instrumentationInfo = instrumentationInfo2;
                if (instrumentationInfo.targetPackage.equals(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME)) {
                }
                try {
                    i3 = packageManager.checkSignatures(instrumentationInfo.targetPackage, instrumentationInfo.packageName, handleIncomingUser);
                } catch (android.os.RemoteException e3) {
                    i3 = -3;
                }
                if (i3 < 0) {
                    if (android.os.Build.IS_DEBUGGABLE) {
                    }
                    java.lang.String str4 = "Permission Denial: starting instrumentation " + componentName + " from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " not allowed because package " + instrumentationInfo.packageName + " does not have a signature matching the target " + instrumentationInfo.targetPackage;
                    reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, str4);
                    throw new java.lang.SecurityException(str4);
                }
                if (!android.os.Build.IS_DEBUGGABLE) {
                    java.lang.String str5 = "Permission Denial: instrumentation test " + componentName + " from pid=" + callingPid + ", uid=" + callingUid + ", pkgName=" + this.mInternal.getPackageNameByPid(callingPid) + " not allowed because it's not started from SHELL";
                    android.util.Slog.wtfQuiet("ActivityManager", str5);
                    reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, str5);
                    throw new java.lang.SecurityException(str5);
                }
                if (applicationInfo2.usesNonSdkApi()) {
                }
                if (z) {
                }
                if (!z) {
                }
                enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                if ((i & 32) == 0) {
                }
            }
            if (instrumentationInfoAsUser == null) {
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Unable to find instrumentation info for: " + componentName);
                resetPriorityAfterLockedSection();
                return false;
            }
            android.content.pm.ApplicationInfo applicationInfo5 = packageManager.getApplicationInfo(instrumentationInfoAsUser.targetPackage, 1024L, handleIncomingUser);
            if (applicationInfo5 == null) {
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Unable to find instrumentation target package: " + instrumentationInfoAsUser.targetPackage);
                resetPriorityAfterLockedSection();
                return false;
            }
            applicationInfo2 = applicationInfo5;
            instrumentationInfo = instrumentationInfoAsUser;
            if (instrumentationInfo.targetPackage.equals(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME)) {
                if (!applicationInfo2.hasCode()) {
                    reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Instrumentation target has no code: " + instrumentationInfo.targetPackage);
                    resetPriorityAfterLockedSection();
                    return false;
                }
            } else if (!z3) {
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Cannot instrument system server without 'no-restart'");
                resetPriorityAfterLockedSection();
                return false;
            }
            i3 = packageManager.checkSignatures(instrumentationInfo.targetPackage, instrumentationInfo.packageName, handleIncomingUser);
            if (i3 < 0 && i3 != -1) {
                if (android.os.Build.IS_DEBUGGABLE || callingUid != 0 || (i & 16) != 0) {
                    java.lang.String str42 = "Permission Denial: starting instrumentation " + componentName + " from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " not allowed because package " + instrumentationInfo.packageName + " does not have a signature matching the target " + instrumentationInfo.targetPackage;
                    reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, str42);
                    throw new java.lang.SecurityException(str42);
                }
                android.util.Slog.w("ActivityManager", "Instrumentation test " + instrumentationInfo.packageName + " doesn't have a signature matching the target " + instrumentationInfo.targetPackage + ", which would not be allowed on the production Android builds");
            }
            if (!android.os.Build.IS_DEBUGGABLE && callingUid != 0 && callingUid != 2000 && callingUid != 1000 && !hasActiveInstrumentationLocked(callingPid)) {
                java.lang.String str52 = "Permission Denial: instrumentation test " + componentName + " from pid=" + callingPid + ", uid=" + callingUid + ", pkgName=" + this.mInternal.getPackageNameByPid(callingPid) + " not allowed because it's not started from SHELL";
                android.util.Slog.wtfQuiet("ActivityManager", str52);
                reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, str52);
                throw new java.lang.SecurityException(str52);
            }
            z = (applicationInfo2.usesNonSdkApi() && (i & 1) == 0) ? false : true;
            boolean z4 = (z && (i & 4) == 0) ? false : true;
            if (!z || z4) {
                enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
            }
            if ((i & 32) == 0) {
                boolean startInstrumentationOfSdkSandbox = startInstrumentationOfSdkSandbox(componentName, str, bundle, iInstrumentationWatcher, iUiAutomationConnection, handleIncomingUser, str2, instrumentationInfo, applicationInfo2, z3, z, z4, (i & 64) != 0);
                resetPriorityAfterLockedSection();
                return startInstrumentationOfSdkSandbox;
            }
            com.android.server.am.ActiveInstrumentation activeInstrumentation2 = new com.android.server.am.ActiveInstrumentation(this);
            activeInstrumentation2.mClass = componentName;
            java.lang.String str6 = applicationInfo2.processName;
            if (instrumentationInfo.targetProcesses == null) {
                activeInstrumentation2.mTargetProcesses = new java.lang.String[]{applicationInfo2.processName};
            } else if (instrumentationInfo.targetProcesses.equals(com.android.server.am.SettingsToPropertiesMapper.NAMESPACE_REBOOT_STAGING_DELIMITER)) {
                activeInstrumentation2.mTargetProcesses = new java.lang.String[0];
            } else {
                activeInstrumentation2.mTargetProcesses = instrumentationInfo.targetProcesses.split(",");
                str3 = activeInstrumentation2.mTargetProcesses[0];
                activeInstrumentation2.mTargetInfo = applicationInfo2;
                activeInstrumentation2.mProfileFile = str;
                activeInstrumentation2.mArguments = bundle;
                activeInstrumentation2.mWatcher = iInstrumentationWatcher;
                activeInstrumentation2.mUiAutomationConnection = iUiAutomationConnection;
                activeInstrumentation2.mResultClass = componentName;
                activeInstrumentation2.mHasBackgroundActivityStartsPermission = checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", callingPid, callingUid) != 0;
                activeInstrumentation2.mHasBackgroundForegroundServiceStartsPermission = checkPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", callingPid, callingUid) != 0;
                activeInstrumentation2.mNoRestart = z3;
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                r6 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (r6) {
                    try {
                        if (z3) {
                            addAppLocked = getProcessRecordLocked(applicationInfo2.processName, applicationInfo2.uid);
                            obj = r6;
                            activeInstrumentation = activeInstrumentation2;
                            applicationInfo3 = applicationInfo2;
                            z2 = z3;
                            i4 = callingUid;
                            r14 = 0;
                            r6 = r6;
                        } else {
                            obj = r6;
                            activeInstrumentation = activeInstrumentation2;
                            applicationInfo3 = applicationInfo2;
                            android.content.pm.InstrumentationInfo instrumentationInfo3 = instrumentationInfo;
                            z2 = z3;
                            i4 = callingUid;
                            r14 = 0;
                            try {
                                forceStopPackageLocked(instrumentationInfo.targetPackage, -1, true, false, true, true, false, false, handleIncomingUser, "start instr");
                                if (this.mUsageStatsService != null) {
                                    instrumentationInfo = instrumentationInfo3;
                                    this.mUsageStatsService.reportEvent(instrumentationInfo.targetPackage, handleIncomingUser, 6);
                                } else {
                                    instrumentationInfo = instrumentationInfo3;
                                }
                                boolean z5 = z4;
                                addAppLocked = addAppLocked(applicationInfo3, str3, false, z, z5, str2, 0);
                                addAppLocked.mProfile.addHostingComponentType(8);
                                r6 = z5;
                            } catch (java.lang.Throwable th2) {
                                th = th2;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        com.android.server.am.ActiveInstrumentation activeInstrumentation3 = activeInstrumentation;
                        addAppLocked.setActiveInstrumentation(activeInstrumentation3);
                        activeInstrumentation3.mFinished = r14;
                        activeInstrumentation3.mSourceUid = i4;
                        activeInstrumentation3.mRunningProcesses.add(addAppLocked);
                        if (!this.mActiveInstrumentation.contains(activeInstrumentation3)) {
                            this.mActiveInstrumentation.add(activeInstrumentation3);
                        }
                        resetPriorityAfterProcLockedSection();
                        if ((i & 2) != 0) {
                            applicationInfo4 = applicationInfo3;
                            this.mAppOpsService.setMode(99, applicationInfo4.uid, instrumentationInfo.packageName, r14);
                        } else {
                            applicationInfo4 = applicationInfo3;
                        }
                        android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                        if (z2) {
                            instrumentWithoutRestart(activeInstrumentation3, applicationInfo4);
                        }
                        resetPriorityAfterLockedSection();
                        return true;
                    } catch (java.lang.Throwable th3) {
                        th = th3;
                        obj = r6;
                    }
                }
            }
            str3 = str6;
            activeInstrumentation2.mTargetInfo = applicationInfo2;
            activeInstrumentation2.mProfileFile = str;
            activeInstrumentation2.mArguments = bundle;
            activeInstrumentation2.mWatcher = iInstrumentationWatcher;
            activeInstrumentation2.mUiAutomationConnection = iUiAutomationConnection;
            activeInstrumentation2.mResultClass = componentName;
            activeInstrumentation2.mHasBackgroundActivityStartsPermission = checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", callingPid, callingUid) != 0;
            activeInstrumentation2.mHasBackgroundForegroundServiceStartsPermission = checkPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", callingPid, callingUid) != 0;
            activeInstrumentation2.mNoRestart = z3;
            long clearCallingIdentity2 = android.os.Binder.clearCallingIdentity();
            r6 = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (r6) {
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    private boolean hasActiveInstrumentationLocked(int i) {
        boolean z = false;
        if (i == 0) {
            return false;
        }
        synchronized (this.mPidsSelfLocked) {
            try {
                com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
                if (processRecord != null && processRecord.getActiveInstrumentation() != null) {
                    z = true;
                }
            } finally {
            }
        }
        return z;
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    private boolean startInstrumentationOfSdkSandbox(android.content.ComponentName componentName, java.lang.String str, android.os.Bundle bundle, android.app.IInstrumentationWatcher iInstrumentationWatcher, android.app.IUiAutomationConnection iUiAutomationConnection, int i, java.lang.String str2, android.content.pm.InstrumentationInfo instrumentationInfo, android.content.pm.ApplicationInfo applicationInfo, boolean z, boolean z2, boolean z3, boolean z4) {
        android.content.pm.ApplicationInfo applicationInfo2;
        java.lang.String str3;
        if (z) {
            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Instrumenting sdk sandbox with --no-restart flag is not supported");
            return false;
        }
        com.android.server.sdksandbox.SdkSandboxManagerLocal sdkSandboxManagerLocal = (com.android.server.sdksandbox.SdkSandboxManagerLocal) com.android.server.LocalManagerRegistry.getManager(com.android.server.sdksandbox.SdkSandboxManagerLocal.class);
        if (sdkSandboxManagerLocal == null) {
            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Can't locate SdkSandboxManagerLocal");
            return false;
        }
        try {
            if (com.android.sdksandbox.flags.Flags.sdkSandboxInstrumentationInfo()) {
                android.content.pm.ApplicationInfo sdkSandboxApplicationInfoForInstrumentation = sdkSandboxManagerLocal.getSdkSandboxApplicationInfoForInstrumentation(applicationInfo, z4);
                applicationInfo2 = sdkSandboxApplicationInfoForInstrumentation;
                str3 = sdkSandboxApplicationInfoForInstrumentation.processName;
            } else {
                android.content.pm.PackageManager packageManager = this.mContext.getPackageManager();
                android.content.pm.ApplicationInfo applicationInfoAsUser = packageManager.getApplicationInfoAsUser(packageManager.getSdkSandboxPackageName(), 0, i);
                java.lang.String sdkSandboxProcessNameForInstrumentation = sdkSandboxManagerLocal.getSdkSandboxProcessNameForInstrumentation(applicationInfo);
                applicationInfoAsUser.uid = android.os.Process.toSdkSandboxUid(applicationInfo.uid);
                applicationInfo2 = applicationInfoAsUser;
                str3 = sdkSandboxProcessNameForInstrumentation;
            }
            com.android.server.am.ActiveInstrumentation activeInstrumentation = new com.android.server.am.ActiveInstrumentation(this);
            activeInstrumentation.mClass = componentName;
            activeInstrumentation.mTargetProcesses = new java.lang.String[]{str3};
            activeInstrumentation.mTargetInfo = applicationInfo2;
            activeInstrumentation.mIsSdkInSandbox = z4;
            activeInstrumentation.mProfileFile = str;
            activeInstrumentation.mArguments = bundle;
            activeInstrumentation.mWatcher = iInstrumentationWatcher;
            activeInstrumentation.mUiAutomationConnection = iUiAutomationConnection;
            activeInstrumentation.mResultClass = componentName;
            activeInstrumentation.mHasBackgroundActivityStartsPermission = z4 && checkPermission("android.permission.START_ACTIVITIES_FROM_SDK_SANDBOX", android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid()) == 0;
            activeInstrumentation.mHasBackgroundForegroundServiceStartsPermission = false;
            activeInstrumentation.mNoRestart = false;
            int callingUid = android.os.Binder.getCallingUid();
            long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
            try {
                sdkSandboxManagerLocal.notifyInstrumentationStarted(applicationInfo.packageName, applicationInfo.uid);
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        try {
                            forceStopPackageLocked(instrumentationInfo.targetPackage, -1, true, false, true, true, false, false, i, "start instr");
                            com.android.server.am.ProcessRecord addAppLocked = addAppLocked(applicationInfo2, str3, false, true, applicationInfo2.uid, applicationInfo.packageName, z2, z3, str2, 0);
                            addAppLocked.setActiveInstrumentation(activeInstrumentation);
                            activeInstrumentation.mFinished = false;
                            activeInstrumentation.mSourceUid = callingUid;
                            activeInstrumentation.mRunningProcesses.add(addAppLocked);
                            if (!this.mActiveInstrumentation.contains(activeInstrumentation)) {
                                this.mActiveInstrumentation.add(activeInstrumentation);
                            }
                            addAppLocked.mProfile.addHostingComponentType(8);
                            resetPriorityAfterProcLockedSection();
                            return true;
                        } catch (java.lang.Throwable th) {
                            th = th;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    } catch (java.lang.Throwable th2) {
                        th = th2;
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
            } finally {
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        } catch (android.content.pm.PackageManager.NameNotFoundException e) {
            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Can't find SdkSandbox package");
            return false;
        }
    }

    private void instrumentWithoutRestart(com.android.server.am.ActiveInstrumentation activeInstrumentation, android.content.pm.ApplicationInfo applicationInfo) {
        com.android.server.am.ProcessRecord processRecordLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                processRecordLocked = getProcessRecordLocked(applicationInfo.processName, applicationInfo.uid);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        try {
            processRecordLocked.getThread().instrumentWithoutRestart(activeInstrumentation.mClass, activeInstrumentation.mArguments, activeInstrumentation.mWatcher, activeInstrumentation.mUiAutomationConnection, applicationInfo);
        } catch (android.os.RemoteException e) {
            android.util.Slog.i("ActivityManager", "RemoteException from instrumentWithoutRestart", e);
        }
    }

    private boolean isCallerShell() {
        int callingUid = android.os.Binder.getCallingUid();
        return callingUid == 2000 || callingUid == 0;
    }

    private void reportStartInstrumentationFailureLocked(android.app.IInstrumentationWatcher iInstrumentationWatcher, android.content.ComponentName componentName, java.lang.String str) {
        android.util.Slog.w("ActivityManager", str);
        if (iInstrumentationWatcher != null) {
            android.os.Bundle bundle = new android.os.Bundle();
            bundle.putString("id", "ActivityManagerService");
            bundle.putString("Error", str);
            this.mInstrumentationReporter.reportStatus(iInstrumentationWatcher, componentName, -1, bundle);
        }
    }

    void addInstrumentationResultsLocked(com.android.server.am.ProcessRecord processRecord, android.os.Bundle bundle) {
        com.android.server.am.ActiveInstrumentation activeInstrumentation = processRecord.getActiveInstrumentation();
        if (activeInstrumentation == null) {
            android.util.Slog.w("ActivityManager", "finishInstrumentation called on non-instrumented: " + processRecord);
            return;
        }
        if (!activeInstrumentation.mFinished && bundle != null) {
            if (activeInstrumentation.mCurResults == null) {
                activeInstrumentation.mCurResults = new android.os.Bundle(bundle);
            } else {
                activeInstrumentation.mCurResults.putAll(bundle);
            }
        }
    }

    public void addInstrumentationResults(android.app.IApplicationThread iApplicationThread, android.os.Bundle bundle) {
        android.os.UserHandle.getCallingUserId();
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    android.util.Slog.w("ActivityManager", "addInstrumentationResults: no app for " + iApplicationThread);
                    resetPriorityAfterLockedSection();
                    return;
                }
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    addInstrumentationResultsLocked(recordForAppLOSP, bundle);
                    resetPriorityAfterLockedSection();
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void finishInstrumentationLocked(com.android.server.am.ProcessRecord processRecord, int i, android.os.Bundle bundle) {
        android.os.Bundle bundle2 = bundle;
        try {
            android.os.Trace.traceBegin(64L, "finishInstrumentationLocked()");
            com.android.server.am.ActiveInstrumentation activeInstrumentation = processRecord.getActiveInstrumentation();
            if (activeInstrumentation == null) {
                android.util.Slog.w("ActivityManager", "finishInstrumentation called on non-instrumented: " + processRecord);
                return;
            }
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    if (!activeInstrumentation.mFinished) {
                        if (activeInstrumentation.mWatcher != null) {
                            android.os.Bundle bundle3 = activeInstrumentation.mCurResults;
                            if (bundle3 != null) {
                                if (activeInstrumentation.mCurResults != null && bundle2 != null) {
                                    bundle3.putAll(bundle2);
                                }
                                bundle2 = bundle3;
                            }
                            this.mInstrumentationReporter.reportFinished(activeInstrumentation.mWatcher, activeInstrumentation.mClass, i, bundle2);
                        }
                        if (activeInstrumentation.mUiAutomationConnection != null) {
                            this.mAppOpsService.setMode(99, processRecord.uid, processRecord.info.packageName, 2);
                            this.mAppOpsService.setAppOpsServiceDelegate(null);
                            getPermissionManagerInternal().stopShellPermissionIdentityDelegation();
                            this.mHandler.obtainMessage(56, activeInstrumentation.mUiAutomationConnection).sendToTarget();
                        }
                        activeInstrumentation.mFinished = true;
                    }
                    activeInstrumentation.removeProcess(processRecord);
                    processRecord.setActiveInstrumentation(null);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            processRecord.mProfile.clearHostingComponentType(8);
            if (processRecord.isSdkSandbox) {
                killUid(android.os.UserHandle.getAppId(processRecord.uid), android.os.UserHandle.getUserId(processRecord.uid), "finished instr");
                com.android.server.sdksandbox.SdkSandboxManagerLocal sdkSandboxManagerLocal = (com.android.server.sdksandbox.SdkSandboxManagerLocal) com.android.server.LocalManagerRegistry.getManager(com.android.server.sdksandbox.SdkSandboxManagerLocal.class);
                if (sdkSandboxManagerLocal != null) {
                    sdkSandboxManagerLocal.notifyInstrumentationFinished(processRecord.sdkSandboxClientAppPackage, android.os.Process.getAppUidForSdkSandboxUid(processRecord.uid));
                }
            } else if (!activeInstrumentation.mNoRestart) {
                forceStopPackageLocked(processRecord.info.packageName, -1, false, false, true, true, false, false, processRecord.userId, "finished inst");
            }
        } finally {
            android.os.Trace.traceEnd(64L);
        }
    }

    public void finishInstrumentation(android.app.IApplicationThread iApplicationThread, int i, android.os.Bundle bundle) {
        android.os.UserHandle.getCallingUserId();
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new java.lang.IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    android.util.Slog.w("ActivityManager", "finishInstrumentation: no app for " + iApplicationThread);
                    resetPriorityAfterLockedSection();
                    return;
                }
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                finishInstrumentationLocked(recordForAppLOSP, i, bundle);
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                resetPriorityAfterLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public android.app.ActivityTaskManager.RootTaskInfo getFocusedRootTaskInfo() throws android.os.RemoteException {
        return this.mActivityTaskManager.getFocusedRootTaskInfo();
    }

    public android.content.res.Configuration getConfiguration() {
        return this.mActivityTaskManager.getConfiguration();
    }

    public void suppressResizeConfigChanges(boolean z) throws android.os.RemoteException {
        this.mActivityTaskManager.suppressResizeConfigChanges(z);
    }

    public void updatePersistentConfiguration(android.content.res.Configuration configuration) {
        updatePersistentConfigurationWithAttribution(configuration, android.provider.Settings.getPackageNameForUid(this.mContext, android.os.Binder.getCallingUid()), null);
    }

    public void updatePersistentConfigurationWithAttribution(android.content.res.Configuration configuration, java.lang.String str, java.lang.String str2) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission("updatePersistentConfiguration()", str, str2);
        if (configuration == null) {
            throw new java.lang.NullPointerException("Configuration must not be null");
        }
        this.mActivityTaskManager.updatePersistentConfiguration(configuration, android.os.UserHandle.getCallingUserId());
    }

    private void enforceWriteSettingsPermission(java.lang.String str, java.lang.String str2, java.lang.String str3) {
        int callingUid = android.os.Binder.getCallingUid();
        if (callingUid == 0 || android.provider.Settings.checkAndNoteWriteSettingsOperation(this.mContext, callingUid, str2, str3, false)) {
            return;
        }
        java.lang.String str4 = "Permission Denial: " + str + " from pid=" + android.os.Binder.getCallingPid() + ", uid=" + callingUid + " requires android.permission.WRITE_SETTINGS";
        android.util.Slog.w("ActivityManager", str4);
        throw new java.lang.SecurityException(str4);
    }

    public boolean updateConfiguration(android.content.res.Configuration configuration) {
        return this.mActivityTaskManager.updateConfiguration(configuration);
    }

    public boolean updateMccMncConfiguration(java.lang.String str, java.lang.String str2) {
        try {
            int parseInt = java.lang.Integer.parseInt(str);
            int parseInt2 = java.lang.Integer.parseInt(str2);
            android.content.res.Configuration configuration = new android.content.res.Configuration();
            configuration.mcc = parseInt;
            if (parseInt2 == 0) {
                parseInt2 = com.android.server.location.gnss.hal.GnssNative.GNSS_AIDING_TYPE_ALL;
            }
            configuration.mnc = parseInt2;
            return this.mActivityTaskManager.updateConfiguration(configuration);
        } catch (java.lang.NumberFormatException | java.lang.StringIndexOutOfBoundsException e) {
            android.util.Slog.e("ActivityManager", "Error parsing mcc: " + str + " mnc: " + str2 + ". ex=" + e);
            return false;
        }
    }

    public int getLaunchedFromUid(android.os.IBinder iBinder) {
        return android.app.ActivityClient.getInstance().getLaunchedFromUid(iBinder);
    }

    public java.lang.String getLaunchedFromPackage(android.os.IBinder iBinder) {
        return android.app.ActivityClient.getInstance().getLaunchedFromPackage(iBinder);
    }

    boolean isReceivingBroadcastLocked(com.android.server.am.ProcessRecord processRecord, int[] iArr) {
        int i = Integer.MIN_VALUE;
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            i = java.lang.Math.max(i, broadcastQueue.getPreferredSchedulingGroupLocked(processRecord));
        }
        iArr[0] = i;
        return i != Integer.MIN_VALUE;
    }

    com.android.server.am.ActivityManagerService.Association startAssociationLocked(int i, java.lang.String str, int i2, int i3, long j, android.content.ComponentName componentName, java.lang.String str2) {
        if (!this.mTrackingAssociations) {
            return null;
        }
        android.util.ArrayMap<android.content.ComponentName, android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>>> arrayMap = this.mAssociations.get(i3);
        if (arrayMap == null) {
            arrayMap = new android.util.ArrayMap<>();
            this.mAssociations.put(i3, arrayMap);
        }
        android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>> sparseArray = arrayMap.get(componentName);
        if (sparseArray == null) {
            sparseArray = new android.util.SparseArray<>();
            arrayMap.put(componentName, sparseArray);
        }
        android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association> arrayMap2 = sparseArray.get(i);
        if (arrayMap2 == null) {
            arrayMap2 = new android.util.ArrayMap<>();
            sparseArray.put(i, arrayMap2);
        }
        com.android.server.am.ActivityManagerService.Association association = arrayMap2.get(str);
        if (association == null) {
            association = new com.android.server.am.ActivityManagerService.Association(i, str, i3, componentName, str2);
            arrayMap2.put(str, association);
        }
        association.mCount++;
        association.mNesting++;
        if (association.mNesting == 1) {
            long uptimeMillis = android.os.SystemClock.uptimeMillis();
            association.mLastStateUptime = uptimeMillis;
            association.mStartTime = uptimeMillis;
            association.mLastState = i2;
        }
        return association;
    }

    void stopAssociationLocked(int i, java.lang.String str, int i2, long j, android.content.ComponentName componentName, java.lang.String str2) {
        android.util.ArrayMap<android.content.ComponentName, android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>>> arrayMap;
        android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>> sparseArray;
        android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association> arrayMap2;
        com.android.server.am.ActivityManagerService.Association association;
        if (!this.mTrackingAssociations || (arrayMap = this.mAssociations.get(i2)) == null || (sparseArray = arrayMap.get(componentName)) == null || (arrayMap2 = sparseArray.get(i)) == null || (association = arrayMap2.get(str)) == null || association.mNesting <= 0) {
            return;
        }
        association.mNesting--;
        if (association.mNesting == 0) {
            long uptimeMillis = android.os.SystemClock.uptimeMillis();
            association.mTime += uptimeMillis - association.mStartTime;
            long[] jArr = association.mStateTimes;
            int i3 = association.mLastState + 0;
            jArr[i3] = jArr[i3] + (uptimeMillis - association.mLastStateUptime);
            association.mLastState = 22;
        }
    }

    void noteUidProcessState(int i, int i2, int i3) {
        int i4;
        int i5;
        this.mBatteryStatsService.noteUidProcessState(i, i2);
        this.mAppOpsService.updateUidProcState(i, i2, i3);
        if (com.android.server.stats.pull.StatsPullAtomService.ENABLE_MOBILE_DATA_STATS_AGGREGATED_PULLER) {
            try {
                if (this.mStatsPullAtomServiceInternal == null) {
                    this.mStatsPullAtomServiceInternal = (com.android.server.stats.pull.StatsPullAtomServiceInternal) com.android.server.LocalServices.getService(com.android.server.stats.pull.StatsPullAtomServiceInternal.class);
                }
                if (this.mStatsPullAtomServiceInternal != null) {
                    this.mStatsPullAtomServiceInternal.noteUidProcessState(i, i2);
                } else {
                    android.util.Slog.d("ActivityManager", "StatsPullAtomService not ready yet");
                }
            } catch (java.lang.Exception e) {
                android.util.Slog.e("ActivityManager", "Exception during logging uid proc state change event", e);
            }
        }
        if (this.mTrackingAssociations) {
            int size = this.mAssociations.size();
            int i6 = 0;
            int i7 = 0;
            while (i7 < size) {
                android.util.ArrayMap<android.content.ComponentName, android.util.SparseArray<android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association>>> valueAt = this.mAssociations.valueAt(i7);
                int size2 = valueAt.size();
                int i8 = i6;
                while (i8 < size2) {
                    android.util.ArrayMap<java.lang.String, com.android.server.am.ActivityManagerService.Association> arrayMap = valueAt.valueAt(i8).get(i);
                    if (arrayMap != null) {
                        int size3 = arrayMap.size();
                        int i9 = i6;
                        while (i9 < size3) {
                            com.android.server.am.ActivityManagerService.Association valueAt2 = arrayMap.valueAt(i9);
                            if (valueAt2.mNesting < 1) {
                                i4 = size;
                                i5 = i7;
                            } else {
                                long uptimeMillis = android.os.SystemClock.uptimeMillis();
                                long[] jArr = valueAt2.mStateTimes;
                                i4 = size;
                                int i10 = valueAt2.mLastState - i6;
                                i5 = i7;
                                jArr[i10] = jArr[i10] + (uptimeMillis - valueAt2.mLastStateUptime);
                                valueAt2.mLastState = i2;
                                valueAt2.mLastStateUptime = uptimeMillis;
                            }
                            i9++;
                            size = i4;
                            i7 = i5;
                            i6 = 0;
                        }
                    }
                    i8++;
                    size = size;
                    i7 = i7;
                    i6 = 0;
                }
                i7++;
                i6 = 0;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final boolean canGcNowLocked() {
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            if (!broadcastQueue.lambda$waitForIdle$1()) {
                return false;
            }
        }
        return this.mAtmInternal.canGcNow();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkExcessivePowerUsage() {
        updateCpuStatsNow();
        final boolean z = this.mSystemReady && android.util.FeatureFlagUtils.isEnabled(this.mContext, "settings_enable_monitor_phantom_procs");
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                final boolean z2 = this.mLastPowerCheckUptime != 0;
                final long uptimeMillis = android.os.SystemClock.uptimeMillis();
                final long j = uptimeMillis - this.mLastPowerCheckUptime;
                this.mLastPowerCheckUptime = uptimeMillis;
                this.mProcessList.forEachLruProcessesLOSP(false, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda7
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.am.ActivityManagerService.this.lambda$checkExcessivePowerUsage$20(uptimeMillis, j, z2, z, (com.android.server.am.ProcessRecord) obj);
                    }
                });
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$checkExcessivePowerUsage$20(long j, long j2, boolean z, boolean z2, com.android.server.am.ProcessRecord processRecord) {
        int i;
        if (processRecord.getThread() != null && processRecord.mState.getSetProcState() >= 14) {
            long whenUnimportant = j - processRecord.mState.getWhenUnimportant();
            if (whenUnimportant <= this.mConstants.POWER_CHECK_INTERVAL) {
                i = this.mConstants.POWER_CHECK_MAX_CPU_1;
            } else if (whenUnimportant <= this.mConstants.POWER_CHECK_INTERVAL * 2 || processRecord.mState.getSetProcState() <= 14) {
                i = this.mConstants.POWER_CHECK_MAX_CPU_2;
            } else if (whenUnimportant <= this.mConstants.POWER_CHECK_INTERVAL * 3) {
                i = this.mConstants.POWER_CHECK_MAX_CPU_3;
            } else {
                i = this.mConstants.POWER_CHECK_MAX_CPU_4;
            }
            updateAppProcessCpuTimeLPr(j2, z, whenUnimportant, i, processRecord);
            if (z2) {
                updatePhantomProcessCpuTimeLPr(j2, z, whenUnimportant, i, processRecord);
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    private void updateAppProcessCpuTimeLPr(final long j, boolean z, final long j2, final int i, final com.android.server.am.ProcessRecord processRecord) {
        synchronized (this.mAppProfiler.mProfilerLock) {
            try {
                com.android.server.am.ProcessProfileRecord processProfileRecord = processRecord.mProfile;
                long j3 = processProfileRecord.mCurCpuTime.get();
                long j4 = processProfileRecord.mLastCpuTime.get();
                if (j4 > 0) {
                    final long j5 = j3 - j4;
                    if (checkExcessivePowerUsageLPr(j, z, j5, processRecord.processName, processRecord.toShortString(), i, processRecord)) {
                        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda35
                            @Override // java.lang.Runnable
                            public final void run() {
                                com.android.server.am.ActivityManagerService.this.lambda$updateAppProcessCpuTimeLPr$21(processRecord, j5, j, j2, i);
                            }
                        });
                        processProfileRecord.reportExcessiveCpu();
                    }
                }
                processProfileRecord.mLastCpuTime.set(j3);
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updateAppProcessCpuTimeLPr$21(com.android.server.am.ProcessRecord processRecord, long j, long j2, long j3, int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (processRecord.getThread() != null && processRecord.mState.getSetProcState() >= 14) {
                    processRecord.killLocked("excessive cpu " + j + " during " + j2 + " dur=" + j3 + " limit=" + i, 9, 7, true);
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    private void updatePhantomProcessCpuTimeLPr(final long j, final boolean z, final long j2, final int i, final com.android.server.am.ProcessRecord processRecord) {
        this.mPhantomProcessList.forEachPhantomProcessOfApp(processRecord, new java.util.function.Function() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda18
            @Override // java.util.function.Function
            public final java.lang.Object apply(java.lang.Object obj) {
                java.lang.Boolean lambda$updatePhantomProcessCpuTimeLPr$23;
                lambda$updatePhantomProcessCpuTimeLPr$23 = com.android.server.am.ActivityManagerService.this.lambda$updatePhantomProcessCpuTimeLPr$23(j, z, processRecord, i, j2, (com.android.server.am.PhantomProcessRecord) obj);
                return lambda$updatePhantomProcessCpuTimeLPr$23;
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ java.lang.Boolean lambda$updatePhantomProcessCpuTimeLPr$23(final long j, boolean z, final com.android.server.am.ProcessRecord processRecord, final int i, final long j2, final com.android.server.am.PhantomProcessRecord phantomProcessRecord) {
        if (phantomProcessRecord.mLastCputime > 0) {
            final long j3 = phantomProcessRecord.mCurrentCputime - phantomProcessRecord.mLastCputime;
            if (checkExcessivePowerUsageLPr(j, z, j3, processRecord.processName, phantomProcessRecord.toString(), i, processRecord)) {
                this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda16
                    @Override // java.lang.Runnable
                    public final void run() {
                        com.android.server.am.ActivityManagerService.this.lambda$updatePhantomProcessCpuTimeLPr$22(processRecord, phantomProcessRecord, j3, j, j2, i);
                    }
                });
                return false;
            }
        }
        phantomProcessRecord.mLastCputime = phantomProcessRecord.mCurrentCputime;
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePhantomProcessCpuTimeLPr$22(com.android.server.am.ProcessRecord processRecord, com.android.server.am.PhantomProcessRecord phantomProcessRecord, long j, long j2, long j3, int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (processRecord.getThread() != null && processRecord.mState.getSetProcState() >= 14) {
                    this.mPhantomProcessList.killPhantomProcessGroupLocked(processRecord, phantomProcessRecord, 9, 7, "excessive cpu " + j + " during " + j2 + " dur=" + j3 + " limit=" + i);
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    private boolean checkExcessivePowerUsageLPr(long j, boolean z, long j2, final java.lang.String str, java.lang.String str2, int i, final com.android.server.am.ProcessRecord processRecord) {
        if (z && j > 0 && (100 * j2) / j >= i) {
            this.mBatteryStatsService.reportExcessiveCpu(processRecord.info.uid, processRecord.processName, j, j2);
            processRecord.getPkgList().forEachPackageProcessStats(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda36
                @Override // java.util.function.Consumer
                public final void accept(java.lang.Object obj) {
                    com.android.server.am.ActivityManagerService.lambda$checkExcessivePowerUsageLPr$24(com.android.server.am.ProcessRecord.this, str, (com.android.internal.app.procstats.ProcessStats.ProcessStateHolder) obj);
                }
            });
            return true;
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$checkExcessivePowerUsageLPr$24(com.android.server.am.ProcessRecord processRecord, java.lang.String str, com.android.internal.app.procstats.ProcessStats.ProcessStateHolder processStateHolder) {
        com.android.internal.app.procstats.ProcessState processState = processStateHolder.state;
        com.android.internal.util.FrameworkStatsLog.write(16, processRecord.info.uid, str, processState != null ? processState.getPackage() : processRecord.info.packageName, processStateHolder.appVersion);
    }

    private boolean isEphemeralLocked(int i) {
        java.lang.String[] packagesForUid = this.mContext.getPackageManager().getPackagesForUid(i);
        if (packagesForUid == null || packagesForUid.length != 1) {
            return false;
        }
        return getPackageManagerInternal().isPackageEphemeral(android.os.UserHandle.getUserId(i), packagesForUid[0]);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void enqueueUidChangeLocked(com.android.server.am.UidRecord uidRecord, int i, int i2) {
        int i3;
        if (uidRecord != null) {
            i = uidRecord.getUid();
        }
        if (i < 0) {
            throw new java.lang.IllegalArgumentException("No UidRecord or uid");
        }
        int setProcState = uidRecord != null ? uidRecord.getSetProcState() : 20;
        int minProcAdj = uidRecord != null ? uidRecord.getMinProcAdj() : com.android.server.am.ProcessList.INVALID_ADJ;
        long j = uidRecord != null ? uidRecord.curProcStateSeq : 0L;
        int setCapability = uidRecord != null ? uidRecord.getSetCapability() : 0;
        boolean isEphemeral = uidRecord != null ? uidRecord.isEphemeral() : isEphemeralLocked(i);
        if (uidRecord != null && uidRecord.isIdle() && (i2 & 2) != 0) {
            this.mProcessList.killAppIfBgRestrictedAndCachedIdleLocked(uidRecord);
        }
        if (uidRecord != null && !uidRecord.isIdle() && (i2 & 1) != 0) {
            i3 = i2 | 2;
        } else {
            i3 = i2;
        }
        int enqueueUidChange = this.mUidObserverController.enqueueUidChange(uidRecord == null ? null : uidRecord.pendingChange, i, i3, setProcState, minProcAdj, j, setCapability, isEphemeral);
        if (uidRecord != null) {
            uidRecord.setLastReportedChange(enqueueUidChange);
        }
        if (this.mLocalPowerManager != null) {
            if ((enqueueUidChange & 4) != 0) {
                this.mLocalPowerManager.uidActive(i);
            }
            if ((enqueueUidChange & 2) != 0) {
                this.mLocalPowerManager.uidIdle(i);
            }
            if ((enqueueUidChange & 1) != 0) {
                this.mLocalPowerManager.uidGone(i);
            } else if ((Integer.MIN_VALUE & enqueueUidChange) != 0) {
                this.mLocalPowerManager.updateUidProcState(i, setProcState);
            }
        }
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    final void setProcessTrackerStateLOSP(com.android.server.am.ProcessRecord processRecord, int i) {
        if (processRecord.getThread() != null) {
            processRecord.mProfile.setProcessTrackerState(processRecord.mState.getReportedProcState(), i);
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void clearProcessForegroundLocked(com.android.server.am.ProcessRecord processRecord) {
        updateProcessForegroundLocked(processRecord, false, 0, false, false);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void updateProcessForegroundLocked(com.android.server.am.ProcessRecord processRecord, boolean z, int i, boolean z2, boolean z3) {
        com.android.server.am.ProcessServiceRecord processServiceRecord = processRecord.mServices;
        boolean z4 = z != processServiceRecord.hasForegroundServices();
        if (z4 || !processServiceRecord.areForegroundServiceTypesSame(i, z2)) {
            if (z4) {
                for (int size = this.mForegroundServiceStateListeners.size() - 1; size >= 0; size--) {
                    this.mForegroundServiceStateListeners.get(size).onForegroundServiceStateChanged(processRecord.info.packageName, processRecord.info.uid, processRecord.getPid(), z);
                }
            }
            processServiceRecord.setHasForegroundServices(z, i, z2);
            java.util.ArrayList arrayList = (java.util.ArrayList) this.mForegroundPackages.get(processRecord.info.packageName, processRecord.info.uid);
            if (z) {
                if (arrayList == null) {
                    arrayList = new java.util.ArrayList();
                    this.mForegroundPackages.put(processRecord.info.packageName, processRecord.info.uid, arrayList);
                }
                if (!arrayList.contains(processRecord)) {
                    arrayList.add(processRecord);
                    this.mBatteryStatsService.noteEvent(32770, processRecord.info.packageName, processRecord.info.uid);
                }
            } else if (arrayList != null && arrayList.remove(processRecord)) {
                this.mBatteryStatsService.noteEvent(16386, processRecord.info.packageName, processRecord.info.uid);
                if (arrayList.size() <= 0) {
                    this.mForegroundPackages.remove(processRecord.info.packageName, processRecord.info.uid);
                }
            }
            processServiceRecord.setReportedForegroundServiceTypes(i);
            com.android.server.am.ActivityManagerService.ProcessChangeItem enqueueProcessChangeItemLocked = this.mProcessList.enqueueProcessChangeItemLocked(processRecord.getPid(), processRecord.info.uid);
            enqueueProcessChangeItemLocked.changes |= 2;
            enqueueProcessChangeItemLocked.foregroundServiceTypes = i;
        }
        if (z3) {
            updateOomAdjLocked(processRecord, 9);
        }
    }

    @android.annotation.Nullable
    com.android.server.am.ProcessRecord getTopApp() {
        int i;
        long clearCallingIdentity;
        java.lang.String str = null;
        com.android.server.wm.WindowProcessController topApp = this.mAtmInternal != null ? this.mAtmInternal.getTopApp() : null;
        com.android.server.am.ProcessRecord processRecord = topApp != null ? (com.android.server.am.ProcessRecord) topApp.mOwner : null;
        if (processRecord != null) {
            str = processRecord.processName;
            i = processRecord.info.uid;
        } else {
            i = -1;
        }
        synchronized (this.mCurResumedAppLock) {
            try {
                try {
                    if (i == this.mCurResumedUid) {
                        if (str != this.mCurResumedPackage) {
                            if (str != null) {
                                if (!str.equals(this.mCurResumedPackage)) {
                                }
                            }
                        }
                    }
                    if (this.mCurResumedPackage != null) {
                        this.mBatteryStatsService.noteEvent(16387, this.mCurResumedPackage, this.mCurResumedUid);
                    }
                    this.mCurResumedPackage = str;
                    this.mCurResumedUid = i;
                    if (this.mCurResumedPackage != null) {
                        this.mBatteryStatsService.noteEvent(32771, this.mCurResumedPackage, this.mCurResumedUid);
                    }
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                } catch (java.lang.Throwable th) {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
                clearCallingIdentity = android.os.Binder.clearCallingIdentity();
            } catch (java.lang.Throwable th2) {
                throw th2;
            }
        }
        return processRecord;
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void enqueueOomAdjTargetLocked(com.android.server.am.ProcessRecord processRecord) {
        this.mOomAdjuster.enqueueOomAdjTargetLocked(processRecord);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void removeOomAdjTargetLocked(com.android.server.am.ProcessRecord processRecord, boolean z) {
        this.mOomAdjuster.removeOomAdjTargetLocked(processRecord, z);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void updateOomAdjPendingTargetsLocked(int i) {
        this.mOomAdjuster.updateOomAdjPendingTargetsLocked(i);
    }

    static final class ProcStatsRunnable implements java.lang.Runnable {
        private final com.android.server.am.ProcessStatsService mProcessStats;
        private final com.android.server.am.ActivityManagerService mService;

        ProcStatsRunnable(com.android.server.am.ActivityManagerService activityManagerService, com.android.server.am.ProcessStatsService processStatsService) {
            this.mService = activityManagerService;
            this.mProcessStats = processStatsService;
        }

        @Override // java.lang.Runnable
        public void run() {
            this.mProcessStats.writeStateAsync();
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void updateOomAdjLocked(int i) {
        this.mOomAdjuster.updateOomAdjLocked(i);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final boolean updateOomAdjLocked(com.android.server.am.ProcessRecord processRecord, int i) {
        return this.mOomAdjuster.updateOomAdjLocked(processRecord, i);
    }

    public void makePackageIdle(java.lang.String str, int i) {
        int i2;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            java.lang.String str2 = "Permission Denial: makePackageIdle() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            android.util.Slog.w("ActivityManager", str2);
            throw new java.lang.SecurityException(str2);
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), i, true, 2, "makePackageIdle", null);
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            try {
                i2 = android.app.AppGlobals.getPackageManager().getPackageUid(str, 268443648L, 0);
            } catch (android.os.RemoteException e) {
                i2 = -1;
            }
            if (i2 == -1) {
                throw new java.lang.IllegalArgumentException("Unknown package name " + str);
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    try {
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.startUidChanges();
                        }
                        int appId = android.os.UserHandle.getAppId(i2);
                        for (int size = this.mProcessList.mActiveUids.size() - 1; size >= 0; size--) {
                            com.android.server.am.UidRecord valueAt = this.mProcessList.mActiveUids.valueAt(size);
                            if (valueAt.getLastBackgroundTime() > 0 && !valueAt.isIdle()) {
                                int uid = valueAt.getUid();
                                if (android.os.UserHandle.getAppId(uid) == appId && (handleIncomingUser == -1 || handleIncomingUser == android.os.UserHandle.getUserId(uid))) {
                                    com.android.server.am.EventLogTags.writeAmUidIdle(uid);
                                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerGlobalLock) {
                                        try {
                                            valueAt.setIdle(true);
                                            valueAt.setSetIdle(true);
                                        } finally {
                                        }
                                    }
                                    resetPriorityAfterProcLockedSection();
                                    android.util.Slog.w("ActivityManager", "Idling uid " + android.os.UserHandle.formatUid(uid) + " from package " + str + " user " + handleIncomingUser);
                                    doStopUidLocked(uid, valueAt);
                                }
                            }
                        }
                        if (this.mLocalPowerManager != null) {
                            this.mLocalPowerManager.finishUidChanges();
                        }
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (java.lang.Throwable th2) {
                    if (this.mLocalPowerManager != null) {
                        this.mLocalPowerManager.finishUidChanges();
                    }
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void setDeterministicUidIdle(boolean z) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mDeterministicUidIdle = z;
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    final void idleUids() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mOomAdjuster.idleUidsLocked();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    final void runInBackgroundDisabled(int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(i);
                if (uidRecordLOSP != null) {
                    if (uidRecordLOSP.isIdle()) {
                        doStopUidLocked(uidRecordLOSP.getUid(), uidRecordLOSP);
                    }
                } else {
                    doStopUidLocked(i, null);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    final void cameraActiveChanged(int i, boolean z) {
        synchronized (this.mActiveCameraUids) {
            try {
                int indexOf = this.mActiveCameraUids.indexOf(i);
                if (z) {
                    if (indexOf < 0) {
                        this.mActiveCameraUids.add(i);
                    }
                } else if (indexOf >= 0) {
                    this.mActiveCameraUids.remove(indexOf);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    final boolean isCameraActiveForUid(int i) {
        boolean z;
        synchronized (this.mActiveCameraUids) {
            z = this.mActiveCameraUids.indexOf(i) >= 0;
        }
        return z;
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    final void doStopUidLocked(int i, com.android.server.am.UidRecord uidRecord) {
        this.mServices.stopInBackgroundLocked(i);
        enqueueUidChangeLocked(uidRecord, i, android.hardware.audio.common.V2_0.AudioDevice.IN_AMBIENT);
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void tempAllowlistForPendingIntentLocked(int i, int i2, int i3, long j, int i4, int i5, java.lang.String str) {
        synchronized (this.mPidsSelfLocked) {
            try {
                com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
                if (processRecord == null) {
                    android.util.Slog.w("ActivityManager", "tempAllowlistForPendingIntentLocked() no ProcessRecord for pid " + i);
                    return;
                }
                if (processRecord.mServices.mAllowlistManager || checkPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", i, i2) == 0 || checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i, i2) == 0 || checkPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", i, i2) == 0) {
                    tempAllowlistUidLocked(i3, j, i5, str, i4, i2);
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    void tempAllowlistUidLocked(int i, long j, int i2, java.lang.String str, int i3, int i4) {
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                int tempAllowListType = this.mLocalDeviceIdleController != null ? this.mLocalDeviceIdleController.getTempAllowListType(i2, i3) : i3;
                if (tempAllowListType == -1) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                this.mPendingTempAllowlist.put(i, new com.android.server.am.ActivityManagerService.PendingTempAllowlist(i, j, i2, str, tempAllowListType, i4));
                setUidTempAllowlistStateLSP(i, true);
                this.mUiHandler.obtainMessage(68).sendToTarget();
                if (tempAllowListType == 0) {
                    this.mFgsStartTempAllowList.add(i, j, new com.android.server.am.ActivityManagerService.FgsTempAllowListItem(j, i2, str, i4));
                }
                resetPriorityAfterProcLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARN: Finally extract failed */
    void pushTempAllowlist() {
        int size;
        com.android.server.am.ActivityManagerService.PendingTempAllowlist[] pendingTempAllowlistArr;
        int i;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        size = this.mPendingTempAllowlist.size();
                        pendingTempAllowlistArr = new com.android.server.am.ActivityManagerService.PendingTempAllowlist[size];
                        for (int i2 = 0; i2 < size; i2++) {
                            pendingTempAllowlistArr[i2] = this.mPendingTempAllowlist.valueAt(i2);
                        }
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
        if (this.mLocalDeviceIdleController != null) {
            for (int i3 = 0; i3 < size; i3++) {
                com.android.server.am.ActivityManagerService.PendingTempAllowlist pendingTempAllowlist = pendingTempAllowlistArr[i3];
                this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(pendingTempAllowlist.targetUid, pendingTempAllowlist.duration, pendingTempAllowlist.type, false, pendingTempAllowlist.reasonCode, pendingTempAllowlist.tag, pendingTempAllowlist.callingUid);
            }
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock2) {
                    for (i = 0; i < size; i++) {
                        try {
                            com.android.server.am.ActivityManagerService.PendingTempAllowlist pendingTempAllowlist2 = pendingTempAllowlistArr[i];
                            int indexOfKey = this.mPendingTempAllowlist.indexOfKey(pendingTempAllowlist2.targetUid);
                            if (indexOfKey >= 0 && this.mPendingTempAllowlist.valueAt(indexOfKey) == pendingTempAllowlist2) {
                                this.mPendingTempAllowlist.removeAt(indexOfKey);
                            }
                        } catch (java.lang.Throwable th2) {
                            resetPriorityAfterProcLockedSection();
                            throw th2;
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    @com.android.internal.annotations.GuardedBy({"this", "mProcLock"})
    final void setAppIdTempAllowlistStateLSP(int i, boolean z) {
        this.mOomAdjuster.setAppIdTempAllowlistStateLSP(i, z);
    }

    @com.android.internal.annotations.GuardedBy({"this", "mProcLock"})
    final void setUidTempAllowlistStateLSP(int i, boolean z) {
        this.mOomAdjuster.setUidTempAllowlistStateLSP(i, z);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void trimApplications(boolean z, int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                trimApplicationsLocked(z, i);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    @com.android.internal.annotations.GuardedBy({"this"})
    private void trimApplicationsLocked(boolean z, int i) {
        boolean z2 = false;
        for (int size = this.mProcessList.mRemovedProcesses.size() - 1; size >= 0; size--) {
            com.android.server.am.ProcessRecord processRecord = this.mProcessList.mRemovedProcesses.get(size);
            if (!processRecord.hasActivitiesOrRecentTasks() && processRecord.mReceivers.numberOfCurReceivers() == 0 && processRecord.mServices.numberOfRunningServices() == 0) {
                android.app.IApplicationThread thread = processRecord.getThread();
                java.lang.StringBuilder sb = new java.lang.StringBuilder();
                sb.append("Exiting empty application process ");
                sb.append(processRecord.toShortString());
                sb.append(" (");
                sb.append(thread != null ? thread.asBinder() : null);
                sb.append(")\n");
                android.util.Slog.i("ActivityManager", sb.toString());
                int pid = processRecord.getPid();
                if (pid > 0 && pid != MY_PID) {
                    processRecord.killLocked("empty", 13, 4, false);
                } else if (thread != null) {
                    try {
                        thread.scheduleExit();
                    } catch (java.lang.Exception e) {
                    }
                }
                cleanUpApplicationRecordLocked(processRecord, pid, false, true, -1, false, false);
                this.mProcessList.mRemovedProcesses.remove(size);
                if (processRecord.isPersistent()) {
                    addAppLocked(processRecord.info, null, false, null, 2);
                    processRecord.mProfile.addHostingComponentType(2);
                }
                z2 = true;
            }
        }
        if (z2 || z) {
            updateOomAdjLocked(i);
        } else {
            updateOomAdjPendingTargetsLocked(i);
        }
    }

    public void signalPersistentProcesses(final int i) throws android.os.RemoteException {
        if (i != 10) {
            throw new java.lang.SecurityException("Only SIGNAL_USR1 is allowed");
        }
        if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(false, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda10
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.am.ActivityManagerService.lambda$signalPersistentProcesses$25(i, (com.android.server.am.ProcessRecord) obj);
                    }
                });
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$signalPersistentProcesses$25(int i, com.android.server.am.ProcessRecord processRecord) {
        if (processRecord.getThread() != null && processRecord.isPersistent()) {
            android.os.Process.sendSignal(processRecord.getPid(), i);
        }
    }

    public boolean profileControl(java.lang.String str, int i, boolean z, android.app.ProfilerInfo profilerInfo, int i2) throws android.os.RemoteException {
        com.android.server.am.ProcessRecord findProcessLOSP;
        boolean profileControlLPf;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        if (z && (profilerInfo == null || profilerInfo.profileFd == null)) {
            throw new java.lang.IllegalArgumentException("null profile info or fd");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            if (str == null) {
                findProcessLOSP = null;
            } else {
                try {
                    findProcessLOSP = findProcessLOSP(str, i, "profileControl");
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            if (z && (findProcessLOSP == null || findProcessLOSP.getThread() == null)) {
                throw new java.lang.IllegalArgumentException("Unknown process: " + str);
            }
        }
        resetPriorityAfterProcLockedSection();
        synchronized (this.mAppProfiler.mProfilerLock) {
            profileControlLPf = this.mAppProfiler.profileControlLPf(findProcessLOSP, z, profilerInfo, i2);
        }
        return profileControlLPf;
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    private com.android.server.am.ProcessRecord findProcessLOSP(java.lang.String str, int i, java.lang.String str2) {
        android.util.SparseArray sparseArray;
        int handleIncomingUser = this.mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), i, true, 2, str2, null);
        com.android.server.am.ProcessRecord processRecord = null;
        try {
            int parseInt = java.lang.Integer.parseInt(str);
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(parseInt);
            }
        } catch (java.lang.NumberFormatException e) {
        }
        if (processRecord == null && (sparseArray = (android.util.SparseArray) this.mProcessList.getProcessNamesLOSP().getMap().get(str)) != null && sparseArray.size() > 0) {
            com.android.server.am.ProcessRecord processRecord2 = (com.android.server.am.ProcessRecord) sparseArray.valueAt(0);
            if (handleIncomingUser != -1 && processRecord2.userId != handleIncomingUser) {
                for (int i2 = 1; i2 < sparseArray.size(); i2++) {
                    com.android.server.am.ProcessRecord processRecord3 = (com.android.server.am.ProcessRecord) sparseArray.valueAt(i2);
                    if (processRecord3.userId == handleIncomingUser) {
                        return processRecord3;
                    }
                }
                return processRecord2;
            }
            return processRecord2;
        }
        return processRecord;
    }

    public boolean dumpHeap(java.lang.String str, int i, boolean z, boolean z2, boolean z3, java.lang.String str2, android.os.ParcelFileDescriptor parcelFileDescriptor, final android.os.RemoteCallback remoteCallback) {
        android.app.IApplicationThread thread;
        try {
            try {
                if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                    throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
                }
                if (parcelFileDescriptor == null) {
                    throw new java.lang.IllegalArgumentException("null fd");
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        com.android.server.am.ProcessRecord findProcessLOSP = findProcessLOSP(str, i, "dumpHeap");
                        if (findProcessLOSP == null || (thread = findProcessLOSP.getThread()) == null) {
                            throw new java.lang.IllegalArgumentException("Unknown process: " + str);
                        }
                        enforceDebuggable(findProcessLOSP);
                        this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                        thread.dumpHeap(z, z2, z3, str2, parcelFileDescriptor, new android.os.RemoteCallback(new android.os.RemoteCallback.OnResultListener() { // from class: com.android.server.am.ActivityManagerService.19
                            public void onResult(android.os.Bundle bundle) {
                                remoteCallback.sendResult(bundle);
                                com.android.server.am.ActivityManagerService.this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
                            }
                        }, (android.os.Handler) null));
                        try {
                            resetPriorityAfterLockedSection();
                            return true;
                        } catch (java.lang.Throwable th) {
                            th = th;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (java.lang.Throwable th2) {
                        th = th2;
                    }
                }
            } catch (android.os.RemoteException e) {
                throw new java.lang.IllegalStateException("Process disappeared");
            }
        } catch (java.lang.Throwable th3) {
            if (parcelFileDescriptor != null) {
                try {
                    parcelFileDescriptor.close();
                } catch (java.io.IOException e2) {
                }
            }
            throw th3;
        }
    }

    public boolean dumpResources(java.lang.String str, android.os.ParcelFileDescriptor parcelFileDescriptor, android.os.RemoteCallback remoteCallback) throws android.os.RemoteException {
        android.app.IApplicationThread thread;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ProcessRecord findProcessLOSP = findProcessLOSP(str, -2, "dumpResources");
                if (findProcessLOSP == null || (thread = findProcessLOSP.getThread()) == null) {
                    throw new java.lang.IllegalArgumentException("Unknown process: " + str);
                }
                thread.dumpResources(parcelFileDescriptor, remoteCallback);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    public void dumpAllResources(android.os.ParcelFileDescriptor parcelFileDescriptor, java.io.PrintWriter printWriter) throws android.os.RemoteException {
        java.util.ArrayList arrayList = new java.util.ArrayList();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                arrayList.addAll(this.mProcessList.getLruProcessesLOSP());
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) arrayList.get(i);
            printWriter.println(java.lang.String.format("Resources History for %s (%s)", processRecord.processName, processRecord.info.packageName));
            if (processRecord.mOptRecord.isFrozen()) {
                printWriter.println("  Skipping frozen process");
                printWriter.flush();
            } else {
                printWriter.flush();
                try {
                    com.android.internal.os.TransferPipe transferPipe = new com.android.internal.os.TransferPipe("  ");
                    try {
                        if (processRecord.getThread() != null) {
                            processRecord.getThread().dumpResources(transferPipe.getWriteFd(), (android.os.RemoteCallback) null);
                            transferPipe.go(parcelFileDescriptor.getFileDescriptor(), 2000L);
                        } else {
                            printWriter.println(java.lang.String.format("  Resources history for %s (%s) failed, no thread", processRecord.processName, processRecord.info.packageName));
                        }
                        transferPipe.kill();
                    } catch (java.lang.Throwable th2) {
                        transferPipe.kill();
                        throw th2;
                    }
                } catch (java.io.IOException e) {
                    printWriter.println("  " + e.getMessage());
                    printWriter.flush();
                }
            }
        }
    }

    public void setDumpHeapDebugLimit(java.lang.String str, int i, long j, java.lang.String str2) {
        java.lang.String str3;
        int i2;
        int i3;
        java.lang.String str4;
        if (str != null) {
            enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
            str4 = str;
            i3 = i;
        } else {
            synchronized (this.mPidsSelfLocked) {
                try {
                    com.android.server.am.ProcessRecord processRecord = this.mPidsSelfLocked.get(android.os.Binder.getCallingPid());
                    if (processRecord == null) {
                        throw new java.lang.SecurityException("No process found for calling pid " + android.os.Binder.getCallingPid());
                    }
                    enforceDebuggable(processRecord);
                    str3 = processRecord.processName;
                    i2 = processRecord.uid;
                    if (str2 != null && !processRecord.getPkgList().containsKey(str2)) {
                        throw new java.lang.SecurityException("Package " + str2 + " is not running in " + processRecord);
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            i3 = i2;
            str4 = str3;
        }
        this.mAppProfiler.setDumpHeapDebugLimit(str4, i3, j, str2);
    }

    public void dumpHeapFinished(java.lang.String str) {
        this.mAppProfiler.dumpHeapFinished(str, android.os.Binder.getCallingPid());
    }

    @Override // com.android.server.Watchdog.Monitor
    public void monitor() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    void onCoreSettingsChange(android.os.Bundle bundle) {
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mProcessList.updateCoreSettingsLOSP(bundle);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public boolean startUserInBackground(int i) {
        return startUserInBackgroundWithListener(i, null);
    }

    public boolean startUserInBackgroundWithListener(int i, @android.annotation.Nullable android.os.IProgressListener iProgressListener) {
        return this.mUserController.startUser(i, 2, iProgressListener);
    }

    public boolean startUserInForegroundWithListener(int i, @android.annotation.Nullable android.os.IProgressListener iProgressListener) {
        return this.mUserController.startUser(i, 1, iProgressListener);
    }

    public boolean startUserInBackgroundVisibleOnDisplay(int i, int i2, @android.annotation.Nullable android.os.IProgressListener iProgressListener) {
        int[] displayIdsForStartingVisibleBackgroundUsers = getDisplayIdsForStartingVisibleBackgroundUsers();
        boolean z = false;
        if (displayIdsForStartingVisibleBackgroundUsers != null) {
            int i3 = 0;
            while (true) {
                if (i3 >= displayIdsForStartingVisibleBackgroundUsers.length) {
                    break;
                }
                if (i2 != displayIdsForStartingVisibleBackgroundUsers[i3]) {
                    i3++;
                } else {
                    z = true;
                    break;
                }
            }
        }
        if (!z) {
            throw new java.lang.IllegalArgumentException("Invalid display (" + i2 + ") to start user. Valid options are: " + java.util.Arrays.toString(displayIdsForStartingVisibleBackgroundUsers));
        }
        return this.mInjector.startUserInBackgroundVisibleOnDisplay(i, i2, iProgressListener);
    }

    public int[] getDisplayIdsForStartingVisibleBackgroundUsers() {
        enforceCallingHasAtLeastOnePermission("getDisplayIdsForStartingVisibleBackgroundUsers()", "android.permission.MANAGE_USERS", "android.permission.INTERACT_ACROSS_USERS");
        return this.mInjector.getDisplayIdsForStartingVisibleBackgroundUsers();
    }

    @java.lang.Deprecated
    public boolean unlockUser(int i, @android.annotation.Nullable byte[] bArr, @android.annotation.Nullable byte[] bArr2, @android.annotation.Nullable android.os.IProgressListener iProgressListener) {
        return this.mUserController.unlockUser(i, iProgressListener);
    }

    public boolean unlockUser2(int i, @android.annotation.Nullable android.os.IProgressListener iProgressListener) {
        return this.mUserController.unlockUser(i, iProgressListener);
    }

    public boolean switchUser(int i) {
        return this.mUserController.switchUser(i);
    }

    public java.lang.String getSwitchingFromUserMessage() {
        return this.mUserController.getSwitchingFromSystemUserMessage();
    }

    public java.lang.String getSwitchingToUserMessage() {
        return this.mUserController.getSwitchingToSystemUserMessage();
    }

    public void setStopUserOnSwitch(int i) {
        this.mUserController.setStopUserOnSwitch(i);
    }

    public int stopUser(int i, boolean z, android.app.IStopUserCallback iStopUserCallback) {
        return this.mUserController.stopUser(i, z, false, iStopUserCallback, null);
    }

    public int stopUserWithDelayedLocking(int i, boolean z, android.app.IStopUserCallback iStopUserCallback) {
        return this.mUserController.stopUser(i, z, true, iStopUserCallback, null);
    }

    public boolean startProfile(int i) {
        return this.mUserController.startProfile(i, false, null);
    }

    public boolean startProfileWithListener(int i, @android.annotation.Nullable android.os.IProgressListener iProgressListener) {
        return this.mUserController.startProfile(i, false, iProgressListener);
    }

    public boolean stopProfile(int i) {
        return this.mUserController.stopProfile(i);
    }

    public android.content.pm.UserInfo getCurrentUser() {
        return this.mUserController.getCurrentUser();
    }

    public int getCurrentUserId() {
        return this.mUserController.getCurrentUserIdChecked();
    }

    java.lang.String getStartedUserState(int i) {
        return com.android.server.am.UserState.stateToString(this.mUserController.getStartedUserState(i).state);
    }

    public boolean isUserRunning(int i, int i2) {
        if (!this.mUserController.isSameProfileGroup(i, android.os.UserHandle.getCallingUserId()) && checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0) {
            java.lang.String str = "Permission Denial: isUserRunning() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.INTERACT_ACROSS_USERS";
            android.util.Slog.w("ActivityManager", str);
            throw new java.lang.SecurityException(str);
        }
        return this.mUserController.isUserRunning(i, i2);
    }

    public int[] getRunningUserIds() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0) {
            java.lang.String str = "Permission Denial: isUserRunning() from pid=" + android.os.Binder.getCallingPid() + ", uid=" + android.os.Binder.getCallingUid() + " requires android.permission.INTERACT_ACROSS_USERS";
            android.util.Slog.w("ActivityManager", str);
            throw new java.lang.SecurityException(str);
        }
        return this.mUserController.getStartedUserArray();
    }

    public void registerUserSwitchObserver(android.app.IUserSwitchObserver iUserSwitchObserver, java.lang.String str) {
        this.mUserController.registerUserSwitchObserver(iUserSwitchObserver, str);
    }

    public void unregisterUserSwitchObserver(android.app.IUserSwitchObserver iUserSwitchObserver) {
        this.mUserController.unregisterUserSwitchObserver(iUserSwitchObserver);
    }

    android.content.pm.ApplicationInfo getAppInfoForUser(android.content.pm.ApplicationInfo applicationInfo, int i) {
        if (applicationInfo == null) {
            return null;
        }
        android.content.pm.ApplicationInfo applicationInfo2 = new android.content.pm.ApplicationInfo(applicationInfo);
        applicationInfo2.initForUser(i);
        return applicationInfo2;
    }

    public boolean isUserStopped(int i) {
        return this.mUserController.getStartedUserState(i) == null;
    }

    android.content.pm.ActivityInfo getActivityInfoForUser(android.content.pm.ActivityInfo activityInfo, int i) {
        if (activityInfo == null || (i < 1 && activityInfo.applicationInfo.uid < 100000)) {
            return activityInfo;
        }
        android.content.pm.ActivityInfo activityInfo2 = new android.content.pm.ActivityInfo(activityInfo);
        activityInfo2.applicationInfo = getAppInfoForUser(activityInfo2.applicationInfo, i);
        return activityInfo2;
    }

    @com.android.internal.annotations.GuardedBy({"mProcLock"})
    private boolean processSanityChecksLPr(com.android.server.am.ProcessRecord processRecord, android.app.IApplicationThread iApplicationThread) {
        if (processRecord == null || iApplicationThread == null) {
            return false;
        }
        return android.os.Build.IS_DEBUGGABLE || processRecord.isDebuggable();
    }

    public boolean startBinderTracking() throws android.os.RemoteException {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mBinderTransactionTrackingEnabled = true;
                this.mProcessList.forEachLruProcessesLOSP(true, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda13
                    @Override // java.util.function.Consumer
                    public final void accept(java.lang.Object obj) {
                        com.android.server.am.ActivityManagerService.this.lambda$startBinderTracking$26((com.android.server.am.ProcessRecord) obj);
                    }
                });
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return true;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$startBinderTracking$26(com.android.server.am.ProcessRecord processRecord) {
        android.app.IApplicationThread thread = processRecord.getThread();
        if (!processSanityChecksLPr(processRecord, thread)) {
            return;
        }
        try {
            thread.startBinderTracking();
        } catch (android.os.RemoteException e) {
            android.util.Log.v("ActivityManager", "Process disappared");
        }
    }

    public boolean stopBinderTrackingAndDump(final android.os.ParcelFileDescriptor parcelFileDescriptor) throws android.os.RemoteException {
        boolean z;
        java.lang.Throwable th;
        java.lang.Throwable th2;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        try {
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    if (parcelFileDescriptor == null) {
                        throw new java.lang.IllegalArgumentException("null fd");
                    }
                    z = false;
                    try {
                        this.mBinderTransactionTrackingEnabled = false;
                        final com.android.internal.util.FastPrintWriter fastPrintWriter = new com.android.internal.util.FastPrintWriter(new java.io.FileOutputStream(parcelFileDescriptor.getFileDescriptor()));
                        fastPrintWriter.println("Binder transaction traces for all processes.\n");
                        this.mProcessList.forEachLruProcessesLOSP(true, new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda30
                            @Override // java.util.function.Consumer
                            public final void accept(java.lang.Object obj) {
                                com.android.server.am.ActivityManagerService.this.lambda$stopBinderTrackingAndDump$27(fastPrintWriter, parcelFileDescriptor, (com.android.server.am.ProcessRecord) obj);
                            }
                        });
                        resetPriorityAfterProcLockedSection();
                        return true;
                    } catch (java.lang.Throwable th3) {
                        th2 = th3;
                        try {
                            resetPriorityAfterProcLockedSection();
                            throw th2;
                        } catch (java.lang.Throwable th4) {
                            th = th4;
                            if (parcelFileDescriptor != null && z) {
                                try {
                                    parcelFileDescriptor.close();
                                } catch (java.io.IOException e) {
                                }
                            }
                            throw th;
                        }
                    }
                } catch (java.lang.Throwable th5) {
                    z = true;
                    th2 = th5;
                }
            }
        } catch (java.lang.Throwable th6) {
            z = true;
            th = th6;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$stopBinderTrackingAndDump$27(java.io.PrintWriter printWriter, android.os.ParcelFileDescriptor parcelFileDescriptor, com.android.server.am.ProcessRecord processRecord) {
        android.app.IApplicationThread thread = processRecord.getThread();
        if (!processSanityChecksLPr(processRecord, thread)) {
            return;
        }
        printWriter.println("Traces for process: " + processRecord.processName);
        printWriter.flush();
        try {
            com.android.internal.os.TransferPipe transferPipe = new com.android.internal.os.TransferPipe();
            try {
                thread.stopBinderTrackingAndDump(transferPipe.getWriteFd());
                transferPipe.go(parcelFileDescriptor.getFileDescriptor());
            } finally {
                transferPipe.kill();
            }
        } catch (android.os.RemoteException e) {
            printWriter.println("Got a RemoteException while dumping IPC traces from " + processRecord + ".  Exception: " + e);
            printWriter.flush();
        } catch (java.io.IOException e2) {
            printWriter.println("Failure while dumping IPC traces from " + processRecord + ".  Exception: " + e2);
            printWriter.flush();
        }
    }

    void onProcessFreezableChangedLocked(com.android.server.am.ProcessRecord processRecord) {
        if (this.mEnableModernQueue) {
            this.mBroadcastQueues[0].onProcessFreezableChangedLocked(processRecord);
        }
    }

    @com.android.internal.annotations.VisibleForTesting
    public final class LocalService extends android.app.ActivityManagerInternal implements com.android.server.am.ActivityManagerLocal {
        public LocalService() {
        }

        public java.util.List<android.app.PendingIntentStats> getPendingIntentStats() {
            return com.android.server.am.ActivityManagerService.this.mPendingIntentController.dumpPendingIntentStatsForStatsd();
        }

        public android.util.Pair<java.lang.String, java.lang.String> getAppProfileStatsForDebugging(long j, int i) {
            return com.android.server.am.ActivityManagerService.this.mAppProfiler.getAppProfileStatsForDebugging(j, i);
        }

        public java.lang.String checkContentProviderAccess(java.lang.String str, int i) {
            return com.android.server.am.ActivityManagerService.this.mCpHelper.checkContentProviderAccess(str, i);
        }

        public int checkContentProviderUriPermission(android.net.Uri uri, int i, int i2, int i3) {
            return com.android.server.am.ActivityManagerService.this.mCpHelper.checkContentProviderUriPermission(uri, i, i2, i3);
        }

        public void onWakefulnessChanged(int i) {
            com.android.server.am.ActivityManagerService.this.onWakefulnessChanged(i);
        }

        public boolean startIsolatedProcess(java.lang.String str, java.lang.String[] strArr, java.lang.String str2, java.lang.String str3, int i, java.lang.Runnable runnable) {
            return com.android.server.am.ActivityManagerService.this.startIsolatedProcess(str, strArr, str2, str3, i, runnable);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public android.content.ComponentName startSdkSandboxService(android.content.Intent intent, int i, java.lang.String str, java.lang.String str2) throws android.os.RemoteException {
            validateSdkSandboxParams(intent, i, str, str2);
            if (com.android.server.am.ActivityManagerService.this.mAppOpsService.checkPackage(i, str) != 0) {
                throw new java.lang.IllegalArgumentException("uid does not belong to provided package");
            }
            android.content.ComponentName startService = com.android.server.am.ActivityManagerService.this.startService(com.android.server.am.ActivityManagerService.this.mContext.getIApplicationThread(), intent, intent.resolveTypeIfNeeded(com.android.server.am.ActivityManagerService.this.mContext.getContentResolver()), false, com.android.server.am.ActivityManagerService.this.mContext.getOpPackageName(), com.android.server.am.ActivityManagerService.this.mContext.getAttributionTag(), android.os.UserHandle.getUserId(i), true, i, str, str2);
            if (startService != null) {
                if (startService.getPackageName().equals("!")) {
                    throw new java.lang.SecurityException("Not allowed to start service " + intent + " without permission " + startService.getClassName());
                }
                if (startService.getPackageName().equals("!!")) {
                    throw new java.lang.SecurityException("Unable to start service " + intent + ": " + startService.getClassName());
                }
                if (startService.getPackageName().equals("?")) {
                    throw android.app.ServiceStartNotAllowedException.newInstance(false, "Not allowed to start service " + intent + ": " + startService.getClassName());
                }
            }
            return startService;
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean stopSdkSandboxService(android.content.Intent intent, int i, java.lang.String str, java.lang.String str2) {
            validateSdkSandboxParams(intent, i, str, str2);
            int stopService = com.android.server.am.ActivityManagerService.this.stopService(com.android.server.am.ActivityManagerService.this.mContext.getIApplicationThread(), intent, intent.resolveTypeIfNeeded(com.android.server.am.ActivityManagerService.this.mContext.getContentResolver()), android.os.UserHandle.getUserId(i), true, i, str, str2);
            if (stopService >= 0) {
                return stopService != 0;
            }
            throw new java.lang.SecurityException("Not allowed to stop service " + intent);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean bindSdkSandboxService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.IBinder iBinder, java.lang.String str, java.lang.String str2, int i2) throws android.os.RemoteException {
            return bindSdkSandboxServiceInternal(intent, serviceConnection, i, iBinder, str, str2, java.lang.Integer.toUnsignedLong(i2));
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean bindSdkSandboxService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.IBinder iBinder, java.lang.String str, java.lang.String str2, android.content.Context.BindServiceFlags bindServiceFlags) throws android.os.RemoteException {
            return bindSdkSandboxServiceInternal(intent, serviceConnection, i, iBinder, str, str2, bindServiceFlags.getValue());
        }

        private boolean bindSdkSandboxServiceInternal(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.IBinder iBinder, java.lang.String str, java.lang.String str2, long j) throws android.os.RemoteException {
            android.app.IApplicationThread iApplicationThread;
            validateSdkSandboxParams(intent, i, str, str2);
            if (com.android.server.am.ActivityManagerService.this.mAppOpsService.checkPackage(i, str) != 0) {
                throw new java.lang.IllegalArgumentException("uid does not belong to provided package");
            }
            if (serviceConnection == null) {
                throw new java.lang.IllegalArgumentException("connection is null");
            }
            android.os.Handler mainThreadHandler = com.android.server.am.ActivityManagerService.this.mContext.getMainThreadHandler();
            if (iBinder == null) {
                iApplicationThread = null;
            } else {
                synchronized (this) {
                    try {
                        com.android.server.am.ProcessRecord recordForAppLOSP = com.android.server.am.ActivityManagerService.this.getRecordForAppLOSP(iBinder);
                        if (recordForAppLOSP == null) {
                            android.util.Slog.i("ActivityManager", "clientApplicationThread process not found.");
                            return false;
                        }
                        if (recordForAppLOSP.info.uid != i) {
                            throw new java.lang.IllegalArgumentException("clientApplicationThread does not match  client uid");
                        }
                        iApplicationThread = recordForAppLOSP.getThread();
                    } finally {
                    }
                }
            }
            android.app.IServiceConnection serviceDispatcher = com.android.server.am.ActivityManagerService.this.mContext.getServiceDispatcher(serviceConnection, mainThreadHandler, j);
            intent.prepareToLeaveProcess(com.android.server.am.ActivityManagerService.this.mContext);
            return com.android.server.am.ActivityManagerService.this.bindServiceInstance(com.android.server.am.ActivityManagerService.this.mContext.getIApplicationThread(), com.android.server.am.ActivityManagerService.this.mContext.getActivityToken(), intent, intent.resolveTypeIfNeeded(com.android.server.am.ActivityManagerService.this.mContext.getContentResolver()), serviceDispatcher, j, str2, true, i, str, iApplicationThread, com.android.server.am.ActivityManagerService.this.mContext.getOpPackageName(), android.os.UserHandle.getUserId(i)) != 0;
        }

        private void validateSdkSandboxParams(android.content.Intent intent, int i, java.lang.String str, java.lang.String str2) {
            if (intent == null) {
                throw new java.lang.IllegalArgumentException("intent is null");
            }
            if (str == null) {
                throw new java.lang.IllegalArgumentException("clientAppPackage is null");
            }
            if (str2 == null) {
                throw new java.lang.IllegalArgumentException("processName is null");
            }
            if (intent.getComponent() == null) {
                throw new java.lang.IllegalArgumentException("service must specify explicit component");
            }
            if (!android.os.UserHandle.isApp(i)) {
                throw new java.lang.IllegalArgumentException("uid is not within application range");
            }
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean bindSdkSandboxService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, java.lang.String str, java.lang.String str2, int i2) throws android.os.RemoteException {
            return bindSdkSandboxService(intent, serviceConnection, i, (android.os.IBinder) null, str, str2, i2);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public void killSdkSandboxClientAppProcess(android.os.IBinder iBinder) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ProcessRecord recordForAppLOSP = com.android.server.am.ActivityManagerService.this.getRecordForAppLOSP(iBinder);
                    if (recordForAppLOSP != null) {
                        recordForAppLOSP.killLocked("sdk sandbox died", 12, 27, true);
                    }
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void onUserRemoved(int i) {
            com.android.server.am.ActivityManagerService.this.mAtmInternal.onUserStopped(i);
            com.android.server.am.ActivityManagerService.this.mBatteryStatsService.onUserRemoved(i);
            synchronized (com.android.server.am.ActivityManagerService.this.mThemeOverlayReadyUsers) {
                com.android.server.am.ActivityManagerService.this.mThemeOverlayReadyUsers.remove(java.lang.Integer.valueOf(i));
            }
        }

        public void killForegroundAppsForUser(int i) {
            int i2;
            java.util.ArrayList arrayList = new java.util.ArrayList();
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
            com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    int size = com.android.server.am.ActivityManagerService.this.mProcessList.getProcessNamesLOSP().getMap().size();
                    for (int i3 = 0; i3 < size; i3++) {
                        android.util.SparseArray sparseArray = (android.util.SparseArray) com.android.server.am.ActivityManagerService.this.mProcessList.getProcessNamesLOSP().getMap().valueAt(i3);
                        int size2 = sparseArray.size();
                        for (int i4 = 0; i4 < size2; i4++) {
                            com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) sparseArray.valueAt(i4);
                            if (!processRecord.isPersistent()) {
                                if (!processRecord.isRemoved()) {
                                    if (processRecord.userId == i && processRecord.mState.hasForegroundActivities()) {
                                    }
                                }
                                arrayList.add(processRecord);
                            }
                        }
                    }
                } finally {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
            int size3 = arrayList.size();
            if (size3 > 0) {
                com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    for (i2 = 0; i2 < size3; i2++) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mProcessList.removeProcessLocked((com.android.server.am.ProcessRecord) arrayList.get(i2), false, true, 13, 9, "kill all fg");
                        } finally {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            }
        }

        public void setPendingIntentAllowlistDuration(android.content.IIntentSender iIntentSender, android.os.IBinder iBinder, long j, int i, int i2, @android.annotation.Nullable java.lang.String str) {
            com.android.server.am.ActivityManagerService.this.mPendingIntentController.setPendingIntentAllowlistDuration(iIntentSender, iBinder, j, i, i2, str);
        }

        public int getPendingIntentFlags(android.content.IIntentSender iIntentSender) {
            return com.android.server.am.ActivityManagerService.this.mPendingIntentController.getPendingIntentFlags(iIntentSender);
        }

        public int[] getStartedUserIds() {
            return com.android.server.am.ActivityManagerService.this.mUserController.getStartedUserArray();
        }

        public void setPendingIntentAllowBgActivityStarts(android.content.IIntentSender iIntentSender, android.os.IBinder iBinder, int i) {
            if (!(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
                android.util.Slog.w("ActivityManager", "setPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + iIntentSender);
                return;
            }
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ((com.android.server.am.PendingIntentRecord) iIntentSender).setAllowBgActivityStarts(iBinder, i);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void clearPendingIntentAllowBgActivityStarts(android.content.IIntentSender iIntentSender, android.os.IBinder iBinder) {
            if (!(iIntentSender instanceof com.android.server.am.PendingIntentRecord)) {
                android.util.Slog.w("ActivityManager", "clearPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + iIntentSender);
                return;
            }
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ((com.android.server.am.PendingIntentRecord) iIntentSender).clearAllowBgActivityStarts(iBinder);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setDeviceIdleAllowlist(int[] iArr, int[] iArr2) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            com.android.server.am.ActivityManagerService.this.mDeviceIdleAllowlist = iArr;
                            com.android.server.am.ActivityManagerService.this.mDeviceIdleExceptIdleAllowlist = iArr2;
                            com.android.server.am.ActivityManagerService.this.mAppRestrictionController.setDeviceIdleAllowlist(iArr, iArr2);
                        } catch (java.lang.Throwable th) {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (java.lang.Throwable th2) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateDeviceIdleTempAllowlist(@android.annotation.Nullable int[] iArr, int i, boolean z, long j, int i2, int i3, @android.annotation.Nullable java.lang.String str, int i4) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        if (iArr != null) {
                            try {
                                com.android.server.am.ActivityManagerService.this.mDeviceIdleTempAllowlist = iArr;
                            } catch (java.lang.Throwable th) {
                                com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        if (z) {
                            if (i2 == 0) {
                                com.android.server.am.ActivityManagerService.this.mFgsStartTempAllowList.add(i, j, new com.android.server.am.ActivityManagerService.FgsTempAllowListItem(j, i3, str, i4));
                            }
                        } else {
                            com.android.server.am.ActivityManagerService.this.mFgsStartTempAllowList.removeUid(i);
                        }
                        com.android.server.am.ActivityManagerService.this.setAppIdTempAllowlistStateLSP(i, z);
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (java.lang.Throwable th2) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getUidProcessState(int i) {
            return com.android.server.am.ActivityManagerService.this.getUidState(i);
        }

        public java.util.Map<java.lang.Integer, java.lang.String> getProcessesWithPendingBindMounts(int i) {
            return com.android.server.am.ActivityManagerService.this.mProcessList.getProcessesWithPendingBindMounts(i);
        }

        public boolean isSystemReady() {
            return com.android.server.am.ActivityManagerService.this.mSystemReady;
        }

        public boolean isModernQueueEnabled() {
            return com.android.server.am.ActivityManagerService.this.mEnableModernQueue;
        }

        public void enforceBroadcastOptionsPermissions(android.os.Bundle bundle, int i) {
            com.android.server.am.ActivityManagerService.this.enforceBroadcastOptionPermissionsInternal(bundle, i);
        }

        @android.annotation.Nullable
        public java.lang.String getPackageNameByPid(int i) {
            synchronized (com.android.server.am.ActivityManagerService.this.mPidsSelfLocked) {
                try {
                    com.android.server.am.ProcessRecord processRecord = com.android.server.am.ActivityManagerService.this.mPidsSelfLocked.get(i);
                    if (processRecord == null || processRecord.info == null) {
                        return null;
                    }
                    return processRecord.info.packageName;
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }

        public void setHasOverlayUi(int i, boolean z) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    synchronized (com.android.server.am.ActivityManagerService.this.mPidsSelfLocked) {
                        com.android.server.am.ProcessRecord processRecord = com.android.server.am.ActivityManagerService.this.mPidsSelfLocked.get(i);
                        if (processRecord == null) {
                            android.util.Slog.w("ActivityManager", "setHasOverlayUi called on unknown pid: " + i);
                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        }
                        if (processRecord.mState.hasOverlayUi() == z) {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        }
                        processRecord.mState.setHasOverlayUi(z);
                        com.android.server.am.ActivityManagerService.this.updateOomAdjLocked(processRecord, 9);
                        com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public void notifyNetworkPolicyRulesUpdated(int i, long j) {
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
            com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    com.android.server.am.UidRecord uidRecordLOSP = com.android.server.am.ActivityManagerService.this.mProcessList.getUidRecordLOSP(i);
                    if (uidRecordLOSP == null) {
                        com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                        return;
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    synchronized (uidRecordLOSP.networkStateLock) {
                        try {
                            if (uidRecordLOSP.lastNetworkUpdatedProcStateSeq >= j) {
                                return;
                            }
                            uidRecordLOSP.lastNetworkUpdatedProcStateSeq = j;
                            if (uidRecordLOSP.procStateSeqWaitingForNetwork != 0 && j >= uidRecordLOSP.procStateSeqWaitingForNetwork) {
                                uidRecordLOSP.networkStateLock.notifyAll();
                            }
                        } catch (java.lang.Throwable th) {
                            throw th;
                        }
                    }
                } catch (java.lang.Throwable th2) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th2;
                }
            }
        }

        public void onUidBlockedReasonsChanged(int i, int i2) {
            synchronized (com.android.server.am.ActivityManagerService.this.mUidNetworkBlockedReasons) {
                try {
                    if (i2 == 0) {
                        com.android.server.am.ActivityManagerService.this.mUidNetworkBlockedReasons.delete(i);
                    } else {
                        com.android.server.am.ActivityManagerService.this.mUidNetworkBlockedReasons.put(i, i2);
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
        }

        public boolean isRuntimeRestarted() {
            return com.android.server.am.ActivityManagerService.this.mSystemServiceManager.isRuntimeRestarted();
        }

        public boolean canStartMoreUsers() {
            return com.android.server.am.ActivityManagerService.this.mUserController.canStartMoreUsers();
        }

        public void setSwitchingFromSystemUserMessage(java.lang.String str) {
            com.android.server.am.ActivityManagerService.this.mUserController.setSwitchingFromSystemUserMessage(str);
        }

        public void setSwitchingToSystemUserMessage(java.lang.String str) {
            com.android.server.am.ActivityManagerService.this.mUserController.setSwitchingToSystemUserMessage(str);
        }

        public int getMaxRunningUsers() {
            return com.android.server.am.ActivityManagerService.this.mUserController.getMaxRunningUsers();
        }

        public boolean isUidActive(int i) {
            boolean isUidActiveLOSP;
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
            com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    isUidActiveLOSP = com.android.server.am.ActivityManagerService.this.isUidActiveLOSP(i);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
            return isUidActiveLOSP;
        }

        public java.util.List<android.app.ProcessMemoryState> getMemoryStateForProcesses() {
            java.util.ArrayList arrayList = new java.util.ArrayList();
            synchronized (com.android.server.am.ActivityManagerService.this.mPidsSelfLocked) {
                try {
                    int size = com.android.server.am.ActivityManagerService.this.mPidsSelfLocked.size();
                    for (int i = 0; i < size; i++) {
                        com.android.server.am.ProcessRecord valueAt = com.android.server.am.ActivityManagerService.this.mPidsSelfLocked.valueAt(i);
                        arrayList.add(new android.app.ProcessMemoryState(valueAt.uid, valueAt.getPid(), valueAt.processName, valueAt.mState.getCurAdj(), valueAt.mServices.hasForegroundServices(), valueAt.mProfile.getCurrentHostingComponentTypes(), valueAt.mProfile.getHistoricalHostingComponentTypes()));
                    }
                } catch (java.lang.Throwable th) {
                    throw th;
                }
            }
            return arrayList;
        }

        public int handleIncomingUser(int i, int i2, int i3, boolean z, int i4, java.lang.String str, java.lang.String str2) {
            return com.android.server.am.ActivityManagerService.this.mUserController.handleIncomingUser(i, i2, i3, z, i4, str, str2);
        }

        public void enforceCallingPermission(java.lang.String str, java.lang.String str2) {
            com.android.server.am.ActivityManagerService.this.enforceCallingPermission(str, str2);
        }

        public android.util.Pair<java.lang.Integer, java.lang.Integer> getCurrentAndTargetUserIds() {
            return com.android.server.am.ActivityManagerService.this.mUserController.getCurrentAndTargetUserIds();
        }

        public int getCurrentUserId() {
            return com.android.server.am.ActivityManagerService.this.mUserController.getCurrentUserId();
        }

        public boolean isUserRunning(int i, int i2) {
            return com.android.server.am.ActivityManagerService.this.mUserController.isUserRunning(i, i2);
        }

        public void trimApplications() {
            com.android.server.am.ActivityManagerService.this.trimApplications(true, 1);
        }

        public void killProcessesForRemovedTask(java.util.ArrayList<java.lang.Object> arrayList) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                for (int i = 0; i < arrayList.size(); i++) {
                    try {
                        com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) ((com.android.server.wm.WindowProcessController) arrayList.get(i)).mOwner;
                        if (android.app.ActivityManager.isProcStateBackground(processRecord.mState.getSetProcState()) && processRecord.mReceivers.numberOfCurReceivers() == 0 && !processRecord.mState.hasStartedServices()) {
                            processRecord.killLocked("remove task", 10, 22, true);
                        } else {
                            processRecord.setWaitingToKill("remove task");
                        }
                    } catch (java.lang.Throwable th) {
                        com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void killProcess(java.lang.String str, int i, java.lang.String str2) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ProcessRecord processRecordLocked = com.android.server.am.ActivityManagerService.this.getProcessRecordLocked(str, i);
                    if (processRecordLocked != null) {
                        com.android.server.am.ActivityManagerService.this.mProcessList.removeProcessLocked(processRecordLocked, false, true, 13, str2);
                    }
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean hasRunningActivity(final int i, @android.annotation.Nullable final java.lang.String str) {
            boolean z;
            if (str == null) {
                return false;
            }
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
            com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    z = com.android.server.am.ActivityManagerService.this.mProcessList.searchEachLruProcessesLOSP(true, new java.util.function.Function() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda0
                        @Override // java.util.function.Function
                        public final java.lang.Object apply(java.lang.Object obj) {
                            java.lang.Boolean lambda$hasRunningActivity$0;
                            lambda$hasRunningActivity$0 = com.android.server.am.ActivityManagerService.LocalService.lambda$hasRunningActivity$0(i, str, (com.android.server.am.ProcessRecord) obj);
                            return lambda$hasRunningActivity$0;
                        }
                    }) != null;
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
            return z;
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static /* synthetic */ java.lang.Boolean lambda$hasRunningActivity$0(int i, java.lang.String str, com.android.server.am.ProcessRecord processRecord) {
            if (processRecord.uid == i && processRecord.getWindowProcessController().hasRunningActivity(str)) {
                return java.lang.Boolean.TRUE;
            }
            return null;
        }

        public void updateOomAdj(int i) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.updateOomAdjLocked(i);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateCpuStats() {
            com.android.server.am.ActivityManagerService.this.updateCpuStats();
        }

        public void updateBatteryStats(android.content.ComponentName componentName, int i, int i2, boolean z) {
            com.android.server.am.ActivityManagerService.this.updateBatteryStats(componentName, i, i2, z);
        }

        public void updateActivityUsageStats(android.content.ComponentName componentName, int i, int i2, android.os.IBinder iBinder, android.content.ComponentName componentName2, android.app.assist.ActivityId activityId) {
            com.android.server.am.ActivityManagerService.this.updateActivityUsageStats(componentName, i, i2, iBinder, componentName2, activityId);
        }

        public void updateForegroundTimeIfOnBattery(java.lang.String str, int i, long j) {
            com.android.server.am.ActivityManagerService.this.mBatteryStatsService.updateForegroundTimeIfOnBattery(str, i, j);
        }

        public void sendForegroundProfileChanged(int i) {
            com.android.server.am.ActivityManagerService.this.mUserController.sendForegroundProfileChanged(i);
        }

        public boolean shouldConfirmCredentials(int i) {
            return com.android.server.am.ActivityManagerService.this.mUserController.shouldConfirmCredentials(i);
        }

        public void noteAlarmFinish(android.app.PendingIntent pendingIntent, android.os.WorkSource workSource, int i, java.lang.String str) {
            com.android.server.am.ActivityManagerService.this.noteAlarmFinish(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str);
        }

        public void noteAlarmStart(android.app.PendingIntent pendingIntent, android.os.WorkSource workSource, int i, java.lang.String str) {
            com.android.server.am.ActivityManagerService.this.noteAlarmStart(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str);
        }

        public void noteWakeupAlarm(android.app.PendingIntent pendingIntent, android.os.WorkSource workSource, int i, java.lang.String str, java.lang.String str2) {
            com.android.server.am.ActivityManagerService.this.noteWakeupAlarm(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str, str2);
        }

        public boolean isAppStartModeDisabled(int i, java.lang.String str) {
            return com.android.server.am.ActivityManagerService.this.isAppStartModeDisabled(i, str);
        }

        public int[] getCurrentProfileIds() {
            return com.android.server.am.ActivityManagerService.this.mUserController.getCurrentProfileIds();
        }

        public android.content.pm.UserInfo getCurrentUser() {
            return com.android.server.am.ActivityManagerService.this.mUserController.getCurrentUser();
        }

        public void ensureNotSpecialUser(int i) {
            com.android.server.am.ActivityManagerService.this.mUserController.ensureNotSpecialUser(i);
        }

        public boolean isCurrentProfile(int i) {
            return com.android.server.am.ActivityManagerService.this.mUserController.isCurrentProfile(i);
        }

        public boolean hasStartedUserState(int i) {
            return com.android.server.am.ActivityManagerService.this.mUserController.hasStartedUserState(i);
        }

        public void finishUserSwitch(java.lang.Object obj) {
            com.android.server.am.ActivityManagerService.this.mUserController.finishUserSwitch((com.android.server.am.UserState) obj);
        }

        public void scheduleAppGcs() {
            synchronized (com.android.server.am.ActivityManagerService.this.mAppProfiler.mProfilerLock) {
                com.android.server.am.ActivityManagerService.this.mAppProfiler.scheduleAppGcsLPf();
            }
        }

        public int getTaskIdForActivity(android.os.IBinder iBinder, boolean z) {
            return com.android.server.am.ActivityManagerService.this.getTaskForActivity(iBinder, z);
        }

        public android.content.pm.ActivityPresentationInfo getActivityPresentationInfo(android.os.IBinder iBinder) {
            android.app.ActivityClient activityClient = android.app.ActivityClient.getInstance();
            return new android.content.pm.ActivityPresentationInfo(activityClient.getTaskForActivity(iBinder, false), activityClient.getDisplayId(iBinder), com.android.server.am.ActivityManagerService.this.mAtmInternal.getActivityName(iBinder));
        }

        public void setBooting(boolean z) {
            com.android.server.am.ActivityManagerService.this.mBooting = z;
        }

        public boolean isBooting() {
            return com.android.server.am.ActivityManagerService.this.mBooting;
        }

        public void setBooted(boolean z) {
            com.android.server.am.ActivityManagerService.this.mBooted = z;
        }

        public boolean isBooted() {
            return com.android.server.am.ActivityManagerService.this.mBooted;
        }

        public void finishBooting() {
            com.android.server.am.ActivityManagerService.this.finishBooting();
        }

        public void tempAllowlistForPendingIntent(int i, int i2, int i3, long j, int i4, int i5, java.lang.String str) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.tempAllowlistForPendingIntentLocked(i, i2, i3, j, i4, i5, str);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int broadcastIntentInPackage(java.lang.String str, @android.annotation.Nullable java.lang.String str2, int i, int i2, int i3, android.content.Intent intent, java.lang.String str3, android.app.IApplicationThread iApplicationThread, android.content.IIntentReceiver iIntentReceiver, int i4, java.lang.String str4, android.os.Bundle bundle, java.lang.String str5, android.os.Bundle bundle2, boolean z, boolean z2, int i5, android.app.BackgroundStartPrivileges backgroundStartPrivileges, @android.annotation.Nullable int[] iArr) {
            int broadcastIntentInPackage;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    broadcastIntentInPackage = com.android.server.am.ActivityManagerService.this.broadcastIntentInPackage(str, str2, i, i2, i3, intent, str3, com.android.server.am.ActivityManagerService.this.getRecordForAppLOSP(iApplicationThread), iIntentReceiver, i4, str4, bundle, str5, bundle2, z, z2, i5, backgroundStartPrivileges, iArr);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return broadcastIntentInPackage;
        }

        public int broadcastIntent(android.content.Intent intent, android.content.IIntentReceiver iIntentReceiver, java.lang.String[] strArr, boolean z, int i, int[] iArr, @android.annotation.Nullable java.util.function.BiFunction<java.lang.Integer, android.os.Bundle, android.os.Bundle> biFunction, @android.annotation.Nullable android.os.Bundle bundle) {
            int broadcastIntentLocked;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    android.content.Intent verifyBroadcastLocked = com.android.server.am.ActivityManagerService.this.verifyBroadcastLocked(intent);
                    int callingPid = android.os.Binder.getCallingPid();
                    int callingUid = android.os.Binder.getCallingUid();
                    long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                    try {
                        broadcastIntentLocked = com.android.server.am.ActivityManagerService.this.broadcastIntentLocked(null, null, null, verifyBroadcastLocked, null, null, iIntentReceiver, 0, null, null, strArr, null, null, -1, bundle, z, false, callingPid, callingUid, callingUid, callingPid, i, android.app.BackgroundStartPrivileges.NONE, iArr, biFunction);
                    } finally {
                        android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                    }
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return broadcastIntentLocked;
        }

        public int broadcastIntentWithCallback(android.content.Intent intent, android.content.IIntentReceiver iIntentReceiver, java.lang.String[] strArr, int i, int[] iArr, @android.annotation.Nullable java.util.function.BiFunction<java.lang.Integer, android.os.Bundle, android.os.Bundle> biFunction, @android.annotation.Nullable android.os.Bundle bundle) {
            return broadcastIntent(intent, iIntentReceiver, strArr, !isModernQueueEnabled(), i, iArr, biFunction, bundle);
        }

        public android.content.ComponentName startServiceInPackage(int i, android.content.Intent intent, java.lang.String str, boolean z, java.lang.String str2, @android.annotation.Nullable java.lang.String str3, int i2, android.app.BackgroundStartPrivileges backgroundStartPrivileges) throws android.os.TransactionTooLargeException {
            android.content.ComponentName startServiceLocked;
            long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
            try {
                if (android.os.Trace.isTagEnabled(64L)) {
                    android.os.Trace.traceBegin(64L, "startServiceInPackage: intent=" + intent + ", caller=" + str2 + ", fgRequired=" + z);
                }
                com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        startServiceLocked = com.android.server.am.ActivityManagerService.this.mServices.startServiceLocked(null, intent, str, -1, i, z, str2, str3, i2, backgroundStartPrivileges);
                    } catch (java.lang.Throwable th) {
                        com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                android.os.Trace.traceEnd(64L);
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                return startServiceLocked;
            } catch (java.lang.Throwable th2) {
                android.os.Trace.traceEnd(64L);
                android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th2;
            }
        }

        public void disconnectActivityFromServices(java.lang.Object obj) {
            final com.android.server.wm.ActivityServiceConnectionsHolder activityServiceConnectionsHolder = (com.android.server.wm.ActivityServiceConnectionsHolder) obj;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
                    com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            activityServiceConnectionsHolder.forEachConnection(new java.util.function.Consumer() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda1
                                @Override // java.util.function.Consumer
                                public final void accept(java.lang.Object obj2) {
                                    com.android.server.am.ActivityManagerService.LocalService.this.lambda$disconnectActivityFromServices$1(activityServiceConnectionsHolder, obj2);
                                }
                            });
                        } catch (java.lang.Throwable th) {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (java.lang.Throwable th2) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        /* JADX INFO: Access modifiers changed from: private */
        public /* synthetic */ void lambda$disconnectActivityFromServices$1(com.android.server.wm.ActivityServiceConnectionsHolder activityServiceConnectionsHolder, java.lang.Object obj) {
            com.android.server.am.ActivityManagerService.this.mServices.removeConnectionLocked((com.android.server.am.ConnectionRecord) obj, null, activityServiceConnectionsHolder, false);
        }

        public void cleanUpServices(int i, android.content.ComponentName componentName, android.content.Intent intent) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.mServices.cleanUpServices(i, componentName, intent);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public android.content.pm.ActivityInfo getActivityInfoForUser(android.content.pm.ActivityInfo activityInfo, int i) {
            return com.android.server.am.ActivityManagerService.this.getActivityInfoForUser(activityInfo, i);
        }

        public void ensureBootCompleted() {
            com.android.server.am.ActivityManagerService.this.ensureBootCompleted();
        }

        public void updateOomLevelsForDisplay(int i) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    if (com.android.server.am.ActivityManagerService.this.mWindowManager != null) {
                        com.android.server.am.ActivityManagerService.this.mProcessList.applyDisplaySize(com.android.server.am.ActivityManagerService.this.mWindowManager);
                    }
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isActivityStartsLoggingEnabled() {
            return com.android.server.am.ActivityManagerService.this.mConstants.mFlagActivityStartsLoggingEnabled;
        }

        public boolean isBackgroundActivityStartsEnabled() {
            return com.android.server.am.ActivityManagerService.this.mConstants.mFlagBackgroundActivityStartsEnabled;
        }

        public android.app.BackgroundStartPrivileges getBackgroundStartPrivileges(int i) {
            return com.android.server.am.ActivityManagerService.this.getBackgroundStartPrivileges(i);
        }

        public boolean canScheduleUserInitiatedJobs(int i, int i2, java.lang.String str) {
            return com.android.server.am.ActivityManagerService.this.canScheduleUserInitiatedJobs(i, i2, str);
        }

        public void reportCurKeyguardUsageEvent(boolean z) {
            int i;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            if (z) {
                i = 17;
            } else {
                i = 18;
            }
            activityManagerService.reportGlobalUsageEvent(i);
        }

        public void monitor() {
            com.android.server.am.ActivityManagerService.this.monitor();
        }

        public long inputDispatchingTimedOut(int i, boolean z, com.android.internal.os.TimeoutRecord timeoutRecord) {
            return com.android.server.am.ActivityManagerService.this.inputDispatchingTimedOut(i, z, timeoutRecord);
        }

        public boolean inputDispatchingTimedOut(java.lang.Object obj, java.lang.String str, android.content.pm.ApplicationInfo applicationInfo, java.lang.String str2, java.lang.Object obj2, boolean z, com.android.internal.os.TimeoutRecord timeoutRecord) {
            return com.android.server.am.ActivityManagerService.this.inputDispatchingTimedOut((com.android.server.am.ProcessRecord) obj, str, applicationInfo, str2, (com.android.server.wm.WindowProcessController) obj2, z, timeoutRecord);
        }

        public void inputDispatchingResumed(int i) {
            com.android.server.am.ProcessRecord processRecord;
            synchronized (com.android.server.am.ActivityManagerService.this.mPidsSelfLocked) {
                processRecord = com.android.server.am.ActivityManagerService.this.mPidsSelfLocked.get(i);
            }
            if (processRecord != null) {
                com.android.server.am.ActivityManagerService.this.mAppErrors.handleDismissAnrDialogs(processRecord);
            }
        }

        public void rescheduleAnrDialog(java.lang.Object obj) {
            android.os.Message obtain = android.os.Message.obtain();
            obtain.what = 2;
            obtain.obj = (com.android.server.am.AppNotRespondingDialog.Data) obj;
            com.android.server.am.ActivityManagerService.this.mUiHandler.sendMessageDelayed(obtain, android.os.InputConstants.DEFAULT_DISPATCHING_TIMEOUT_MILLIS);
        }

        public void broadcastGlobalConfigurationChanged(int i, boolean z) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    android.content.Intent intent = new android.content.Intent("android.intent.action.CONFIGURATION_CHANGED");
                    intent.addFlags(1881145344);
                    com.android.server.am.ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, new android.app.BroadcastOptions().setDeliveryGroupPolicy(1).setDeferralPolicy(2).toBundle(), false, false, com.android.server.am.ActivityManagerService.MY_PID, 1000, android.os.Binder.getCallingUid(), android.os.Binder.getCallingPid(), -1);
                    if ((i & 4) != 0) {
                        android.content.Intent intent2 = new android.content.Intent("android.intent.action.LOCALE_CHANGED");
                        intent2.addFlags(18876416);
                        if (z || !com.android.server.am.ActivityManagerService.this.mProcessesReady) {
                            intent2.addFlags(1073741824);
                        }
                        android.app.BroadcastOptions makeBasic = android.app.BroadcastOptions.makeBasic();
                        makeBasic.setTemporaryAppAllowlist(com.android.server.am.ActivityManagerService.this.mInternal.getBootTimeTempAllowListDuration(), 0, 206, "");
                        makeBasic.setDeliveryGroupPolicy(1);
                        makeBasic.setDeferralPolicy(2);
                        com.android.server.am.ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent2, null, null, 0, null, null, null, null, null, -1, makeBasic.toBundle(), false, false, com.android.server.am.ActivityManagerService.MY_PID, 1000, android.os.Binder.getCallingUid(), android.os.Binder.getCallingPid(), -1);
                    }
                    if (!z && isSplitConfigurationChange(i)) {
                        android.content.Intent intent3 = new android.content.Intent("android.intent.action.SPLIT_CONFIGURATION_CHANGED");
                        intent3.addFlags(android.hardware.audio.common.V2_0.AudioFormat.APTX_HD);
                        com.android.server.am.ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent3, null, null, 0, null, null, new java.lang.String[]{"android.permission.INSTALL_PACKAGES"}, null, null, -1, null, false, false, com.android.server.am.ActivityManagerService.MY_PID, 1000, android.os.Binder.getCallingUid(), android.os.Binder.getCallingPid(), -1);
                    }
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        private boolean isSplitConfigurationChange(int i) {
            return (i & com.android.server.policy.PhoneWindowManager.TOAST_WINDOW_TIMEOUT) != 0;
        }

        public void broadcastCloseSystemDialogs(java.lang.String str) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    android.content.Intent intent = new android.content.Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
                    intent.addFlags(com.android.server.tare.AlarmManagerEconomicPolicy.ACTION_ALARM_WAKEUP_EXACT_ALLOW_WHILE_IDLE);
                    if (str != null) {
                        intent.putExtra(com.android.server.policy.PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, str);
                    }
                    android.app.BroadcastOptions deferralPolicy = new android.app.BroadcastOptions().setDeliveryGroupPolicy(1).setDeferralPolicy(2);
                    if (str != null) {
                        deferralPolicy.setDeliveryGroupMatchingKey("android.intent.action.CLOSE_SYSTEM_DIALOGS", str);
                    }
                    com.android.server.am.ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, deferralPolicy.toBundle(), false, false, -1, 1000, android.os.Binder.getCallingUid(), android.os.Binder.getCallingPid(), -1);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void appNotResponding(@android.annotation.NonNull java.lang.String str, int i, @android.annotation.NonNull com.android.internal.os.TimeoutRecord timeoutRecord) {
            com.android.server.am.ActivityManagerService.this.appNotResponding(str, i, timeoutRecord);
        }

        public void killAllBackgroundProcessesExcept(int i, int i2) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.killAllBackgroundProcessesExcept(i, i2);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void startProcess(java.lang.String str, android.content.pm.ApplicationInfo applicationInfo, boolean z, boolean z2, java.lang.String str2, android.content.ComponentName componentName) {
            try {
                if (android.os.Trace.isTagEnabled(64L)) {
                    android.os.Trace.traceBegin(64L, "startProcess:" + str);
                }
                com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
                com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        android.os.SystemClock.elapsedRealtimeNanos();
                        com.android.server.am.HostingRecord hostingRecord = new com.android.server.am.HostingRecord(str2, componentName, z2);
                        com.android.server.am.ActivityManagerService.this.getProcessRecordLocked(str, applicationInfo.uid);
                        com.android.server.am.ActivityManagerService.this.startProcessLocked(str, applicationInfo, z, 0, hostingRecord, 1, false, false);
                    } catch (java.lang.Throwable th) {
                        com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                android.os.Trace.traceEnd(64L);
            } catch (java.lang.Throwable th2) {
                android.os.Trace.traceEnd(64L);
                throw th2;
            }
        }

        public void setDebugFlagsForStartingActivity(android.content.pm.ActivityInfo activityInfo, int i, android.app.ProfilerInfo profilerInfo, java.lang.Object obj) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    synchronized (obj) {
                        if ((i & 2) != 0) {
                            try {
                                com.android.server.am.ActivityManagerService.this.setDebugApp(activityInfo.processName, true, false, (i & 16) != 0);
                            } catch (java.lang.Throwable th) {
                                throw th;
                            }
                        }
                        if ((i & 8) != 0) {
                            com.android.server.am.ActivityManagerService.this.setNativeDebuggingAppLocked(activityInfo.applicationInfo, activityInfo.processName);
                        }
                        if ((i & 4) != 0) {
                            com.android.server.am.ActivityManagerService.this.setTrackAllocationApp(activityInfo.applicationInfo, activityInfo.processName);
                        }
                        if (profilerInfo != null) {
                            com.android.server.am.ActivityManagerService.this.setProfileApp(activityInfo.applicationInfo, activityInfo.processName, profilerInfo, null);
                        }
                        obj.notify();
                    }
                } catch (java.lang.Throwable th2) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getStorageMountMode(int i, int i2) {
            int mountMode;
            if (i2 == 2000 || i2 == 0) {
                return 1;
            }
            synchronized (com.android.server.am.ActivityManagerService.this.mPidsSelfLocked) {
                com.android.server.am.ProcessRecord processRecord = com.android.server.am.ActivityManagerService.this.mPidsSelfLocked.get(i);
                mountMode = processRecord == null ? 0 : processRecord.getMountMode();
            }
            return mountMode;
        }

        public boolean isAppForeground(int i) {
            return com.android.server.am.ActivityManagerService.this.isAppForeground(i);
        }

        public boolean isAppBad(java.lang.String str, int i) {
            return com.android.server.am.ActivityManagerService.this.isAppBad(str, i);
        }

        public void clearPendingBackup(int i) {
            com.android.server.am.ActivityManagerService.this.clearPendingBackup(i);
        }

        public void prepareForPossibleShutdown() {
            com.android.server.am.ActivityManagerService.this.prepareForPossibleShutdown();
        }

        public boolean hasRunningForegroundService(int i, int i2) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.UidRecord uidRecord = com.android.server.am.ActivityManagerService.this.mProcessList.mActiveUids.get(i);
                    if (uidRecord == null) {
                        com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                        return false;
                    }
                    for (int numOfProcs = uidRecord.getNumOfProcs() - 1; numOfProcs >= 0; numOfProcs--) {
                        if (uidRecord.getProcessRecordByIndex(numOfProcs).mServices.containsAnyForegroundServiceTypes(i2)) {
                            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                            return true;
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public boolean hasForegroundServiceNotification(java.lang.String str, int i, java.lang.String str2) {
            boolean hasForegroundServiceNotificationLocked;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    hasForegroundServiceNotificationLocked = com.android.server.am.ActivityManagerService.this.mServices.hasForegroundServiceNotificationLocked(str, i, str2);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return hasForegroundServiceNotificationLocked;
        }

        public android.app.ActivityManagerInternal.ServiceNotificationPolicy applyForegroundServiceNotification(android.app.Notification notification, java.lang.String str, int i, java.lang.String str2, int i2) {
            android.app.ActivityManagerInternal.ServiceNotificationPolicy applyForegroundServiceNotificationLocked;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    applyForegroundServiceNotificationLocked = com.android.server.am.ActivityManagerService.this.mServices.applyForegroundServiceNotificationLocked(notification, str, i, str2, i2);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return applyForegroundServiceNotificationLocked;
        }

        public void onForegroundServiceNotificationUpdate(boolean z, android.app.Notification notification, int i, java.lang.String str, int i2) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.mServices.onForegroundServiceNotificationUpdateLocked(z, notification, i, str, i2);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void stopAppForUser(java.lang.String str, int i) {
            com.android.server.am.ActivityManagerService.this.stopAppForUserInternal(str, i);
        }

        public void registerProcessObserver(android.app.IProcessObserver iProcessObserver) {
            com.android.server.am.ActivityManagerService.this.registerProcessObserver(iProcessObserver);
        }

        public void unregisterProcessObserver(android.app.IProcessObserver iProcessObserver) {
            com.android.server.am.ActivityManagerService.this.unregisterProcessObserver(iProcessObserver);
        }

        public int getInstrumentationSourceUid(int i) {
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = com.android.server.am.ActivityManagerService.this.mProcLock;
            com.android.server.am.ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    for (int size = com.android.server.am.ActivityManagerService.this.mActiveInstrumentation.size() - 1; size >= 0; size--) {
                        com.android.server.am.ActiveInstrumentation activeInstrumentation = com.android.server.am.ActivityManagerService.this.mActiveInstrumentation.get(size);
                        if (!activeInstrumentation.mFinished && activeInstrumentation.mTargetInfo != null && activeInstrumentation.mTargetInfo.uid == i) {
                            int i2 = activeInstrumentation.mSourceUid;
                            com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return i2;
                        }
                    }
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return -1;
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }

        public void setDeviceOwnerUid(int i) {
            com.android.server.am.ActivityManagerService.this.mDeviceOwnerUid = i;
        }

        public boolean isDeviceOwner(int i) {
            return i >= 0 && com.android.server.am.ActivityManagerService.this.mDeviceOwnerUid == i;
        }

        public void setProfileOwnerUid(android.util.ArraySet<java.lang.Integer> arraySet) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.mProfileOwnerUids = arraySet;
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isProfileOwner(int i) {
            boolean z;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    z = com.android.server.am.ActivityManagerService.this.mProfileOwnerUids != null && com.android.server.am.ActivityManagerService.this.mProfileOwnerUids.indexOf(java.lang.Integer.valueOf(i)) >= 0;
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return z;
        }

        public void setCompanionAppUids(int i, java.util.Set<java.lang.Integer> set) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.mCompanionAppUidsMap.put(java.lang.Integer.valueOf(i), set);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isAssociatedCompanionApp(int i, int i2) {
            java.util.Set set = (java.util.Set) com.android.server.am.ActivityManagerService.this.mCompanionAppUidsMap.get(java.lang.Integer.valueOf(i));
            if (set == null) {
                return false;
            }
            return set.contains(java.lang.Integer.valueOf(i2));
        }

        public void addPendingTopUid(int i, int i2, @android.annotation.Nullable android.app.IApplicationThread iApplicationThread) {
            boolean add = com.android.server.am.ActivityManagerService.this.mPendingStartActivityUids.add(i, i2);
            if (add) {
                com.android.server.am.ActivityManagerService.this.mOomAdjuster.mCachedAppOptimizer.unfreezeProcess(i2, 1);
            }
            if (add && com.android.server.am.ActivityManagerService.this.mNetworkPolicyUidObserver != null) {
                try {
                    long nextProcStateSeq = com.android.server.am.ActivityManagerService.this.mProcessList.getNextProcStateSeq();
                    com.android.server.am.ActivityManagerService.this.mNetworkPolicyUidObserver.onUidStateChanged(i, 2, nextProcStateSeq, 127);
                    if (iApplicationThread != null && shouldWaitForNetworkRulesUpdate(i)) {
                        iApplicationThread.setNetworkBlockSeq(nextProcStateSeq);
                    }
                } catch (android.os.RemoteException e) {
                    android.util.Slog.d("ActivityManager", "Error calling setNetworkBlockSeq", e);
                }
            }
        }

        private boolean shouldWaitForNetworkRulesUpdate(int i) {
            boolean z;
            synchronized (com.android.server.am.ActivityManagerService.this.mUidNetworkBlockedReasons) {
                try {
                    z = false;
                    int i2 = com.android.server.am.ActivityManagerService.this.mUidNetworkBlockedReasons.get(i, 0);
                    if (i2 != 0 && com.android.server.net.NetworkPolicyManagerInternal.updateBlockedReasonsWithProcState(i2, 2) == 0) {
                        z = true;
                    }
                } finally {
                }
            }
            return z;
        }

        public void deletePendingTopUid(int i, long j) {
            com.android.server.am.ActivityManagerService.this.mPendingStartActivityUids.delete(i, j);
        }

        public boolean isPendingTopUid(int i) {
            return com.android.server.am.ActivityManagerService.this.mPendingStartActivityUids.isPendingTopUid(i);
        }

        public android.content.Intent getIntentForIntentSender(android.content.IIntentSender iIntentSender) {
            return com.android.server.am.ActivityManagerService.this.getIntentForIntentSender(iIntentSender);
        }

        public android.app.PendingIntent getPendingIntentActivityAsApp(int i, @android.annotation.NonNull android.content.Intent intent, int i2, android.os.Bundle bundle, java.lang.String str, int i3) {
            return getPendingIntentActivityAsApp(i, new android.content.Intent[]{intent}, i2, bundle, str, i3);
        }

        public android.app.PendingIntent getPendingIntentActivityAsApp(int i, @android.annotation.NonNull android.content.Intent[] intentArr, int i2, android.os.Bundle bundle, java.lang.String str, int i3) {
            if (((i2 & 67108864) != 0) == ((i2 & 33554432) != 0)) {
                throw new java.lang.IllegalArgumentException("Must set exactly one of FLAG_IMMUTABLE or FLAG_MUTABLE");
            }
            android.content.Context context = com.android.server.am.ActivityManagerService.this.mContext;
            android.content.ContentResolver contentResolver = context.getContentResolver();
            int length = intentArr.length;
            java.lang.String[] strArr = new java.lang.String[length];
            for (int i4 = 0; i4 < length; i4++) {
                android.content.Intent intent = intentArr[i4];
                strArr[i4] = intent.resolveTypeIfNeeded(contentResolver);
                intent.migrateExtraStreamToClipData(context);
                intent.prepareToLeaveProcess(context);
            }
            android.content.IIntentSender intentSenderWithFeatureAsApp = com.android.server.am.ActivityManagerService.this.getIntentSenderWithFeatureAsApp(2, str, context.getAttributionTag(), null, null, i, intentArr, strArr, i2, bundle, android.os.UserHandle.getUserId(i3), i3);
            if (intentSenderWithFeatureAsApp != null) {
                return new android.app.PendingIntent(intentSenderWithFeatureAsApp);
            }
            return null;
        }

        public long getBootTimeTempAllowListDuration() {
            return com.android.server.am.ActivityManagerService.this.mConstants.mBootTimeTempAllowlistDuration;
        }

        public void registerAnrController(android.app.AnrController anrController) {
            com.android.server.am.ActivityManagerService.this.mActivityTaskManager.registerAnrController(anrController);
        }

        public void unregisterAnrController(android.app.AnrController anrController) {
            com.android.server.am.ActivityManagerService.this.mActivityTaskManager.unregisterAnrController(anrController);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean canStartForegroundService(int i, int i2, @android.annotation.NonNull java.lang.String str) {
            boolean canStartForegroundServiceLocked;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    canStartForegroundServiceLocked = com.android.server.am.ActivityManagerService.this.mServices.canStartForegroundServiceLocked(i, i2, str);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return canStartForegroundServiceLocked;
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public void tempAllowWhileInUsePermissionInFgs(int i, long j) {
            com.android.server.am.ActivityManagerService.this.mFgsWhileInUseTempAllowList.add(i, j, "");
        }

        public boolean isTempAllowlistedForFgsWhileInUse(int i) {
            return com.android.server.am.ActivityManagerService.this.mFgsWhileInUseTempAllowList.isAllowed(i);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean canAllowWhileInUsePermissionInFgs(int i, int i2, @android.annotation.NonNull java.lang.String str) {
            boolean canAllowWhileInUsePermissionInFgsLocked;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    canAllowWhileInUsePermissionInFgsLocked = com.android.server.am.ActivityManagerService.this.mServices.canAllowWhileInUsePermissionInFgsLocked(i, i2, str);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return canAllowWhileInUsePermissionInFgsLocked;
        }

        public int getPushMessagingOverQuotaBehavior() {
            int i;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    i = com.android.server.am.ActivityManagerService.this.mConstants.mPushMessagingOverQuotaBehavior;
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return i;
        }

        public int getServiceStartForegroundTimeout() {
            return com.android.server.am.ActivityManagerService.this.mConstants.mServiceStartForegroundTimeoutMs;
        }

        public int getUidCapability(int i) {
            int curCapability;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.UidRecord uidRecordLOSP = com.android.server.am.ActivityManagerService.this.mProcessList.getUidRecordLOSP(i);
                    if (uidRecordLOSP == null) {
                        throw new java.lang.IllegalArgumentException("uid record for " + i + " not found");
                    }
                    curCapability = uidRecordLOSP.getCurCapability();
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return curCapability;
        }

        @android.annotation.Nullable
        public java.util.List<java.lang.Integer> getIsolatedProcesses(int i) {
            java.util.List<java.lang.Integer> isolatedProcessesLocked;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    isolatedProcessesLocked = com.android.server.am.ActivityManagerService.this.mProcessList.getIsolatedProcessesLocked(i);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return isolatedProcessesLocked;
        }

        public int sendIntentSender(android.content.IIntentSender iIntentSender, android.os.IBinder iBinder, int i, android.content.Intent intent, java.lang.String str, android.content.IIntentReceiver iIntentReceiver, java.lang.String str2, android.os.Bundle bundle) {
            return com.android.server.am.ActivityManagerService.this.sendIntentSender(null, iIntentSender, iBinder, i, intent, str, iIntentReceiver, str2, bundle);
        }

        public void setVoiceInteractionManagerProvider(@android.annotation.Nullable android.app.ActivityManagerInternal.VoiceInteractionManagerProvider voiceInteractionManagerProvider) {
            com.android.server.am.ActivityManagerService.this.setVoiceInteractionManagerProvider(voiceInteractionManagerProvider);
        }

        public void setStopUserOnSwitch(int i) {
            com.android.server.am.ActivityManagerService.this.setStopUserOnSwitch(i);
        }

        public int getRestrictionLevel(int i) {
            return com.android.server.am.ActivityManagerService.this.mAppRestrictionController.getRestrictionLevel(i);
        }

        public int getRestrictionLevel(java.lang.String str, int i) {
            return com.android.server.am.ActivityManagerService.this.mAppRestrictionController.getRestrictionLevel(str, i);
        }

        public boolean isBgAutoRestrictedBucketFeatureFlagEnabled() {
            return com.android.server.am.ActivityManagerService.this.mAppRestrictionController.isBgAutoRestrictedBucketFeatureFlagEnabled();
        }

        public void addAppBackgroundRestrictionListener(@android.annotation.NonNull android.app.ActivityManagerInternal.AppBackgroundRestrictionListener appBackgroundRestrictionListener) {
            com.android.server.am.ActivityManagerService.this.mAppRestrictionController.addAppBackgroundRestrictionListener(appBackgroundRestrictionListener);
        }

        public void addForegroundServiceStateListener(@android.annotation.NonNull android.app.ActivityManagerInternal.ForegroundServiceStateListener foregroundServiceStateListener) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.mForegroundServiceStateListeners.add(foregroundServiceStateListener);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void addBroadcastEventListener(@android.annotation.NonNull android.app.ActivityManagerInternal.BroadcastEventListener broadcastEventListener) {
            com.android.server.am.ActivityManagerService.this.mBroadcastEventListeners.add(broadcastEventListener);
        }

        public void addBindServiceEventListener(@android.annotation.NonNull android.app.ActivityManagerInternal.BindServiceEventListener bindServiceEventListener) {
            com.android.server.am.ActivityManagerService.this.mBindServiceEventListeners.add(bindServiceEventListener);
        }

        public void restart() {
            com.android.server.am.ActivityManagerService.this.restart();
        }

        public void registerNetworkPolicyUidObserver(@android.annotation.NonNull android.app.IUidObserver iUidObserver, int i, int i2, @android.annotation.NonNull java.lang.String str) {
            com.android.server.am.ActivityManagerService.this.mNetworkPolicyUidObserver = iUidObserver;
            com.android.server.am.ActivityManagerService.this.mUidObserverController.register(iUidObserver, i, i2, str, android.os.Binder.getCallingUid(), null);
        }

        public boolean startForegroundServiceDelegate(@android.annotation.NonNull android.app.ForegroundServiceDelegationOptions foregroundServiceDelegationOptions, @android.annotation.Nullable android.content.ServiceConnection serviceConnection) {
            boolean startForegroundServiceDelegateLocked;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    startForegroundServiceDelegateLocked = com.android.server.am.ActivityManagerService.this.mServices.startForegroundServiceDelegateLocked(foregroundServiceDelegationOptions, serviceConnection);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return startForegroundServiceDelegateLocked;
        }

        public void stopForegroundServiceDelegate(@android.annotation.NonNull android.app.ForegroundServiceDelegationOptions foregroundServiceDelegationOptions) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.mServices.stopForegroundServiceDelegateLocked(foregroundServiceDelegationOptions);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void stopForegroundServiceDelegate(@android.annotation.NonNull android.content.ServiceConnection serviceConnection) {
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    com.android.server.am.ActivityManagerService.this.mServices.stopForegroundServiceDelegateLocked(serviceConnection);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public android.util.ArraySet<java.lang.String> getClientPackages(java.lang.String str) {
            android.util.ArraySet<java.lang.String> clientPackagesLocked;
            com.android.server.am.ActivityManagerService activityManagerService = com.android.server.am.ActivityManagerService.this;
            com.android.server.am.ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    clientPackagesLocked = com.android.server.am.ActivityManagerService.this.mServices.getClientPackagesLocked(str);
                } catch (java.lang.Throwable th) {
                    com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            com.android.server.am.ActivityManagerService.resetPriorityAfterLockedSection();
            return clientPackagesLocked;
        }

        public android.app.IUnsafeIntentStrictModeCallback getRegisteredStrictModeCallback(int i) {
            return (android.app.IUnsafeIntentStrictModeCallback) com.android.server.am.ActivityManagerService.this.mStrictModeCallbacks.get(i);
        }

        public void unregisterStrictModeCallback(int i) {
            com.android.server.am.ActivityManagerService.this.mStrictModeCallbacks.remove(i);
        }

        public boolean startProfileEvenWhenDisabled(int i) {
            return com.android.server.am.ActivityManagerService.this.mUserController.startProfile(i, true, null);
        }

        public void logFgsApiBegin(int i, int i2, int i3) {
            synchronized (this) {
                com.android.server.am.ActivityManagerService.this.mServices.logFgsApiBeginLocked(i, i2, i3);
            }
        }

        public void logFgsApiEnd(int i, int i2, int i3) {
            synchronized (this) {
                com.android.server.am.ActivityManagerService.this.mServices.logFgsApiEndLocked(i, i2, i3);
            }
        }

        public void notifyMediaProjectionEvent(int i, @android.annotation.NonNull android.os.IBinder iBinder, int i2) {
            com.android.server.am.ActivityManagerService.this.notifyMediaProjectionEvent(i, iBinder, i2);
        }

        @android.annotation.NonNull
        /* renamed from: getCachedAppsHighWatermarkStats, reason: merged with bridge method [inline-methods] */
        public android.util.StatsEvent m1169getCachedAppsHighWatermarkStats(int i, boolean z) {
            return com.android.server.am.ActivityManagerService.this.mAppProfiler.mCachedAppsWatermarkData.getCachedAppsHighWatermarkStats(i, z);
        }

        public boolean clearApplicationUserData(java.lang.String str, boolean z, boolean z2, android.content.pm.IPackageDataObserver iPackageDataObserver, int i) {
            return com.android.server.am.ActivityManagerService.this.clearApplicationUserData(str, z, z2, iPackageDataObserver, i);
        }

        public boolean isThemeOverlayReady(int i) {
            return com.android.server.am.ActivityManagerService.this.isThemeOverlayReady(i);
        }
    }

    long inputDispatchingTimedOut(int i, boolean z, com.android.internal.os.TimeoutRecord timeoutRecord) {
        com.android.server.am.ProcessRecord processRecord;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
            throw new java.lang.SecurityException("Requires permission android.permission.FILTER_EVENTS");
        }
        timeoutRecord.mLatencyTracker.waitingOnPidLockStarted();
        synchronized (this.mPidsSelfLocked) {
            timeoutRecord.mLatencyTracker.waitingOnPidLockEnded();
            processRecord = this.mPidsSelfLocked.get(i);
        }
        long inputDispatchingTimeoutMillis = processRecord != null ? processRecord.getInputDispatchingTimeoutMillis() : android.os.InputConstants.DEFAULT_DISPATCHING_TIMEOUT_MILLIS;
        if (inputDispatchingTimedOut(processRecord, null, null, null, null, z, timeoutRecord)) {
            return 0L;
        }
        return inputDispatchingTimeoutMillis;
    }

    boolean inputDispatchingTimedOut(com.android.server.am.ProcessRecord processRecord, java.lang.String str, android.content.pm.ApplicationInfo applicationInfo, java.lang.String str2, com.android.server.wm.WindowProcessController windowProcessController, boolean z, com.android.internal.os.TimeoutRecord timeoutRecord) {
        try {
            android.os.Trace.traceBegin(64L, "inputDispatchingTimedOut()");
            if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
                throw new java.lang.SecurityException("Requires permission android.permission.FILTER_EVENTS");
            }
            if (processRecord != null) {
                timeoutRecord.mLatencyTracker.waitingOnAMSLockStarted();
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        timeoutRecord.mLatencyTracker.waitingOnAMSLockEnded();
                        if (processRecord.isDebugging()) {
                            resetPriorityAfterLockedSection();
                            return false;
                        }
                        if (processRecord.getActiveInstrumentation() != null) {
                            android.os.Bundle bundle = new android.os.Bundle();
                            bundle.putString("shortMsg", "keyDispatchingTimedOut");
                            bundle.putString("longMsg", timeoutRecord.mReason);
                            finishInstrumentationLocked(processRecord, 0, bundle);
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                        resetPriorityAfterLockedSection();
                        this.mAnrHelper.appNotResponding(processRecord, str, applicationInfo, str2, windowProcessController, z, timeoutRecord, true);
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            return true;
        } finally {
            android.os.Trace.traceEnd(64L);
        }
    }

    public void waitForNetworkStateUpdate(long j) {
        int callingUid = android.os.Binder.getCallingUid();
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                com.android.server.am.UidRecord uidRecordLOSP = this.mProcessList.getUidRecordLOSP(callingUid);
                if (uidRecordLOSP == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                resetPriorityAfterProcLockedSection();
                synchronized (uidRecordLOSP.networkStateLock) {
                    if (uidRecordLOSP.lastNetworkUpdatedProcStateSeq >= j) {
                        return;
                    }
                    try {
                        long uptimeMillis = android.os.SystemClock.uptimeMillis();
                        uidRecordLOSP.procStateSeqWaitingForNetwork = j;
                        uidRecordLOSP.networkStateLock.wait(this.mConstants.mNetworkAccessTimeoutMs);
                        uidRecordLOSP.procStateSeqWaitingForNetwork = 0L;
                        long uptimeMillis2 = android.os.SystemClock.uptimeMillis() - uptimeMillis;
                        if (uptimeMillis2 >= this.mConstants.mNetworkAccessTimeoutMs) {
                            android.util.Slog.w(TAG_NETWORK, "Total time waited for network rules to get updated: " + uptimeMillis2 + ". Uid: " + callingUid + " procStateSeq: " + j + " UidRec: " + uidRecordLOSP + " validateUidRec: " + this.mUidObserverController.getValidateUidRecord(callingUid));
                        }
                    } catch (java.lang.InterruptedException e) {
                        java.lang.Thread.currentThread().interrupt();
                    }
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public void waitForBroadcastIdle() {
        waitForBroadcastIdle(com.android.server.am.ActivityManagerDebugConfig.LOG_WRITER_INFO, false);
    }

    void waitForBroadcastIdle(@android.annotation.NonNull java.io.PrintWriter printWriter, boolean z) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastIdle()");
        if (z) {
            com.android.server.am.BroadcastLoopers.waitForIdle(printWriter);
        }
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.waitForIdle(printWriter);
        }
        printWriter.println("All broadcast queues are idle!");
        printWriter.flush();
    }

    public void waitForBroadcastBarrier() {
        waitForBroadcastBarrier(com.android.server.am.ActivityManagerDebugConfig.LOG_WRITER_INFO, false, false);
    }

    void waitForBroadcastBarrier(@android.annotation.NonNull java.io.PrintWriter printWriter, boolean z, boolean z2) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastBarrier()");
        if (z) {
            com.android.server.am.BroadcastLoopers.waitForBarrier(printWriter);
        }
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.waitForBarrier(printWriter);
        }
        if (z2) {
            waitForApplicationBarrier(printWriter);
        }
    }

    void waitForApplicationBarrier(@android.annotation.NonNull java.io.PrintWriter printWriter) {
        android.util.ArrayMap arrayMap;
        final java.util.concurrent.CountDownLatch countDownLatch = new java.util.concurrent.CountDownLatch(1);
        int i = 0;
        final java.util.concurrent.atomic.AtomicInteger atomicInteger = new java.util.concurrent.atomic.AtomicInteger(0);
        final java.util.concurrent.atomic.AtomicInteger atomicInteger2 = new java.util.concurrent.atomic.AtomicInteger(0);
        android.os.RemoteCallback remoteCallback = new android.os.RemoteCallback(new android.os.RemoteCallback.OnResultListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda2
            public final void onResult(android.os.Bundle bundle) {
                com.android.server.am.ActivityManagerService.lambda$waitForApplicationBarrier$28(atomicInteger2, atomicInteger, countDownLatch, bundle);
            }
        });
        atomicInteger.incrementAndGet();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        android.util.ArrayMap map = this.mProcessList.getProcessNamesLOSP().getMap();
                        int size = map.size();
                        int i2 = 0;
                        while (i2 < size) {
                            android.util.SparseArray sparseArray = (android.util.SparseArray) map.valueAt(i2);
                            int size2 = sparseArray.size();
                            int i3 = i;
                            while (i3 < size2) {
                                com.android.server.am.ProcessRecord processRecord = (com.android.server.am.ProcessRecord) sparseArray.valueAt(i3);
                                android.app.IApplicationThread onewayThread = processRecord.getOnewayThread();
                                if (onewayThread == null) {
                                    arrayMap = map;
                                } else {
                                    arrayMap = map;
                                    this.mOomAdjuster.mCachedAppOptimizer.unfreezeTemporarily(processRecord, 15);
                                    atomicInteger.incrementAndGet();
                                    try {
                                        onewayThread.schedulePing(remoteCallback);
                                    } catch (android.os.RemoteException e) {
                                        remoteCallback.sendResult((android.os.Bundle) null);
                                    }
                                }
                                i3++;
                                map = arrayMap;
                            }
                            i2++;
                            i = 0;
                        }
                    } catch (java.lang.Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (java.lang.Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        remoteCallback.sendResult((android.os.Bundle) null);
        for (int i4 = 0; i4 < 30; i4++) {
            if (countDownLatch.await(1L, java.util.concurrent.TimeUnit.SECONDS)) {
                printWriter.println("Finished application barriers!");
                printWriter.flush();
                return;
            }
            printWriter.println("Waiting for application barriers, at " + atomicInteger2.get() + " of " + atomicInteger.get() + "...");
            printWriter.flush();
        }
        printWriter.println("Gave up waiting for application barriers!");
        printWriter.flush();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static /* synthetic */ void lambda$waitForApplicationBarrier$28(java.util.concurrent.atomic.AtomicInteger atomicInteger, java.util.concurrent.atomic.AtomicInteger atomicInteger2, java.util.concurrent.CountDownLatch countDownLatch, android.os.Bundle bundle) {
        if (atomicInteger.incrementAndGet() == atomicInteger2.get()) {
            countDownLatch.countDown();
        }
    }

    void waitForBroadcastDispatch(@android.annotation.NonNull java.io.PrintWriter printWriter, @android.annotation.NonNull android.content.Intent intent) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastDispatch");
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.waitForDispatched(intent, printWriter);
        }
    }

    void setIgnoreDeliveryGroupPolicy(@android.annotation.NonNull java.lang.String str) {
        java.util.Objects.requireNonNull(str);
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastBarrier()");
        synchronized (this.mDeliveryGroupPolicyIgnoredActions) {
            this.mDeliveryGroupPolicyIgnoredActions.add(str);
        }
    }

    void clearIgnoreDeliveryGroupPolicy(@android.annotation.NonNull java.lang.String str) {
        java.util.Objects.requireNonNull(str);
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastBarrier()");
        synchronized (this.mDeliveryGroupPolicyIgnoredActions) {
            this.mDeliveryGroupPolicyIgnoredActions.remove(str);
        }
    }

    boolean shouldIgnoreDeliveryGroupPolicy(@android.annotation.Nullable java.lang.String str) {
        boolean contains;
        if (str == null) {
            return false;
        }
        synchronized (this.mDeliveryGroupPolicyIgnoredActions) {
            contains = this.mDeliveryGroupPolicyIgnoredActions.contains(str);
        }
        return contains;
    }

    void dumpDeliveryGroupPolicyIgnoredActions(android.util.IndentingPrintWriter indentingPrintWriter) {
        synchronized (this.mDeliveryGroupPolicyIgnoredActions) {
            indentingPrintWriter.println(this.mDeliveryGroupPolicyIgnoredActions);
        }
    }

    public void forceDelayBroadcastDelivery(@android.annotation.NonNull java.lang.String str, long j) {
        java.util.Objects.requireNonNull(str);
        com.android.internal.util.Preconditions.checkArgumentNonnegative(j);
        enforceCallingPermission("android.permission.DUMP", "forceDelayBroadcastDelivery()");
        if (!this.mEnableModernQueue) {
            return;
        }
        for (com.android.server.am.BroadcastQueue broadcastQueue : this.mBroadcastQueues) {
            broadcastQueue.forceDelayBroadcastDelivery(str, j);
        }
    }

    public boolean isModernBroadcastQueueEnabled() {
        enforceCallingPermission("android.permission.DUMP", "isModernBroadcastQueueEnabled()");
        return this.mEnableModernQueue;
    }

    public boolean isProcessFrozen(int i) {
        enforceCallingPermission("android.permission.DUMP", "isProcessFrozen()");
        return this.mOomAdjuster.mCachedAppOptimizer.isProcessFrozen(i);
    }

    public int getBackgroundRestrictionExemptionReason(int i) {
        enforceCallingPermission("android.permission.DEVICE_POWER", "getBackgroundRestrictionExemptionReason()");
        return this.mAppRestrictionController.getBackgroundRestrictionExemptionReason(i);
    }

    void setBackgroundRestrictionLevel(java.lang.String str, int i, int i2, int i3, int i4, int i5) {
        int callingUid = android.os.Binder.getCallingUid();
        if (callingUid != 1000 && callingUid != 0 && callingUid != 2000) {
            throw new java.lang.SecurityException("No permission to change app restriction level");
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            this.mAppRestrictionController.applyRestrictionLevel(str, i, i3, null, this.mUsageStatsService.getAppStandbyBucket(str, i2, android.os.SystemClock.elapsedRealtime()), true, i4, i5);
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    int getBackgroundRestrictionLevel(java.lang.String str, int i) {
        int callingUid = android.os.Binder.getCallingUid();
        if (callingUid != 1000 && callingUid != 0 && callingUid != 2000) {
            throw new java.lang.SecurityException("Don't have permission to query app background restriction level");
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            return this.mInternal.getRestrictionLevel(str, i);
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    void setForegroundServiceDelegate(java.lang.String str, int i, boolean z, int i2, java.lang.String str2) {
        long j;
        int callingUid = android.os.Binder.getCallingUid();
        if (callingUid != 1000 && callingUid != 0 && callingUid != 2000) {
            throw new java.lang.SecurityException("No permission to start/stop foreground service delegate");
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            try {
                try {
                    synchronized (this) {
                        try {
                            java.util.ArrayList arrayList = new java.util.ArrayList();
                            synchronized (this.mPidsSelfLocked) {
                                boolean z2 = false;
                                int i3 = 0;
                                while (i3 < this.mPidsSelfLocked.size()) {
                                    try {
                                        com.android.server.am.ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i3);
                                        android.app.IApplicationThread thread = valueAt.getThread();
                                        if (valueAt.uid != i || thread == null) {
                                            j = clearCallingIdentity;
                                        } else {
                                            j = clearCallingIdentity;
                                            try {
                                                arrayList.add(new android.app.ForegroundServiceDelegationOptions(this.mPidsSelfLocked.keyAt(i3), i, str, (android.app.IApplicationThread) null, false, str2, 0, i2));
                                                z2 = true;
                                            } catch (java.lang.Throwable th) {
                                                th = th;
                                                throw th;
                                            }
                                        }
                                        i3++;
                                        clearCallingIdentity = j;
                                    } catch (java.lang.Throwable th2) {
                                        th = th2;
                                    }
                                }
                                long j2 = clearCallingIdentity;
                                for (int size = arrayList.size() - 1; size >= 0; size--) {
                                    android.app.ForegroundServiceDelegationOptions foregroundServiceDelegationOptions = (android.app.ForegroundServiceDelegationOptions) arrayList.get(size);
                                    if (z) {
                                        this.mInternal.startForegroundServiceDelegate(foregroundServiceDelegationOptions, (android.content.ServiceConnection) null);
                                    } else {
                                        this.mInternal.stopForegroundServiceDelegate(foregroundServiceDelegationOptions);
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                if (!z2) {
                                    android.util.Slog.e("ActivityManager", "setForegroundServiceDelegate can not find process for packageName:" + str + " uid:" + i);
                                }
                                android.os.Binder.restoreCallingIdentity(j2);
                            }
                        } catch (java.lang.Throwable th3) {
                            th = th3;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (java.lang.Throwable th4) {
                    th = th4;
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            } catch (java.lang.Throwable th5) {
                th = th5;
            }
        } catch (java.lang.Throwable th6) {
            th = th6;
        }
    }

    void refreshSettingsCache() {
        this.mCoreSettingsObserver.onChange(true);
    }

    void resetDropboxRateLimiter() {
        this.mDropboxRateLimiter.reset();
        com.android.server.BootReceiver.resetDropboxRateLimiter();
    }

    public void killPackageDependents(java.lang.String str, int i) {
        int i2;
        enforceCallingPermission("android.permission.KILL_UID", "killPackageDependents()");
        if (str == null) {
            throw new java.lang.NullPointerException("Cannot kill the dependents of a package without its name.");
        }
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            i2 = android.app.AppGlobals.getPackageManager().getPackageUid(str, 268435456L, i);
        } catch (android.os.RemoteException e) {
            i2 = -1;
        }
        if (i != -1 && i2 == -1) {
            throw new java.lang.IllegalArgumentException("Cannot kill dependents of non-existing package " + str);
        }
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerGlobalLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(str, android.os.UserHandle.getAppId(i2), i, 0, 12, 0, "dep: " + str);
                        } catch (java.lang.Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (java.lang.Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public int restartUserInBackground(int i, int i2) {
        return this.mUserController.restartUser(i, i2);
    }

    public void scheduleApplicationInfoChanged(java.util.List<java.lang.String> list, int i) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "scheduleApplicationInfoChanged()");
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            boolean contains = list.contains(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME);
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    updateApplicationInfoLOSP(list, contains, i);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            android.appwidget.AppWidgetManagerInternal appWidgetManagerInternal = (android.appwidget.AppWidgetManagerInternal) com.android.server.LocalServices.getService(android.appwidget.AppWidgetManagerInternal.class);
            if (appWidgetManagerInternal != null) {
                appWidgetManagerInternal.applyResourceOverlaysToWidgets(new java.util.HashSet(list), i, contains);
            }
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public void updateSystemUiContext() {
        android.app.ActivityThread.currentActivityThread().handleSystemApplicationInfoChanged(getPackageManagerInternal().getApplicationInfo(com.android.server.pm.PackageManagerService.PLATFORM_PACKAGE_NAME, 1024L, android.os.Binder.getCallingUid(), 0));
    }

    @com.android.internal.annotations.GuardedBy(anyOf = {"this", "mProcLock"})
    private void updateApplicationInfoLOSP(@android.annotation.NonNull java.util.List<java.lang.String> list, boolean z, int i) {
        if (z) {
            com.android.internal.pm.pkg.parsing.ParsingPackageUtils.readConfigUseRoundIcon((android.content.res.Resources) null);
        }
        this.mProcessList.updateApplicationInfoLOSP(list, i, z);
        if (z) {
            java.util.concurrent.Executor executor = android.app.ActivityThread.currentActivityThread().getExecutor();
            final android.hardware.display.DisplayManagerInternal displayManagerInternal = (android.hardware.display.DisplayManagerInternal) com.android.server.LocalServices.getService(android.hardware.display.DisplayManagerInternal.class);
            if (displayManagerInternal != null) {
                java.util.Objects.requireNonNull(displayManagerInternal);
                executor.execute(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda37
                    @Override // java.lang.Runnable
                    public final void run() {
                        displayManagerInternal.onOverlayChanged();
                    }
                });
            }
            if (this.mWindowManager != null) {
                final com.android.server.wm.WindowManagerService windowManagerService = this.mWindowManager;
                java.util.Objects.requireNonNull(windowManagerService);
                executor.execute(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda38
                    @Override // java.lang.Runnable
                    public final void run() {
                        com.android.server.wm.WindowManagerService.this.onOverlayChanged();
                    }
                });
            }
        }
    }

    void scheduleUpdateBinderHeavyHitterWatcherConfig() {
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda11
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.am.ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$33();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$33() {
        int i;
        float f;
        com.android.internal.os.BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener binderCallHeavyHitterListener;
        boolean z;
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    this.mHandler.removeMessages(72);
                    i = com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_BATCHSIZE;
                    f = com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_THRESHOLD;
                    binderCallHeavyHitterListener = new com.android.internal.os.BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda22
                        public final void onHeavyHit(java.util.List list, int i2, float f2, long j) {
                            com.android.server.am.ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$30(list, i2, f2, j);
                        }
                    };
                    z = true;
                } else if (this.mHandler.hasMessages(72)) {
                    z = com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_ENABLED;
                    i = com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_BATCHSIZE;
                    f = com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_THRESHOLD;
                    binderCallHeavyHitterListener = new com.android.internal.os.BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda23
                        public final void onHeavyHit(java.util.List list, int i2, float f2, long j) {
                            com.android.server.am.ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$32(list, i2, f2, j);
                        }
                    };
                } else {
                    i = 0;
                    f = com.android.server.wm.DesktopModeLaunchParamsModifier.DESKTOP_MODE_INITIAL_BOUNDS_SCALE;
                    binderCallHeavyHitterListener = null;
                    z = false;
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        android.os.Binder.setHeavyHitterWatcherConfig(z, i, f, binderCallHeavyHitterListener);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$30(final java.util.List list, final int i, final float f, final long j) {
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda3
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.am.ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$29(list, i, f, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$32(final java.util.List list, final int i, final float f, final long j) {
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda4
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.am.ActivityManagerService.this.lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$31(list, i, f, j);
            }
        });
    }

    void scheduleBinderHeavyHitterAutoSampler() {
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda33
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.am.ActivityManagerService.this.lambda$scheduleBinderHeavyHitterAutoSampler$36();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleBinderHeavyHitterAutoSampler$36() {
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (!com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                if (com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                long uptimeMillis = android.os.SystemClock.uptimeMillis();
                if (this.mLastBinderHeavyHitterAutoSamplerStart + 3600000 > uptimeMillis) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                int i = com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_BATCHSIZE;
                float f = com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_THRESHOLD;
                resetPriorityAfterProcLockedSection();
                this.mLastBinderHeavyHitterAutoSamplerStart = uptimeMillis;
                android.os.Binder.setHeavyHitterWatcherConfig(true, i, f, new com.android.internal.os.BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda12
                    public final void onHeavyHit(java.util.List list, int i2, float f2, long j) {
                        com.android.server.am.ActivityManagerService.this.lambda$scheduleBinderHeavyHitterAutoSampler$35(list, i2, f2, j);
                    }
                });
                this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(72), 300000L);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public /* synthetic */ void lambda$scheduleBinderHeavyHitterAutoSampler$35(final java.util.List list, final int i, final float f, final long j) {
        this.mHandler.post(new java.lang.Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda15
            @Override // java.lang.Runnable
            public final void run() {
                com.android.server.am.ActivityManagerService.this.lambda$scheduleBinderHeavyHitterAutoSampler$34(list, i, f, j);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handleBinderHeavyHitterAutoSamplerTimeOut() {
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (com.android.server.am.ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                } else {
                    resetPriorityAfterProcLockedSection();
                    android.os.Binder.setHeavyHitterWatcherConfig(false, 0, com.android.server.wm.DesktopModeLaunchParamsModifier.DESKTOP_MODE_INITIAL_BOUNDS_SCALE, null);
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handleBinderHeavyHitters, reason: merged with bridge method [inline-methods] and merged with bridge method [inline-methods] and merged with bridge method [inline-methods] */
    public void lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$31(@android.annotation.NonNull java.util.List<com.android.internal.os.BinderCallHeavyHitterWatcher.HeavyHitterContainer> list, int i, float f, long j) {
        int size = list.size();
        if (size == 0) {
            return;
        }
        com.android.internal.os.BinderTransactionNameResolver binderTransactionNameResolver = new com.android.internal.os.BinderTransactionNameResolver();
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Excessive incoming binder calls(>");
        sb.append(java.lang.String.format("%.1f%%", java.lang.Float.valueOf(f * 100.0f)));
        sb.append(',');
        sb.append(i);
        sb.append(',');
        sb.append(j);
        sb.append("ms): ");
        for (int i2 = 0; i2 < size; i2++) {
            if (i2 > 0) {
                sb.append(", ");
            }
            com.android.internal.os.BinderCallHeavyHitterWatcher.HeavyHitterContainer heavyHitterContainer = list.get(i2);
            sb.append('[');
            sb.append(heavyHitterContainer.mUid);
            sb.append(',');
            sb.append(heavyHitterContainer.mClass.getName());
            sb.append(',');
            sb.append(binderTransactionNameResolver.getMethodName(heavyHitterContainer.mClass, heavyHitterContainer.mCode));
            sb.append(',');
            sb.append(heavyHitterContainer.mCode);
            sb.append(',');
            sb.append(java.lang.String.format("%.1f%%", java.lang.Float.valueOf(heavyHitterContainer.mFrequency * 100.0f)));
            sb.append(']');
        }
        android.util.Slog.w("ActivityManager", sb.toString());
    }

    public void attachAgent(java.lang.String str, java.lang.String str2) {
        android.app.IApplicationThread thread;
        try {
            com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    com.android.server.am.ProcessRecord findProcessLOSP = findProcessLOSP(str, 0, "attachAgent");
                    if (findProcessLOSP == null || (thread = findProcessLOSP.getThread()) == null) {
                        throw new java.lang.IllegalArgumentException("Unknown process: " + str);
                    }
                    enforceDebuggable(findProcessLOSP);
                    thread.attachAgent(str2);
                } catch (java.lang.Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
        } catch (android.os.RemoteException e) {
            throw new java.lang.IllegalStateException("Process disappeared");
        }
    }

    public void prepareForPossibleShutdown() {
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.prepareForPossibleShutdown();
        }
    }

    @com.android.internal.annotations.VisibleForTesting
    public static class Injector {
        private final android.content.Context mContext;
        private com.android.server.net.NetworkManagementInternal mNmi;
        private com.android.server.am.UserController mUserController;

        public Injector(android.content.Context context) {
            this.mContext = context;
        }

        public android.content.Context getContext() {
            return this.mContext;
        }

        public com.android.server.appop.AppOpsService getAppOpsService(java.io.File file, java.io.File file2, android.os.Handler handler) {
            return new com.android.server.appop.AppOpsService(file, file2, handler, getContext());
        }

        public android.os.Handler getUiHandler(com.android.server.am.ActivityManagerService activityManagerService) {
            java.util.Objects.requireNonNull(activityManagerService);
            return activityManagerService.new UiHandler();
        }

        public boolean isNetworkRestrictedForUid(int i) {
            if (ensureHasNetworkManagementInternal()) {
                return this.mNmi.isNetworkRestrictedForUid(i);
            }
            return false;
        }

        @android.annotation.Nullable
        public int[] getDisplayIdsForStartingVisibleBackgroundUsers() {
            boolean z;
            if (!android.os.UserManager.isVisibleBackgroundUsersEnabled()) {
                com.android.server.utils.Slogf.w("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): not supported");
                return null;
            }
            android.hardware.display.DisplayManager displayManager = (android.hardware.display.DisplayManager) this.mContext.getSystemService(android.hardware.display.DisplayManager.class);
            android.view.Display[] displays = displayManager.getDisplays();
            if (displays == null || displays.length == 0) {
                com.android.server.utils.Slogf.wtf("ActivityManager", "displayManager (%s) returned no displays", displayManager);
                return null;
            }
            int length = displays.length;
            int i = 0;
            while (true) {
                if (i >= length) {
                    z = false;
                    break;
                }
                if (displays[i].getDisplayId() != 0) {
                    i++;
                } else {
                    z = true;
                    break;
                }
            }
            if (!z) {
                com.android.server.utils.Slogf.wtf("ActivityManager", "displayManager (%s) has %d displays (%s), but none has id DEFAULT_DISPLAY (%d)", displayManager, java.lang.Integer.valueOf(displays.length), java.util.Arrays.toString(displays), 0);
                return null;
            }
            boolean isVisibleBackgroundUsersOnDefaultDisplayEnabled = android.os.UserManager.isVisibleBackgroundUsersOnDefaultDisplayEnabled();
            int length2 = displays.length;
            if (!isVisibleBackgroundUsersOnDefaultDisplayEnabled) {
                length2--;
            }
            int[] iArr = new int[length2];
            int i2 = 0;
            for (android.view.Display display : displays) {
                int displayId = display.getDisplayId();
                if (display.isValid() && (display.getFlags() & 4) == 0 && (isVisibleBackgroundUsersOnDefaultDisplayEnabled || displayId != 0)) {
                    iArr[i2] = displayId;
                    i2++;
                }
            }
            if (i2 == 0) {
                int i3 = android.os.SystemProperties.getInt("fw.display_ids_for_starting_users_for_testing_purposes", 0);
                if ((isVisibleBackgroundUsersOnDefaultDisplayEnabled && i3 == 0) || i3 > 0) {
                    com.android.server.utils.Slogf.w("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): no valid display found, but returning %d as set by property %s", java.lang.Integer.valueOf(i3), "fw.display_ids_for_starting_users_for_testing_purposes");
                    return new int[]{i3};
                }
                com.android.server.utils.Slogf.e("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): no valid display on %s", java.util.Arrays.toString(displays));
                return null;
            }
            if (i2 != length2) {
                int[] iArr2 = new int[i2];
                java.lang.System.arraycopy(iArr, 0, iArr2, 0, i2);
                return iArr2;
            }
            return iArr;
        }

        public boolean startUserInBackgroundVisibleOnDisplay(int i, int i2, @android.annotation.Nullable android.os.IProgressListener iProgressListener) {
            return this.mUserController.startUserVisibleOnDisplay(i, i2, iProgressListener);
        }

        public com.android.server.am.ProcessList getProcessList(com.android.server.am.ActivityManagerService activityManagerService) {
            return new com.android.server.am.ProcessList();
        }

        public com.android.server.am.BatteryStatsService getBatteryStatsService() {
            return new com.android.server.am.BatteryStatsService(this.mContext, com.android.server.SystemServiceManager.ensureSystemDir());
        }

        public com.android.server.am.ActiveServices getActiveServices(com.android.server.am.ActivityManagerService activityManagerService) {
            return new com.android.server.am.ActiveServices(activityManagerService);
        }

        private boolean ensureHasNetworkManagementInternal() {
            if (this.mNmi == null) {
                this.mNmi = (com.android.server.net.NetworkManagementInternal) com.android.server.LocalServices.getService(com.android.server.net.NetworkManagementInternal.class);
            }
            return this.mNmi != null;
        }

        public com.android.server.am.BroadcastQueue[] getBroadcastQueues(com.android.server.am.ActivityManagerService activityManagerService) {
            com.android.server.am.BroadcastConstants broadcastConstants = new com.android.server.am.BroadcastConstants("bcast_fg_constants");
            broadcastConstants.TIMEOUT = com.android.server.am.ActivityManagerService.BROADCAST_FG_TIMEOUT;
            com.android.server.am.BroadcastConstants broadcastConstants2 = new com.android.server.am.BroadcastConstants("bcast_bg_constants");
            broadcastConstants2.TIMEOUT = com.android.server.am.ActivityManagerService.BROADCAST_BG_TIMEOUT;
            com.android.server.am.BroadcastConstants broadcastConstants3 = new com.android.server.am.BroadcastConstants("bcast_offload_constants");
            broadcastConstants3.TIMEOUT = com.android.server.am.ActivityManagerService.BROADCAST_BG_TIMEOUT;
            broadcastConstants3.SLOW_TIME = 2147483647L;
            com.android.server.am.ActivityManagerService.MainHandler mainHandler = activityManagerService.mHandler;
            if (activityManagerService.mEnableModernQueue) {
                return new com.android.server.am.BroadcastQueue[]{new com.android.server.am.BroadcastQueueModernImpl(activityManagerService, mainHandler, broadcastConstants, broadcastConstants2)};
            }
            return new com.android.server.am.BroadcastQueue[]{new com.android.server.am.BroadcastQueueImpl(activityManagerService, mainHandler, "foreground", broadcastConstants, false, 2), new com.android.server.am.BroadcastQueueImpl(activityManagerService, mainHandler, "background", broadcastConstants2, true, 0), new com.android.server.am.BroadcastQueueImpl(activityManagerService, mainHandler, "offload_bg", broadcastConstants3, true, 0), new com.android.server.am.BroadcastQueueImpl(activityManagerService, mainHandler, "offload_fg", broadcastConstants, true, 0)};
        }

        public int getCallingUid() {
            return android.os.Binder.getCallingUid();
        }

        public int getCallingPid() {
            return android.os.Binder.getCallingUid();
        }

        public long clearCallingIdentity() {
            return android.os.Binder.clearCallingIdentity();
        }

        public void restoreCallingIdentity(long j) {
            android.os.Binder.restoreCallingIdentity(j);
        }

        public com.android.server.am.AppErrors getAppErrors() {
            return null;
        }

        public com.android.server.firewall.IntentFirewall getIntentFirewall() {
            return null;
        }
    }

    public void startDelegateShellPermissionIdentity(int i, @android.annotation.Nullable java.lang.String[] strArr) {
        if (android.os.UserHandle.getCallingAppId() != 2000 && android.os.UserHandle.getCallingAppId() != 0) {
            throw new java.lang.SecurityException("Only the shell can delegate its permissions");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                if (this.mAppOpsService.getAppOpsServiceDelegate() != null) {
                    if (!(this.mAppOpsService.getAppOpsServiceDelegate() instanceof com.android.server.am.ActivityManagerService.ShellDelegate)) {
                        throw new java.lang.IllegalStateException("Bad shell delegate state");
                    }
                    if (((com.android.server.am.ActivityManagerService.ShellDelegate) this.mAppOpsService.getAppOpsServiceDelegate()).getDelegateUid() != i) {
                        throw new java.lang.SecurityException("Shell can delegate permissions only to one instrumentation at a time");
                    }
                }
                int size = this.mActiveInstrumentation.size();
                for (int i2 = 0; i2 < size; i2++) {
                    com.android.server.am.ActiveInstrumentation activeInstrumentation = this.mActiveInstrumentation.get(i2);
                    if (activeInstrumentation.mTargetInfo.uid == i) {
                        if (activeInstrumentation.mUiAutomationConnection == null) {
                            throw new java.lang.SecurityException("Shell can delegate its permissions only to an instrumentation started from the shell");
                        }
                        this.mAppOpsService.setAppOpsServiceDelegate(new com.android.server.am.ActivityManagerService.ShellDelegate(i, strArr));
                        getPermissionManagerInternal().startShellPermissionIdentityDelegation(i, activeInstrumentation.mTargetInfo.packageName, strArr != null ? java.util.Arrays.asList(strArr) : null);
                        resetPriorityAfterProcLockedSection();
                        return;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public void stopDelegateShellPermissionIdentity() {
        if (android.os.UserHandle.getCallingAppId() != 2000 && android.os.UserHandle.getCallingAppId() != 0) {
            throw new java.lang.SecurityException("Only the shell can delegate its permissions");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                this.mAppOpsService.setAppOpsServiceDelegate(null);
                getPermissionManagerInternal().stopShellPermissionIdentityDelegation();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public java.util.List<java.lang.String> getDelegatedShellPermissions() {
        java.util.List<java.lang.String> delegatedShellPermissions;
        if (android.os.UserHandle.getCallingAppId() != 2000 && android.os.UserHandle.getCallingAppId() != 0) {
            throw new java.lang.SecurityException("Only the shell can get delegated permissions");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                delegatedShellPermissions = getPermissionManagerInternal().getDelegatedShellPermissions();
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return delegatedShellPermissions;
    }

    private class ShellDelegate implements android.app.AppOpsManagerInternal.CheckOpsDelegate {

        @android.annotation.Nullable
        private final java.lang.String[] mPermissions;
        private final int mTargetUid;

        ShellDelegate(int i, @android.annotation.Nullable java.lang.String[] strArr) {
            this.mTargetUid = i;
            this.mPermissions = strArr;
        }

        int getDelegateUid() {
            return this.mTargetUid;
        }

        public int checkOperation(int i, int i2, java.lang.String str, java.lang.String str2, int i3, boolean z, com.android.internal.util.function.HexFunction<java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.Integer, java.lang.Boolean, java.lang.Integer> hexFunction) {
            if (i2 == this.mTargetUid && isTargetOp(i)) {
                int uid = android.os.UserHandle.getUid(android.os.UserHandle.getUserId(i2), 2000);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    return ((java.lang.Integer) hexFunction.apply(java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(uid), "com.android.shell", (java.lang.Object) null, java.lang.Integer.valueOf(i3), java.lang.Boolean.valueOf(z))).intValue();
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return ((java.lang.Integer) hexFunction.apply(java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(i2), str, str2, java.lang.Integer.valueOf(i3), java.lang.Boolean.valueOf(z))).intValue();
        }

        public int checkAudioOperation(int i, int i2, int i3, java.lang.String str, com.android.internal.util.function.QuadFunction<java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.Integer> quadFunction) {
            if (i3 == this.mTargetUid && isTargetOp(i)) {
                int uid = android.os.UserHandle.getUid(android.os.UserHandle.getUserId(i3), 2000);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    return ((java.lang.Integer) quadFunction.apply(java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(i2), java.lang.Integer.valueOf(uid), "com.android.shell")).intValue();
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return ((java.lang.Integer) quadFunction.apply(java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(i2), java.lang.Integer.valueOf(i3), str)).intValue();
        }

        public android.app.SyncNotedAppOp noteOperation(int i, int i2, @android.annotation.Nullable java.lang.String str, @android.annotation.Nullable java.lang.String str2, int i3, boolean z, @android.annotation.Nullable java.lang.String str3, boolean z2, @android.annotation.NonNull com.android.internal.util.function.OctFunction<java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.Integer, java.lang.Boolean, java.lang.String, java.lang.Boolean, android.app.SyncNotedAppOp> octFunction) {
            if (i2 == this.mTargetUid && isTargetOp(i)) {
                int uid = android.os.UserHandle.getUid(android.os.UserHandle.getUserId(i2), 2000);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    return (android.app.SyncNotedAppOp) octFunction.apply(java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(uid), "com.android.shell", str2, java.lang.Integer.valueOf(i3), java.lang.Boolean.valueOf(z), str3, java.lang.Boolean.valueOf(z2));
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return (android.app.SyncNotedAppOp) octFunction.apply(java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(i2), str, str2, java.lang.Integer.valueOf(i3), java.lang.Boolean.valueOf(z), str3, java.lang.Boolean.valueOf(z2));
        }

        public android.app.SyncNotedAppOp noteProxyOperation(int i, @android.annotation.NonNull android.content.AttributionSource attributionSource, boolean z, @android.annotation.Nullable java.lang.String str, boolean z2, boolean z3, @android.annotation.NonNull com.android.internal.util.function.HexFunction<java.lang.Integer, android.content.AttributionSource, java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean, android.app.SyncNotedAppOp> hexFunction) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(i)) {
                int uid = android.os.UserHandle.getUid(android.os.UserHandle.getUserId(attributionSource.getUid()), 2000);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    return (android.app.SyncNotedAppOp) hexFunction.apply(java.lang.Integer.valueOf(i), new android.content.AttributionSource(uid, -1, "com.android.shell", attributionSource.getAttributionTag(), attributionSource.getToken(), null, attributionSource.getDeviceId(), attributionSource.getNext()), java.lang.Boolean.valueOf(z), str, java.lang.Boolean.valueOf(z2), java.lang.Boolean.valueOf(z3));
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return (android.app.SyncNotedAppOp) hexFunction.apply(java.lang.Integer.valueOf(i), attributionSource, java.lang.Boolean.valueOf(z), str, java.lang.Boolean.valueOf(z2), java.lang.Boolean.valueOf(z3));
        }

        public android.app.SyncNotedAppOp startOperation(android.os.IBinder iBinder, int i, int i2, @android.annotation.Nullable java.lang.String str, @android.annotation.Nullable java.lang.String str2, int i3, boolean z, boolean z2, @android.annotation.Nullable java.lang.String str3, boolean z3, int i4, int i5, @android.annotation.NonNull com.android.internal.util.function.DodecFunction<android.os.IBinder, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String, java.lang.Integer, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer, android.app.SyncNotedAppOp> dodecFunction) {
            if (i2 == this.mTargetUid && isTargetOp(i)) {
                int uid = android.os.UserHandle.getUid(android.os.UserHandle.getUserId(i2), 2000);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    return (android.app.SyncNotedAppOp) dodecFunction.apply(iBinder, java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(uid), "com.android.shell", str2, java.lang.Integer.valueOf(i3), java.lang.Boolean.valueOf(z), java.lang.Boolean.valueOf(z2), str3, java.lang.Boolean.valueOf(z3), java.lang.Integer.valueOf(i4), java.lang.Integer.valueOf(i5));
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return (android.app.SyncNotedAppOp) dodecFunction.apply(iBinder, java.lang.Integer.valueOf(i), java.lang.Integer.valueOf(i2), str, str2, java.lang.Integer.valueOf(i3), java.lang.Boolean.valueOf(z), java.lang.Boolean.valueOf(z2), str3, java.lang.Boolean.valueOf(z3), java.lang.Integer.valueOf(i4), java.lang.Integer.valueOf(i5));
        }

        public android.app.SyncNotedAppOp startProxyOperation(@android.annotation.NonNull android.os.IBinder iBinder, int i, @android.annotation.NonNull android.content.AttributionSource attributionSource, boolean z, boolean z2, java.lang.String str, boolean z3, boolean z4, int i2, int i3, int i4, @android.annotation.NonNull com.android.internal.util.function.UndecFunction<android.os.IBinder, java.lang.Integer, android.content.AttributionSource, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer, android.app.SyncNotedAppOp> undecFunction) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(i)) {
                int uid = android.os.UserHandle.getUid(android.os.UserHandle.getUserId(attributionSource.getUid()), 2000);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    return (android.app.SyncNotedAppOp) undecFunction.apply(iBinder, java.lang.Integer.valueOf(i), new android.content.AttributionSource(uid, -1, "com.android.shell", attributionSource.getAttributionTag(), attributionSource.getToken(), null, attributionSource.getDeviceId(), attributionSource.getNext()), java.lang.Boolean.valueOf(z), java.lang.Boolean.valueOf(z2), str, java.lang.Boolean.valueOf(z3), java.lang.Boolean.valueOf(z4), java.lang.Integer.valueOf(i2), java.lang.Integer.valueOf(i3), java.lang.Integer.valueOf(i4));
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            return (android.app.SyncNotedAppOp) undecFunction.apply(iBinder, java.lang.Integer.valueOf(i), attributionSource, java.lang.Boolean.valueOf(z), java.lang.Boolean.valueOf(z2), str, java.lang.Boolean.valueOf(z3), java.lang.Boolean.valueOf(z4), java.lang.Integer.valueOf(i2), java.lang.Integer.valueOf(i3), java.lang.Integer.valueOf(i4));
        }

        public void finishProxyOperation(@android.annotation.NonNull android.os.IBinder iBinder, int i, @android.annotation.NonNull android.content.AttributionSource attributionSource, boolean z, @android.annotation.NonNull com.android.internal.util.function.QuadFunction<android.os.IBinder, java.lang.Integer, android.content.AttributionSource, java.lang.Boolean, java.lang.Void> quadFunction) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(i)) {
                int uid = android.os.UserHandle.getUid(android.os.UserHandle.getUserId(attributionSource.getUid()), 2000);
                long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
                try {
                    quadFunction.apply(iBinder, java.lang.Integer.valueOf(i), new android.content.AttributionSource(uid, -1, "com.android.shell", attributionSource.getAttributionTag(), attributionSource.getToken(), null, attributionSource.getDeviceId(), attributionSource.getNext()), java.lang.Boolean.valueOf(z));
                } finally {
                    android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            }
            quadFunction.apply(iBinder, java.lang.Integer.valueOf(i), attributionSource, java.lang.Boolean.valueOf(z));
        }

        private boolean isTargetOp(int i) {
            java.lang.String opToPermission;
            if (this.mPermissions == null || (opToPermission = android.app.AppOpsManager.opToPermission(i)) == null) {
                return true;
            }
            return isTargetPermission(opToPermission);
        }

        private boolean isTargetPermission(@android.annotation.NonNull java.lang.String str) {
            return this.mPermissions == null || com.android.internal.util.ArrayUtils.contains(this.mPermissions, str);
        }
    }

    void maybeTriggerWatchdog() {
    }

    private boolean isOnFgOffloadQueue(int i) {
        return (i & 2048) != 0;
    }

    private boolean isOnBgOffloadQueue(int i) {
        return this.mEnableOffloadQueue && (i & Integer.MIN_VALUE) != 0;
    }

    public android.os.ParcelFileDescriptor getLifeMonitor() {
        android.os.ParcelFileDescriptor dup;
        if (!isCallerShell()) {
            throw new java.lang.SecurityException("Only shell can call it");
        }
        com.android.server.am.ActivityManagerGlobalLock activityManagerGlobalLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                try {
                    if (this.mLifeMonitorFds == null) {
                        this.mLifeMonitorFds = android.os.ParcelFileDescriptor.createPipe();
                    }
                    dup = this.mLifeMonitorFds[0].dup();
                } catch (java.io.IOException e) {
                    android.util.Slog.w("ActivityManager", "Unable to create pipe", e);
                    resetPriorityAfterProcLockedSection();
                    return null;
                }
            } catch (java.lang.Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return dup;
    }

    public void setActivityLocusContext(android.content.ComponentName componentName, android.content.LocusId locusId, android.os.IBinder iBinder) {
        int callingUid = android.os.Binder.getCallingUid();
        int callingUserId = android.os.UserHandle.getCallingUserId();
        if (getPackageManagerInternal().getPackageUid(componentName.getPackageName(), 0L, callingUserId) != callingUid) {
            throw new java.lang.SecurityException("Calling uid " + callingUid + " cannot set locusIdfor package " + componentName.getPackageName());
        }
        this.mActivityTaskManager.setLocusId(locusId, iBinder);
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportLocusUpdate(componentName, callingUserId, locusId, iBinder);
        }
    }

    public boolean isAppFreezerSupported() {
        long clearCallingIdentity = android.os.Binder.clearCallingIdentity();
        try {
            return com.android.server.am.CachedAppOptimizer.isFreezerSupported();
        } finally {
            android.os.Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public boolean isAppFreezerEnabled() {
        return this.mOomAdjuster.mCachedAppOptimizer.useFreezer();
    }

    public boolean isAppFreezerExemptInstPkg() {
        return this.mOomAdjuster.mCachedAppOptimizer.freezerExemptInstPkg();
    }

    public void resetAppErrors() {
        enforceCallingPermission("android.permission.RESET_APP_ERRORS", "resetAppErrors");
        this.mAppErrors.resetState();
    }

    public boolean enableAppFreezer(boolean z) {
        int callingUid = android.os.Binder.getCallingUid();
        if (callingUid == 1000 || android.os.Build.IS_DEBUGGABLE) {
            return this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(z);
        }
        throw new java.lang.SecurityException("Caller uid " + callingUid + " cannot set freezer state ");
    }

    public boolean enableFgsNotificationRateLimit(boolean z) {
        boolean enableFgsNotificationRateLimitLocked;
        enforceCallingPermission("android.permission.WRITE_DEVICE_CONFIG", "enableFgsNotificationRateLimit");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                enableFgsNotificationRateLimitLocked = this.mServices.enableFgsNotificationRateLimitLocked(z);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return enableFgsNotificationRateLimitLocked;
    }

    public void holdLock(android.os.IBinder iBinder, int i) {
        getTestUtilityServiceLocked().verifyHoldLockToken(iBinder);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                android.os.SystemClock.sleep(i);
            } catch (java.lang.Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    static void traceBegin(long j, java.lang.String str, java.lang.String str2) {
        if (android.os.Trace.isTagEnabled(j)) {
            android.os.Trace.traceBegin(j, str + str2);
        }
    }

    private static int getIntArg(java.io.PrintWriter printWriter, java.lang.String[] strArr, int i, int i2) {
        if (i > strArr.length) {
            printWriter.println("Missing argument");
            return i2;
        }
        java.lang.String str = strArr[i];
        try {
            return java.lang.Integer.parseInt(str);
        } catch (java.lang.Exception e) {
            printWriter.printf("Non-numeric argument at index %d: %s\n", java.lang.Integer.valueOf(i), str);
            return i2;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void notifyMediaProjectionEvent(int i, @android.annotation.NonNull android.os.IBinder iBinder, int i2) {
        android.util.ArraySet<android.os.IBinder> valueAt;
        synchronized (this.mMediaProjectionTokenMap) {
            try {
                int indexOfKey = this.mMediaProjectionTokenMap.indexOfKey(i);
                if (i2 == 0) {
                    if (indexOfKey < 0) {
                        valueAt = new android.util.ArraySet<>();
                        this.mMediaProjectionTokenMap.put(i, valueAt);
                    } else {
                        valueAt = this.mMediaProjectionTokenMap.valueAt(indexOfKey);
                    }
                    valueAt.add(iBinder);
                } else if (i2 == 1 && indexOfKey >= 0) {
                    android.util.ArraySet<android.os.IBinder> valueAt2 = this.mMediaProjectionTokenMap.valueAt(indexOfKey);
                    valueAt2.remove(iBinder);
                    if (valueAt2.isEmpty()) {
                        this.mMediaProjectionTokenMap.removeAt(indexOfKey);
                    }
                }
            } catch (java.lang.Throwable th) {
                throw th;
            }
        }
    }

    boolean isAllowedMediaProjectionNoOpCheck(int i) {
        boolean z;
        synchronized (this.mMediaProjectionTokenMap) {
            try {
                int indexOfKey = this.mMediaProjectionTokenMap.indexOfKey(i);
                z = indexOfKey >= 0 && !this.mMediaProjectionTokenMap.valueAt(indexOfKey).isEmpty();
            } finally {
            }
        }
        return z;
    }

    public void frozenBinderTransactionDetected(int i, int i2, int i3, int i4) {
        com.android.server.am.ProcessRecord processRecord;
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(i);
        }
        this.mOomAdjuster.mCachedAppOptimizer.binderError(i, processRecord, i2, i3, i4);
    }
}
